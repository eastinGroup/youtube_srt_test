WEBVTT
Kind: captions
Language: zh-Hans

00:00:10.980 --> 00:00:15.600
非常感谢，所以首先感谢您让我在这里，这是一个

00:00:15.600 --> 00:00:20.419
非常荣幸，因为几年前我通常坐在房间的那一边

00:00:20.419 --> 00:00:27.750
我曾经来EE 380观看，基本上就像是计算机英雄

00:00:27.750 --> 00:00:32.700
过来聊天，喜欢说话，就像我不属于这里，我真的不一样，我想也许

00:00:32.700 --> 00:00:38.070
在大约四，五个像几十年的时间里，也许我可能会赚到小

00:00:38.070 --> 00:00:42.690
提到，但非常感谢您让我至少在这里使用场地

00:00:42.690 --> 00:00:47.610
谈谈网络的功能，因为获得它真的很重要

00:00:47.610 --> 00:00:54.380
这项权利比起其他任何方式，我们对网络的依赖更多

00:00:54.380 --> 00:00:58.860
技术，至少在国际交流方面

00:00:58.860 --> 00:01:05.670
基础设施，至少我们可能遇到过危险

00:01:05.670 --> 00:01:12.689
遇到一些问题，我们应该妥善解决，这样我

00:01:12.689 --> 00:01:17.130
安排这次演讲的目的是，我将给出一个非常全面的

00:01:17.130 --> 00:01:24.600
引起问题的概述或ipfs的问题

00:01:24.600 --> 00:01:29.880
尝试解决，然后我将详细讨论该协议

00:01:29.880 --> 00:01:34.859
关于IP FS的一般知识，然后我将通过meta讨论该项目

00:01:34.859 --> 00:01:41.009
您如何构建开放源协议以尝试和修补的观点

00:01:41.009 --> 00:01:49.429
我们拥有的生活系统是互联网，最后也是

00:01:49.429 --> 00:01:53.310
因此，本演示文稿带有一堆幻灯片，但最后我会去

00:01:53.310 --> 00:01:57.479
通过一系列原则，例如在学习过程中获得的经验教训

00:01:57.479 --> 00:02:05.039
构建系统并让其围绕协议如何进行讨论

00:02:05.039 --> 00:02:10.890
发展也许应该发生，其中一些关键部分

00:02:10.890 --> 00:02:13.830
建立协议以确保

00:02:13.830 --> 00:02:18.720
事情被采纳了，所以转换成本是其中之一，还有很多其他因素

00:02:18.720 --> 00:02:23.069
我们不得不努力思考如何仔细考虑以确保

00:02:23.069 --> 00:02:26.880
我们所做的实际上是在使用，而不是您知道，成为了我们的一部分

00:02:26.880 --> 00:02:34.170
一堆酷炫的惊人技术，它绝对不会消失，是的，

00:02:34.170 --> 00:02:37.470
整个过程，最后我会提出一些问题，

00:02:37.470 --> 00:02:43.770
真的可以深入到人们想谈论的所有方面，因此ipfs

00:02:43.770 --> 00:02:47.850
这个谈话被称为您知道分布式永久网络或我如何

00:02:47.850 --> 00:02:53.130
学会了停止担心并喜欢默克尔网络，因为当您

00:02:53.130 --> 00:02:56.700
考虑一下默克尔链接，我将描述它们如何工作

00:02:56.700 --> 00:03:00.630
解决几乎所有问题，但不完全是，

00:03:00.630 --> 00:03:05.790
我只是希望从一开始就将重要属性放到网络上

00:03:05.790 --> 00:03:12.060
而且我觉得很有趣，因为时机已经到了，他们本来可以放的

00:03:12.060 --> 00:03:17.510
从很快到从一开始的武器，它们就不是，如果仅仅是

00:03:17.510 --> 00:03:21.560
发生了这样的事情，今天的世界将大不相同

00:03:21.560 --> 00:03:26.100
因此ipfs我们喜欢将其称为分布式网络或永久性网络，或者

00:03:26.100 --> 00:03:30.600
为了纪念拉尔夫·默克尔（Ralph Merkel）提出了默克尔链接，这是默克尔网上的

00:03:30.600 --> 00:03:35.220
确实是一种协议，用于升级网络的工作方式，目的是制造某些东西

00:03:35.220 --> 00:03:39.959
这不会改变界面，这意味着如果您执行任何操作，

00:03:39.959 --> 00:03:45.239
会导致人们不得不变异以改变他们对自己的想法

00:03:45.239 --> 00:03:49.340
应用程序系统，它永远不会被部署，因为人们不会

00:03:49.340 --> 00:03:53.610
在我们讨论时切换到它，以便我们匹配人们的界面

00:03:53.610 --> 00:03:58.709
已经期望会有一些您可以使用更高级的东西来做的事情

00:03:58.709 --> 00:04:03.090
功能，但目标是吸引Web开发人员和Web应用程序创建者

00:04:03.090 --> 00:04:07.110
能够在IP FS的基础上分层您正在构建的任何内容

00:04:07.110 --> 00:04:13.110
就像没有人知道有一个转机一样，我们赢了，因为

00:04:13.110 --> 00:04:17.190
互联网应该以这种方式升级，使最终用户永远不必

00:04:17.190 --> 00:04:21.060
考虑更改程序或必须安装任何其他程序，

00:04:21.060 --> 00:04:28.800
变得更好，我PFS代表星际文件系统，这是一个

00:04:28.800 --> 00:04:33.960
作为向JCR Licklider致敬的特定选择

00:04:33.960 --> 00:04:39.060
ARPANET还是他对ARPANET的想法，最终变成了

00:04:39.060 --> 00:04:45.810
称它为星际网络，这只是设定了雄心

00:04:45.810 --> 00:04:49.560
就像我们在谈论的网络一样，

00:04:49.560 --> 00:04:53.820
应该以星际规模运行，这就是让我们采取所有措施的想法

00:04:53.820 --> 00:04:59.640
这些小块的所有这些用例特定的网络并绑定它们

00:04:59.640 --> 00:05:04.110
与此覆盖网络一起，我们将其称为

00:05:04.110 --> 00:05:07.380
星际网络，现在一切都将能够与之对话

00:05:07.380 --> 00:05:11.700
其他一切，这几乎是真的，我的意思是今天所有的设备

00:05:11.700 --> 00:05:14.940
通过互联网进行连接，并能够从彼此对话

00:05:14.940 --> 00:05:21.390
这些非常简单的设计原则现在考虑文件意味着什么

00:05:21.390 --> 00:05:25.340
这种规模的分布是您要做的第一件事

00:05:25.340 --> 00:05:30.890
行星际带来的是我们现在正在跨行星移动数据

00:05:30.890 --> 00:05:35.820
在考虑延迟时，您遇到了严重的问题，事实证明

00:05:35.820 --> 00:05:39.360
那就是当您考虑搬家时出现的同一种问题

00:05:39.360 --> 00:05:45.990
数据中心向发展中国家等国家或地区的用户提供的数据

00:05:45.990 --> 00:05:49.200
网络缓慢，您最终会遇到不同的恒定因素，但是

00:05:49.200 --> 00:05:52.980
当您在数据中心处理数据时，问题是相同的

00:05:52.980 --> 00:05:57.300
移至网络边缘时，微秒或毫秒为单位

00:05:57.300 --> 00:06:01.980
您正在处理秒和分钟，那是一种区别是

00:06:01.980 --> 00:06:06.660
就像通过您进行通讯一样，您知道地球与地球之间的距离

00:06:06.660 --> 00:06:10.920
与诸如火星的物体进行远距离通信，因此其主张是

00:06:10.920 --> 00:06:15.150
我们应该为该网站建立互联网和文件分发系统

00:06:15.150 --> 00:06:18.240
互联网（即网络）应以这种方式

00:06:18.240 --> 00:06:25.410
当我们考虑像行星际旅行这样的情况时，工作就可以了，那就是

00:06:25.410 --> 00:06:30.810
那是一个名字，ipfs试图将所有这些都封装在一个

00:06:30.810 --> 00:06:34.200
大量的Lickliter，并把它带入人们的脑海，

00:06:34.200 --> 00:06:38.100
当我们说这个东西应该在所有这些东西上都可以正常工作时，

00:06:38.100 --> 00:06:46.710
长距离很酷，所以还好，所以这是保罗·拜伦（Paul Byron）的第一类

00:06:46.710 --> 00:06:51.420
网络，我喜欢使用此图像，因为它显示了如何

00:06:51.420 --> 00:06:56.440
不同之处在于网络的结构可能会产生巨大的影响

00:06:56.440 --> 00:07:02.590
在协议的使用中正确，所以当我们考虑集中化

00:07:02.590 --> 00:07:06.070
架构，改变您很容易，只需去改变一件事情，然后您

00:07:06.070 --> 00:07:10.510
可以非常快速地进行升级，但是它可以将电源集中在一处，因此

00:07:10.510 --> 00:07:15.040
当我们

00:07:15.040 --> 00:07:20.070
谈论分散网络，这些我们现在已经分到了

00:07:20.070 --> 00:07:25.210
中心节点的职责，我们可能会拥有一个网络

00:07:25.210 --> 00:07:29.830
更有弹性，也许可以处理一些失败，但是仍然可以

00:07:29.830 --> 00:07:34.600
如果没有的话，您将无法获得完全相同的弹性水平

00:07:34.600 --> 00:07:38.200
一切都使用相同的协议，因此在分布式情况下，

00:07:38.200 --> 00:07:41.500
当所有事物都可以与其他事物对话时，一切都是点对点的

00:07:41.500 --> 00:07:46.840
当每个节点都运行完全相同的代码或至少能够运行

00:07:46.840 --> 00:07:50.110
讲相同的协议，现在您正在谈论一种非常有弹性的协议

00:07:50.110 --> 00:07:54.750
可以切成任何形状的布料，它仍然可以工作

00:07:54.750 --> 00:08:01.330
在大多数情况下，网络是从分布式世界开始的，您知道原始的

00:08:01.330 --> 00:08:05.080
想法是您将拥有自己的HTTP服务器和HTTP客户端，

00:08:05.080 --> 00:08:09.760
您既可以提供文件，也可以浏览网络，但是今天不是

00:08:09.760 --> 00:08:14.650
完全集中的情况下，您有与服务器通信的浏览器

00:08:14.650 --> 00:08:19.510
并且您可能以这种方式创建内容，但您所有的互动或大部分

00:08:19.510 --> 00:08:24.310
互动是通过这个中心中心点进行的，这是

00:08:24.310 --> 00:08:27.760
分布在不同组织中，或者更确切地说，分布在不同组织中

00:08:27.760 --> 00:08:31.960
或其他网站，但大多数情况下是您处理一种

00:08:31.960 --> 00:08:38.740
系统是完全集中的，这是一个问题，为什么这很重要

00:08:38.740 --> 00:08:44.530
就像我们为什么要尝试使网络在末尾更加分散

00:08:44.530 --> 00:08:48.070
今天的互联网有点像我们拥有的这种神经系统

00:08:48.070 --> 00:08:52.300
是的，因此人类发明了这项技术，我们现在已经变得如此

00:08:52.300 --> 00:08:55.180
依赖它并将其用于所有事情，直到真正

00:08:55.180 --> 00:09:00.880
是我们一起进化的神经系统，实际上网络

00:09:00.880 --> 00:09:04.150
在一秒钟之内进入互联网令人惊讶的是，这只是一个

00:09:04.150 --> 00:09:06.790
协议集合的权利，这只是一堆真正的

00:09:06.790 --> 00:09:11.440
实施和部署了好主意，使整个事情得以大规模开展，

00:09:11.440 --> 00:09:15.970
从一开始，这实际上是一项非凡的工程和设计壮举

00:09:15.970 --> 00:09:20.050
可以构建一种能够适应当今年轻人的建筑，

00:09:20.050 --> 00:09:24.430
我一直很喜欢这样的事实：我们当然还需要运行IP

00:09:24.430 --> 00:09:27.460
我很想切换v6，但实际上我喜欢ipv4拥有的事实

00:09:27.460 --> 00:09:32.410
让我们来到这里，今天仍在使用，这真是太神奇了，您不能说

00:09:32.410 --> 00:09:37.510
大多数其他协议也是如此，同样，很棒的主意是

00:09:37.510 --> 00:09:42.820
产生了这种稀薄的废物，试图并允许较低的层次

00:09:42.820 --> 00:09:46.030
网络发展，也允许网络的上层发展

00:09:46.030 --> 00:09:50.620
分开，并且只有两者之间有一个很小的协议可以调解

00:09:50.620 --> 00:09:55.660
整个网络如何实现Graham的基础知识，但是关于

00:09:55.660 --> 00:09:59.830
互联网就是您可以更改它，并且可以通过以下方法使它变得更好

00:09:59.830 --> 00:10:03.190
想出好主意，您会接受这些主意，如果这些主意足够好，那么您

00:10:03.190 --> 00:10:07.510
然后编写规范，然后将这些规范转化为代码，然后将其部署到计算机中

00:10:07.510 --> 00:10:12.160
你增强了人类的权利，这是对你日常生活的非常真实的思考

00:10:12.160 --> 00:10:18.790
考虑一下您使用了多少可以增强自身功能的应用程序

00:10:18.790 --> 00:10:24.280
通过连接到其他地方的其他软件的软件并考虑

00:10:24.280 --> 00:10:27.580
这些应用程序中有多少是由您认识的人构建的

00:10:27.580 --> 00:10:32.200
有能力构建他们刚刚编写的庞大基础架构

00:10:32.200 --> 00:10:35.140
一些代码并将其部署给您，现在您拥有了，现在您有了

00:10:35.140 --> 00:10:41.710
超级大国这是一种了不起的技术

00:10:41.710 --> 00:10:44.860
一定是这样，它本可以完全由

00:10:44.860 --> 00:10:49.150
出于某种原因，但出于某种原因，或者通过巧妙的设计

00:10:49.150 --> 00:10:54.760
工程方面，我们今天拥有的互联网可以通过出色的方式进行升级

00:10:54.760 --> 00:11:00.430
就在您认识的任何人像精粹大学生那样的地方

00:11:00.430 --> 00:11:04.990
他们的宿舍可以提出最好的主意或一些好主意

00:11:04.990 --> 00:11:10.120
网络并突然建立起巨大的东西，并为

00:11:10.120 --> 00:11:14.200
世界，然后循环看起来像这样，你有一些研究

00:11:14.200 --> 00:11:19.030
然后将其开发为代码，进行部署，然后人们使用它

00:11:19.030 --> 00:11:26.260
就是这个，在这个序列中，有时会发生问题

00:11:26.260 --> 00:11:31.590
很多人，所以会有大量的研究发生，当您考虑

00:11:31.590 --> 00:11:35.500
我什至知道我们基本上要比现在提前十五或二十年

00:11:35.500 --> 00:11:40.990
今天部署和使用的东西对我来说是非常可悲的，因为它

00:11:40.990 --> 00:11:44.290
这表明它确实像是一个懒惰的部署开发

00:11:44.290 --> 00:11:49.840
和懒惰的开发过程，因为我们知道什么都没建是正确的

00:11:49.840 --> 00:11:53.500
已经做到了，并且在很大程度上可以说，这实际上只是旧观念的整合

00:11:53.500 --> 00:11:59.050
它采用了已经存在很长时间的好主意，并尝试

00:11:59.050 --> 00:12:04.330
通过开发确保他们能够升级当前互联网

00:12:04.330 --> 00:12:07.990
接口很有意义，可以将它们部署到整个网络并使其易于使用

00:12:07.990 --> 00:12:15.370
供开发人员，程序员和最终用户使用，为什么网络很重要，所以我们

00:12:15.370 --> 00:12:19.780
知道互联网，就像是一项了不起的技术一样，但是

00:12:19.780 --> 00:12:24.070
网路到底是什么？网路与互联网有何不同

00:12:24.070 --> 00:12:26.800
该应用程序平台使您可以编写这些软件

00:12:26.800 --> 00:12:32.770
并把它们放在这个惊人的相互连接的神经系统上，

00:12:32.770 --> 00:12:36.100
真正为您提供功能的是这些应用程序为您提供的

00:12:36.100 --> 00:12:39.250
超级大国并不一定意味着您可以潜在地进行交流

00:12:39.250 --> 00:12:42.910
写一些位，但最终用户不会告诉您坐下并写一个

00:12:42.910 --> 00:12:46.450
协议并尝试与其他人进行通信最终用户将继续前进

00:12:46.450 --> 00:12:53.020
使用通过网络部署的某些应用程序，然后思考

00:12:53.020 --> 00:12:57.970
在您的日常生活中，您在各个垂直领域所做的事情有多少

00:12:57.970 --> 00:13:02.560
您的生活从学习到与同事沟通再到与他人沟通

00:13:02.560 --> 00:13:06.100
您的亲人维持您的个人关系

00:13:06.100 --> 00:13:10.630
现在一般通过互联网协议完成工作

00:13:10.630 --> 00:13:17.800
网络，所以重点是网络的属性非常广泛

00:13:17.800 --> 00:13:21.970
对您作为人的能力的影响，这意味着

00:13:21.970 --> 00:13:26.170
网络存在一些问题，我们最好予以解决，因为这可能意味着麻烦

00:13:26.170 --> 00:13:30.700
对于人们，瞧，那里有一些

00:13:30.700 --> 00:13:35.410
我前面讨论过的网络问题现在已经集中化了，

00:13:35.410 --> 00:13:40.540
那就是你知道问题的根源，但归根结底是某种设计

00:13:40.540 --> 00:13:44.350
决定主要与位置寻址有关，这做出了很多

00:13:44.350 --> 00:13:46.720
当时的地址寻址只是一个想法

00:13:46.720 --> 00:13:52.240
表示当您在网络上拥有某个资源位置时，可以使用

00:13:52.240 --> 00:13:58.779
包含资源的主机的IP地址，这在当时是很棒的

00:13:58.779 --> 00:14:04.149
最终使网络实际工作起来，出现了许多超文本系统

00:14:04.149 --> 00:14:07.510
在过去的四十年前，实际上是这个想法使它成为现实

00:14:07.510 --> 00:14:13.120
迅速扩展，因此在当时是个好主意，但是位置寻址

00:14:13.120 --> 00:14:17.230
有一个问题是，在一个网络中，许多文件中可能存在相同的文件

00:14:17.230 --> 00:14:21.550
仅放置一个特定主机，或者您知道虚拟主机可能是多个

00:14:21.550 --> 00:14:27.130
假装只有一台特定主机的计算机实际上可以为您提供服务

00:14:27.130 --> 00:14:33.130
文件，因为如果您尝试

00:14:33.130 --> 00:14:36.519
从其他地方得到它你可能不知道这是同一件事，所以你

00:14:36.519 --> 00:14:41.829
特别是必须与该主机交谈以检索数据以进行

00:14:41.829 --> 00:14:46.839
说明这个想象，我们有点像在这个房间里，我要分享一个

00:14:46.839 --> 00:14:51.670
图片到Facebook一个Web应用程序，我给您发送了一个链接，现在所有人

00:14:51.670 --> 00:14:56.560
将不得不去与Facebook交谈以删除图像，所以那是什么时候

00:14:56.560 --> 00:15:00.880
您有点在网络上看我将一些图片上传到Facebook我

00:15:00.880 --> 00:15:07.230
现在给您一个链接30个人去提出请求并拉下图像

00:15:07.230 --> 00:15:12.519
这很慢，并且带宽的巨大浪费，也许网络可能是

00:15:12.519 --> 00:15:15.610
构造一种不同的方式来利用以下事实，即图像可能是

00:15:15.610 --> 00:15:19.449
坐在这台计算机上，您可以获得它，而图像不是

00:15:19.449 --> 00:15:24.540
这些天我们的交易量很大，但是考虑一下视频，如果

00:15:24.540 --> 00:15:29.260
有一段200兆字节的视频，这些天实际上很常见，

00:15:29.260 --> 00:15:32.050
可能会浪费您知道四十八千兆字节的声音

00:15:32.050 --> 00:15:39.190
只是通过这些链接共享一个视频，我们从

00:15:39.190 --> 00:15:41.450
来自江南风格，我认为这是最受欢迎的

00:15:41.450 --> 00:15:49.520
是的，我们正在获取此数据包，不，不，这只是原始数据

00:15:49.520 --> 00:15:52.820
当然，还有其他各种东西，是的，但是

00:15:52.820 --> 00:15:56.750
可以说你可以挤出来，因为这些是我得到的恒定因素

00:15:56.750 --> 00:16:01.580
它更像是在这里处理订单，这只是一种

00:16:01.580 --> 00:16:05.960
说明我们实际上损失了多少带宽，例如江南（Gangnam）

00:16:05.960 --> 00:16:10.250
样式已被视作差不多20亿次以上的乐曲，

00:16:10.250 --> 00:16:13.880
当您仅计算来自Google服务器的数据时，

00:16:13.880 --> 00:16:17.120
仅我们处理的所有链接就接近500 PB的数据

00:16:17.120 --> 00:16:22.490
视频的权利很多，我的意思是，这显然是一个问题，没有

00:16:22.490 --> 00:16:26.150
我们应该通过网络不断移动所有这些数据的原因

00:16:26.150 --> 00:16:29.450
我想知道其中有多少人实际看过同一段视频

00:16:29.450 --> 00:16:33.380
在同一天通过不同的选项卡花费了

00:16:33.380 --> 00:16:36.800
内容再次移动缓存并不完美HTTP缓存有点

00:16:36.800 --> 00:16:39.920
作为解决此问题的一种方法而发明，但实际上并不是最有效的方法

00:16:39.920 --> 00:16:44.090
时间和安全模型的种类大部分时间都无法进行缓存

00:16:44.090 --> 00:16:49.220
正确，因此您实际上不能在两次缓存之间的网络中使用，因为如果

00:16:49.220 --> 00:16:52.160
您需要互联网的隐私和安全性

00:16:52.160 --> 00:16:55.670
这意味着您将不得不再次将相同的问题移到哪里

00:16:55.670 --> 00:17:02.000
数据一直存在问题，所以围绕带宽的另一个问题是

00:17:02.000 --> 00:17:07.250
增长非常快，所以此图显示了平均连接速度

00:17:07.250 --> 00:17:12.980
G7国家，这是2007年至2012年的平均连接速度

00:17:12.980 --> 00:17:20.540
没有像处理能力或存储中的其他内容那样增加

00:17:20.540 --> 00:17:26.630
事实上，当您绘制随时间带宽下降的价格时的价格

00:17:26.630 --> 00:17:33.290
价格下降的速度比库存慢

00:17:33.290 --> 00:17:39.200
感觉上，我们得到的印象是存储容量的容量是

00:17:39.200 --> 00:17:43.370
超过了我们可以在网络中四处移动数据的速度，从而为我们提供了

00:17:43.370 --> 00:17:47.720
印象是网络越来越慢，所以带宽可能越来越大

00:17:47.720 --> 00:17:50.870
更好，我们的速度可能会越来越好，但是因为我们的磁盘

00:17:50.870 --> 00:17:55.220
更快地增加尺寸，我们正在使用越来越大的媒体

00:17:55.220 --> 00:17:59.120
我们觉得网络实际上变慢了，这变得更糟

00:17:59.120 --> 00:18:01.490
当你想到发展中国家和人数时

00:18:01.490 --> 00:18:05.750
一直在线，您现在就像这些网络一样

00:18:05.750 --> 00:18:10.070
互联网的的边缘，在x处具有非常高的延迟x'斜率

00:18:10.070 --> 00:18:13.850
小带宽，然后您会尝试尝试让他们知道的网站

00:18:13.850 --> 00:18:19.309
数十或数十兆字节仅用于加载网页，而它们完全是

00:18:19.309 --> 00:18:22.370
锁定在互联网之外，因此这些令人惊奇的功能

00:18:22.370 --> 00:18:25.640
在讨论所有软件之前，先讨论

00:18:25.640 --> 00:18:33.020
突然部署无法到达网络中的最终用户，这是一个大问题

00:18:33.020 --> 00:18:36.650
当您想到最需要互联网的人时

00:18:36.650 --> 00:18:40.070
我们经过讨论和说说的人，我们一起去创造所有这些伟大的事物

00:18:40.070 --> 00:18:44.419
软件来部署它，并在一定程度上平衡贫富差距

00:18:44.419 --> 00:18:49.429
遍布世界各地，最终被诸如此类的愚蠢问题所束缚

00:18:49.429 --> 00:18:53.179
这样的等待时间和带宽不应妨碍人们

00:18:53.179 --> 00:18:59.690
从访问网络开始，最近有一个巨大的移民

00:18:59.690 --> 00:19:05.480
当前在欧洲巨大的难民危机中发生的危机

00:19:05.480 --> 00:19:09.110
这些营地正在建立，有报道说人们有食物

00:19:09.110 --> 00:19:12.590
衣服等等，但是他们没有的是他们实际上无法拥有的带宽

00:19:12.590 --> 00:19:16.370
与亲人交谈，他们找不到彼此，因为他们没有

00:19:16.370 --> 00:19:20.059
能够互相交流的能力，所以这就是这种

00:19:20.059 --> 00:19:26.630
就像疯狂的情况一样，简单的事情阻止了人们的等待时间

00:19:26.630 --> 00:19:29.750
当然就像计算机网络的祸根，那就是你不能走

00:19:29.750 --> 00:19:34.100
比光速问题的速度快，因此解决方案是尝试并推广

00:19:34.100 --> 00:19:37.669
到处都是内容，所以这里有点像亚马逊数据中心和

00:19:37.669 --> 00:19:40.820
Google数据中心遍布世界各地，以尽力让您满意

00:19:40.820 --> 00:19:44.929
但这只是那些公司，其他人呢？

00:19:44.929 --> 00:19:49.490
网络中的其他每个人都应该具有这样的功能，但是

00:19:49.490 --> 00:19:53.390
互联网的设计结构排除了它，并确保您可以聘用

00:19:53.390 --> 00:19:57.350
他们为它服务，但有可能您可能最终无法使用

00:19:57.350 --> 00:20:03.500
这些图片内部通过这种方式阐明了这些系统

00:20:03.500 --> 00:20:10.280
这里的所有问题还有另一组用例，即网络主要是

00:20:10.280 --> 00:20:14.929
到目前为止，大多数人都忽略了当您处理断开连接时会发生的情况

00:20:14.929 --> 00:20:19.670
或离线操作，在这种情况下，如果我向您发送了Google文档，

00:20:19.670 --> 00:20:23.510
我们开始在同一件事上进行协作，令人惊讶的是，我们

00:20:23.510 --> 00:20:28.280
共享所有这些数据，这是愚蠢的，我们必须将更新通过

00:20:28.280 --> 00:20:31.460
那里的一些服务器的骨干并将它们运回这里

00:20:31.460 --> 00:20:36.620
当我们现在有了非常复杂的算法，您可以知道

00:20:36.620 --> 00:20:41.360
无冲突的解决方案，使我们可以实时进行协作

00:20:41.360 --> 00:20:44.120
我们仍然将所有更新都移到主干上，这很愚蠢

00:20:44.120 --> 00:20:48.500
当您想到网络崩溃时，情况会变得更糟，因此如果我们

00:20:48.500 --> 00:20:53.150
上行链路掉线了，我们失去了一起工作的能力

00:20:53.150 --> 00:20:58.220
完全不让您知道您应该能够继续工作，因为

00:20:58.220 --> 00:21:02.270
我们在同一个房间里，我们在网络的同一部分，我们应该

00:21:02.270 --> 00:21:09.380
继续拥有这项功能，但我们却没有，实际上有很多

00:21:09.380 --> 00:21:15.230
那里重要的基础设施工具或基础设施

00:21:15.230 --> 00:21:19.700
在这种情况下基本上会崩溃的应用程序，或者您必须

00:21:19.700 --> 00:21:23.900
努力工作以确保您作为用户免受此侵害

00:21:23.900 --> 00:21:27.590
问题是可以下载维基百科的某种缓存，但是

00:21:27.590 --> 00:21:29.390
大多数情况下，大多数链接会崩溃

00:21:29.390 --> 00:21:34.340
这是网络可以解决的问题，我们实际上认为这是

00:21:34.340 --> 00:21:38.059
完全无法接受的权利，就像我想生活在一个

00:21:38.059 --> 00:21:42.830
无论我是否处于最佳状态，我使用的应用程序都将继续运行

00:21:42.830 --> 00:21:47.600
我最近在欧洲旅行，我很惊讶

00:21:47.600 --> 00:21:52.970
发现在城市之间的火车中，延迟在移动设备上变得如此糟糕

00:21:52.970 --> 00:21:56.809
以至于我只是被许多网站拒之门外，只是等待时间如此之长

00:21:56.809 --> 00:22:01.100
加密握手的往返时间只会超时，

00:22:01.100 --> 00:22:05.750
突然你不能做任何事情，或者喜欢关闭HTTP，这是

00:22:05.750 --> 00:22:10.490
真的很傻，所以我仍然看到它就像你有这个母爱

00:22:10.490 --> 00:22:14.210
这是控制一切的一种方式，就像您失去访问权限一样

00:22:14.210 --> 00:22:19.010
母权制和一切都瓦解，我们需要作为工程师和

00:22:19.010 --> 00:22:21.680
应用程序设计师和美国建筑商

00:22:21.680 --> 00:22:28.460
摆脱这个巨大的问题，事情就像它，你甚至不必

00:22:28.460 --> 00:22:32.150
考虑完全断开连接，有时低带宽会阻止您

00:22:32.150 --> 00:22:36.950
无线网络之间的干扰使用拥塞旅行中断

00:22:36.950 --> 00:22:43.580
知道那是数据中心着火或火灾后的照片

00:22:43.580 --> 00:22:49.940
确实发生了，并且网络应该能够拥有使其成为基础的基础设施

00:22:49.940 --> 00:22:55.040
对于一般的Web开发人员而言，易于构建工具来构建应用程序

00:22:55.040 --> 00:23:00.230
今天基本上只有大公司才有弹性的方式

00:23:00.230 --> 00:23:05.420
能够为此建立抵御能力，那么还有其他种类的

00:23:05.420 --> 00:23:10.370
诸如您周围的人为问题之类的问题都知道突袭抑制埃及

00:23:10.370 --> 00:23:13.880
一天早晨，政府封锁了通往教堂的通道。

00:23:13.880 --> 00:23:18.950
互联网，现在他们如何组织，他们无法互相联系

00:23:18.950 --> 00:23:22.790
他们所有的通讯基础设施都消失了，

00:23:22.790 --> 00:23:26.870
当然，这是一个审查制度，依此类推，等等，这样的东西真的

00:23:26.870 --> 00:23:30.920
真的很重要，当您考虑使用消息传递工具时，实际上并没有

00:23:30.920 --> 00:23:37.700
这些在我们已经知道的断开网络中不起作用的原因

00:23:37.700 --> 00:23:42.950
从技术的角度来看，我们要做的一切都是为了使这些真正

00:23:42.950 --> 00:23:49.790
关键应用程序可以在断开连接或脱机情况下工作

00:23:49.790 --> 00:23:53.480
这些是人类的问题自然灾害怎么办对，这是一个很大的问题

00:23:53.480 --> 00:23:58.640
好吧，所以如果你不在乎你知道可能发生的事情，也许我可以

00:23:58.640 --> 00:24:01.550
通过指出网络正在被踢出去说服您

00:24:01.550 --> 00:24:07.130
无处不在的计算，所以我们喜欢我们现在正在使用的所有这些设备

00:24:07.130 --> 00:24:12.590
您知道平板电脑，手机和手机手表，很快我们就会拥有

00:24:12.590 --> 00:24:15.710
像耳环和手镯等等，它们都已连接到互联网

00:24:15.710 --> 00:24:21.500
除了常规的台式机或笔记本电脑，它们基本上都没有使用

00:24:21.500 --> 00:24:26.620
网络上，我们在移动设备上看到的大多数应用程序现在都已完全转移到

00:24:26.620 --> 00:24:32.030
仅将Web用作接收器系统并运行整个应用程序平台

00:24:32.030 --> 00:24:37.190
被锁定和关闭，这基本上是在

00:24:37.190 --> 00:24:41.179
延展性极强的系统，有人可以构建一些代码并

00:24:41.179 --> 00:24:43.789
继续很容易地将其更新为锁定状态

00:24:43.789 --> 00:24:48.049
一个只有少数人决定是否会做某事的平台

00:24:48.049 --> 00:24:52.880
已安装，因此这是从我们原本正确的位置返回的巨大一步

00:24:52.880 --> 00:24:57.710
Web Gate是一个非常漂亮的平台，您可以在其中发布一些HTML

00:24:57.710 --> 00:25:02.419
以及一些JavaScript和CSS，现在您有了一个很棒的新功能，

00:25:02.419 --> 00:25:06.409
您已经向全世界授予了，它被拒之门外，这是

00:25:06.409 --> 00:25:11.299
因为您知道移动浏览器的运行速度很慢

00:25:11.299 --> 00:25:16.070
手表上的浏览器等等，但实际上存在着更深层次的问题

00:25:16.070 --> 00:25:21.049
这是网络模型在断开连接的情况下不起作用的方式

00:25:21.049 --> 00:25:25.639
您是否与一个您无法再与其交谈的网站打交道，所以这表明

00:25:25.639 --> 00:25:30.529
真正的问题是我们不应该在网络上分层

00:25:30.529 --> 00:25:35.630
通过这种简单的文件分发系统进行网络

00:25:35.630 --> 00:25:39.769
通过TCP进行工作，您必须非常努力地将其他任何东西都交给我们

00:25:39.769 --> 00:25:43.519
应该将网络放在可以处理的分发系统上

00:25:43.519 --> 00:25:50.029
首先脱机的分布式案例，这有点像统计数据

00:25:50.029 --> 00:25:55.130
显示移动应用与网络的使用情况等等，这是非常真实的

00:25:55.130 --> 00:26:00.740
真正的事情当然是数据控制，我们拥有所有这些巨大的

00:26:00.740 --> 00:26:04.010
收集所有这些数据的应用程序

00:26:04.010 --> 00:26:09.860
从理论上讲是我们的数据，但实际上他们可以控制它，而您不能

00:26:09.860 --> 00:26:15.380
实际将数据彼此链接，您仅链接到通过以下方式访问数据

00:26:15.380 --> 00:26:20.899
他们的应用程序，因此，如果您在Facebook上发布帖子，那是很重要的一点

00:26:20.899 --> 00:26:24.919
您向全世界或Twitter或其他任何人声明的信息

00:26:24.919 --> 00:26:28.250
您可以提供给人们的链接是专门用于访问该链接的链接

00:26:28.250 --> 00:26:33.230
数据通过他们的网站，因此，如果他们选择审查它，或者他们消失了，或者

00:26:33.230 --> 00:26:37.039
您突然关闭帐户所有这些数据都消失了

00:26:37.039 --> 00:26:41.870
您无法链接到它，这会破坏整个网络的整体观点

00:26:41.870 --> 00:26:46.010
是为了能够构建一些小信息，您可以将其链接到

00:26:46.010 --> 00:26:50.630
彼此不要一直依赖网守

00:26:50.630 --> 00:26:54.070
设计我们如何访问事物的应用程序

00:26:54.070 --> 00:26:59.870
好的安全是另一个问题，这当然是您该如何处理

00:26:59.870 --> 00:27:03.260
事实上，大多数流量显然已经有了TLS和

00:27:03.260 --> 00:27:07.580
等等，但是仍然有人无时无刻不在闯入这些系统，而且您知道偷窃

00:27:07.580 --> 00:27:11.390
数据等等，还有这样的悲剧

00:27:11.390 --> 00:27:15.470
大多数Web开发人员不了解安全性的情况，等等

00:27:15.470 --> 00:27:20.179
工具并不是真的可以帮助他们设计安全的系统，因此人们可以

00:27:20.179 --> 00:27:25.190
到处都是各种各样的错误，我们的数据被盗窃，依此类推

00:27:25.190 --> 00:27:28.309
当您考虑所有

00:27:28.309 --> 00:27:33.350
您存储自己的重要信息，并且您知道

00:27:33.350 --> 00:27:37.130
个体组织公司，无论政府如何考虑

00:27:37.130 --> 00:27:39.830
您在网络上存储的信息以及被盗的难易程度

00:27:39.830 --> 00:27:43.760
腐烂在你脚下变了，你也许有一天会发现你所有的

00:27:43.760 --> 00:27:47.269
交流略有不同，实际上有人可能会潜入您的

00:27:47.269 --> 00:27:53.809
电子邮件服务器并执行此操作，这是一种基本问题

00:27:53.809 --> 00:28:01.340
斯诺登泄漏的图像显示了网络的模型是怎样的

00:28:01.340 --> 00:28:05.690
我们铠装了电线，这是范（Van）的一个很好的描述

00:28:05.690 --> 00:28:10.010
雅各布森（Jacobson）实际上正在从事类似于ipfs的项目，

00:28:10.010 --> 00:28:14.720
真的，我稍后会详细描述，但是他谈到了网络上的情况

00:28:14.720 --> 00:28:19.669
今天我们只是在铠装电线，而不是真正在铠装数据，所以

00:28:19.669 --> 00:28:23.299
这意味着我们一直痴迷于保护

00:28:23.299 --> 00:28:28.220
浏览器和服务器之间的通信，但任何人都可以潜行

00:28:28.220 --> 00:28:32.149
进入您的浏览器或服务器

00:28:32.149 --> 00:28:36.679
或偷走它或任何东西，实际上我们应该保护和装甲

00:28:36.679 --> 00:28:44.269
数据本身，所以我们需要静态的经过身份验证和加密的数据

00:28:44.269 --> 00:28:50.330
希望最后一个问题我还不想让你充满恐惧，因为这

00:28:50.330 --> 00:28:54.649
一个伟大的人，在我们的历史中永存

00:28:54.649 --> 00:28:59.830
看到这些社会把书烧成

00:28:59.830 --> 00:29:04.540
我们看到的最坏的权利就像破坏知识的整个想法

00:29:04.540 --> 00:29:09.040
这就是使我们人类毁灭知识的整个念头的原因是

00:29:09.040 --> 00:29:17.500
只是预示着我们对文明的看法，而今天在网络上，

00:29:17.500 --> 00:29:21.340
一直在烧书，这在大众中根本不会发生，就像我们断开链接一样

00:29:21.340 --> 00:29:26.260
到处有人可能只是在重新设计网站而中断了某些链接

00:29:26.260 --> 00:29:30.940
现在整个事情已经一去不复返了，每一个依赖的应用程序

00:29:30.940 --> 00:29:35.410
该链接现在已断开，因此尽管您当然可以搜索

00:29:35.410 --> 00:29:40.780
再次满足您所构建的所有软件都没有进行这些搜索，因此

00:29:40.780 --> 00:29:46.690
它们现在已经坏掉了，所以理想化的文档网络实际上是

00:29:46.690 --> 00:29:51.370
文档，尤其是网络中特定主机上的计算机上的文档，如果您

00:29:51.370 --> 00:29:55.200
去把那些东西全部拿出来掉下来，就像所有的链接都断了一样

00:29:55.200 --> 00:29:59.530
值得庆幸的是，Internet档案库一直在努力应对

00:29:59.530 --> 00:30:03.550
通过摄取尽可能多的网络来解决这个问题，

00:30:03.550 --> 00:30:07.630
正确备份它，这是一个非常关键的组成部分，但这表明

00:30:07.630 --> 00:30:10.780
也许我们应该重新考虑网络的结构，以便这种

00:30:10.780 --> 00:30:15.760
工作变得更容易，并且网络本身不会自行消失或

00:30:15.760 --> 00:30:22.150
偶然地，瑟夫也一直在谈论这个，是的，很好

00:30:22.150 --> 00:30:26.590
里里斯（Lillis）乐队的人在两周内在这里讲话是的，所以他

00:30:26.590 --> 00:30:29.740
实际上是要谈论一堆相同的问题，所以

00:30:29.740 --> 00:30:34.020
您将从不同的角度看到这一点

00:30:34.020 --> 00:30:37.750
是的，如果您不了解档案和布鲁斯特的作品，请看

00:30:37.750 --> 00:30:42.340
对于他们今天的网络如何有趣至关重要

00:30:42.340 --> 00:30:47.440
故事实际上是我们作为ipfs灵感的系统之一

00:30:47.440 --> 00:30:50.500
它的源代码是通过Wayback机器发现的，就像我实际上无法

00:30:50.500 --> 00:30:54.970
在其他任何地方找到它，所以就在那里，就像这样，这很重要

00:30:54.970 --> 00:30:59.890
Vint Cerf的东西也描述了它有一个数字牛皮纸的问题，例如

00:30:59.890 --> 00:31:05.340
当我们失去理解所存储数据的能力时会发生什么，因此我们

00:31:05.340 --> 00:31:12.010
忘记我们丢失的程序，或者我们丢失一些知道如何阅读某些程序的程序

00:31:12.010 --> 00:31:14.420
格式，现在有一堆数据，我们无法

00:31:14.420 --> 00:31:18.850
破译还是要破译很多工作，所以我们应该考虑

00:31:18.850 --> 00:31:25.160
以可以使整个事情复苏的方式构造应用程序

00:31:25.160 --> 00:31:29.120
就像我们应该能够模拟我们曾经制造过的每台机器

00:31:29.120 --> 00:31:33.500
虚拟化整个事物，并能够确保我们备份所有事物

00:31:33.500 --> 00:31:36.740
在世界上多个不同地方的东西，以防止我猜

00:31:36.740 --> 00:31:43.580
一些灾难性的情况好了，就是这样

00:31:43.580 --> 00:31:49.370
问题，虽然很多，但这是该项目的核心，

00:31:49.370 --> 00:31:52.130
重要的是将其设置为我们要尝试的起点

00:31:52.130 --> 00:31:57.200
讨论为什么仅升级基础架构的关键是至关重要的

00:31:57.200 --> 00:32:03.440
专门的网络网络以及为什么有必要进行整个工作

00:32:03.440 --> 00:32:09.530
设计一个新的协议，考虑将其开发并部署到

00:32:09.530 --> 00:32:14.630
升级网络不是一件容易的事，所以我们为什么要花时间

00:32:14.630 --> 00:32:18.650
由于存在这些非常重要的问题，因此我们正在尝试制作网络

00:32:18.650 --> 00:32:23.660
离线分布的工作是永久的，更安全的，内容更智能地移动

00:32:23.660 --> 00:32:28.520
实际上，最令人惊讶的是最重要的是使其速度更快，因为如果

00:32:28.520 --> 00:32:32.720
您不会使事情变得更快没有人会使用它技术被采用

00:32:32.720 --> 00:32:37.400
因为您做了一些性能上的改进，这就是为什么要做出一些改进

00:32:37.400 --> 00:32:40.820
大公司底线的重要变化，他们说很棒

00:32:40.820 --> 00:32:46.280
这是更快的，让我们使用它，这样，如果我们不专注于它并使其成为现实

00:32:46.280 --> 00:32:52.520
真的很好，整个改变不会很有趣地发生

00:32:52.520 --> 00:32:56.300
开始是因为我想无论如何都要加快速度，所以开始是很重要的

00:32:56.300 --> 00:33:04.130
没关系，所以就像HTTP ipfs一样，我们称之为超媒体传输

00:33:04.130 --> 00:33:09.560
协议，它只是程序中的一种算法，它使用

00:33:09.560 --> 00:33:15.290
链接就是这样，但这是一件很酷的事情，

00:33:15.290 --> 00:33:18.980
这是一堆真正的好主意的综合

00:33:18.980 --> 00:33:22.550
由于网络出现了，这只是一个很小的选择，实际上有很多

00:33:22.550 --> 00:33:26.899
我们在此过程中获得的其他一些好主意，但是这些

00:33:26.899 --> 00:33:31.549
也许是最重要的，而这种直接翻译为

00:33:31.549 --> 00:33:36.739
我们使用的协议栈，因此现在我们进入其中的细节

00:33:36.739 --> 00:33:42.889
确切的假设是协议栈试图重新建立

00:33:42.889 --> 00:33:47.389
整个网络和当今的应用程序堆栈，并将其移动到更智能的环境

00:33:47.389 --> 00:33:51.320
传输协议，我们需要某种命名方法，需要一种表示方法

00:33:51.320 --> 00:33:54.979
首先需要离线和分布式的数据，我们需要一种移动方式

00:33:54.979 --> 00:34:03.169
高效，智能地处理数据，我们需要一种查找数据的方法，我们

00:34:03.169 --> 00:34:07.219
ipfs的核心就是我们所说的默克尔dag，或者有点像

00:34:07.219 --> 00:34:10.760
默克尔树让我们再抓住一点，但这确实是中心点

00:34:10.760 --> 00:34:18.200
在整个工作中，它是一个数据结构，它从根本上改变了网络

00:34:18.200 --> 00:34:23.450
总是可变的链接，以区分可变和

00:34:23.450 --> 00:34:27.950
不可变的链接，如果您能够理解链接何时不可变

00:34:27.950 --> 00:34:31.429
表示您所指向的内容没有，也永远不会

00:34:31.429 --> 00:34:36.260
更改，那么您更有可能路由

00:34:36.260 --> 00:34:40.549
内容可以快速使缓存工作，依此类推

00:34:40.549 --> 00:34:46.279
实际的实现是在许多不同的地方进行了很多次

00:34:46.279 --> 00:34:51.109
我将描述一些采用默克尔链接的系统

00:34:51.109 --> 00:34:56.270
片刻之后，这就是ipfs的核心，我们将其命名为

00:34:56.270 --> 00:35:00.039
根据大卫·马塞里亚（David Masseria）的工作，我将在稍后描述其工作原理，以及

00:35:00.039 --> 00:35:05.390
在这个基础上，我们从所有的点对点协议中学到了很多东西

00:35:05.390 --> 00:35:10.400
尝试建立一种非常复杂的方法来有效地移动内容

00:35:10.400 --> 00:35:16.700
尽可能地做到这一点，但这是可以接受用户政策的

00:35:16.700 --> 00:35:22.670
用户在什么地方想要什么功能的意思有时

00:35:22.670 --> 00:35:27.200
您想让事情发展得很快，有时又想获得隐私，从根本上讲，这些

00:35:27.200 --> 00:35:31.010
两者相互矛盾，因为您在Internet上获得隐私的方式

00:35:31.010 --> 00:35:34.339
协议是通过做大量的浪费的工作，所以相信路由

00:35:34.339 --> 00:35:38.059
协议遗忘了Ram，它们都通过做大量昂贵的事情来工作

00:35:38.059 --> 00:35:41.150
昂贵的计算和昂贵的数据移动

00:35:41.150 --> 00:35:47.569
因此，您需要能够拨打运输工具以了解您的时间

00:35:47.569 --> 00:35:51.079
想要如何移动事物，这与

00:35:51.079 --> 00:35:58.220
Tor项目，该项目将在HTTP下进行变基或插入tor进行移动

00:35:58.220 --> 00:36:02.750
事实证明，今天通过隐私保护协议在网站上进行搜索

00:36:02.750 --> 00:36:06.740
ipfs层在tor上非常干净，因此您可以直接在tor上使用它，但是

00:36:06.740 --> 00:36:09.710
在这种情况下，必须仔细进行以确保您不会泄漏

00:36:09.710 --> 00:36:14.869
重要信息，例如IP地址等等，这就是网络

00:36:14.869 --> 00:36:20.990
正如我们所看到的，这就是IP之上，等等。

00:36:20.990 --> 00:36:26.779
我们必须处理查找和路由内容的传输，因此我们可以

00:36:26.779 --> 00:36:30.319
使用HDS和一堆其他协议，我们必须交换

00:36:30.319 --> 00:36:34.279
内容，但核心是默克尔DAC，这意味着我们必须改变

00:36:34.279 --> 00:36:39.799
我们考虑数据，并且必须考虑使之成为可能

00:36:39.799 --> 00:36:45.769
不变的链接，我们可以分层命名等等，但实际上，

00:36:45.769 --> 00:36:48.710
已经制定了很多协议，您可以使用整个协议是

00:36:48.710 --> 00:36:52.039
设计，因此您不必使用任何您不想使用的

00:36:52.039 --> 00:36:57.140
唯一关键的部分是心脏，就像核心一样，是对心脏的描述

00:36:57.140 --> 00:37:01.369
允许默克尔链接的数据结构实际上是唯一的部分。

00:37:01.369 --> 00:37:04.609
当您整体考虑tcp / ip时，您真的需要它就像IP

00:37:04.609 --> 00:37:09.500
协议是同时开发的，但核心贡献是IP

00:37:09.500 --> 00:37:15.460
网络，同样在这里，我们有一堆协议和一大堆

00:37:15.460 --> 00:37:21.200
但它们都在接口方面进行了清理，因此您可以对它们进行真正的分层

00:37:21.200 --> 00:37:28.000
最重要的是，就像我描述的那样，它应该覆盖在tor nigp之上

00:37:28.000 --> 00:37:35.119
干净地，我们将其视为一种新的新的薄层

00:37:35.119 --> 00:37:38.690
互联网或网络，因此，如果IP是互联网的瘦腰

00:37:38.690 --> 00:37:44.690
互联网上，我们将默克尔的dag视为分布式协议的稀薄浪费，

00:37:44.690 --> 00:37:47.630
原来，那已经是瘦腰了

00:37:47.630 --> 00:37:51.500
每个人都以不同的方式用不同的格式来做，我们只是

00:37:51.500 --> 00:37:53.990
将它们全部集成到一个系统中，以便

00:37:53.990 --> 00:38:00.170
您可以在它们之间建立链接，因此我们将其视为数据互联网或

00:38:00.170 --> 00:38:06.290
您应该能够在其中构建应用程序的数据结构将它们链接到

00:38:06.290 --> 00:38:10.040
这种可变或不可变的链接，然后让它们覆盖任何内容

00:38:10.040 --> 00:38:15.500
对于用户或开发人员等而言，传输是有意义的，并且具有

00:38:15.500 --> 00:38:19.340
这是一个单独的术语讨论，而不是今天的讨论，就像

00:38:19.340 --> 00:38:24.880
您只通过HTTP执行HTTP多数情况下仅通过TCP执行HTTP

00:38:24.880 --> 00:38:29.950
好的默克尔树，它们如何工作，为什么这个数据结构如此重要

00:38:29.950 --> 00:38:35.320
基本思想是，如果您有一些数据链接到另一个

00:38:35.320 --> 00:38:42.140
在HTTP区域中，您只会看到您拥有一个可识别以下内容的IP地址

00:38:42.140 --> 00:38:46.970
某些位置，但默克尔链接的想法是将事物链接在一起

00:38:46.970 --> 00:38:51.940
带有加密哈希，因此您可以使用内容本身来确定链接

00:38:51.940 --> 00:38:59.690
当您这样做时，加密散列具有加密的全部要点

00:38:59.690 --> 00:39:04.820
加密哈希的含义是您无法提出其他一些原像

00:39:04.820 --> 00:39:07.940
给你相同的哈希值，或者如果可以的话

00:39:07.940 --> 00:39:12.590
按需预映像，然后整个加密哈希被破坏，您

00:39:12.590 --> 00:39:16.400
应该能够攻击网络中的各种系统，所以

00:39:16.400 --> 00:39:21.080
现在对于想要打破sha-256的人来说，这是一笔巨大的悬赏

00:39:21.080 --> 00:39:26.030
拿走你所知道的五六十亿美元

00:39:26.030 --> 00:39:29.960
比特币网络的价值完全取决于您是否可以打破

00:39:29.960 --> 00:39:34.460
喊256，所以如果可以的话，继续前进，然后我们可以切成三段，然后

00:39:34.460 --> 00:39:39.170
是的，随着时间的流逝，我们必须进行升级，我们必须操作哈希函数，而这

00:39:39.170 --> 00:39:43.640
是我们仍在努力的重要细节，但关键是让我们

00:39:43.640 --> 00:39:47.810
使用加密哈希处理内容，这就是给您的

00:39:47.810 --> 00:39:51.890
免疫能力，因为如果您进行任何更改，密码哈希值都会发生变化

00:39:51.890 --> 00:39:58.160
现在链接有所不同，所以让我们上网并添加merkel链接到

00:39:58.160 --> 00:40:02.869
他们就是默克尔树，就像第一种默克尔冰一样

00:40:02.869 --> 00:40:07.000
数据结构，这就是默克尔链接的概念出炉的地方

00:40:07.000 --> 00:40:12.400
获取使用它们的原因，这就是为什么它在门内也能正常工作的原因

00:40:12.400 --> 00:40:18.099
版本控制系统是默克尔链接的比特币使用它，这就是整个

00:40:18.099 --> 00:40:22.630
区块链运作的全部是默克尔链接，并且有一个整体

00:40:22.630 --> 00:40:25.869
一堆协议是对的，但关键是它们都具有这些不同

00:40:25.869 --> 00:40:30.099
默克尔链接了如果我们构建一个东西，而您拥有比特币，该怎么办？

00:40:30.099 --> 00:40:34.930
巨大的默克尔大树，无论谁说钱不长在树上

00:40:34.930 --> 00:40:40.990
正确，所以让我们采用Lisicki理想化的网站并添加一些工作链接

00:40:40.990 --> 00:40:46.359
这就是IP FS，因此您可以将其视为Merkle的一片巨大森林

00:40:46.359 --> 00:40:51.670
一棵树可以指向任何其他树的树，您可以通过

00:40:51.670 --> 00:40:55.660
有关如何进行链接以及针对那些特定系统的通用格式

00:40:55.660 --> 00:41:00.160
这是pre ipfs，我们将为一些重要的事情做一些尝试，例如

00:41:00.160 --> 00:41:04.089
使它们在本地工作，我们将进行一些映射以解决

00:41:04.089 --> 00:41:08.829
像git和Bitcoin这样的东西，所以我们可以导入所有数据，但是对于

00:41:08.829 --> 00:41:12.280
往前走，最好只使用这种格式，所以

00:41:12.280 --> 00:41:15.670
一切都可以互操作，这就像是整个核心

00:41:15.670 --> 00:41:20.049
IP FS大约是这里，就像我们看到的那样

00:41:20.049 --> 00:41:23.859
多个区块链在这里有多少人被拨入

00:41:23.859 --> 00:41:27.220
比特币和区块链世​​界，但是正在涌现出这些巨大的默克尔树

00:41:27.220 --> 00:41:31.329
现在正在运行金融系统和智能合约系统，例如

00:41:31.329 --> 00:41:36.940
在互联网上执行的合法伪合法代码本身就是

00:41:36.940 --> 00:41:41.430
正在调解财产的转移，这一切都取决于默克尔的联系

00:41:41.430 --> 00:41:45.790
因此，以太坊是新兴的重要区块链之一

00:41:45.790 --> 00:41:50.470
专注于智能合约的一种将使用IP

00:41:50.470 --> 00:41:57.010
 FS已经如此，这很令人兴奋，并解释了为什么此默克尔链接如此之所以如此

00:41:57.010 --> 00:42:02.980
有价值的是考虑一下CVS或sv n的过渡，如果

00:42:02.980 --> 00:42:07.030
您还记得过去人们不得不使用CVS的美好时光，

00:42:07.030 --> 00:42:11.500
具有所有数据或口述版本历史记录的集中式服务器

00:42:11.500 --> 00:42:16.329
很棒的代码，您和您就有了一个系统，如果您断开连接

00:42:16.329 --> 00:42:19.270
在中央服务器上，您无法提交任何代码，因此您无法真正执行

00:42:19.270 --> 00:42:22.870
运行良好，您也处于脱机状态，服务器又是什么

00:42:22.870 --> 00:42:27.460
崩溃了，你说不出来，没人能做任何事情，所以快来吧

00:42:27.460 --> 00:42:31.860
进来，说好吧，让我们完全不要这样做，这真的很愚蠢，如果我们

00:42:31.860 --> 00:42:37.390
将整个版本控制系统放在每个节点中，您将拥有一个

00:42:37.390 --> 00:42:41.860
为每个人都独立工作的系统脱机

00:42:41.860 --> 00:42:46.990
添加不可变对象，然后随着时间的推移将其同步，这是一个

00:42:46.990 --> 00:42:50.710
如果您与其他人断开连接，这将是一个非常有价值的想法

00:42:50.710 --> 00:42:53.350
网络，您仍然可以工作和操作，仍然可以与每个人进行通信

00:42:53.350 --> 00:42:56.500
其他（如果集中式服务器崩溃）

00:42:56.500 --> 00:43:00.430
没关系，每个人都仍然可以工作，而这在ipfs中是一样的

00:43:00.430 --> 00:43:04.810
可以，但是它可以遍及整个网络，因此整个想法要少得多

00:43:04.810 --> 00:43:11.320
让我们以这种分布式的离线优先数据结构为基础，并使用它来

00:43:11.320 --> 00:43:16.300
整个网络，这就是给我们分布式网络的原因，这就是我们

00:43:16.300 --> 00:43:19.540
能够使彼此链接的网站和应用程序正常工作

00:43:19.540 --> 00:43:24.730
已断开连接但可以脱机工作并且没有原始服务器，因此从某种意义上说

00:43:24.730 --> 00:43:28.630
您可以根据自己的想法制作网站，或者如果您将网站放在ipfs上，则可能需要

00:43:28.630 --> 00:43:35.620
服务器具有将其作为种子的数据或至少一个节点，但不是

00:43:35.620 --> 00:43:41.710
原始服务器任何投射数据或分布式数据的服务器都可以这样做，并且

00:43:41.710 --> 00:43:46.450
网站在执行的任何地方都可以运行，因此，如果您在本地运行网站

00:43:46.450 --> 00:43:50.140
整个网络的其余部分可能会消失，数据可能会从中删除

00:43:50.140 --> 00:43:53.740
每台其他计算机，您仍然拥有代码，仍然拥有数据

00:43:53.740 --> 00:43:59.650
仍在运行，这是模型的过渡，这就是我喜欢所说的

00:43:59.650 --> 00:44:04.540
超高速，因为您有点像击败光速一样

00:44:04.540 --> 00:44:08.860
你要比光速快，因为

00:44:08.860 --> 00:44:12.910
有时可以抢先移动内容或知道内容没有

00:44:12.910 --> 00:44:16.990
完全改变了，因此您无需以任何方式进行连接

00:44:16.990 --> 00:44:23.320
您可以推理自己拥有的内容，而不必浪费时间或依靠

00:44:23.320 --> 00:44:28.300
在可能关闭的链接上，所以我们称其为默克尔达格（Merkel dag），这不是一个好名字

00:44:28.300 --> 00:44:32.370
很难说我们可以重命名此默克尔网络或类似名称的网站

00:44:32.370 --> 00:44:34.690
但想法是你有这个巨大的图

00:44:34.690 --> 00:44:38.619
一切都是这个有向无环图，其中内容彼此指向

00:44:38.619 --> 00:44:43.240
通过这些merkel链接，您可以代表Unix文件和目录

00:44:43.240 --> 00:44:48.280
当然，您可以以此为例，进行比特币和

00:44:48.280 --> 00:44:52.390
区块链等等，甚至可以进行任意键值存储，

00:44:52.390 --> 00:44:57.580
甚至有些在IP FS之上构建续集数据库的人，所以您

00:44:57.580 --> 00:45:02.500
可能在merkel标签的顶部具有完整的续集语义，这是一种

00:45:02.500 --> 00:45:08.830
很酷的权利，那么您如何将其表示为

00:45:08.830 --> 00:45:13.000
诊断大文件将被拆分为多个节点，因此您可以执行

00:45:13.000 --> 00:45:16.600
正确地分块和复制，因此，如果您有一个大文件或两个不同的文件

00:45:16.600 --> 00:45:20.680
共享大量数据的文件，您只需复制它就可以了

00:45:20.680 --> 00:45:26.010
文件系统已经使用了数十年，让我们将其放在网络本身上

00:45:26.010 --> 00:45:31.210
目录被诊断等等，以显示其外观

00:45:31.210 --> 00:45:38.320
在普通网站上，您会将域名映射到某个位置，因此

00:45:38.320 --> 00:45:41.650
再次就像您与特定节点对话，然后将其拉回

00:45:41.650 --> 00:45:46.630
IP第一世界让我们使用哈希并通过哈希解决问题，因此您现在

00:45:46.630 --> 00:45:52.470
具有从名称到内容的映射，您现在可以检索内容

00:45:52.470 --> 00:45:58.930
因此，任何具有内容的节点都可以按照其工作方式为您提供服务，或者

00:45:58.930 --> 00:46:04.030
之所以有格式难以正确设置的原因是

00:46:04.030 --> 00:46:09.609
因为您想保留您想要的网络的两个非常重要的属性

00:46:09.609 --> 00:46:13.750
能够以与UNIX正确显示路径相同的方式来解析路径

00:46:13.750 --> 00:46:19.780
能够在此分布式Web上执行UNIX路径，因此您希望成为

00:46:19.780 --> 00:46:24.160
能够将目录表示为后节点并通过它解析链接

00:46:24.160 --> 00:46:31.180
通过找到沿途的哈希值，这实际上是git所做的，所以

00:46:31.180 --> 00:46:36.160
问题是您现在是否要在其中添加此庞大的不可变日志

00:46:36.160 --> 00:46:39.640
始终满足您的需求，只要您进行任何更改即可创建更多内容

00:46:39.640 --> 00:46:42.550
您仍然需要可变性的内容，所以我们已经

00:46:42.550 --> 00:46:48.270
我们已经摆脱了纯粹的不可变，我们已经摆脱了网络

00:46:48.270 --> 00:46:52.260
对于我们正在改变的完全不变的网络来说是完全可变的

00:46:52.260 --> 00:46:56.010
内容意味着创建新内容，因为更改位会更改

00:46:56.010 --> 00:46:58.620
哈希值，这意味着链接必须更改

00:46:58.620 --> 00:47:03.690
您仍然需要可变性才能制作动态内容，但事实证明

00:47:03.690 --> 00:47:10.110
制定计划9中的人们提出了正确的解决方案

00:47:10.110 --> 00:47:16.650
这是您使用merkel链接，但是在图的顶部有指针，所以

00:47:16.650 --> 00:47:21.300
旧的化石和泄气文件系统以这种方式工作，因此您每次都拥有

00:47:21.300 --> 00:47:26.310
您进行了任何更改，您将只是通过ZFS方式创建更多数据

00:47:26.310 --> 00:47:29.700
以与您不断创建更多数据的方式相同，并且在需要时

00:47:29.700 --> 00:47:33.000
动态内容，您只需将指针移动到最新版本即可

00:47:33.000 --> 00:47:39.000
需要某种方式使这些指针在整个网络上工作并再次获得

00:47:39.000 --> 00:47:42.540
以相同的方式工作，使您拥有不变的对象，并且具有可变的

00:47:42.540 --> 00:47:46.590
您一直指向的分支，所以master分支实际上只是其中的一个文件

00:47:46.590 --> 00:47:52.260
您的存储库中有一个哈希，并且只要您提交，就可以更改它

00:47:52.260 --> 00:47:57.390
指向其他正确的值，这样我们就可以真正实现可变性

00:47:57.390 --> 00:48:02.280
与DNS无关紧要，所以我们要做的就是获取DNS文本记录并放入

00:48:02.280 --> 00:48:05.130
在哈希表中，每当您要更改内容时，都可以对其进行更改，但这就是

00:48:05.130 --> 00:48:09.240
真的很昂贵，就像我们不想跨DNS进行可变性一样

00:48:09.240 --> 00:48:17.190
我们想要亚毫秒级的可变性，这不能单独发挥作用，因此我们

00:48:17.190 --> 00:48:21.450
在两者之间引入了一种新的命名系统，这就是我们所说的IP ns

00:48:21.450 --> 00:48:25.710
所以星际名称系统是基于大卫·梅西耶（David Messier）的

00:48:25.710 --> 00:48:31.620
使用SMS提出的第一个文件系统，到目前为止

00:48:31.620 --> 00:48:36.180
回到我追寻的想法，那就是实际上可能更老的人知道

00:48:36.180 --> 00:48:41.430
但是如果您要指向一些不可变的内容，那么想法很简单

00:48:41.430 --> 00:48:45.840
生成一个公钥/私钥对，然后取公钥的哈希值，然后

00:48:45.840 --> 00:48:49.890
将其作为参考，以便当人们要查找某物时

00:48:49.890 --> 00:48:55.050
它们包括公钥的哈希，这意味着他们可以检索

00:48:55.050 --> 00:48:59.250
公钥，他们可以检查您下一步是否做的是正确的

00:48:59.250 --> 00:49:02.040
创建一个具有您想要的值的指针

00:49:02.040 --> 00:49:06.000
指向，然后用私钥签名，然后记录下来

00:49:06.000 --> 00:49:09.240
可以将其放置在网络中的某个位置，以便人们可以通过DNS进行解析

00:49:09.240 --> 00:49:15.060
但这又很慢，我们想做得更快，这给您一个可变的链接

00:49:15.060 --> 00:49:20.490
只要签署新的指针，您就可以随时更新

00:49:20.490 --> 00:49:22.800
通过网络分发它确实有道理

00:49:22.800 --> 00:49:26.070
这是临床医生不是很好，这是一个非常微妙的想法，具有广泛的意义

00:49:26.070 --> 00:49:30.600
达到含义，我可以再解释一次，有多少人得到了我们

00:49:30.600 --> 00:49:37.920
完全分阶段进行，所以再一次，就像您将内容带走一样

00:49:37.920 --> 00:49:42.390
您创建的指针的哈希值，然后使用私钥对其进行签名，然后将

00:49:42.390 --> 00:49:46.410
那意味着有人可以验证它是由您签名的，

00:49:46.410 --> 00:49:50.190
没有其他人，然后你要做的就是分发一个

00:49:50.190 --> 00:49:54.300
对它的引用具有您的公共密钥的哈希值，因此，如果我收到

00:49:54.300 --> 00:50:01.890
顶部的链接带有蓝色的链接我可以使用蓝色的哈希值，我可以解析我可以找到的

00:50:01.890 --> 00:50:07.410
公钥，并用它检索它，然后我可以找到指针，然后我

00:50:07.410 --> 00:50:11.190
可以验证指针是否确实由您签名，所以我具有完全的可变性

00:50:11.190 --> 00:50:15.270
返回，所以这些是可变的指针，它们位于

00:50:15.270 --> 00:50:22.170
当然没有人想看看散列，所以可以肯定的是，我最近

00:50:22.170 --> 00:50:27.170
指针的副本，而不是结束哦，是的，所以您可以通过多种方式进行操作，因此

00:50:27.170 --> 00:50:30.690
事实证明，您实际上并不想只选择一种方法

00:50:30.690 --> 00:50:34.680
因为有不同的应用程序模型想要支持不同的

00:50:34.680 --> 00:50:38.760
一种更新，所以一种简单的方法是只更新计数器，等等

00:50:38.760 --> 00:50:42.859
您寻找可以看到的任何指针，并获得最高价值

00:50:42.859 --> 00:50:46.320
这是一种微不足道的方法，但是在其他情况下，您可以进行祖传

00:50:46.320 --> 00:50:50.940
链，因此一个指针可以指向最后一个指针，因此您需要扫描一会儿

00:50:50.940 --> 00:50:55.080
取一堆指针，然后选择所有指针的祖先

00:50:55.080 --> 00:51:05.609
是的，是的，所以我们正在构建它，使其完全可以与

00:51:05.609 --> 00:51:10.830
您想要使用的任何PKI，所以我们不强制执行某些PKI，即

00:51:10.830 --> 00:51:13.890
你可以带上自己的钥匙，然后做任何钥匙

00:51:13.890 --> 00:51:18.390
您想使用，ipfs可以与您拥有的任何系统配合使用，这就是

00:51:18.390 --> 00:51:21.420
重要的事情是，因为许多不同的组织信任不同的人

00:51:21.420 --> 00:51:24.840
一种密码基元，您不能告诉所有人，嘿，只用这些

00:51:24.840 --> 00:51:31.110
因为那是行不通的，所以这里的重点是我们有一个整体

00:51:31.110 --> 00:51:35.220
一组格式，可让我们在不同的加密货币之间实现互操作性

00:51:35.220 --> 00:51:40.110
系统，所以这里的哈希值不是sha-256 nacho 3，它们实际上是

00:51:40.110 --> 00:51:44.430
我们称之为多重哈希，它在哈希本身中编码哪个函数是

00:51:44.430 --> 00:51:47.850
用于生成哈希，以便您可以随着时间的推移对其进行升级，并且可以执行

00:51:47.850 --> 00:51:52.460
可以使用键来描述相同的东西，依此类推，等等

00:51:52.460 --> 00:51:57.810
那里的哈希，所以这是更多的一种更多

00:51:57.810 --> 00:52:03.150
深奥的东西，但一个很酷的结果是，您可以拿钥匙

00:52:03.150 --> 00:52:08.610
自身的公钥将它们作为不可变的内容提取回ipfs

00:52:08.610 --> 00:52:13.980
他们，然后链接将整个PKI作为对象，您可以在这里找到，因此

00:52:13.980 --> 00:52:17.850
您可以拥有一个包含公共密钥数据的对象

00:52:17.850 --> 00:52:23.070
以及指向其父键的指针和其中的签名，因此您可以

00:52:23.070 --> 00:52:27.210
只有那个对象，您可以检查密钥，可以获取父对象，然后

00:52:27.210 --> 00:52:30.510
可以验证签名正确无误，并且可以进行爬网就可以了

00:52:30.510 --> 00:52:35.400
整个PKI的方式，因此您可以使用ipfs的不可变部分来

00:52:35.400 --> 00:52:39.900
分发整个PKI，然后从那里进行吊销，但是您

00:52:39.900 --> 00:52:44.640
希望这是另一个整体，就像如何进行撤销和密钥轮换真的

00:52:44.640 --> 00:52:48.900
这件事的重要部分，但是没有人，没人提出

00:52:48.900 --> 00:52:53.280
像一个正确的解决方案，当我使用它时，它在大多数情况下是不同的

00:52:53.280 --> 00:52:57.330
不同的事情，所以我们只是与所有人一起工作，这是我们的原则

00:52:57.330 --> 00:53:03.780
围绕所有这些，您不会找到永远合适的解决方案，因此您

00:53:03.780 --> 00:53:08.760
应该通过介绍使事物能够与不同的人一起工作

00:53:08.760 --> 00:53:14.190
这些小的简单格式可以在其他同类格式上进行多路复用

00:53:14.190 --> 00:53:19.470
我们如何处理多种传输方式，以便ipfs可以正常工作

00:53:19.470 --> 00:53:23.970
可以快速完成工作，可以通过tcp完成工作，可以通过WebRTC完成工作，可以通过任何单个工作完成

00:53:23.970 --> 00:53:29.080
转移您想要的，因为我们与整个事情自我描述

00:53:29.080 --> 00:53:34.910
酷这个可变性问题上的任何其他问题，不，好酷，我是

00:53:34.910 --> 00:53:42.350
会继续前进，因为呃迟到了，所以这整个过程给你的是

00:53:42.350 --> 00:53:49.220
庞大的内容网格与托管它的主机是分开的

00:53:49.220 --> 00:53:54.560
而这个庞大的内容都会与不可变的链接相关联，而您

00:53:54.560 --> 00:53:59.570
可以通过对其进行哈希处理或与经过身份验证的链接进行链接来进行验证，因此关键链接

00:53:59.570 --> 00:54:04.310
您可以通过检查签名来进行验证，因此这意味着发布

00:54:04.310 --> 00:54:09.770
到此网络的原因是，您只需创建内容，然后将其添加并共享哈希即可，或者

00:54:09.770 --> 00:54:16.460
创建内容并对其进行签名，然后您就可以共享密钥，这将为您提供强大的功能

00:54:16.460 --> 00:54:19.760
发布到网络中，而不必自己托管

00:54:19.760 --> 00:54:23.900
并且无需信任托管内容的任何人

00:54:23.900 --> 00:54:28.370
您购买那些难以捉摸的财产，这是我应该

00:54:28.370 --> 00:54:31.670
能够创建内容并将其存储在整个网络上，并且应该

00:54:31.670 --> 00:54:34.730
能够在整个网络上提供服务，您仍然应该能够检查

00:54:34.730 --> 00:54:38.060
确实是我发布了该内容，而您不是

00:54:38.060 --> 00:54:43.850
在道格被中间某人袭击，以此类推，这是

00:54:43.850 --> 00:54:49.550
也许呃叫我着急，所以有这个数据网，所以这个巨大的匹配是

00:54:49.550 --> 00:54:53.720
有点像数据浪潮，就像链接的数据世界和

00:54:53.720 --> 00:54:58.430
语义网络世界想要的是，除了不依赖于链接

00:54:58.430 --> 00:55:03.470
这些可变的引用，并且仅依赖于对所有这些的恒定查询

00:55:03.470 --> 00:55:07.730
在线服务器，您可以打包内容并将其移动到任何地方

00:55:07.730 --> 00:55:12.290
有道理，每个人都可以检查整个内容的完整性

00:55:12.290 --> 00:55:17.750
靠自己，所以您可以对Web应用程序进行建模，这样您就可以

00:55:17.750 --> 00:55:22.040
只需添加它们，就可以将今天的标准网站直接翻译为标准网站

00:55:22.040 --> 00:55:26.240
直接将文件保存到ipfs上，一切正常，这很关键

00:55:26.240 --> 00:55:30.790
与人们今天使用的所有数据库交互的组件

00:55:30.790 --> 00:55:35.570
那些仍然会以相同的方式工作，人们仍然会有一些休息

00:55:35.570 --> 00:55:40.190
api s等等，那些仍将以相同的方式运行，但实际上

00:55:40.190 --> 00:55:41.869
在您开始思考如何输入时说

00:55:41.869 --> 00:55:45.349
做动态内容或如何构建真正没有内容的应用程序

00:55:45.349 --> 00:55:48.799
我们正在谈论的能够创建应用程序的集中式数据库

00:55:48.799 --> 00:55:53.869
客户端将在本地生成数据的地方，例如Twitter客户端

00:55:53.869 --> 00:55:59.180
可以在本地生成数据，我可以创建一组推文，或者

00:55:59.180 --> 00:56:03.440
电子邮件或任何我在本地签名的电子邮件，然后通过网络分发

00:56:03.440 --> 00:56:08.569
人们可以检查确实是我写的人可以移动它

00:56:08.569 --> 00:56:13.099
但是他们想要的周围，如果您在数据本身周围添加加密，那么

00:56:13.099 --> 00:56:16.849
您不必一直担心加密线路，也应该

00:56:16.849 --> 00:56:19.700
加密导线，但重点是您不必担心数据

00:56:19.700 --> 00:56:24.829
必然泄漏，并且数据在其自己的大星号上进行了加密

00:56:24.829 --> 00:56:27.559
在那取决于您如何加密事物，取决于您如何移动事物

00:56:27.559 --> 00:56:31.640
周围的人可能会破坏加密等等，但这是一个非常不同的模型

00:56:31.640 --> 00:56:35.720
对于计算而言，这是一个可以追溯到的分布式概念的模型

00:56:35.720 --> 00:56:40.970
在哪里发布者是谁的网络在哪里托管者是谁，哪里的主机

00:56:40.970 --> 00:56:45.289
它是完全分布式且点对点的，因此我们可以拥有网站

00:56:45.289 --> 00:56:50.420
完全在浏览器上运行并且没有眉头没有服务器的服务器

00:56:50.420 --> 00:56:54.619
当然有必要提供一个非常好的主意，它可以使处理速度更快，但是

00:56:54.619 --> 00:56:58.940
应该只会使事情变得更快，或者可能会进行一些关键的处理，但是您

00:56:58.940 --> 00:57:02.150
不必一直信任您的服务器，始终保持所有数据

00:57:02.150 --> 00:57:05.960
到您再也无法发布自己的能力，并且

00:57:05.960 --> 00:57:10.309
这就是模型的变化，您可以执行此操作，因此此图可能是

00:57:10.309 --> 00:57:12.980
用于任何正确的事情，例如，如果您真的沉没了，就可以开始创建

00:57:12.980 --> 00:57:19.160
例如法律记录和合同，并将所有这些内容链接在一起，并具有

00:57:19.160 --> 00:57:22.400
只是您要检查的该数据网络而不必担心

00:57:22.400 --> 00:57:27.950
文件本身的表示可以

00:57:27.950 --> 00:57:34.309
我在PFS上工作时，我想谈谈项目的进展情况，因为

00:57:34.309 --> 00:57:37.250
有很多主意，我们只是提供了一个概述

00:57:37.250 --> 00:57:43.309
我们确实接触了很多东西，为什么在哪里

00:57:43.309 --> 00:57:47.509
这与其他任何好主意都不同，为什么与

00:57:47.509 --> 00:57:52.369
大量的好主意已经被写下并可能被实施，但是

00:57:52.369 --> 00:57:57.320
你真的不知道已经部署了，所以我们

00:57:57.320 --> 00:58:02.360
设计整个内容以再次与当今的网络交互，我们

00:58:02.360 --> 00:58:06.680
喜欢整个复杂的采用计划，以确保我们能够

00:58:06.680 --> 00:58:12.620
迁移到ipfs，而不必让用户处于Stelling之下，因此

00:58:12.620 --> 00:58:17.480
例如，第一步是运行一些HTTP网关，您可以在其中提供

00:58:17.480 --> 00:58:21.500
人们通过IP FS解析的常规HTTP链接，他们可以拉

00:58:21.500 --> 00:58:25.100
内容，所有这些工作都可以顺畅地进行，当然仍然需要依靠

00:58:25.100 --> 00:58:28.820
在某些网关中，下一步是向他们提供一些JavaScript代码，

00:58:28.820 --> 00:58:33.500
在其浏览器标签中运行该节点的完整实现，因此您现在有了

00:58:33.500 --> 00:58:38.680
浏览器选项卡中的完整IP FS节点能够执行整个协议，并且

00:58:38.680 --> 00:58:43.100
在内容周围移动，但用户无需安装任何其他内容

00:58:43.100 --> 00:58:47.420
如此之快，因此您理想地希望它成为浏览器本身的一部分，并且您可以

00:58:47.420 --> 00:58:52.010
通过浏览器扩展程序执行此操作，也可以通过以下方法执行此操作

00:58:52.010 --> 00:58:55.760
直接在浏览器中实现，而我们实际上正在使用浏览器

00:58:55.760 --> 00:58:59.990
在浏览器中实现ipfs的主要浏览器供应商

00:58:59.990 --> 00:59:03.800
实际上是一种牵引力的表现，就像这样，实际上是浏览器

00:59:03.800 --> 00:59:09.380
供应商要回家了，这真的很酷，让我们实际使用它，最后一个

00:59:09.380 --> 00:59:14.600
案例，这是我们停止它的地方，实际上我们在扩展

00:59:14.600 --> 00:59:20.060
通过网络进入Unix，我们将ipfs视为一种操作系统服务，

00:59:20.060 --> 00:59:23.420
应该作为操作系统本身的一部分运行，如果您注意到该链接，

00:59:23.420 --> 00:59:28.760
我们有他们没有正确的冒号，所以如果您查看HTTP链接

00:59:28.760 --> 00:59:34.760
看起来有点像我们走到哪里的感觉很好，所以HTP链接具有

00:59:34.760 --> 00:59:39.410
这个冒号斜杠是斜杠，而我们只是将琐碎的细节斜杠了，但是在

00:59:39.410 --> 00:59:43.220
现实，这就是您可以将整个事情挂载到UNIX文件中的原因

00:59:43.220 --> 00:59:46.250
系统，现在您可以编写在

00:59:46.250 --> 00:59:50.510
常规的标准流程模型，实际上是网络的一部分，因此您可以发货

00:59:50.510 --> 00:59:54.140
通过这种方式进行编码，您可以通过模型来拥有整个程序包管理器

00:59:54.140 --> 00:59:58.040
这样，您可以对整个文件系统进行建模，从而可以对整个计算机和虚拟机进行建模

00:59:58.040 --> 01:00:03.380
机器只是此图中的实体，因此您可以拥有

01:00:03.380 --> 01:00:08.210
指向虚拟机的名称，您所要做的就是记住您的

01:00:08.210 --> 01:00:13.130
一个名称，然后拉下要模拟的整个虚拟机，然后

01:00:13.130 --> 01:00:16.250
推迟运行crip dataview模拟器，您便拥有了所有个人文件

01:00:16.250 --> 01:00:21.350
在那里，您现在可以进行计算，而所有这些就是在做什么

01:00:21.350 --> 01:00:24.860
只是添加更多不可变的内容，您现在将这些内容重新散布到

01:00:24.860 --> 01:00:30.320
网络，这就是我穿的地方，它从与网络的平价到

01:00:30.320 --> 01:00:34.310
确实提供了许多已知的新功能，

01:00:34.310 --> 01:00:38.270
在分布式系统和文件系统中进行了研究，但还没有真正做到这一点

01:00:38.270 --> 01:00:45.170
整个网络都很酷，所以那里有一堆东西

01:00:45.170 --> 01:00:51.260
确实令人兴奋和有趣，但这是您如何做事的一个例子

01:00:51.260 --> 01:00:57.250
可以去确保这个东西不仅仅是一些随机的想法，而是真的

01:00:57.250 --> 01:01:02.090
整套协议旨在插入所有其他系统

01:01:02.090 --> 01:01:05.150
在那里，所以实际上是大多数人

01:01:05.150 --> 01:01:09.200
工作没有提出来，想法没有进行核心实现

01:01:09.200 --> 01:01:14.330
使整个事物与生态系统的其余部分进行交互，从而使整个事物

01:01:14.330 --> 01:01:18.110
我必须要做的工具是一堆关于

01:01:18.110 --> 01:01:23.030
是否在此处包含冒号，以便冒号HTTP

01:01:23.030 --> 01:01:28.520
冒号斜线就像这样提醒我们，一个微不足道的决定可能

01:01:28.520 --> 01:01:33.680
使网络无法在UNIX上分层，从而造成了裂痕

01:01:33.680 --> 01:01:39.560
在浏览器和网络以及文件系统之间，因此可以通过删除

01:01:39.560 --> 01:01:42.770
冒号，我们可以将网络带回Unix，并使整个系统正常工作

01:01:42.770 --> 01:01:49.370
在一起，这仅仅是我们所拥有的这种原则的一个例子

01:01:49.370 --> 01:01:55.010
在整个项目中，这是为了确保一切顺利整合并选择

01:01:55.010 --> 01:02:00.080
根据会导致采用的零摩擦的因素做出决策，我们

01:02:00.080 --> 01:02:05.150
真的试图去喜欢虐待的零摩擦，我们似乎有

01:02:05.150 --> 01:02:09.290
做得很好，因为现在很多人都在使用IP FS，所以这个项目

01:02:09.290 --> 01:02:14.600
是完全开源的，任何人都可以使用它，我们有两种实现方式

01:02:14.600 --> 01:02:19.100
用JavaScript编写的Go语言中的一种，人们正在积极地运行ipfs，

01:02:19.100 --> 01:02:23.179
在ipfs上运行的网站之间有50到10万个

01:02:23.179 --> 01:02:27.739
可以通过我们的网关通过常规的网络浏览器查看它们，或者

01:02:27.739 --> 01:02:31.939
如果您恰巧是在本地运行它，则可以使用ipfs进行本地查看

01:02:31.939 --> 01:02:37.640
不仅在网络上使用它，还在文件系统上使用它，所以人们正在使用它

01:02:37.640 --> 01:02:43.130
在容器周围移动，因此在应用程序方面需要付出巨大的努力

01:02:43.130 --> 01:02:46.819
带有docker和核心OS等的容器

01:02:46.819 --> 01:02:51.650
非常瘦弱的方式，人们正在快速使用想法在这些大图像中移动

01:02:51.650 --> 01:02:56.299
它们的大小通常在5兆字节到1千兆字节之间，

01:02:56.299 --> 01:03:00.289
使用ipfs在数据中心内移动它们，因为通常

01:03:00.289 --> 01:03:04.939
典型的结构是您在中有一些数据种子

01:03:04.939 --> 01:03:08.539
更广泛的互联网，您可以在其中发布这些图像，然后

01:03:08.539 --> 01:03:11.599
将它们运送到数据中心中的一堆机器上，然后您

01:03:11.599 --> 01:03:15.079
希望它真的很快，您不想支付与之交谈的费用

01:03:15.079 --> 01:03:18.589
您希望将外部的种子最小化以将其转移到数据中的成本

01:03:18.589 --> 01:03:21.859
中心，然后使用您自己的计算机和您自己的本地网络进行分发

01:03:21.859 --> 01:03:25.779
整个过程真的很快，所以这是人们正在做的另一个用例

01:03:25.779 --> 01:03:32.209
我们最近发现，FreeNAS是FreeBSD的发行版，用于

01:03:32.209 --> 01:03:36.799
网络连接的存储设备现在捆绑了ipfs，它们就像一个

01:03:36.799 --> 01:03:40.429
十万到十万之间的庞大安装基础

01:03:40.429 --> 01:03:46.789
我不完全确定有100万用户，但他们不会通过以下方式发送ipfs

01:03:46.789 --> 01:03:50.959
默认，人们将使用它的另一套有趣的用例是

01:03:50.959 --> 01:03:55.849
围绕软件包管理，因此Linux做出了惊人的贡献，或者像

01:03:55.849 --> 01:03:58.969
Glynnis社区做出了惊人的贡献，这是我们发布代码的原因

01:03:58.969 --> 01:04:03.859
通过精心设计的软件包的这个非常好的清理生态系统

01:04:03.859 --> 01:04:06.859
并签名并进行整个验证，并使其真正简单地安装

01:04:06.859 --> 01:04:13.009
代码证明，您可以将所有这些工件直接放入ipfs中，如果

01:04:13.009 --> 01:04:16.549
您在数据中心中，并且需要下载软件包，因此没有理由

01:04:16.549 --> 01:04:20.119
应该不得不与整个包装经理交谈，浪费所有这些

01:04:20.119 --> 01:04:24.169
您可能会从附近的任何其他计算机上获得带宽

01:04:24.169 --> 01:04:27.789
您碰巧与很多细心的政策有关

01:04:27.789 --> 01:04:31.189
哪台计算机应该能够相互连接，但这就是

01:04:31.189 --> 01:04:34.160
路由系统进来了，结果发现有一些

01:04:34.160 --> 01:04:40.700
优雅的方式来构建那些政策是的，也许就像

01:04:40.700 --> 01:04:44.240
我这件事最有趣的部分是人们现在

01:04:44.240 --> 01:04:48.860
构建真正没有起源的Web应用程序，它们可以完全在其上运行

01:04:48.860 --> 01:04:53.240
浏览器，让他们生成动态内容，并进行交流

01:04:53.240 --> 01:04:58.550
彼此之间，并且全部托管在由

01:04:58.550 --> 01:05:04.310
默认情况下，您现在正在变异数据，而不包含原始数据和整个数据

01:05:04.310 --> 01:05:09.530
在分销商的情况下工作，因此首先完全离线，这是一个巨大的

01:05:09.530 --> 01:05:14.480
现在的项目很多，有一次我算上一次

01:05:14.480 --> 01:05:20.000
从200名提交了代码的人员中向上，核心团队非常

01:05:20.000 --> 01:05:24.200
很小，我们大约有六个人，但是这个庞大的项目实际上是

01:05:24.200 --> 01:05:27.560
可行的是，我们从一开始就将整个事情开源

01:05:27.560 --> 01:05:32.960
一切都在线，我们所有的设计讨论都在那儿，任何人都可以来

01:05:32.960 --> 01:05:36.980
在讨论中，我们在那里进行了许多非常有趣的开发

01:05:36.980 --> 01:05:40.100
突然之间我们有一个问题，我们真的不知道什么是正确的

01:05:40.100 --> 01:05:44.900
答案是，有些人不会碰巧知道合适的人是你知道的

01:05:44.900 --> 01:05:47.630
在那里，并从事这种事情，他们只是在github上标记了他们

01:05:47.630 --> 01:05:52.130
他们出现了为我们解决问题，然后我们继续前进，所以这

01:05:52.130 --> 01:05:56.300
有点像下一个当然，对于大多数人来说，这有点像简单

01:05:56.300 --> 01:06:00.350
像github这样的开源软件是一个很好的资源，这里有很多

01:06:00.350 --> 01:06:05.570
社交网络，只是贡献和编写代码，但我们正在生活中

01:06:05.570 --> 01:06:08.510
能够在合适的时间吸引合适的专家的梦想

01:06:08.510 --> 01:06:13.250
每当我们想要并且整个设计都在讨论所有内容时，

01:06:13.250 --> 01:06:16.040
人们可以在任何类型的工作中做出贡献

01:06:16.040 --> 01:06:20.360
有趣的算法问题，看看我们的职责，看看我们的职责是什么

01:06:20.360 --> 01:06:26.330
无冲突的复制数据类型非常适合ipfs，因为

01:06:26.330 --> 01:06:32.630
根据设计，这些是不可变的数据结构，或者说它们是不可变的，

01:06:32.630 --> 01:06:37.130
可变，就像ipfs是不可变的一样，它们映射非常

01:06:37.130 --> 01:06:40.730
干净地给ipfs和有关它的世界专家突然开始进行讨论

01:06:40.730 --> 01:06:45.170
在我们关于如何最好地在ipfs中进行分层的讨论论坛中

01:06:45.170 --> 01:06:48.020
ipfs围绕内容移动如何在其上构建应用程序

01:06:48.020 --> 01:06:56.990
这就是使整个庞大工作成为可能的原因，是的，是的

01:06:56.990 --> 01:07:06.470
总之，简而言之，我们正在尝试升级整个互联网，就像

01:07:06.470 --> 01:07:10.750
我们的生活真的与研究开发的整个过程有关

01:07:10.750 --> 01:07:17.270
协议的部署，如果我要在此视频中说到最后一件事，

01:07:17.270 --> 01:07:23.750
斯坦福大学对网络进行了大量研究的地方是

01:07:23.750 --> 01:07:29.300
当您查看论文时，我们理想化的系统将领先二十年

01:07:29.300 --> 01:07:34.340
我们已经部署了什么或今天正在使用什么，还有这个过滤器

01:07:34.340 --> 01:07:39.920
有一组过滤器围绕着多少研究得到了发展

01:07:39.920 --> 01:07:44.510
这项研究以一种很好的可用方式进行了干净整洁的开发，以至于

01:07:44.510 --> 01:07:47.980
部署实际上有意义，其中有多少部署正确完成

01:07:47.980 --> 01:07:51.950
到实际上它们被广泛使用的原因是

01:07:51.950 --> 01:07:56.840
好主意没被使用是因为这些过滤器主要是

01:07:56.840 --> 01:08:00.590
周围不是想出主意，而是您如何接受这个主意，

01:08:00.590 --> 01:08:07.190
将其发送到现实世界中，这些过滤器有点像阻止出色的创意

01:08:07.190 --> 01:08:13.550
从分发中开始，这是我们真正关心的，所以我们

01:08:13.550 --> 01:08:17.330
建立一个称为协议实验室的组织，以确保

01:08:17.330 --> 01:08:23.180
这些过滤器更好，因为很多时候您可以进入并意识到

01:08:23.180 --> 01:08:28.310
如果您对其进行了一些调整，它会更改语言或再次尝试

01:08:28.310 --> 01:08:34.850
您现在可以制作一个可以实际部署的非常好的系统，因此这是

01:08:34.850 --> 01:08:38.359
在哪里我会鼓励很多人花时间思考

01:08:38.359 --> 01:08:43.100
什么旧的想法真的很好，也许不是在正确的时间

01:08:43.100 --> 01:08:46.520
也许实施不是很好，也许只是没有部署

01:08:46.520 --> 01:08:50.750
正确的方法，但实际上没有别的方法可以阻止我们

01:08:50.750 --> 01:08:55.580
只需将一些工作放在互联网上，就可以整体上升级Internet上的互联网

01:08:55.580 --> 01:09:01.540
太好了，这很对不起，这已经很长了

01:09:07.580 --> 01:09:09.640
你

