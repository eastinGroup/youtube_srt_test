WEBVTT
Kind: captions
Language: zh-Hans

00:00:04.910 --> 00:00:12.650
早上好，谢谢大家在这里我要谈论谷物

00:00:12.650 --> 00:00:17.420
今天是给你的，股票的目的就像是温柔的

00:00:17.420 --> 00:00:21.470
介绍首席执行官的职责，因此，如果您已经熟悉了它们，那么您就可以

00:00:21.470 --> 00:00:26.660
可能看不到很多新事物，但我会尽力使其超越

00:00:26.660 --> 00:00:31.340
现实的机制，真的给你一些关于它的直觉

00:00:31.340 --> 00:00:40.360
意思是说，神学的目标是使写作更容易

00:00:40.360 --> 00:00:45.920
最终保持一致的系统，以便在分布式系统中实现一致性

00:00:45.920 --> 00:00:54.110
系统，我敢肯定你们都非常熟悉这个概念，但是我会

00:00:54.110 --> 00:01:00.260
喜欢从一开始就快速建立起来，所以真正简单的情况是

00:01:00.260 --> 00:01:04.159
我们只有一台服务器，有几个人正在向该服务器写信，

00:01:04.159 --> 00:01:10.159
几个人在读哦，这很简单，很显然，

00:01:10.159 --> 00:01:15.289
看到这将起作用，因此问题将只是网络故障和

00:01:15.289 --> 00:01:21.469
各种故障，所以这意味着如果服务器在欧洲且您的用户在

00:01:21.469 --> 00:01:28.460
在美国，连接消失了，那么这些用户就没有任何无法获得的任何东西

00:01:28.460 --> 00:01:34.310
完成的工作不是很好，所以显而易见的解决方案是将其分发

00:01:34.310 --> 00:01:38.749
您将人们写的多个服务器的信息分发给

00:01:38.749 --> 00:01:43.850
服务器和人们从服务器读取，如果其中两个之间的连接

00:01:43.850 --> 00:01:51.079
服务器发出声音，然后与之相连的人们的工作可以

00:01:51.079 --> 00:01:56.240
他们中的人仍然可以完成工作，因此从理论上讲听起来不错，但当然

00:01:56.240 --> 00:02:01.399
实践中我们仍然会遇到网络故障，如何处理还不是很明显

00:02:01.399 --> 00:02:10.420
他们，所以您希望它看起来仍然像这个很好的一致性

00:02:10.420 --> 00:02:19.069
价值的顺序发展，但你无法真正实现

00:02:19.069 --> 00:02:28.050
很容易，因为您在服务之间没有任何共识，所以想

00:02:28.050 --> 00:02:33.000
模拟，使其看起来像集群只是一台服务器

00:02:33.000 --> 00:02:38.430
强一致性，而当a和B完全相同时，这基本上是不可能的

00:02:38.430 --> 00:02:45.890
有时会断开连接，所以这就是人们说你可以的意思

00:02:45.890 --> 00:02:52.440
当您有请愿书时，您将无法保持可用性和一致性

00:02:52.440 --> 00:02:59.489
同时，因为要获得一致性，您必须要有一些

00:02:59.489 --> 00:03:02.760
您想要在不同服务器之间进行的那种通信

00:03:02.760 --> 00:03:11.040
为了取得进步，所以我们所做的基本工作是最终引入

00:03:11.040 --> 00:03:16.140
一致性，所以您可能都非常熟悉

00:03:16.140 --> 00:03:24.650
而不是说好吧，我们要使它看起来像是一个顺序

00:03:24.650 --> 00:03:33.810
价值的发展最终可以保持一致，这样就不必

00:03:33.810 --> 00:03:40.739
直接处于相同状态，但是在分区解析后，所以这

00:03:40.739 --> 00:03:48.030
使您可以自由地制作具有非常好的属性的系统，但是

00:03:48.030 --> 00:03:57.000
也很复杂和认真这些是思考算法的一种方法

00:03:57.000 --> 00:04:02.940
正在实现最终的一致性，这是该系列要做的第一件事

00:04:02.940 --> 00:04:07.470
更简单的是，我们实际上提高了标准，所以实际上不是

00:04:07.470 --> 00:04:11.910
只是说我们想要最终的一致性，所以在网络请愿人拥有

00:04:11.910 --> 00:04:17.609
您想要再次保持一致的结果，一旦音符相同，我们会说

00:04:17.609 --> 00:04:24.660
一旦两个音符看到了相同的事件，这些音符就必须存在

00:04:24.660 --> 00:04:29.760
两个音符应立即处于完全相同的状态，以便限制

00:04:29.760 --> 00:04:32.919
分布式可以做的聪明的事情

00:04:32.919 --> 00:04:39.190
算法，但是它也使它们更加简单，因为如果您实现了这一点

00:04:39.190 --> 00:04:45.550
可以轻松考虑确定，因此让我们来看一个非常简单的示例

00:04:45.550 --> 00:04:50.229
分布式算法的外观如何，因此从这里开始，我们将

00:04:50.229 --> 00:04:54.370
进一步讲，我们将探索限制在哪里，然后我们将

00:04:54.370 --> 00:05:01.599
发现serial et施加给我们的规则，以帮助我们进行正确的分布式

00:05:01.599 --> 00:05:05.169
算法，所以这里有两个用户

00:05:05.169 --> 00:05:09.910
您可以将他们视为个人用户，但实际上他们可能是

00:05:09.910 --> 00:05:18.910
集群和最上面的用户都喜欢从零开始的值

00:05:18.910 --> 00:05:24.970
我们的目标是什么，我们希望他们同意一些数字并允许他们

00:05:24.970 --> 00:05:32.169
对该数字进行操作，因此现在，高级用户执行该操作，再加上

00:05:32.169 --> 00:05:39.520
五，所以他立即看到的值就是五，这个值也

00:05:39.520 --> 00:05:45.880
传播给其他用户，并且还会看到值5，这很简单

00:05:45.880 --> 00:05:52.360
尽其所能，所以这条线看起来像是一件很直接的事情，但是我们

00:05:52.360 --> 00:05:56.199
不要像TCP连接那样真正考虑，但这是某种

00:05:56.199 --> 00:06:02.919
通过网络传播操作还可以，所以让我们做一点

00:06:02.919 --> 00:06:09.099
更有趣的是让爱丽丝和鲍勃同时做一个手术

00:06:09.099 --> 00:06:16.570
因此，爱丽丝做减四并得到一个Bo加-3得到两个，而那些运算

00:06:16.570 --> 00:06:21.130
从网络发送出去，他们都应用它们，并且都到达负两个

00:06:21.130 --> 00:06:27.270
所以太好了，让我们看看我们能走多远

00:06:27.270 --> 00:06:33.699
所以这称为基于操作的计数器，因此我们有两种

00:06:33.699 --> 00:06:38.219
海洋现实，我们有基于操作的和基于州的

00:06:38.219 --> 00:06:43.600
他们可以表达相同的算法，但是看起来却不同，他们有日记

00:06:43.600 --> 00:06:47.830
不同的规则，所以我们先来看一下基于

00:06:47.830 --> 00:06:55.060
啦啦队，所以让我们看看当我们乘以

00:06:55.060 --> 00:07:02.140
混合，我们将看到当我们乘法和爱丽丝那两次

00:07:02.140 --> 00:07:07.000
鲍勃那些减一，那么实际上我们没有达到相同的状态，所以我们

00:07:07.000 --> 00:07:14.550
不一致，因此这导致我们遵循基于Co职责的操作的第一条规则

00:07:14.550 --> 00:07:21.310
可以并发的操作，以便可以发生在

00:07:21.310 --> 00:07:27.640
网络，他们将互相穿越，必须上下班，所以加号或

00:07:27.640 --> 00:07:33.820
减上下班的意思是，如果您做减4减3或做减3

00:07:33.820 --> 00:07:39.790
减4，您得到相同的结果乘法和减法不

00:07:39.790 --> 00:07:49.270
从这种意义上讲通勤是有意义的，所以让我们看看另一个属性

00:07:49.270 --> 00:07:53.320
我之前研究过，这些行不像可靠的TCP

00:07:53.320 --> 00:07:56.440
连接，因为它们是分布式系统，并且各种

00:07:56.440 --> 00:08:01.480
可以感觉到，所以让我们看一下传递消息时发生的情况。

00:08:01.480 --> 00:08:07.450
场景交付了两次，所以LS加5加上LS在鲍勃交付了5

00:08:07.450 --> 00:08:12.600
然后再交付一次哦，LS会看到五个，而Bob会看到它们

00:08:12.600 --> 00:08:18.280
所以很明显看到这是不允许的，如果

00:08:18.280 --> 00:08:23.530
我们将允许这样做，这基本上是操作的第二条规则

00:08:23.530 --> 00:08:27.970
基于C或D的操作中基于C的现实，您必须能够假设

00:08:27.970 --> 00:08:36.969
您的传播机制仅一次应用于更新，所以我

00:08:36.969 --> 00:08:41.710
可以想象这里会有几个人会发出警铃

00:08:41.710 --> 00:08:46.570
现在就戴着帽子了，因为一次交货就有点

00:08:46.570 --> 00:08:52.240
一件事，因为在分布式系统中这是不可能的

00:08:52.240 --> 00:08:57.560
这会导致很多混乱

00:08:57.560 --> 00:09:03.420
所以不可能的原因实际上很容易看到，因为谁

00:09:03.420 --> 00:09:06.960
当您要传递消息时，会确认该确认

00:09:06.960 --> 00:09:10.710
恰好一次您发送它，所以如果您不发送

00:09:10.710 --> 00:09:13.650
等待确认，那么您永远不知道它是否到来，因为

00:09:13.650 --> 00:09:19.590
消息可能会丢失，因此如果您说您要等待确认，但是如果

00:09:19.590 --> 00:09:22.860
您不会收到确认，也不知道消息是否最后发出

00:09:22.860 --> 00:09:26.790
已经失去的认可，这是您一整天都可以玩的游戏

00:09:26.790 --> 00:09:36.780
永远不会如此幸运，所以这意味着您最多可以有一次交货

00:09:36.780 --> 00:09:42.720
这基本上是发送消息，希望它得到处理，或者您可以在

00:09:42.720 --> 00:09:47.870
至少一次交货，然后重试，直到看到确认并用尽为止

00:09:47.870 --> 00:09:52.080
好吧，这听起来令人失望，因为我们如何获得成功

00:09:52.080 --> 00:09:55.650
如果我们不能确切地得到什么奴隶制，那就完成了

00:09:55.650 --> 00:09:59.940
很简单，您不能一次获得准确的交货，但是您可以一次获得准确的交货

00:09:59.940 --> 00:10:05.390
传递语义，因此，如果您只是确保两次应用相同的更新

00:10:05.390 --> 00:10:10.590
让您得到相同的结果，那么就没有问题，这就是所谓的

00:10:10.590 --> 00:10:24.750
幂等，因此将基于操作的序列改写为基于规则的操作

00:10:24.750 --> 00:10:31.380
现实需要您的传播机制确保您的操作

00:10:31.380 --> 00:10:39.300
以幂等的方式发送过来，所以让我们看一下另一种数据类型

00:10:39.300 --> 00:10:44.100
这比我们将要使用的一个计数器要复杂一点

00:10:44.100 --> 00:10:49.770
看一下场景，让我们先来看一个真正幼稚的方法

00:10:49.770 --> 00:10:57.060
集合的分布式算法，因此Ellis使用x2的集合，鲍勃还将X添加到

00:10:57.060 --> 00:11:04.260
设置，并且这两个操作相互交叉，但这是一个设置，因此您不能

00:11:04.260 --> 00:11:10.140
两次具有相同的元素，所以Ellis删除了所有内容

00:11:10.140 --> 00:11:15.540
从集合中传播到鲍勃的行为，他们都致力于看到一个空

00:11:15.540 --> 00:11:24.899
设置好，到目前为止还可以，但是我打电话给这把刀是有原因的，然后说

00:11:24.899 --> 00:11:32.430
鲍勃发送的消息真的很慢到达，所以我们该怎么办

00:11:32.430 --> 00:11:39.690
那么所有幼稚的方法都会导致令人惊讶的结果，因为如果我们

00:11:39.690 --> 00:11:47.459
说如果我们只是集合，那么爱丽丝会看到它，但鲍勃看到删除

00:11:47.459 --> 00:11:52.470
而且它们不一致，所以我们该怎么办，棘手的事情是您不能

00:11:52.470 --> 00:11:57.870
解决这个问题，就不能像理想设置那样解决这个问题

00:11:57.870 --> 00:12:02.180
意味着您必须查看您的实际问题，而您的实际问题不是

00:12:02.180 --> 00:12:07.980
使集合同步您的实际问题是您想要的

00:12:07.980 --> 00:12:12.390
从现实世界和现实世界中解决一些现实问题

00:12:12.390 --> 00:12:16.820
在现实世界中，您可以得出哪些语义实际上是您可以接受的

00:12:16.820 --> 00:12:25.320
所以看现实中的一种集合是观察以去除集合

00:12:25.320 --> 00:12:30.360
在吸收运动中做的，就是在我们添加两套东西之前

00:12:30.360 --> 00:12:36.240
真正向美国审计，我们是唯一的标记，然后我们

00:12:36.240 --> 00:12:43.649
从集合中删除一个元素，我们删除所有与删除匹配的值

00:12:43.649 --> 00:12:50.100
我们也通过标记发送的值的每个实例，基本上

00:12:50.100 --> 00:13:00.329
是一个集合，在该集合中同时进行out和remove操作时

00:13:00.329 --> 00:13:06.510
是双胞胎，所以是否要看您的业务

00:13:06.510 --> 00:13:11.930
域或任何您想调用的域，但这是解决域名问题的一种方法

00:13:12.800 --> 00:13:18.809
是的，因此是无冲突的，因此CNC通常称为无冲突，并且

00:13:18.809 --> 00:13:23.489
并不意味着您的消息来源不会发生任何奇怪的事情，我的意思是人们可以

00:13:23.489 --> 00:13:27.569
做疯狂的事情，但您必须将其内置到数据类型中

00:13:27.569 --> 00:13:30.509
处理它，我们刚刚定义的数据类型很好

00:13:30.509 --> 00:13:35.269
是双胞胎，服务不起作用

00:13:38.179 --> 00:13:48.389
因此，这导致我们得出基于操作的现实的第三条也是最后一条规则

00:13:48.389 --> 00:13:54.629
我将通过已发送的消息来说明这一点，

00:13:54.629 --> 00:14:02.279
到达的顺序与从源头发送时的顺序不同，因此在我们的

00:14:02.279 --> 00:14:10.230
如果我们更改了X a，则执行此操作，然后移至X a，但在B处，我们看到

00:14:10.230 --> 00:14:15.569
此外，在我们看到删除内容之前，我们仍然会出现不一致的情况，以防万一

00:14:15.569 --> 00:14:21.779
在基于操作的实用程序的情况下，对不起，我们只说规则是

00:14:21.779 --> 00:14:27.170
我们希望您的网络，我们希望您的传播算法能够确保

00:14:27.170 --> 00:14:33.779
更新是按顺序应用的，在这种情况下，我们指的是顺序

00:14:33.779 --> 00:14:39.689
它们是由源发送的，就像当a和B在同一时间发送时一样

00:14:39.689 --> 00:14:46.889
时间或意识，首先是野兽，其次我们不认为我们看到了那些

00:14:46.889 --> 00:14:52.649
消息按该顺序发送，但是当a发送两个消息时，假设我们看到了

00:14:52.649 --> 00:14:56.629
这两个消息按顺序排列

00:14:58.850 --> 00:15:03.839
这是基于操作的能力的三个规则，最酷的是

00:15:03.839 --> 00:15:10.589
只要您想到下面的数据结构，这就是您所需要的

00:15:10.589 --> 00:15:15.119
这三个规则，您将拥有最终一致的数据类型，而不是

00:15:15.119 --> 00:15:17.549
保证它会做您想做的事

00:15:17.549 --> 00:15:22.769
但是可以保证所有副本都在同一个副本中

00:15:22.769 --> 00:15:27.960
说明这一点，所以这是一个相当不错的工具

00:15:27.960 --> 00:15:35.910
很容易想到一个非常复杂的问题，所以很好，但是

00:15:35.910 --> 00:15:40.650
您在这里对我们的传播做了很多假设，所以我们假设

00:15:40.650 --> 00:15:49.710
只是一种奴隶制语义，我们假设是为了裁判

00:15:49.710 --> 00:15:53.550
取消其中一些假设会很高兴，而且很酷的事情是我们可以

00:15:53.550 --> 00:15:59.190
做到这一点，我们可以利用基于州的三项职责来做到这一点

00:15:59.190 --> 00:16:05.310
实用程序也是数据类型，可让您最终进行设计

00:16:05.310 --> 00:16:09.030
一致的系统，但是它们的工作方式不同，因此基于

00:16:09.030 --> 00:16:14.340
实用程序记住您执行了一项操作，并将其应用于本地状态，并且

00:16:14.340 --> 00:16:20.700
您还直接将操作发送到网络中的其他节点

00:16:20.700 --> 00:16:23.880
证券，您正在做不同的事情，您进行了更新的操作

00:16:23.880 --> 00:16:29.010
您的状态，然后您发送了网络的更新状态，然后

00:16:29.010 --> 00:16:33.960
网络中的其他节点，您将需要合并即将出现的状态

00:16:33.960 --> 00:16:39.480
进入您自己的州并进入新州，因此我们将介绍另一个州

00:16:39.480 --> 00:16:44.940
例子，它又是一个柜台，所以爱丽丝做了加五，我丰富了

00:16:44.940 --> 00:16:51.840
这里的状态我们现在说a对结果贡献了5

00:16:51.840 --> 00:16:59.100
这将使该数据类型的值为5，因此将其发送到b和

00:16:59.100 --> 00:17:05.640
b现在得到相同的状态，所以我们做一个局部对象，所以我们改变了空集

00:17:05.640 --> 00:17:14.190
到集合a对结果贡献了5，我们将其发送给b，而b

00:17:14.190 --> 00:17:20.130
计数某种合并，以及我必须在价值上说些什么，这很好，所以

00:17:20.130 --> 00:17:23.970
让我们看看这对并发操作如何工作，所以我们再做一次加四

00:17:23.970 --> 00:17:31.170
而A加3加4显然使一条运河为A贡献了9

00:17:31.170 --> 00:17:37.299
结果B的加3作为B对结果的贡献

00:17:37.299 --> 00:17:45.759
我们会骑12圈，所以网络让我们看看我们现在是否真的

00:17:45.759 --> 00:17:48.820
能够解除一些新的限制，我们基于该操作

00:17:48.820 --> 00:17:52.029
能力并减少对网络的假设，所以让我们看一下

00:17:52.029 --> 00:17:56.399
发生在我们刚离开的时候

00:17:56.610 --> 00:18:03.820
确实想要每种语义，所以如果我们假设允许原因任务，那么

00:18:03.820 --> 00:18:08.440
例子，只要您合并，我们就允许返回缺少a9状态的返回值

00:18:08.440 --> 00:18:12.340
函数是幂等的，所以现在函数是幂等的，而不是

00:18:12.340 --> 00:18:22.840
兴趣基础设施很好，所以我们基本上已经将责任转移了

00:18:22.840 --> 00:18:27.249
从基础架构，传播机制到合并

00:18:27.249 --> 00:18:35.409
功能正常，所以我们做的第二个假设是订单交货，所以说我们

00:18:35.409 --> 00:18:41.230
举个例子，爱丽丝首先为结果贡献5分，然后她

00:18:41.230 --> 00:18:46.119
加上四，所以看到她贡献了九，结果是

00:18:46.119 --> 00:18:52.779
这些状态的传递顺序不正确，所以我们很擅长做什么呢？

00:18:52.779 --> 00:18:59.799
想要达到9，因此合并功能必须独立

00:18:59.799 --> 00:19:03.730
进入状态的顺序，换句话说，合并

00:19:03.730 --> 00:19:08.559
函数必须是可交换的和关联的，那么我们如何在

00:19:08.559 --> 00:19:13.720
在这种情况下，但是我们通过合并墨菲来实现

00:19:13.720 --> 00:19:18.999
函数从状态中的所有贡献中获取最大贡献

00:19:18.999 --> 00:19:26.369
我们切入是可行的，但这意味着这是一个仅增量计数器

00:19:26.369 --> 00:19:36.789
奥斯特伯格（Osterberg）我，因为如果您取最大值，并且将值降低为

00:19:36.789 --> 00:19:45.159
合并将忽略它，因为它已经看到了五分之五，所以如果您看到

00:19:45.159 --> 00:19:50.559
我向你保证过你可以对国家做同样的事情

00:19:50.559 --> 00:19:54.840
比您使用基于操作的统一体能做到的更好，那么我们如何获得

00:19:54.840 --> 00:20:02.159
基于状态的CDT也可能会下降，因此我为您提供了两个示例，其中四个

00:20:02.159 --> 00:20:09.850
基于状态的日历来解决这一问题，所以第一个是我们可以实际结合到

00:20:09.850 --> 00:20:15.970
看到获得新CDT的怪异之处，所以我们要做的就是不要跟踪

00:20:15.970 --> 00:20:22.720
a对结果的贡献我们跟踪a对结果的两个贡献

00:20:22.720 --> 00:20:27.450
结果，我们跟踪上升的贡献，并且跟踪

00:20:27.450 --> 00:20:32.909
贡献下降，所以我们在这里

00:20:33.749 --> 00:20:43.059
一个当我们做加五，然后我们说一个贡献五上升我们做一个

00:20:43.059 --> 00:20:49.749
减4，那么我们就不说一个贡献了，我们说一个贡献了五个

00:20:49.749 --> 00:20:58.049
和四个下降，我们的合并功能将最大的

00:20:58.049 --> 00:21:02.799
组件上升，我想您应该说的最少

00:21:02.799 --> 00:21:09.970
组件下降，这样我们就可以达到最终的一致性，因此

00:21:09.970 --> 00:21:12.840
这是做到这一点的一种方法

00:21:13.269 --> 00:21:19.299
做到这一点的另一种方法是使用版本系数和我们所说的版本系数

00:21:19.299 --> 00:21:27.639
好吧，一个人总是知道a是按照哪个顺序来做盘子的，所以我能做的是

00:21:27.639 --> 00:21:32.200
有助于结果的组件可以对其进行版本控制

00:21:32.200 --> 00:21:40.869
分量，所以我们看到a在第二状态是5，然后8是负4

00:21:40.869 --> 00:21:49.590
我们更新一个状态，说素数现在是1，如果我们想移动合并一个

00:21:49.590 --> 00:21:57.419
一是素数的五个州是一个州，但我们知道素数一定是较新的

00:21:58.379 --> 00:22:04.330
所以我们知道结果应该是一个，所以这是G实现的另一种方法

00:22:04.330 --> 00:22:12.960
如果最终与基于状态的现实保持一致，那么让我们看看这两个是什么

00:22:12.960 --> 00:22:17.649
解决方案的共同点在于得出第二和第四条规则

00:22:17.649 --> 00:22:23.769
基于州的团结，我们看到他们都有前进的概念

00:22:23.769 --> 00:22:32.169
状态，所以带有正负计数器的值只会变大，所以

00:22:32.169 --> 00:22:36.519
很容易看出版本的发展方向以及素数的数量

00:22:36.519 --> 00:22:41.830
变得更大，这样的想法就在那里并且只要

00:22:41.830 --> 00:22:48.460
更新功能和来自C函数的合并都向前进行

00:22:48.460 --> 00:22:51.539
那个轴我们很好

00:22:51.990 --> 00:22:59.799
因此并发的国家可能不具有可比性，例如在这里

00:22:59.799 --> 00:23:08.620
a已套用+ 4，b已套用加上3，这实际上不是可比的

00:23:08.620 --> 00:23:17.019
因为a与a和另一个遥遥领先，而B更远

00:23:17.019 --> 00:23:24.100
加上另一个，但合并后合并功能总会继续下去

00:23:24.100 --> 00:23:26.590
前进，所以合并后他们都是

00:23:26.590 --> 00:23:34.450
在前进的概念中到达更高的位置，换句话说，

00:23:34.450 --> 00:23:40.269
在状态上有部分顺序，更新和合并

00:23:40.269 --> 00:23:50.380
虽然增加顺序状态是有意义的，但总的来说，我们已经看到了两个

00:23:50.380 --> 00:23:57.269
各种CD，我们已经看到了基于运营的慈善机构，也称为

00:23:57.269 --> 00:24:03.220
交换复制的数据类型，因为操作是通过

00:24:03.220 --> 00:24:08.799
网络和操作必须是累积性的，然后我们才能看到

00:24:08.799 --> 00:24:12.909
基于状态的疾病，有时也称为会聚性

00:24:12.909 --> 00:24:16.549
复制的数据类型，因为状态是通过网络发送的

00:24:16.549 --> 00:24:25.429
和合并功能使它们收敛，所以我想给你一个

00:24:25.429 --> 00:24:30.729
在实际情况中如何展示的非常小的演示

00:24:38.090 --> 00:24:44.419
我想向您展示的第一个例子是反应，这是最终

00:24:44.419 --> 00:24:49.580
由Basho Basu制造的一致数据存储区实际上是

00:24:49.580 --> 00:24:55.039
会议，他们有一个靴子，我敢肯定，如果您停下来了，他们会爱上您的爱它

00:24:55.039 --> 00:24:59.769
他们已经在数据库中介绍了一些谷物

00:24:59.769 --> 00:25:14.409
所以看起来像什么，所以你可以轻轻地跟它说话，所以我

00:25:14.409 --> 00:25:24.129
在奇怪的循环桶中没有任何价值，所以让我们在其中添加一些东西

00:25:27.970 --> 00:25:36.340
因此，例如，我现在要让我们再次获取它，也许是我想

00:25:36.340 --> 00:25:40.809
减去我建议作为计数器的东西，全部减去三

00:25:40.809 --> 00:25:45.279
如您所见，这里什么也看不到

00:25:45.279 --> 00:25:53.440
我的意思是，您只需要进行操作就非常透明，并且它可以正常工作，因此

00:25:53.440 --> 00:25:58.929
后例，使用用户这是相当透明的

00:25:58.929 --> 00:26:02.769
在引擎盖下，所以您可以获得一些优势，因为如果有网络

00:26:02.769 --> 00:26:06.730
请愿书，然后您就可以在网络的两个请愿书中取得进展，但是您

00:26:06.730 --> 00:26:11.740
作为API的使用者，不必真正考虑太多

00:26:11.740 --> 00:26:15.720
例如，如果您想使用资产之类的东西，就必须考虑一下

00:26:15.720 --> 00:26:23.049
因为他们的反应有资产的概念，但正如我们所见，理想的资产

00:26:23.049 --> 00:26:28.450
在C或D T中无法设置，因此他必须注意它们是他们的

00:26:28.450 --> 00:26:33.730
选择哪种风能更好地映射您想要在您的视图中看到的选择

00:26:33.730 --> 00:26:37.269
商业应用程序，但除此之外，您只是将其用作消费者

00:26:37.269 --> 00:26:46.480
很好，但是我们可以再进一步一点，以便我们可以做

00:26:46.480 --> 00:26:52.990
是我们可以使客户真正成为网络的一部分，所以如果您有某种

00:26:52.990 --> 00:26:58.590
手机上的应用程序，该应用程序可能是您的笔记

00:26:58.590 --> 00:27:08.139
最终保持一致的系统，我对此进行了非常小的演示，所以这

00:27:08.139 --> 00:27:14.909
是我确定您以前见过的待办事项和VC应用程序

00:27:15.240 --> 00:27:23.100
这是使用swarm构建的，Swarm是用于执行此操作的JavaScript库

00:27:23.100 --> 00:27:28.770
在客户端和服务器端，这两个是同步的，所以如果我

00:27:28.770 --> 00:27:33.090
在下面添加一些东西，所以这是两个客户端

00:27:33.090 --> 00:27:39.060
谁现在正在连接到一台服务器，这使用C现实来获取

00:27:39.060 --> 00:27:45.540
状态是同步的，所以我们可以添加一些内容，也可以添加其他内容，以便

00:27:45.540 --> 00:27:50.190
如果我现在杀死服务器，而您却看不到我现在杀死了，将会发生什么

00:27:50.190 --> 00:27:56.100
服务器上关于Latisse的最酷的事情是，现在有一种

00:27:56.100 --> 00:27:59.940
网络请愿，因为这两个浏览器这两个客户端是两个节点

00:27:59.940 --> 00:28:06.390
在网络中现在不再相互连接，并且这两个

00:28:06.390 --> 00:28:14.640
节点仍然可以取得进展，并且如果这两个节点将连接到

00:28:14.640 --> 00:28:18.900
一些服务器从另一个服务器的服务器死亡分区，然后所有

00:28:18.900 --> 00:28:22.440
连接到该服务器的客户端仍然可以看到所有这些更新

00:28:22.440 --> 00:28:28.160
但当然他们不认为它是在网络的其他分区中制造的

00:28:28.160 --> 00:28:34.440
现在，如果我再次启动服务器部分，将需要一段时间，因为那些

00:28:34.440 --> 00:28:42.600
浏览器这些浏览器现在正尝试以某种不高兴的方式重新连接

00:28:42.600 --> 00:28:55.260
与服务器是的方式，所以现在当服务器再次联机时，两个

00:28:55.260 --> 00:29:00.690
客户端应该能够将其更新传输到该服务器并通过

00:29:00.690 --> 00:29:09.180
服务器，我们应该看到它再次出现在两行中，因为您使用了

00:29:09.180 --> 00:29:16.320
au，你看到了现实，所以你遵循做那些非常简单的规则，你

00:29:16.320 --> 00:29:20.370
可以始终确保一旦所有更新都被

00:29:20.370 --> 00:29:25.460
网络，他们都将处于相同的状态

00:29:26.790 --> 00:29:29.790
那是

00:29:34.720 --> 00:29:36.720
哦

00:29:46.230 --> 00:29:54.029
所以总结一下，很抱歉得出结论，现实有非常简单的规则，

00:29:54.029 --> 00:29:57.690
只要您遵守这些规则，并确保所有更新

00:29:57.690 --> 00:30:02.850
正确地通过网络传播，那么您始终可以确保所有

00:30:02.850 --> 00:30:07.859
便笺处于相同状态，正如我们在海报上看到的那样，负数反驳了您

00:30:07.859 --> 00:30:14.460
可以使它们组成更复杂的结构，他们不能

00:30:14.460 --> 00:30:18.749
为每个数据类型建模，例如，该集合固有地有点

00:30:18.749 --> 00:30:23.700
无法建模，因此值得您真正考虑您的

00:30:23.700 --> 00:30:28.409
问题，如果您不能将其表示为CDT，那么也许您有一些机会

00:30:28.409 --> 00:30:36.090
进行假设并拥有所有美好事物的地方-TTT字串

00:30:36.090 --> 00:30:41.249
当然在某些情况下会带给您您的业务领域真正需要您

00:30:41.249 --> 00:30:46.320
在那些家伙的情况下，你有一个完美的设定

00:30:46.320 --> 00:30:50.820
内在需要例如强一致性，因此在这种情况下，您知道

00:30:50.820 --> 00:30:55.019
你不是，你不能使用这些，而你必须使用其他技术，但这是

00:30:55.019 --> 00:31:04.559
意识到这一选择是一件好事，所以进一步讲了一些内容，例如我说过的

00:31:04.559 --> 00:31:10.289
给您一个非常温柔的介绍，我认为这为您提供了良好的基础

00:31:10.289 --> 00:31:15.659
进一步阅读，马克·夏皮罗（Mark Shapiro）是做过很多研究的一项研究

00:31:15.659 --> 00:31:22.019
在这个领域工作，有一些视频，尤其是他完成的一个视频

00:31:22.019 --> 00:31:27.509
研究的言论来自里约本人，他们确实是

00:31:27.509 --> 00:31:33.509
非常好的手表，所以真的很不错Christopher Michael John创作了一部

00:31:33.509 --> 00:31:36.960
阅读有关海洋现实的许多背景材料的清单

00:31:36.960 --> 00:31:42.570
真的也很有趣，他实际上是在剧院吃午饭后发表演讲

00:31:42.570 --> 00:31:47.549
因此，我们强烈建议您真的很期待那个

00:31:47.549 --> 00:31:53.600
从微观状态的角度结束了演讲，我很乐意提出问题

00:31:54.800 --> 00:32:28.700
所以是的，可能是这样，您有两套方法，一个ad71

00:32:28.700 --> 00:32:33.950
删除集实际上是一个常见的实现，而删除集是

00:32:33.950 --> 00:32:39.830
通常称为墓碑，这样您就可以记住已将其删除

00:32:39.830 --> 00:32:47.720
元素，我想如果您对版本做一些明智的选择，则可以

00:32:47.720 --> 00:32:56.300
可能找到了可以丢下墓碑的安全地方，但我不是

00:32:56.300 --> 00:33:07.910
确定周围是否有搜索算法，但我可以想象是的，所以没有

00:33:07.910 --> 00:33:12.100
然后是更多问题

00:33:21.370 --> 00:33:37.990
是的，也许我不确定，所以这确实是一个折衷，因为如果您有

00:33:37.990 --> 00:33:43.540
您可能希望在非常小的图表中真正做空您的数据的情况

00:33:43.540 --> 00:33:53.300
那么发展国家就像是可以管理的，所以如果你举个例子

00:33:53.300 --> 00:33:58.040
在某些情况下，通常会有网络保护，因此

00:33:58.040 --> 00:34:02.360
例如，您实际上期望会有网络请愿，而人们正在

00:34:02.360 --> 00:34:06.950
断开连接一段时间，然后实际上可能会更便宜

00:34:06.950 --> 00:34:11.060
基于状态的，因为您可以更新很多状态

00:34:11.060 --> 00:34:18.440
通常情况下，您通常只需将状态发送一次即可，然后

00:34:18.440 --> 00:34:23.870
的确，基于操作会更有效，因为您

00:34:23.870 --> 00:34:27.950
不必每次都交流整个状态，但这实际上取决于

00:34:27.950 --> 00:34:32.929
通常情况下，您看到的是人们说基于“好状态”

00:34:32.929 --> 00:34:37.370
更容易考虑，然后如果您有类似语义的内容

00:34:37.370 --> 00:34:41.900
像您希望他们那样工作，然后您可以尝试将其转换为基于

00:34:41.900 --> 00:34:45.550
但我认为这真的取决于您的情况

00:35:00.440 --> 00:35:05.940
因此，这实际上取决于您的状态，因此在我们的示例中，

00:35:05.940 --> 00:35:09.780
确实，我们对系统中的每个音符都有一点点状态

00:35:09.780 --> 00:35:15.390
在该州，这不一定是保持国家安全的唯一途径

00:35:15.390 --> 00:35:18.380
取决于算法

00:35:34.770 --> 00:35:37.340
看

00:35:44.710 --> 00:35:50.130
嗯，我什么都不知道，但是可能有

00:35:50.130 --> 00:35:59.700
是的，但是如果没有其他问题，那么非常感谢您的关注

00:35:59.700 --> 00:36:03.620
我希望您喜欢会议的其余部分

