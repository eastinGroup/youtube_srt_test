WEBVTT
Kind: captions
Language: zh-Hans

00:00:02.000 --> 00:00:05.359
酷，嗯，欢迎来到gui和网络浏览器

00:00:05.359 --> 00:00:12.400
每两周一次的通话时间为2020年8月11日

00:00:12.400 --> 00:00:19.199
是的，这就是我们，也许像往常一样，第一个项目是我

00:00:19.199 --> 00:00:22.960
一如既往地提供有关固定服务的更新

00:00:22.960 --> 00:00:28.240
嗯，这样我就不会进行屏幕共享了，我会很快提到固定

00:00:28.240 --> 00:00:34.320
服务API规范已经稳定了一个多星期

00:00:34.320 --> 00:00:38.960
现在我认为我们已经解决了所有

00:00:39.760 --> 00:00:43.680
固定服务获得的反馈

00:00:43.680 --> 00:00:47.520
特别是那些

00:00:47.600 --> 00:00:50.239
实施它

00:00:50.960 --> 00:00:54.640
在第一批中，我们的合作伙伴

00:00:54.640 --> 00:00:58.559
登陆到您想要的此Web ui界面中

00:00:58.559 --> 00:01:06.080
在某个时候发货，所以没有任何重大变化

00:01:06.080 --> 00:01:11.280
计划进行重大更改呃，还有一个未解决的问题

00:01:11.280 --> 00:01:16.159
消除了这些提供者字段的歧义，因此我们有了这个概念

00:01:16.159 --> 00:01:22.400
提供者提示，旨在减轻背后人员的困扰

00:01:22.400 --> 00:01:25.680
重试限制性螺母或奇怪的网络

00:01:25.680 --> 00:01:28.640
何时拓扑

00:01:29.200 --> 00:01:34.479
外部的同伴无法连接到他们

00:01:34.479 --> 00:01:39.680
有些人没有中继设置，我们没有

00:01:39.680 --> 00:01:44.479
像继电器这样不受欢迎，并且默认情况下未启用

00:01:44.479 --> 00:01:48.000
会有一些同行在胡说八道

00:01:48.000 --> 00:01:54.960
如果该人想固定内容，他们将发送请求

00:01:54.960 --> 00:01:59.680
使用此新api转到固定服务

00:01:59.680 --> 00:02:03.360
固定服务可能没有数据

00:02:03.360 --> 00:02:06.719
他们想固定在cid后面，所以它将尝试查找

00:02:06.719 --> 00:02:10.879
dht和bitswap之类的提供商

00:02:10.879 --> 00:02:16.000
他们可能会在dht上找到它们，但由于以下原因，他们将无法连接到它们

00:02:16.000 --> 00:02:21.280
网络拓扑，因此我们在两个

00:02:21.280 --> 00:02:27.599
销钉对象和销钉状态响应，以方便有人时的情况

00:02:27.599 --> 00:02:33.040
想固定他们提供已知来源的内容，然后在响应中

00:02:33.040 --> 00:02:36.080
他们得到了多个别针的清单

00:02:36.080 --> 00:02:41.680
客户端可以连接到的服务节点

00:02:41.680 --> 00:02:45.120
这样固定服务就可以直接连接

00:02:45.120 --> 00:02:52.959
到已知的来源，从而解决了奇怪的坚果问题

00:02:52.959 --> 00:02:58.239
我们在引脚对象和引脚状态对象中都使用了提供程序，并且有建议

00:02:58.239 --> 00:03:01.760
为了消除歧义，所以在笔记中有

00:03:01.760 --> 00:03:06.159
与稻草民意测验的链接，这就像一个完美的选择

00:03:06.159 --> 00:03:10.239
如果您在乎事物的命名方式，请骑单车

00:03:10.239 --> 00:03:13.519
秸秆调查到周四开放，并且

00:03:13.519 --> 00:03:17.760
将打开pr或不打开pr，具体取决于

00:03:17.760 --> 00:03:24.480
结果，嗯，这是我的公告UM，议程上的下一个项目

00:03:24.480 --> 00:03:30.319
是对Web ui的更改，因此我们将在以下位置发布新的Web ui版本

00:03:30.319 --> 00:03:35.360
有点，但我们有一些不错的

00:03:35.360 --> 00:03:39.599
重做欢迎屏幕连接区域页面

00:03:39.599 --> 00:03:43.200
我想杰西卡，你想谈谈这个吗

00:03:43.200 --> 00:03:49.440
嗯，我可以分享我的屏幕

00:03:51.120 --> 00:03:55.120
你们都消失了，这表明我正在成功共享我的屏幕

00:03:55.120 --> 00:04:01.840
你能看到是的，好的，好吧，所以不是很多

00:04:01.840 --> 00:04:07.040
自从上次实际修订以来，视觉上已经发生了变化

00:04:07.040 --> 00:04:10.879
建立了这些视觉变化中的大多数，但您会注意到

00:04:10.879 --> 00:04:15.840
如果我断开连接

00:04:17.600 --> 00:04:24.800
哦，加油哦，给我几秒钟

00:04:24.800 --> 00:04:30.479
一旦您断开连接，我无论如何都会停下来呃

00:04:30.479 --> 00:04:42.479
欢迎信息框，嗯，废话，这是有史以来最糟糕的演示

00:04:42.479 --> 00:04:45.680
不是我缓冲区中的最后一件事

00:04:45.680 --> 00:04:49.840
我就像我撞到她，然后就像完全随机的东西一样

00:04:49.840 --> 00:04:53.600
发生了那不是您想要的所有事情

00:04:53.600 --> 00:04:57.120
所以我们的想法是，我们可以顺利进行，因此，如果您无法连接到

00:04:57.120 --> 00:04:59.919
ipfs api um上的欢迎信息

00:04:59.919 --> 00:05:02.240
就像下面出现的ipfs一样

00:05:02.240 --> 00:05:05.600
不再出现那三个项目

00:05:05.600 --> 00:05:10.960
本身就是um组件，主要组件目录是um，所以

00:05:10.960 --> 00:05:13.520
完全模块化，这意味着

00:05:13.520 --> 00:05:16.800
说，你必须对这有点kit-bash

00:05:16.800 --> 00:05:21.840
使它工作，但是可以说我正在正确连接，所以我已连接到ipfs

00:05:21.840 --> 00:05:30.000
我在我的状态页面中，然后断开连接，您会获得完整的指导

00:05:30.000 --> 00:05:33.520
这里再次包括

00:05:33.520 --> 00:05:40.160
api重置um此处的api配置

00:05:40.160 --> 00:05:44.240
状态页面上还有一些不错的东西

00:05:44.240 --> 00:05:48.000
我会在状态页面上备份这个吗

00:05:48.000 --> 00:05:50.639
如果您单击它，就会知道您是否喜欢文件中的任何位置，并且您

00:05:50.639 --> 00:05:54.160
单击此处的上下，它将直接带您进入状态，并且

00:05:54.160 --> 00:05:58.720
所有高级内容都会扩展，然后您就可以

00:05:58.720 --> 00:06:03.039
还可以在设置本身中进行api config edit，因此还有很多

00:06:03.039 --> 00:06:08.080
直观的拉斐尔修复了一些错误

00:06:08.080 --> 00:06:13.440
这没有真正正确地扩展，嗯，我要尝试修复

00:06:13.440 --> 00:06:16.720
问题是，如果您单击此编辑，它将带您

00:06:16.720 --> 00:06:21.120
一直到那里，所以这将是另一项改进，唯一的改进

00:06:21.120 --> 00:06:24.880
悬而未决的问题是，呃，萨里是否现在正确？

00:06:24.880 --> 00:06:28.400
现在状态屏幕是唯一一个如果您突然断开连接的屏幕

00:06:28.400 --> 00:06:34.160
会在合理的时间内向您抛出一条错误消息um

00:06:34.160 --> 00:06:39.520
如果您已连接，则其他人则掉线

00:06:39.520 --> 00:06:45.840
您的连接就像我在文件中一样，我停止了它，这可能是非常非常非常

00:06:45.840 --> 00:06:50.880
很长一段时间，嗯，只是在等我必须

00:06:50.880 --> 00:06:54.479
刷新或转到其他页面，然后再实际获取该信息

00:06:54.479 --> 00:07:00.720
所以这个问题的公开问题是我们是否会

00:07:00.720 --> 00:07:04.479
据我了解，它很好但是对更好的检测并不是完全关键

00:07:04.479 --> 00:07:08.319
并在失去连接时刷新，以便每个页面都表现出一点点

00:07:08.319 --> 00:07:12.319
如果您失去连接，则与该状态页面更接近

00:07:12.319 --> 00:07:18.639
嗯，听起来不错，对不起，对不起，我有个建议

00:07:18.639 --> 00:07:21.759
只是使像这样的状态页面出现作为一个连接

00:07:21.759 --> 00:07:26.160
组件已经存在并且是一个覆盖层

00:07:26.160 --> 00:07:29.440
在一切之上，所以这是一个想法

00:07:29.440 --> 00:07:33.120
适用于每种情况下的每个页面，以及

00:07:33.120 --> 00:07:37.840
它的结果在状态页面上是相同的，因为您看不到是什么

00:07:37.840 --> 00:07:42.479
在它下面是的，随着时间的推移，它也无法固定带宽

00:07:42.479 --> 00:07:46.240
出现诸如此类的东西，是的，是的，因为现在是

00:07:46.240 --> 00:07:50.080
组件um覆盖是一个很好的方法

00:07:50.080 --> 00:07:53.680
因为像你一样，你绝对不能忽略那是一件好事，那是一件好事

00:07:53.680 --> 00:07:57.680
打电话给我检测和刷新

00:07:57.680 --> 00:08:00.240
需要有人或检测和添加

00:08:00.240 --> 00:08:03.199
不幸的是，我需要其他人来做

00:08:03.199 --> 00:08:07.360
有点超出我的能力范围，然后

00:08:07.360 --> 00:08:13.840
一个悬而未决的问题，我们如何改变

00:08:13.919 --> 00:08:18.240
本文阅读以欢迎来到互联网的未来，您现在已经很有价值

00:08:18.240 --> 00:08:21.919
就像我觉得是革命性的一样，是分布式网络的一部分

00:08:21.919 --> 00:08:27.120
也许我们应该也许应该将其调低一点

00:08:27.120 --> 00:08:31.039
听起来不错，任何人都对我有异议

00:08:31.039 --> 00:08:36.479
扔进pr1577而不是不打开整个pr笨蛋

00:08:36.479 --> 00:08:41.839
革命文本

00:08:43.519 --> 00:08:48.640
是的，作为一个用户，有很多东西要看，而我却不看

00:08:48.640 --> 00:08:53.040
在任何你知道我的意思的地方，都有太多文字和内容

00:08:53.040 --> 00:08:57.600
继续吧，也许我们可以喜欢呃做更多的事情

00:08:57.600 --> 00:09:01.040
对用户来说很明显，例如开始使用文件开始

00:09:01.040 --> 00:09:04.560
到处乱逛，以便用户可以很好地学习

00:09:04.560 --> 00:09:07.680
这就是该应用程序中的内容

00:09:07.680 --> 00:09:11.200
您可以将所有基本上只是

00:09:11.200 --> 00:09:16.080
状态文件的说明性链接浏览对等设置

00:09:16.080 --> 00:09:22.080
所以那些在那里，但是嗯，是的，我们可能想谈一谈

00:09:22.080 --> 00:09:26.880
将来将重点放在此页面上

00:09:28.480 --> 00:09:35.920
酷，我会修复UM内部链接问题UM

00:09:35.920 --> 00:09:40.560
让人们了解有关设置的api选择器，然后我

00:09:40.560 --> 00:09:43.920
如果有时间的话，会把它踢到你的脚下

00:09:43.920 --> 00:09:47.680
与检测逻辑一起玩，如果没有的话，我们将有一些东西可以

00:09:47.680 --> 00:09:51.839
至少包含在2.11中。

00:09:52.240 --> 00:10:05.839
是的，听起来不错，大约是211，让我分享我的屏幕弹出窗口

00:10:06.959 --> 00:10:11.360
可以看到我的屏幕吗？[音乐]

00:10:11.519 --> 00:10:18.399
是的，很酷，嗯，所以有点像

00:10:18.399 --> 00:10:21.600
对土地的感觉为我创造了一个里程碑

00:10:21.600 --> 00:10:26.959
211，嗯，因为基本上我们想喜欢切割

00:10:26.959 --> 00:10:30.640
这个星期的这个版本，然后我意识到想尝试

00:10:30.640 --> 00:10:35.519
找出需要发生什么以避免痛苦的回归

00:10:35.519 --> 00:10:40.480
这将使人们打开问题，然后阻止

00:10:40.480 --> 00:10:47.519
我们宝贵的时间，所以我创造了这个里程碑并加入了呃

00:10:47.519 --> 00:10:51.519
我在伊拉克开过PR

00:10:51.519 --> 00:10:58.839
真的会在今天复查嗯，它已经直接改头换面了

00:10:58.839 --> 00:11:05.440
um重构后的整个Web ui都基于

00:11:05.440 --> 00:11:11.680
ipfs提供程序和正在等待的新api，我们已经

00:11:11.680 --> 00:11:17.760
包含了杰西卡大部分显示的欢迎页面

00:11:17.760 --> 00:11:21.760
我们要敲定那些

00:11:21.920 --> 00:11:26.240
杰西卡（Jessica）刚刚展示的消息传递改进

00:11:26.240 --> 00:11:30.800
剩下的基本上是一堆问题，

00:11:30.800 --> 00:11:36.720
与人们连接到远程节点的用例有关，因此人们

00:11:36.720 --> 00:11:42.800
没有连接到本地主机节点或他们不加载Web UI

00:11:42.800 --> 00:11:46.160
从api端口，他们可能是从

00:11:46.160 --> 00:11:50.000
网关端口，他们设置了正确的课程标题，并使用

00:11:50.000 --> 00:11:57.200
每个像localhost或通过VPN的本地局域网

00:11:57.200 --> 00:12:00.399
请不要将您的api端口暴露给互联网

00:12:00.399 --> 00:12:05.279
嗯，我认为这些人有基本的生活保障或其他一些保护手段

00:12:05.279 --> 00:12:08.720
他们的api，但我们可能不是

00:12:08.720 --> 00:12:13.120
完整列表，我已经将它们添加到了里程碑中，但是标记为

00:12:13.120 --> 00:12:17.040
袋和与网关端口有关或

00:12:17.040 --> 00:12:21.839
api端口um一切都是

00:12:21.920 --> 00:12:26.079
像一堆这样的问题很可能会在一个公关中解决

00:12:26.079 --> 00:12:32.720
我们在哪里完善我们如何找到api的方式

00:12:32.720 --> 00:12:36.720
在默认端口上找不到或找不到时

00:12:36.720 --> 00:12:41.440
由用户通过我们在

00:12:41.440 --> 00:12:46.639
界面，边缘情况是什么时候

00:12:46.639 --> 00:12:53.680
api是在uh上捕获所有的IP，它是四个零

00:12:53.680 --> 00:12:56.959
嗯，这是有问题的，因为网络浏览器

00:12:56.959 --> 00:13:04.560
将其解释为本地主机，如果您使用网络用户界面，

00:13:04.560 --> 00:13:11.279
假设网关端口为四个零，并且嵌入了um图像，或者

00:13:11.279 --> 00:13:16.560
Web UI中网关的链接将由Web浏览器解释

00:13:16.560 --> 00:13:21.040
由我们在本地计算机上的资源，而不是

00:13:21.040 --> 00:13:26.320
一个人连接到um的那个远程节点，所以我们需要

00:13:26.320 --> 00:13:32.720
我们需要创建一个改进的启发式方法伊拉克

00:13:32.720 --> 00:13:37.360
从那切换了Web ui

00:13:37.360 --> 00:13:44.560
将redux捆绑到ipfs提供程序，默认情况下会尝试

00:13:44.560 --> 00:13:49.360
如果未提供api地址，它将尝试访问当前的api

00:13:49.360 --> 00:13:53.600
如果我没记错的话

00:13:53.760 --> 00:13:58.240
它以前也曾经这样做过，因为逻辑没有改变

00:13:58.240 --> 00:14:02.480
是的，所以这是非常基本的逻辑

00:14:02.480 --> 00:14:09.680
这可以确保如果有人更改了默认的api端口，并且

00:14:09.680 --> 00:14:14.240
Web ui是从网关端口加载的，它将自动运行

00:14:14.240 --> 00:14:21.120
因为它尝试了与Web ui本身相同的起源

00:14:21.120 --> 00:14:25.120
加载，所以我们可能需要改善我

00:14:25.120 --> 00:14:28.639
不知道它是否在ipfs提供程序中

00:14:28.639 --> 00:14:34.480
在用户界面中的用户界面本身，以处理这些额外的用例

00:14:34.480 --> 00:14:38.880
那里有一个

00:14:39.519 --> 00:14:46.320
在go ipfs配置和用户中捕获所有四个零

00:14:46.320 --> 00:14:49.680
从一个来源加载了Uh Web ui，我们

00:14:49.680 --> 00:14:53.920
尝试在不同的源uh访问uh api，但是

00:14:53.920 --> 00:14:57.040
一堆我现在要分享的问题

00:14:57.040 --> 00:15:01.519
如果我们简化逻辑我也喜欢关闭

00:15:01.519 --> 00:15:06.959
重新打开了一个问题，我们在ipld Explorer中拥有此链接

00:15:06.959 --> 00:15:12.160
在ipfs网关um上查看，就像指向本地

00:15:12.160 --> 00:15:16.000
房子之类的东西，我们将其更改为指向公共网关，因为

00:15:16.000 --> 00:15:19.040
大多数人会拥有ipvs伴侣，因此假设是

00:15:19.040 --> 00:15:22.560
将重定向到本地网关，但问题是

00:15:22.560 --> 00:15:26.480
有些人没有同伴，并且有一些用例

00:15:26.480 --> 00:15:31.519
人们在使用Web ui和ipfs note

00:15:31.519 --> 00:15:34.240
离线模式，因此它们未连接到

00:15:34.240 --> 00:15:37.199
蜂拥而至，这意味着公共网关位于

00:15:37.199 --> 00:15:40.160
ipfsio将无法加载内容

00:15:40.160 --> 00:15:45.199
他们在当地有呃，这就是为什么我们不能

00:15:45.199 --> 00:15:49.920
依靠Web ui界面中的公共网关，我们需要

00:15:49.920 --> 00:15:54.560
介绍某种类似的特征来寻找

00:15:54.560 --> 00:16:02.720
api端口并找到要使用的网关端口，例如网关来源

00:16:02.720 --> 00:16:10.000
在我们的界面中，这就像是一个漫长的故事，但要点是

00:16:10.000 --> 00:16:13.360
除了用户界面的改进和

00:16:13.360 --> 00:16:17.759
直接改善性能是我们唯一遇到的问题

00:16:17.759 --> 00:16:26.399
人们在远程位置使用api端口的这种用例吗

00:16:26.399 --> 00:16:30.720
我们需要解决这个问题，然后再发布

00:16:30.720 --> 00:16:35.600
因为那会引入很多回归

00:16:35.600 --> 00:16:41.360
人们似乎在使用Web ui，因为他们在不同

00:16:41.360 --> 00:16:49.040
节点，或者也许他们在本地vpn或lan中运行它，但这是我们需要的

00:16:49.040 --> 00:16:53.839
在发布之前解决这个问题，如果您觉得有什么事情

00:16:53.839 --> 00:16:56.800
我们已经错过了，应该补充一下，就像

00:16:56.800 --> 00:17:01.279
将问题添加到此里程碑中，这样我们就不会错过它，但是那些

00:17:01.279 --> 00:17:07.600
与api和网关相关的网关端口实际上只是一个问题

00:17:07.600 --> 00:17:11.600
像没有做适当的分流，也没有

00:17:11.600 --> 00:17:16.959
合并他们，我可以做一个关于

00:17:16.959 --> 00:17:20.480
作为里程碑的一部分的问题，所以缓冲问题是

00:17:20.480 --> 00:17:23.360
在我们将它们添加到文件时不缓冲文件

00:17:23.360 --> 00:17:27.439
ipfs嗯，虽然有拉取请求，

00:17:27.439 --> 00:17:31.440
实际上正在等待js ipfs

00:17:31.440 --> 00:17:35.760
被释放，因为某些变化

00:17:35.760 --> 00:17:40.080
修复了ipfs8上的未在先前版本中发布的问题

00:17:40.080 --> 00:17:45.120
所以我们需要等待一个版本才能真正利用它

00:17:45.120 --> 00:17:48.559
这意味着我们可以找到更改，但不会

00:17:48.559 --> 00:17:52.400
修复它，但是一旦修复，它将是

00:17:52.400 --> 00:17:56.320
我想说的是，我认为如果可以使用js ipfs进行计时，那会很好

00:17:56.320 --> 00:18:02.080
发布，以便我们可以利用我认为有时还可以的功能

00:18:02.080 --> 00:18:07.760
所以就像在本周和下周一样

00:18:07.760 --> 00:18:11.120
嗯，我相信应该在这个星期，但是可能是下一个

00:18:11.120 --> 00:18:15.120
是的，我不认为这是因为即使由于某种原因而没有发生

00:18:15.120 --> 00:18:18.559
这不是问题，我认为最重要的部分已经

00:18:18.559 --> 00:18:21.520
合并了你的异步重构

00:18:21.520 --> 00:18:28.320
您是否将此性能切换到um http客户端？

00:18:28.320 --> 00:18:31.679
改进，可能不是截止日期，但

00:18:31.679 --> 00:18:36.799
当我们合并特征时，我们要对齐的窗口

00:18:36.799 --> 00:18:42.720
固定服务的分支um有点像呃

00:18:42.720 --> 00:18:46.880
解决了我们想要的土地改良的最后期限

00:18:46.880 --> 00:18:51.520
嗯，在此之前或与此同时，可以提高性能

00:18:51.520 --> 00:18:55.120
因此，如果js ipfs不存在，这不是一个大问题

00:18:55.120 --> 00:19:00.080
就像不按时发布一样，我们可能会削减没有该版本的Web ui的发布

00:19:00.080 --> 00:19:03.840
然后再做，但是很高兴喜欢

00:19:03.840 --> 00:19:11.840
越早越好

00:19:13.039 --> 00:19:19.280
很酷，那是我检查议程的地方，呃，我们处于议程的结尾，所以

00:19:19.280 --> 00:19:25.919
最后一次增长的机会，添加您自己的物品，我会很快去

00:19:25.919 --> 00:19:29.440
超过我们去过的亮点

00:19:29.440 --> 00:19:34.320
忙于积压的问题和其他东西，所以

00:19:34.320 --> 00:19:41.120
一周不是很忙，但我们发布了新的呃，它是ipfs库

00:19:41.120 --> 00:19:45.039
也许我会分享我的屏幕只是为了避免人们凝视

00:19:45.039 --> 00:19:52.080
看着我，人们会盯着我的笔记，而ipfs则是非常简单的

00:19:52.080 --> 00:19:56.160
jsipfs和其他一堆使用的库

00:19:56.160 --> 00:20:01.200
只是为了检测Web上的ipfs资源的东西

00:20:01.200 --> 00:20:05.440
这是一个主要版本，因为我们删除了对

00:20:05.440 --> 00:20:12.000
节点缓冲区，现在我们有点像网络原生

00:20:12.000 --> 00:20:21.840
因为我们不会引入对任何特定于节点类型的依赖

00:20:22.799 --> 00:20:26.960
这样就真正着陆了[音乐]

00:20:26.960 --> 00:20:32.320
我们有一堆弃用的东西，所以一个

00:20:32.320 --> 00:20:37.840
的儿童应用程序对ipfs redux捆绑包说了再见

00:20:37.840 --> 00:20:44.080
这仅由ipfs web ui使用，我相信

00:20:44.080 --> 00:20:50.159
ipfs资源管理器网站

00:20:50.640 --> 00:20:53.760
也许我们所拥有的概念证明

00:20:53.760 --> 00:21:01.440
共享ipfsio，但是从那以后就可以了，我们创建了一个

00:21:01.440 --> 00:21:06.640
与框架无关的ipfs提供程序，因此ipfs 3x捆绑包可以使

00:21:06.640 --> 00:21:12.320
假设，它可能在react和redux中最有用

00:21:12.320 --> 00:21:16.720
您可以使用环境ipfs提供程序

00:21:16.720 --> 00:21:20.799
无论您选择哪种框架，它都更加灵活

00:21:20.799 --> 00:21:27.840
您可以构建任意的后备逻辑

00:21:27.840 --> 00:21:34.720
延迟加载js ipfs完整节点或js ipfs http客户端

00:21:34.720 --> 00:21:41.200
我相信一个支持ipfs的潮汐维基插件正在使用ipfs

00:21:41.200 --> 00:21:45.919
懒加载的提供者，它是懒学习http

00:21:45.919 --> 00:21:50.400
客户数量越来越多，包括

00:21:50.400 --> 00:21:55.600
Web ui uh现在取决于ipfs提供程序，所以很好，我们在忙着养狗

00:21:55.600 --> 00:21:59.679
那和第二个呃弃用不是

00:21:59.679 --> 00:22:03.760
确实由我们完成，但是来自js ipfs的alex

00:22:03.760 --> 00:22:07.120
做到了，但这是我们使用的东西，我们会

00:22:07.120 --> 00:22:12.159
可能需要随着时间的推移从我们的项目中删除呃

00:22:12.159 --> 00:22:18.960
我们进行了这个拆分，我们有两个npm软件包，一个是go ipfs，这是

00:22:18.960 --> 00:22:22.240
嗯，当它被全局安装时，它为您提供了

00:22:22.240 --> 00:22:27.840
在命令行上使用ipfs命令，就像go ipfs release

00:22:27.840 --> 00:22:32.240
可以通过npm安装，并且有一个单独的软件包

00:22:32.240 --> 00:22:36.320
叫做go ipfs dev

00:22:36.480 --> 00:22:42.159
它用于依赖项上下文中，因此，如果您的项目正在运行测试

00:22:42.159 --> 00:22:48.000
针对ipfs，但您不想将其安装成双倍或其他方式

00:22:48.000 --> 00:22:54.640
那个软件包在您的节点模块中包含go ipfs二进制文件

00:22:54.640 --> 00:22:59.600
子目录，所以alex统一了

00:22:59.600 --> 00:23:04.159
就像他从goeiqfs深度移植了所有功能一样

00:23:04.159 --> 00:23:08.000
能够找到二进制文件的路径，现在

00:23:08.000 --> 00:23:12.960
由go ipfs软件包提供，这意味着

00:23:12.960 --> 00:23:18.799
如果您想在自己的计算机中加入go ipfs，请不要使用go ipfs dab

00:23:18.799 --> 00:23:23.280
项目使用只是去ipfs嗯

00:23:23.280 --> 00:23:30.000
使用ipfs提供程序，我不相信是的redux捆绑包

00:23:30.000 --> 00:23:37.840
即将或目前不推荐使用，去ipfs dev也像复制

00:23:38.640 --> 00:23:43.919
我相信我们也在npm上复制了它们，但是值得一提

00:23:43.919 --> 00:23:47.760
如果有人在使用它们

00:23:48.000 --> 00:23:51.440
合适的人是我所有的亮点

00:23:51.440 --> 00:23:55.120
当我们在两周内见面时

00:23:55.120 --> 00:23:58.559
Web ui发行版编译器发行版哦桌面

00:23:58.559 --> 00:24:02.840
释放我们将释放一堆东西的所有东西，请继续关注

00:24:02.840 --> 00:24:09.760
嗯，在我们释放自己的时间之前，请先讨论第二个主题

00:24:09.760 --> 00:24:16.000
半小时我想带点东西来

00:24:16.000 --> 00:24:19.279
所以我一直在尝试重构一堆东西

00:24:19.279 --> 00:24:22.559
继续碰到一些我不清楚的事情

00:24:22.559 --> 00:24:26.320
网络用户界面发生了什么，我得到了自己

00:24:26.320 --> 00:24:31.279
尝试重构那里的一些逻辑

00:24:31.279 --> 00:24:36.880
我可以使用一些帮助来尝试检查我的假设是否

00:24:36.880 --> 00:24:40.000
解释为我对事物的解释是

00:24:40.000 --> 00:24:44.080
实际上是正确的，所以

00:24:44.080 --> 00:24:47.279
你们中的一位可以请帮助我，也许我们可以吧

00:24:47.279 --> 00:24:50.400
安排一个小时左右，这样我们就可以完成所有工作

00:24:50.400 --> 00:24:54.640
嗯，并尝试确保是这种情况，如果我不应该那样做

00:24:54.640 --> 00:24:58.799
这也是另一件事，也许你应该告诉我，别再这样做了

00:24:58.799 --> 00:25:01.919
是的，老实说，我想拥有一个

00:25:01.919 --> 00:25:09.039
一个小时，理想的与我在一起，拉斐尔你，也许是奥利或哈克

00:25:09.039 --> 00:25:13.840
我想把它们包括进来，因为它们是从一开始就

00:25:13.840 --> 00:25:16.320
该项目，他们可能会更熟悉

00:25:16.320 --> 00:25:22.480
如果您能够在本周安排一些事情，则可以做出一些决定，或者

00:25:22.480 --> 00:25:30.080
嗯，也许以后我们中的大多数人很高兴加入酷吧

00:25:30.080 --> 00:25:33.279
是的，我会安排一个会议，然后呃，或者我会尝试，我不确定

00:25:33.279 --> 00:25:36.960
关于人们的可用性ii

00:25:36.960 --> 00:25:40.960
可能不是这个星期，因为我想提出一个建议，这样我就可以

00:25:40.960 --> 00:25:46.240
实际经过它，然后我会做的，听起来不错

00:25:48.159 --> 00:25:53.679
正确的人，我不会让你待久

00:25:54.240 --> 00:25:58.880
两周后见，谢谢您加入um

00:25:58.880 --> 00:26:02.080
我们所有即将到来的事情都用手指交叉

00:26:02.080 --> 00:26:08.240
即将发布的版本可以顺利地在两个地方见到您

00:26:09.600 --> 00:26:11.840
全部混合

