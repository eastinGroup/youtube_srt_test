WEBVTT
Kind: captions
Language: zh-Hans

00:00:01.439 --> 00:00:05.680
大家好，欢迎来到每周同步的ipfs核心实现

00:00:05.680 --> 00:00:10.719
在2020年7月27日，星期一。嗯，我在挑脑，我将成为您的房东

00:00:10.719 --> 00:00:13.759
我们将经历我们的高优先级计划或其他

00:00:13.759 --> 00:00:18.400
倡议有质量保证设计审查建议停车

00:00:18.400 --> 00:00:23.680
很多这样的事情，呃超级好，所以开始了

00:00:23.680 --> 00:00:26.960
高优先级计划即将推出并发布

00:00:26.960 --> 00:00:31.840
有没有人运送任何东西

00:00:38.800 --> 00:00:42.719
我们确实有go ipfs 0.7的跟踪问题

00:00:42.719 --> 00:00:47.760
嗯，我会补充一点，但不打算在以后发布

00:00:47.760 --> 00:00:50.160
八月

00:00:51.680 --> 00:00:58.559
很酷，我希望在本周晚些时候发布js ipfs的呃49

00:00:58.559 --> 00:01:02.640
包含um oracle在

00:01:02.640 --> 00:01:06.880
选项卡之间共享的ipvs注释，它将包括

00:01:06.880 --> 00:01:11.760
新的新的钉扎折射器，以便将钉子存储在数据中

00:01:11.760 --> 00:01:16.479
存储库将很快被添加，并带来许多其他小错误

00:01:16.479 --> 00:01:20.560
修复，是的，希望到最后能解决

00:01:25.840 --> 00:01:29.600
嗯，所以继续进行下一个高度优先的计划

00:01:29.600 --> 00:01:33.600
是固定服务，请您有更新吗

00:01:33.600 --> 00:01:37.119
所以我们已经解决了这个问题，因为规范是

00:01:37.119 --> 00:01:40.640
几乎完成了，在此过程中可能会有一些小的调整

00:01:40.640 --> 00:01:44.320
我认为有一个创造

00:01:44.479 --> 00:01:48.320
时间问题，有一个创建的时间戳，我需要看看

00:01:48.320 --> 00:01:51.680
回顾一下，但除了那个工作应该是

00:01:51.680 --> 00:01:54.079
准备开始，我想我们可能会总结一下

00:01:54.079 --> 00:01:59.360
ed key work um，然后继续进行到

00:02:02.719 --> 00:02:09.840
棒极了ed25519键上是否有任何进一步的更新

00:02:09.920 --> 00:02:18.640
是的，呃，我们有话语，嗯，我们有一个问题

00:02:18.640 --> 00:02:24.800
目前很抱歉，大脑sharna的测试是固定的，现在我们正在研究

00:02:24.800 --> 00:02:28.879
petars pr开放以完成下一个iip

00:02:28.879 --> 00:02:34.319
默认情况下，作为基数为36的键um，我有一些不错的选择

00:02:34.319 --> 00:02:37.840
认为院长在看um

00:02:37.840 --> 00:02:44.560
您想谈谈纯粹的想法吗？36 cids um dean

00:02:44.560 --> 00:02:48.560
是的，我认为我们很可能会将优先事项保留为

00:02:48.560 --> 00:02:54.239
默认情况下，基数为58的多重哈希，但是我们绝对需要添加多重加法器

00:02:54.239 --> 00:03:02.480
解析基数36或解析cids um，是的，这样我们就可以做到这一点

00:03:02.480 --> 00:03:06.239
未来问题更少

00:03:06.650 --> 00:03:09.939
[音乐]

00:03:11.920 --> 00:03:16.959
激进的下一个是第二次除气

00:03:17.360 --> 00:03:21.440
是的，因此我们目前正在计划删除sec-io

00:03:21.440 --> 00:03:25.680
嗯，这是一个漫长的时光，而sakaio从来就不是永远的事情

00:03:25.680 --> 00:03:29.200
嗯，现在已经有了libby噪音支持功能，我们来看看

00:03:29.200 --> 00:03:33.920
在um设置时间表以在go ipfs中推出删除操作

00:03:33.920 --> 00:03:38.159
暂时，我们针对该数字的目标是0.7，然后我们目前正在评估

00:03:38.159 --> 00:03:41.680
这周看看我们有什么基础设施

00:03:41.680 --> 00:03:44.640
嗯，然后有点类似的推广

00:03:44.640 --> 00:03:48.080
secio移除，我们也在努力认识

00:03:48.080 --> 00:03:52.239
尤其是js ipfs之类的升级，因为

00:03:52.239 --> 00:03:56.159
四个七个有pdp噪音，我们有能力相加

00:03:56.159 --> 00:03:59.439
噪音喜欢向后兼容下来就喜欢哦

00:03:59.439 --> 00:04:03.200
41我认为，但确实要弄清楚确保我们拥有

00:04:03.200 --> 00:04:06.239
那里对各种实现的支持

00:04:06.239 --> 00:04:09.519
考虑到这一点，所以我们本周将在

00:04:09.519 --> 00:04:12.720
嗯，关于推出计划的样子

00:04:12.720 --> 00:04:16.160
为此，然后尝试帮助支持嗯

00:04:16.160 --> 00:04:20.079
升级团队只更新配置

00:04:20.079 --> 00:04:25.040
例如使用orbitdb，例如，如果您现在要去，我认为这是

00:04:25.040 --> 00:04:28.720
仍然在ob46上，因此从理论上讲，您只需将lippy插入

00:04:28.720 --> 00:04:32.240
对该版本的ipfs发出噪音，但要确保有一个清晰的

00:04:32.240 --> 00:04:35.919
人们能够做到的道路，我们要确保我们拥有

00:04:35.919 --> 00:04:42.000
支持，所以我们本周对此进行评估

00:04:42.000 --> 00:04:45.360
我们能不能把任何东西都拉出来

00:04:45.360 --> 00:04:50.400
如果我们不再需要sakai，那么可以使用peter p的加密依赖项

00:04:51.440 --> 00:04:58.160
嗯，这是一个很好的问题，也许嗯，我得看看

00:04:58.160 --> 00:05:01.120
如果我们能够做到这一点将会很棒

00:05:01.120 --> 00:05:07.360
捆绑较小的yeah yeah cool uh next up rust ipvs

00:05:07.360 --> 00:05:10.880
在这里主动进行很多活动

00:05:10.880 --> 00:05:17.680
嘿，大家好，所以大新闻是dht和

00:05:17.680 --> 00:05:23.360
内容发现现在正在起作用，因此我们离获得

00:05:23.360 --> 00:05:26.080
可以与全局群连接并获得

00:05:26.080 --> 00:05:32.240
目的内容um我们已经重写了unix fs添加

00:05:32.240 --> 00:05:36.720
组件，但是现在好多了，嗯

00:05:36.720 --> 00:05:43.120
最后一点乐趣是，我旋转了一个轨道数据库节点并试图

00:05:43.120 --> 00:05:47.280
通过http api与rust ipves进行交互

00:05:47.280 --> 00:05:50.840
嗯，就像你会去一个节点，它几乎

00:05:50.840 --> 00:05:55.440
工作了，我期待很多像http

00:05:55.440 --> 00:06:00.240
错误和内容，但是我们现在有150多个通过一致性测试

00:06:00.240 --> 00:06:04.560
通过http api进行，所以真的很接近，那里有几个

00:06:04.560 --> 00:06:08.720
持久性问题尚待解决，但是我们应该在那里完全兼容

00:06:08.720 --> 00:06:11.440
也很快

00:06:12.000 --> 00:06:15.520
令人兴奋的东西，谢谢你，太棒了

00:06:15.520 --> 00:06:20.000
嗯，我也一直在研究类似超时的东西

00:06:20.000 --> 00:06:23.680
嗯，基本上尝试拉出类似默认时间轴是什么时候

00:06:23.680 --> 00:06:26.639
您将超时参数传递给任何api调用

00:06:26.639 --> 00:06:29.120
它设置客户端和服务器上的超时

00:06:29.120 --> 00:06:32.400
所以我一直在想从客户那里把它拉出来

00:06:32.400 --> 00:06:35.520
几乎在那里，但还是做了一些

00:06:35.520 --> 00:06:38.720
这需要一点点完成才能完成，哦，太好了，我会

00:06:38.720 --> 00:06:43.440
将其传递给帮派，谢谢

00:06:43.440 --> 00:06:51.599
嗯接下来是jessica p2p um签署的对等记录并获得v 1.1版本

00:06:51.680 --> 00:06:55.759
是的，所以在签名的同行评审员方面，我们拥有的最后一个公关

00:06:55.759 --> 00:06:59.199
为认证地址簿打开的是

00:06:59.199 --> 00:07:02.560
现在合并了，所以在这个主动站点

00:07:02.560 --> 00:07:06.560
现在一切都合并在脂质峰核心中

00:07:06.560 --> 00:07:09.840
正是在0.29分支中，我们将

00:07:09.840 --> 00:07:14.000
合并我们何时进行发布，并在集合点发布八卦子1.1

00:07:14.000 --> 00:07:17.759
工作进度分支已经在使用此版本

00:07:17.759 --> 00:07:22.319
嗯，在八卦服务器1.20方面

00:07:22.319 --> 00:07:27.440
基本上包括样本记录的对等交易所pr

00:07:27.440 --> 00:07:32.800
合并到1.1的分支中，并且cayman现在正在研究

00:07:32.800 --> 00:07:37.599
他基本上是在进行实施测试时启发了更多的测试，并且

00:07:37.599 --> 00:07:40.160
保证所有的缺陷都在测试中

00:07:40.160 --> 00:07:43.840
我们也在js中测试，我认为这是一个

00:07:43.840 --> 00:07:47.039
好吧，嗯，所以结束这项倡议

00:07:47.039 --> 00:07:50.560
我们基本上需要关闭工作进度

00:07:50.560 --> 00:07:53.919
我们已经有了的步骤是进行此测试，并且

00:07:53.919 --> 00:07:58.240
嗯，这里是pub单元的基本实现的重构

00:07:58.240 --> 00:08:04.639
并使用该更新洪水子项并通过go和进入中断测试

00:08:04.639 --> 00:08:09.039
是的，这与八卦中的信号黑客非常相关

00:08:09.039 --> 00:08:14.240
用于提高js的可发现性和连接性

00:08:14.240 --> 00:08:20.400
因此，有印度文工作，大部分已经准备好再次审核了，呃我做了一个公关来

00:08:20.400 --> 00:08:22.720
使用已签名的对等记录播放规范

00:08:22.720 --> 00:08:27.199
我上周也与雅各布结盟，现在我们应该整合

00:08:27.199 --> 00:08:32.159
续订，我们将从使用它作为外部模块开始，然后

00:08:32.159 --> 00:08:35.919
最终，一旦我们冲出更好的

00:08:35.919 --> 00:08:40.159
api，我们会从第一个用户那里得到反馈，最终我们将其移动

00:08:40.159 --> 00:08:42.399
内的液体速度汽车，但现在我们将

00:08:42.399 --> 00:08:46.560
在外面有它，是的，工作是

00:08:46.560 --> 00:08:50.640
准备好查看，但是我认为在我需要的时候这将不是优先事项

00:08:50.640 --> 00:08:55.360
与jacob同步，但也许我们会等到0.29之前

00:08:55.360 --> 00:09:00.959
嗯，再次进入它，是的，所以我也将在本周开始工作

00:09:00.959 --> 00:09:04.240
该计划的另一部分将是

00:09:04.240 --> 00:09:10.080
权威的，仅此而已

00:09:10.080 --> 00:09:13.440
闲话子，我不知道你是否看过，但我想这里有一些问题

00:09:13.440 --> 00:09:19.519
像生锈的um引起了go lippy的问题

00:09:19.519 --> 00:09:23.519
一块，所以像消息一样去p2p pub sublippy

00:09:23.519 --> 00:09:27.600
在protobuf中遇到的id是字符串，而我

00:09:27.600 --> 00:09:30.880
想像他们会去解释那些

00:09:30.880 --> 00:09:33.600
utf-8，这是有问题的，因为人们

00:09:33.600 --> 00:09:37.600
发送非utf-8字符串um，从而造成问题

00:09:37.600 --> 00:09:40.800
在事情的发展方面，就像规格

00:09:40.800 --> 00:09:45.360
现在更新，仅将网格ID更改为字节

00:09:45.360 --> 00:09:48.720
嗯，所以我们可能需要看看我们应该看看八卦

00:09:48.720 --> 00:09:52.160
sub 1 1也只是进去弄清楚就好了

00:09:52.160 --> 00:09:55.120
让我们做一次转换，我不认为它应该太大

00:09:55.120 --> 00:09:58.959
js um中的一个问题，只是因为就像我们不一样

00:09:58.959 --> 00:10:02.240
我们只是使用它进行哈希运算，但我们应该

00:10:02.240 --> 00:10:07.920
检查一下um jslippy是否存在问题，我只是链接为pub sub

00:10:07.920 --> 00:10:12.079
并在聊天室中将其放在参考的注释um中

00:10:12.079 --> 00:10:18.640
这个问题um链接到所有go go问题以及问题和生锈，因此

00:10:18.640 --> 00:10:20.640
我们可能应该尝试确保我们

00:10:20.640 --> 00:10:25.760
无论何时实际切换，都应尽早支持，而不是稍后支持

00:10:25.760 --> 00:10:29.200
是的，我是今天或明天要调查的，我没有

00:10:29.200 --> 00:10:32.480
尚未调查这些问题，但它们存在于我的

00:10:32.480 --> 00:10:37.680
邮箱，是的，我当然可以通过他们

00:10:38.720 --> 00:10:44.720
根本不再将解释缓冲区作为utf-8字符串

00:10:45.519 --> 00:10:50.000
是为了把其他计划中的高优先级计划

00:10:50.000 --> 00:10:53.839
我可以看到子域网关上没有更新

00:10:53.839 --> 00:10:59.040
待定，好吧，我不会问1.7个博客文章和文档

00:10:59.040 --> 00:11:01.519
您需要做任何进一步的更新，因为有更新

00:11:01.519 --> 00:11:07.200
我已经准备好出售它了，很酷的um unix v1.5，然后去ipfs um

00:11:07.200 --> 00:11:10.560
因为更新是正义节点已经出现并且

00:11:10.560 --> 00:11:14.480
将成功实施um的唯一实现

00:11:14.480 --> 00:11:18.800
1.5 in ipfs um

00:11:18.800 --> 00:11:22.000
他因问题的表情而动弹，我将发布一个

00:11:22.000 --> 00:11:24.240
关联

00:11:27.279 --> 00:11:30.880
继续迁移到出厂的块存储中的多播密钥

00:11:30.880 --> 00:11:35.519
um在教堂wfs的最新版本中，因此可以将其关闭和删除

00:11:35.519 --> 00:11:40.480
嗯，钉扎系统的改造是，是的，这真的很接近，我只是想

00:11:40.480 --> 00:11:43.920
对um垃圾收集进行最后的审查

00:11:43.920 --> 00:11:50.000
嗯，围绕着笔的depth属性，但这应该就像一个眼球

00:11:50.000 --> 00:11:53.760
很好的很多测试类型的操作um

00:11:53.760 --> 00:11:57.839
完成这个任务真是太小了。

00:11:57.839 --> 00:12:01.839
接下来要讨论的是共享的ipfs节点

00:12:01.839 --> 00:12:04.320
往上

00:12:09.600 --> 00:12:15.600
好的，对不起，我被静音了，是的，它降落了，我非常兴奋

00:12:15.600 --> 00:12:20.560
感谢alex离开并学习了um将会进行更多的工作

00:12:20.560 --> 00:12:22.800
那

00:12:23.120 --> 00:12:27.200
也就是说，我是在几周前就提到过

00:12:27.200 --> 00:12:32.959
用复制做ipld的想法，所以我一直在进行对话

00:12:32.959 --> 00:12:37.279
与纺织团队呃来弄清楚如何进行

00:12:37.279 --> 00:12:40.880
那个实验，我想我们想搬家

00:12:40.880 --> 00:12:44.639
ipfs进入协议实验室之一

00:12:44.639 --> 00:12:48.880
组织，我认为我被建议去做

00:12:48.880 --> 00:12:53.360
IPFS工作，但我需要弄清楚谁可以做这件事，因为我不认为我

00:12:53.360 --> 00:12:58.480
自己有特权，所以一部分工作将是

00:12:58.480 --> 00:13:01.680
使这项工作与ipfs lite兼容

00:13:01.680 --> 00:13:08.560
好吧，它可以与itfs um一起使用

00:13:08.560 --> 00:13:15.040
萨姆，下一个是改进网络文件广告

00:13:15.040 --> 00:13:21.519
亚历克斯接手并完成了js ipfs的改进

00:13:21.519 --> 00:13:27.360
嗯，我要更新我要在那里处理的Web ui pull请求

00:13:27.360 --> 00:13:31.760
这些优势显然我们将不得不等待ipfs

00:13:31.760 --> 00:13:33.680
释放发生在我们可以拉进去之前

00:13:33.680 --> 00:13:37.360
但我将更新拉取请求以仅从中拉取

00:13:37.360 --> 00:13:41.519
github并以这种方式进行测试

00:13:45.360 --> 00:13:50.079
因此您应该能够仅从npm中拉出rc，而无需使用

00:13:50.079 --> 00:13:55.120
github url之类的东西，因此对master的每次更改都有一个rc

00:13:55.120 --> 00:13:57.440
已发布，因此您应该只能使用

00:13:57.440 --> 00:14:06.399
安装ipfs和next并获得更好的rc谢谢

00:14:08.240 --> 00:14:11.839
嗯，很酷，这是其他计划的意思吧

00:14:11.839 --> 00:14:17.839
我们有任何设计审查建议吗

00:14:20.880 --> 00:14:24.160
阻止者并询问

00:14:26.800 --> 00:14:32.800
问题是的，所以是的，还有几个问题，并且

00:14:32.800 --> 00:14:36.399
一个评论，这个评论是，有人在

00:14:36.399 --> 00:14:44.000
hackfest试图让um基本上像

00:14:44.000 --> 00:14:48.320
只是作为dht服务器节点，并收听他们听到的内容，然后

00:14:48.320 --> 00:14:54.800
尝试像缓存机制一样获取内容，但是因为去了ipfs

00:14:54.800 --> 00:14:58.399
尚未完成多哈希块存储的迁移

00:14:58.399 --> 00:15:03.600
这就像烦人，因为DHT仅存储多个哈希

00:15:03.600 --> 00:15:08.639
并且您需要请求cid，这意味着您必须发送

00:15:08.639 --> 00:15:14.079
多次请求获取您的数据，因此有多个原因

00:15:14.079 --> 00:15:17.680
无限期地在ipfs多哈希事件上unt

00:15:17.680 --> 00:15:24.320
嗯，那只是评论问题

00:15:25.760 --> 00:15:29.839
路线图上是否可以添加js ipfs

00:15:29.839 --> 00:15:36.959
 um pub sub上的ips像uh

00:15:36.959 --> 00:15:40.000
使其成为ipfs的持久性更改

00:15:40.000 --> 00:15:46.399
前一阵子，或者是或是否尚未在任何地方进行跟踪

00:15:48.880 --> 00:15:52.160
通常是个好问题

00:15:53.680 --> 00:15:57.040
据我所知，它没有在任何地方被追踪

00:15:57.040 --> 00:16:01.120
我们应该打开一个问题，好吧，是的，这很有意义，不是很大

00:16:01.120 --> 00:16:05.120
一组更改，并且只有在以下情况下才真正有所作为

00:16:05.120 --> 00:16:08.399
这只是一件坏事

00:16:08.399 --> 00:16:11.519
如果有go和js节点

00:16:11.519 --> 00:16:14.800
两者都在同一个pub子主题上，因为

00:16:14.800 --> 00:16:17.839
属性似乎不清楚，因为像某些节点正在做一个

00:16:17.839 --> 00:16:23.519
事情，有些正在做另一件事，嗯，我想

00:16:23.519 --> 00:16:28.320
哦，我想还有一个是用于固定服务的

00:16:28.320 --> 00:16:35.279
嗯，我看到我们愿意做基于MFS的活动

00:16:35.279 --> 00:16:37.839
固定的东西

00:16:38.079 --> 00:16:42.399
嗯，您知道在更新MFS时在钉扎处更新销钉的位置

00:16:42.399 --> 00:16:44.800
服务

00:16:45.279 --> 00:16:51.360
引脚发生的情况与前一个引脚发生的情况

00:16:51.360 --> 00:16:56.480
嗯，您怎么知道什么时候可以将其垃圾收集或去污

00:16:56.480 --> 00:17:00.560
服务确实只是被删除，这是固定服务的问题，如果

00:17:00.560 --> 00:17:05.439
他们想将其保留更长的时间，所以在钉扎服务API中

00:17:05.439 --> 00:17:09.679
有一个更新和操作是

00:17:09.679 --> 00:17:17.120
有点像是瓷器，将旧瓷器移开，然后创造出全新的瓷器

00:17:17.120 --> 00:17:21.839
一种重用相同的元数据

00:17:21.839 --> 00:17:25.360
实际上这就是将要发生的事情，我们将其留给

00:17:25.360 --> 00:17:28.799
固定服务以决定何时进行垃圾收集

00:17:28.799 --> 00:17:32.240
这是您更新的那一刻

00:17:32.240 --> 00:17:37.039
那个别针，你所有的你不再保证

00:17:37.039 --> 00:17:40.960
提供了旧的图钉，因此如果您更改图钉

00:17:40.960 --> 00:17:48.880
到另一个CID，您不再可以假设数据是整个CID是

00:17:48.880 --> 00:17:52.000
仍然存在，但如果您只是更改元数据，就像什么都没有

00:17:52.000 --> 00:17:55.120
有效地改变

00:17:55.440 --> 00:18:00.160
好的，所以您将对其进行更新以使其具有某种类似的衰变功能，例如不要存储我

00:18:00.160 --> 00:18:05.520
一定要把我放一个星期左右

00:18:06.160 --> 00:18:10.960
就是这样，因为如果不删除它，我如何将其更新为

00:18:10.960 --> 00:18:14.000
是的，这是一个很好的问题，所以帐单

00:18:14.000 --> 00:18:17.600
本身现在还不是规范的一部分

00:18:17.600 --> 00:18:20.799
嗯，有一个公开的公关来添加创建日期

00:18:20.799 --> 00:18:24.320
可以通过将服务固定到

00:18:24.320 --> 00:18:29.360
嗯，原因还是喜欢创建一些类似的构建逻辑，但事实并非如此

00:18:29.360 --> 00:18:33.280
确实是规格的一部分，这与您固定某些东西不同

00:18:33.280 --> 00:18:37.360
没有没有惯例

00:18:37.360 --> 00:18:42.080
至少不在规格中，因为我想将其固定一个星期

00:18:42.080 --> 00:18:45.360
那可能是一些旋转服务的事情

00:18:45.360 --> 00:18:48.400
就像他们每个采摘服务都可以有自己的一样

00:18:48.400 --> 00:18:53.360
逻辑喜欢覆盖默认行为，但假设是

00:18:53.360 --> 00:18:56.720
用户将分配一个默认行为

00:18:56.720 --> 00:19:02.960
api令牌，仅使用该令牌就意味着您

00:19:02.960 --> 00:19:06.880
我将不会使用这些默认值

00:19:06.880 --> 00:19:12.480
理解当我更新到一个新的引脚时这意味着什么，所以我想要

00:19:12.480 --> 00:19:15.280
确定要固定的新版本和旧版本

00:19:15.280 --> 00:19:20.799
可能会少一些，所以我该如何标记我通过删除或购买来标记

00:19:20.799 --> 00:19:26.880
其他的东西就像只有你，你可以删除旧的

00:19:26.880 --> 00:19:30.000
一个或创建一个新的或仅使用该单个操作即可

00:19:30.000 --> 00:19:33.039
修改现有的图钉，我不认为有任何图钉

00:19:33.039 --> 00:19:36.320
区别于我认为更易于修改的客户端，因为

00:19:36.320 --> 00:19:40.960
这就像一个请求不太好，我不确定我们是否真的想要

00:19:40.960 --> 00:19:44.559
保留旧数据，或者这就像一个单独的问题

00:19:44.559 --> 00:19:48.240
当我们喜欢Web ui时，不适合特定用例

00:19:48.240 --> 00:19:52.080
并且您希望将所有内容保留在我们喜欢不断更新的文件屏幕上

00:19:52.080 --> 00:19:54.400
别针，我们不在乎旧的

00:19:54.400 --> 00:20:00.720
好的，谢谢，我对那个嗯有一个快速的问题

00:20:00.720 --> 00:20:05.280
dht的东西在那里是一个很好的理由，为什么我们不将cd放入

00:20:05.280 --> 00:20:09.280
dht和是的，为什么，因为

00:20:09.280 --> 00:20:15.200
如果我有存储为cidv0和cidv1的同一数据

00:20:15.200 --> 00:20:19.120
那么我将不得不做两个dht看跌期权和两个dht客人以保证

00:20:19.120 --> 00:20:23.520
我发现是的，但是喜欢我们遇到的问题

00:20:23.520 --> 00:20:26.720
我的意思是，那太烂了，像这样是cid的遗产

00:20:26.720 --> 00:20:31.840
0问题，但是multi-hash没什么用，因为它是有区别的

00:20:31.840 --> 00:20:34.880
在数据和数据结构之间，如果

00:20:34.880 --> 00:20:37.120
转移到我们不投入的模型

00:20:37.120 --> 00:20:41.360
将每个单独的块放入dht，我们只是将图钉放进去

00:20:41.360 --> 00:20:45.039
那些杂乱无章的东西并没有真正的意义，就像他们说的那样哦

00:20:45.039 --> 00:20:49.039
我有这个块这个根节点，你不是在说

00:20:49.039 --> 00:20:53.200
我有这张图，因为那并不意味着图um

00:20:53.200 --> 00:20:56.559
就像您需要实际的城市ID一样，

00:20:56.559 --> 00:21:01.120
通过减少几个字节，可以大大减少实用程序的使用

00:21:01.120 --> 00:21:05.760
您不是不是在刮胡子，而是在节省许多网络往返行程

00:21:05.760 --> 00:21:12.080
所以如果我们以斜杠结尾，那么我们最终成功了，所以你知道你只会

00:21:12.080 --> 00:21:15.039
把你知道的也许只有根节点放进去

00:21:15.039 --> 00:21:17.600
DHT，你将把它们放进去

00:21:17.600 --> 00:21:22.320
这些就像是您刚刚说的记录

00:21:22.320 --> 00:21:26.880
CID数据，但实际上像带有更多信息的签名记录

00:21:26.880 --> 00:21:30.799
那是的，我们可以把儿童艾滋病放回去

00:21:30.799 --> 00:21:35.280
也许我们甚至可以将字节放入其中两次，然后将密钥

00:21:35.280 --> 00:21:39.360
多哈希值，该值包括cid位

00:21:39.360 --> 00:21:42.640
我们是否可以为此功能设置我们现在拥有的位置，而不是

00:21:42.640 --> 00:21:45.280
广播所有您刚刚广播的图钉

00:21:45.280 --> 00:21:48.240
当我们这样做时，我们可以将它们广播两次，因为那不是很

00:21:48.240 --> 00:21:52.480
是的，但是所有吸气剂都需要

00:21:52.480 --> 00:21:55.120
得到两次

00:21:56.840 --> 00:22:00.480
吸气剂也需要得到两次，我不是

00:22:00.480 --> 00:22:04.799
在那之后，哦，对不起，是的，我可以放两次

00:22:04.799 --> 00:22:10.080
如果每个人都放两次，那也可以，如果每个人都在

00:22:10.080 --> 00:22:14.159
最新版本好吧，这仅适用于这种情况

00:22:14.159 --> 00:22:17.840
当您仅将销钉插入时，销钉会扎在根上，例如

00:22:17.840 --> 00:22:20.720
那是因为那你知道你只在看一个

00:22:20.720 --> 00:22:22.880
dsp建立该网络，然后获取

00:22:22.880 --> 00:22:26.559
连接到几个您不喜欢在dsg中进行大量其他查询

00:22:26.559 --> 00:22:29.360
图表的每个区块，所以我们不必担心很多

00:22:29.360 --> 00:22:33.440
在这种情况下，往返旅行实际上实际上不仅限于此

00:22:33.440 --> 00:22:38.720
不是，所以不仅仅是cidv0和cdb1

00:22:38.720 --> 00:22:41.520
文明，因为如果编解码器改变像

00:22:41.520 --> 00:22:44.799
如果我只是将其切换为使用原始格式，那会发生什么

00:22:44.799 --> 00:22:48.799
dag seborr的不，不，不，不，但你你不你

00:22:48.799 --> 00:22:52.159
不要将多点广播固定为像您固定cid那样，那么您会

00:22:52.159 --> 00:22:56.000
要做的是，您将播发该CID及其对应的多哈希值

00:22:56.000 --> 00:22:58.559
不必担心cid的另一种表示形式，因为您

00:22:58.559 --> 00:23:03.919
没有钉住我猜我很困惑我失去了什么

00:23:03.919 --> 00:23:07.280
仅使用多哈希数据结构

00:23:07.280 --> 00:23:11.120
就像从字面上看，这是数据和数据结构之间的区别

00:23:11.120 --> 00:23:15.120
因为就像如果我能解码的话，那么我可能会拉出链接

00:23:15.120 --> 00:23:18.240
可以看看它实际上只是意味着的语义信息

00:23:18.240 --> 00:23:21.760
与cid相比时有些不同，但我

00:23:21.760 --> 00:23:25.760
可以，但是我可以猜到你不能

00:23:25.760 --> 00:23:29.520
一旦我一次我抓住了障碍，不，不，你不能猜到

00:23:29.520 --> 00:23:33.039
像那样，不，不像，你在，你在想，你在想cidv0

00:23:33.039 --> 00:23:36.720
一切都是256。就像用eggpudy拍了两样东西

00:23:36.720 --> 00:23:39.600
但就像所有的新东西一样

00:23:39.600 --> 00:23:42.320
如果您像其他人一样，就开始纺织。

00:23:42.320 --> 00:23:45.440
变得像你一样，你真的无法拥有全部

00:23:45.440 --> 00:23:50.240
猜猜是seabor dagpb

00:23:54.799 --> 00:23:58.559
我们还有另外三个编解码器，即将到来的人们正在谈论更多

00:23:58.559 --> 00:24:02.080
更不用说像以太坊区块和获取区块，我们只是

00:24:02.080 --> 00:24:05.600
拿走了所有他妈的比特币区块链并将其放入

00:24:05.600 --> 00:24:09.360
就像有很多法典一样，你真的不知道

00:24:09.360 --> 00:24:12.559
我告诉你就像你不知道，但更重要的是，如果你

00:24:12.559 --> 00:24:15.919
更重要的是，如果您猜测是靠海港还是靠甲板

00:24:15.919 --> 00:24:20.000
事情真的很糟糕，是的，好点

00:24:20.000 --> 00:24:23.919
他们只对根块不利，尽管对

00:24:23.919 --> 00:24:27.440
好吧，我的意思是，如果您解码了seabor，除了root块之外什么都没有

00:24:27.440 --> 00:24:33.120
[笑声]肯定是实际的问题

00:24:33.120 --> 00:24:36.480
就像我的意思是，如果您查看文件币，就像

00:24:36.480 --> 00:24:40.720
他们可能像一个强迫他们做事情的孩子

00:24:40.720 --> 00:24:45.039
嗯，当有人使用很多标识符时，反对某些人的反对

00:24:45.039 --> 00:24:48.320
为了将来有很多这种灵活性

00:24:48.320 --> 00:24:52.080
嗯，不仅是将来的证明，而且就像有代表性

00:24:52.080 --> 00:24:56.400
意思是有些不同，并将其锁定，我真的

00:24:56.400 --> 00:24:59.600
不想看到像我们对dht的全部使用

00:24:59.600 --> 00:25:03.919
像我一样锁定了它，我真的明白了

00:25:03.919 --> 00:25:06.960
在我们处于这种边缘状态的情况下不希望进行两次往返的优化

00:25:06.960 --> 00:25:12.559
从cidv0迁移像那样，确实很糟糕，但是如果您正在寻找

00:25:12.559 --> 00:25:15.760
像我们真的很想开始思考的未来

00:25:15.760 --> 00:25:20.240
这些Cid尽可能在um的情况下（对于引脚）

00:25:20.240 --> 00:25:21.919
就像我们可以非常有效地做到这一点一样

00:25:21.919 --> 00:25:25.200
不用担心性能开销，我同意这将会是

00:25:25.200 --> 00:25:29.760
更改ipfs的默认值以广播每个块两次非常有问题

00:25:29.760 --> 00:25:35.279
但是我不知道，我猜我是我没有被卖掉，因为这就像网络

00:25:35.279 --> 00:25:39.120
内部结构就像嗅探的能力一样

00:25:39.120 --> 00:25:44.799
dht好像不是真的受支持的东西

00:25:44.799 --> 00:25:47.840
并没有真正的理由支持它

00:25:47.840 --> 00:25:51.360
很像，如果您查看dhts的主要用途，

00:25:51.360 --> 00:25:55.919
我们以及协议实验室以外的其他机构，例如被放入dht中的哈希

00:25:55.919 --> 00:25:58.480
有一致的语义理解，因为他们

00:25:58.480 --> 00:26:01.279
它们存在于名称空间中，就像当您在

00:26:01.279 --> 00:26:04.880
就像您知道的bittorrent dht一样，它将成为一个信息哈希，因此您可以

00:26:04.880 --> 00:26:09.279
您可以从中创建数据结构，就像从中获取数据一样，我们不会

00:26:09.279 --> 00:26:13.279
有这个好处，除非它是一个cid，如果它只是一个多哈希，那么

00:26:13.279 --> 00:26:18.320
我们只是在谈论二进制数据，而我们真的不喜欢获得任何

00:26:18.320 --> 00:26:21.279
除非它是cid，否则就使用语义表示

00:26:21.279 --> 00:26:24.400
嗯，我的意思是，就像字面上的意思一样，

00:26:24.400 --> 00:26:28.559
想法，但不能ii表示您有点

00:26:28.559 --> 00:26:32.240
假设cidv1也是cid v无穷大

00:26:32.240 --> 00:26:35.919
不，如果您支持cdb1，那么将来您将支持所有功能，例如

00:26:35.919 --> 00:26:40.320
对于civ1，我们在标识符前面的标识符前面有一个aa版本

00:26:40.320 --> 00:26:42.720
标识符，因此，如果我们需要像我们一样切换到v2

00:26:42.720 --> 00:26:47.360
不必进行所有这些更改，我们将使其变为静音状态

00:26:47.360 --> 00:26:52.159
是的，随着时间的流逝，是的，虽然这是一个有趣的讨论

00:26:52.159 --> 00:26:54.720
我认为我们应该把它带到github问题上

00:26:54.720 --> 00:26:58.559
嗯，然后深入到它嗯，什么是数据

00:26:58.559 --> 00:27:01.679
反正对一个不知道他们在看什么的人

00:27:01.679 --> 00:27:05.120
嗯，很酷，非常感谢大家，这是ips的核心邀请

00:27:05.120 --> 00:27:09.760
2020年7月27日的每周同步。

00:27:09.760 --> 00:27:17.440
下周再见

