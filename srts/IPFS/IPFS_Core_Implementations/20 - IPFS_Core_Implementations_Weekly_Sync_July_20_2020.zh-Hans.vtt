WEBVTT
Kind: captions
Language: zh-Hans

00:00:01.280 --> 00:00:05.520
大家好，欢迎从星期一开始每周同步ipfs核心实现

00:00:05.520 --> 00:00:08.639
2020年7月20日

00:00:08.639 --> 00:00:12.160
今天，我们要经历所有的事情

00:00:12.160 --> 00:00:15.040
倡议，然后通过问题和

00:00:15.040 --> 00:00:18.560
阻止者和询问之类的东西

00:00:18.720 --> 00:00:21.600
因此，对于高优先级计划，第一件事就是即将发布

00:00:21.600 --> 00:00:27.439
发布，所以我们发货了js ipfs 0.48

00:00:27.439 --> 00:00:34.399
这很棒，因此默认情况下让我们的代表参加

00:00:34.399 --> 00:00:40.079
它为我们修复了dht配置并通过multihash存储块

00:00:40.079 --> 00:00:44.800
通过cid进行，因此希望可以更快地进行查找和

00:00:44.800 --> 00:00:49.520
较小的整体回购规模，请安装它，是的，让我们

00:00:49.520 --> 00:00:59.039
知道你怎么过了，还有其他船只发布

00:00:59.039 --> 00:01:03.280
不，嗯，我想我目前的想法是，我们可能只是

00:01:03.280 --> 00:01:09.040
将零六一与零七um捆绑在一起，因为那里有一束

00:01:09.040 --> 00:01:13.840
要做，我们宁愿早晚释放零七

00:01:17.680 --> 00:01:27.840
足够公平，继续进行固定服务

00:01:31.040 --> 00:01:33.920
哦，我会去的

00:01:34.240 --> 00:01:39.920
嗯，所以有一个api和客户端开发应该

00:01:39.920 --> 00:01:42.799
现在畅通无阻，我们已经获得了对

00:01:42.799 --> 00:01:47.280
规格没什么大的改变应该有一些小的调整

00:01:47.280 --> 00:01:50.880
随着我们的前进，但这应该准备实施

00:01:50.880 --> 00:01:56.880
我需要在go ipfs中创建一个问题来跟踪实施

00:01:56.880 --> 00:02:00.880
客户端，然后再去

00:02:00.880 --> 00:02:06.399
ipvs桌面需要具备的其他功能

00:02:06.399 --> 00:02:11.840
我们可以解决该问题，但是从那里我们应该

00:02:11.840 --> 00:02:23.840
很好，所有人都畅通无阻地向前迈进了

00:02:28.480 --> 00:02:32.480
然后我将继续进入ed键，因为那是下一个

00:02:32.480 --> 00:02:36.000
嗯，因此存在跟踪问题

00:02:36.000 --> 00:02:39.440
去吧，还有一对，还有几件事

00:02:39.440 --> 00:02:43.599
需要清理的地方，例如ips key输出

00:02:43.599 --> 00:02:47.599
嗯，有一些共享测试问题，但是我认为没有

00:02:47.599 --> 00:02:52.560
那里没什么专业左边15没什么专业

00:02:52.560 --> 00:02:59.120
我们可能将其捆绑在一起，至少应该在多加法器中使用

00:02:59.120 --> 00:03:05.840
添加对base 36编码的支持，或者完全支持yeah cidv1编码

00:03:05.840 --> 00:03:11.599
嗯，多走几步吧，但这不应该不是

00:03:11.599 --> 00:03:16.959
是的，嗯，然后

00:03:16.959 --> 00:03:21.280
另一个阻塞的问题是js的um中断

00:03:21.280 --> 00:03:27.920
嗯，还有一个大问题，那就是杰西无法解组出门钥匙

00:03:27.920 --> 00:03:33.599
嗯，所以前一阵子变了，这是一个战利品p2p的问题

00:03:33.599 --> 00:03:36.799
取得ed键并将其编码为类似

00:03:36.799 --> 00:03:39.440
您的私钥中的私钥公开还包括

00:03:39.440 --> 00:03:41.760
当您的公钥被封送时

00:03:41.760 --> 00:03:45.120
嗯，但我们也再次附加了公钥

00:03:45.120 --> 00:03:49.599
所以这是多余的，不久前就摆脱了

00:03:49.599 --> 00:03:54.159
但是js没有，所以当我们去编组go键时

00:03:54.159 --> 00:03:57.760
我们失败是因为Cookie不够长，因为我们期望

00:03:57.760 --> 00:04:00.959
那里有多余的公钥，所以是

00:04:00.959 --> 00:04:04.560
已修复，我刚刚发布了对pdb js的更新

00:04:04.560 --> 00:04:08.640
今天的加密货币um包括我没有改变的修复

00:04:08.640 --> 00:04:12.319
js如何编组关键码以避免破坏更改

00:04:12.319 --> 00:04:16.160
因此，我们现在将继续在其中放置冗余公钥

00:04:16.160 --> 00:04:20.000
因为去处理这两个问题，但是以后我会摆脱它

00:04:20.000 --> 00:04:23.639
避免任何重大更改，但我认为没有太多人在使用

00:04:23.639 --> 00:04:30.880
JS ipfs中的82519，因为它们不能，因为它破坏了um以及

00:04:30.880 --> 00:04:34.560
沿着这些思路，我们在使用jas时遇到的问题

00:04:34.560 --> 00:04:38.400
使用ed键是导入和导出键

00:04:38.400 --> 00:04:45.040
嗯，就像js处理它的方式一样，它将密钥导出和导入到

00:04:45.040 --> 00:04:50.000
基于um的钥匙串，格式为pem

00:04:50.000 --> 00:04:56.400
但这就像对js的支持在整个领域都非常糟糕

00:04:56.400 --> 00:04:59.040
crypto和js很粗糙，然后还要保持平衡

00:04:59.040 --> 00:05:02.960
浏览器中的捆绑包大小有点噩梦，所以我们

00:05:02.960 --> 00:05:06.800
可能会去看看我今天和亚历克斯谈过的事

00:05:06.800 --> 00:05:10.880
是仅用于ed键和sccp键

00:05:10.880 --> 00:05:16.560
只是将那些更改为um导入和导出为protobufs，因为

00:05:16.560 --> 00:05:22.560
这是p2p的默认设置，然后再使rsa做到这一点

00:05:22.560 --> 00:05:26.000
然后要求之一就是我们还支持

00:05:26.000 --> 00:05:30.240
只是这些密钥的密码编码，所以我们可能会做

00:05:30.240 --> 00:05:37.120
只是拿脂质protobuf，然后像对称密码一样添加um

00:05:37.120 --> 00:05:39.759
加密，然后将其导出，以便

00:05:39.759 --> 00:05:43.360
仍然具有相同的行为，但将默认为protobuf this

00:05:43.360 --> 00:05:47.039
就像我们为jsipfest获得的最简单，最快的修复程序

00:05:47.039 --> 00:05:52.720
能够在有人担心的情况下开始使用ID密钥

00:05:52.720 --> 00:05:56.479
让我让我知道嗯，最终我们想支持笔

00:05:56.479 --> 00:06:00.240
以多种其他格式um，但这将需要

00:06:00.240 --> 00:06:06.639
对自由加密货币进行的重大改革来做到这一点

00:06:06.639 --> 00:06:13.360
是的，我想呃两件事之一是，去ipfs是否需要任何理由

00:06:13.360 --> 00:06:17.280
能够处理诸如ipvs之类的密码问题

00:06:17.280 --> 00:06:21.039
就像我们将解码加密的密码一样

00:06:21.039 --> 00:06:23.520
私钥功能，什么都不做

00:06:23.520 --> 00:06:27.360
现在因为从未实施过，所以我们必须实施

00:06:27.360 --> 00:06:31.280
所以go根本不会导出密钥，就像您不能为key和go导出密钥一样

00:06:31.280 --> 00:06:37.600
嗯，在js中，您可以导出它们，所以那是最大的不同

00:06:37.600 --> 00:06:40.720
在那里，这就是我们真正需要的

00:06:40.720 --> 00:06:46.800
支持该功能，因为该功能被ipns利用

00:06:46.800 --> 00:06:53.840
拿出钥匙好了是有道理的

00:06:54.639 --> 00:07:00.160
iii有一个注释或问题中的一个是您可能要考虑的

00:07:00.160 --> 00:07:04.319
通常从密码中导出密钥，然后使用

00:07:04.319 --> 00:07:07.680
至于加密树脂密码本身

00:07:07.680 --> 00:07:12.880
因为你可以得到更好的对不起

00:07:12.880 --> 00:07:16.240
我在寻找条款，但

00:07:17.120 --> 00:07:21.599
我不知道我是否对酮逃逸功能持怀疑态度，因为

00:07:21.599 --> 00:07:23.759
就像他们永远没有足够的熵做任何事情一样

00:07:23.759 --> 00:07:28.319
很好，但是您可以，是的，我认为主要

00:07:28.319 --> 00:07:34.800
有关该API正在尝试处理的问题是该API

00:07:34.800 --> 00:07:38.319
密钥在存储时被加密

00:07:38.319 --> 00:07:41.120
嗯，最重要的是当他们

00:07:41.120 --> 00:07:45.199
存储，所以它们不只是存储未加密的

00:07:45.199 --> 00:07:52.479
就像我们支持的api键中的大事一样

00:07:52.479 --> 00:07:56.400
至少在js中的ed键中，我们支持从

00:07:56.400 --> 00:08:00.560
从可能是密码的种子中获取，因此您实际上可以从种子中获取

00:08:00.560 --> 00:08:03.759
与编辑键嗯，但我不认为我们实际上在使用

00:08:03.759 --> 00:08:08.479
在ipfs生态系统中的任何地方创建种子

00:08:08.479 --> 00:08:15.039
对于js，我认为libpdp只是有人想要的，所以我们支持它

00:08:15.759 --> 00:08:19.840
问那个是的，对不起，继续吧，不是，但是还可以

00:08:19.840 --> 00:08:25.280
嗯，我要问的其他事情是

00:08:25.280 --> 00:08:30.800
为什么我们不利用系统钥匙串而不是必须要做我们的原因

00:08:30.800 --> 00:08:34.240
自己的东西似乎每个操作系统都有东西

00:08:34.240 --> 00:08:38.320
这些天我会说，没有充分的理由可能

00:08:38.320 --> 00:08:41.440
大概是两三年前的一个很好的理由，但是那是两三年前

00:08:41.440 --> 00:08:45.440
三年前那个像钥匙串和加密这样的代码

00:08:45.440 --> 00:08:48.399
在过去的两个

00:08:48.399 --> 00:08:51.920
年，它需要大修和

00:08:51.920 --> 00:08:56.160
像整个加密api这样的更新需要大修，所以从理论上讲我不

00:08:56.160 --> 00:08:58.480
认为有什么阻止我们使用

00:08:58.480 --> 00:09:01.600
系统钥匙串，但我们只需要

00:09:01.600 --> 00:09:06.800
验证或评估它，而不是对创建一个问题有用

00:09:06.800 --> 00:09:13.200
关于它，所以我们会在某个时候做到这一点，是的，好的，我会做的

00:09:13.200 --> 00:09:15.519
谢谢你

00:09:18.720 --> 00:09:23.519
这就是ed密钥，接下来要冷却的是子域网关

00:09:23.519 --> 00:09:30.240
所以它确实说本周没有消息是的，所以到目前为止，剩下的任务

00:09:30.240 --> 00:09:34.839
我知道您正在运送ipfs 0.7与

00:09:34.839 --> 00:09:44.880
修复了子域中的涡流键并在base 36中进行了编码

00:09:45.040 --> 00:09:49.360
并撰写博客文章，但我们可以将本节移至

00:09:49.360 --> 00:09:54.320
其他倡议还是

00:09:59.360 --> 00:10:05.200
接下来是防锈计划，看起来像是r30大型更新

00:10:05.200 --> 00:10:08.560
是的，我过去几周都在弥补自己的不足

00:10:08.560 --> 00:10:14.720
嗯，我们一直很忙，最大的新闻就是广告

00:10:14.720 --> 00:10:19.839
功能，所以现在可以从unix unixfs导入um

00:10:19.839 --> 00:10:24.560
正在为单个文件工作，它仍然有些不稳定，但是我们

00:10:24.560 --> 00:10:27.920
我们正在经历它，只是功能触及了巨大的

00:10:27.920 --> 00:10:32.240
fpfs um内部的事物广度

00:10:32.240 --> 00:10:37.200
使用git补丁大大改善了我们的一致性测试工作流程

00:10:37.200 --> 00:10:41.920
因此，而不是将拉取请求提交给jsipfs

00:10:41.920 --> 00:10:46.240
我们只是在本地对其进行修补，只是为了更改我们需要的一些api

00:10:46.240 --> 00:10:54.720
嗯，现在我们正在努力将其余的ipfs节点移至

00:10:54.720 --> 00:11:00.079
通过内容发现和

00:11:00.079 --> 00:11:03.279
提供需求清单和所有其他内容的内容，因此您可以

00:11:03.279 --> 00:11:06.079
查看我链接的拉取请求

00:11:06.079 --> 00:11:12.880
嗯，在这里，另一件事是对HTTP api进行了一些改进

00:11:12.880 --> 00:11:16.800
最值得注意的是流式多部分工作

00:11:16.800 --> 00:11:23.680
um来更新所有这些内容以及一些诸如弧之类的rust api

00:11:23.680 --> 00:11:29.600
存档一些内部ipfs结构，使它们更容易通过

00:11:29.600 --> 00:11:34.320
并做多线程工作和um

00:11:34.320 --> 00:11:39.920
我们还添加了镗孔工具，用于建立和拉动请求批准

00:11:39.920 --> 00:11:43.600
自动化之类的事情，所以整个领域都是

00:11:43.600 --> 00:11:48.959
我想越来越快，功能更丰富

00:11:49.200 --> 00:11:52.000
那是我们的全部

00:11:54.639 --> 00:11:59.920
很棒，接下来是呃，杰西卡p2p签署同龄人记录，

00:11:59.920 --> 00:12:06.160
八卦子评论1.1是的，所以在记录方面

00:12:06.160 --> 00:12:10.399
雅各布上周对所有内容进行了审查，基本上是该界面的prs

00:12:10.399 --> 00:12:13.040
记录对等记录和信封实施

00:12:13.040 --> 00:12:16.560
也合并为0.29版本分支

00:12:16.560 --> 00:12:20.800
嗯，最后在确定中交换了设计对等记录

00:12:20.800 --> 00:12:24.880
协议，以便完成这部分工作

00:12:24.880 --> 00:12:27.600
我们只需要拥有经过认证的通讯录

00:12:27.600 --> 00:12:32.399
公关合并，这也在审查地址中进行了审查，所以我认为应该

00:12:32.399 --> 00:12:36.800
准备好或几乎准备好要合并在...中

00:12:36.800 --> 00:12:40.240
闲话的一面，我们基本上是

00:12:40.240 --> 00:12:43.600
重构基本的Web子实现，谢谢

00:12:43.600 --> 00:12:46.880
在八卦服务器更新中进行的所有工作

00:12:46.880 --> 00:12:51.040
我们基本上想将一些工作提取到基本实现中，因此

00:12:51.040 --> 00:12:56.079
洪水教学大纲将利用它，是的，在此之后，我们也会闲聊

00:12:56.079 --> 00:12:58.800
还需要获得科学记录

00:12:58.800 --> 00:13:03.279
集成到当前正在进行的对等交换pr中，并与

00:13:03.279 --> 00:13:06.560
我们将需要开始调查中断

00:13:06.560 --> 00:13:10.800
测试，为此，我们目前

00:13:10.800 --> 00:13:14.079
阻止了一些黄金B2B需求更新，这将是

00:13:14.079 --> 00:13:17.519
如果gofox中的任何人都能得到它，那太好了

00:13:17.519 --> 00:13:21.600
降落了，是的，这一切都来自

00:13:21.600 --> 00:13:25.120
八卦的一面，是的，我的意思是

00:13:25.120 --> 00:13:29.200
下一节我基本上将其重命名了

00:13:29.200 --> 00:13:31.519
从集合点到js的改进

00:13:31.519 --> 00:13:36.560
可发现性和连通性，基本上是因为我们将寻找

00:13:36.560 --> 00:13:41.199
进入我们想要实现的更广泛的范围，并从中

00:13:41.199 --> 00:13:44.320
一边集合，但如果您看到我的问题，我们就是我们

00:13:44.320 --> 00:13:48.639
关联起来，雅各布还创造了其他东西，这将是我们前进的道路

00:13:48.639 --> 00:13:51.519
为了改善这一方面，所以在

00:13:51.519 --> 00:13:54.880
会合呃我目前正在努力

00:13:54.880 --> 00:13:59.760
规范更新了相同的同伴记录和我的其他其他次要内容

00:13:59.760 --> 00:14:04.959
在实施过程中看了，嗯，我也需要

00:14:04.959 --> 00:14:09.680
将感谢记录整合到集合点，我也是

00:14:09.680 --> 00:14:14.720
正在研究一项关于确保谁拥有发现的建议

00:14:14.720 --> 00:14:19.440
协议，就像其他协议一样，这样我们就可以充分利用现成的协议

00:14:19.440 --> 00:14:22.800
呃其他的发现

00:14:22.800 --> 00:14:26.320
服务确实像对等发现事件一样

00:14:26.320 --> 00:14:29.440
无需添加任何内容即可将所有内容添加到地址簿

00:14:29.440 --> 00:14:36.160
用户手册工作，还允许高级用户进行操作

00:14:36.160 --> 00:14:40.560
如果他们愿意的话，自己做，是的，嗯。

00:14:40.560 --> 00:14:44.480
挡泥板进入审查状态后

00:14:44.480 --> 00:14:48.320
我可能也将开始从事自动继电器的工作，这也是其中的一部分

00:14:48.320 --> 00:14:53.440
主动性，是的，我有点想念那个

00:14:53.440 --> 00:14:59.600
pdp请求的目标是什么，呃，太高了，目前有一个

00:14:59.600 --> 00:15:02.800
pr基本上传到守门员ptp dim和

00:15:02.800 --> 00:15:07.760
go mod使用更高版本而不是最新版本

00:15:07.760 --> 00:15:12.160
释放人，将两者都拥有将是一件好事，这样我们就可以

00:15:12.160 --> 00:15:16.240
使用最新的两个版本测试中断

00:15:16.240 --> 00:15:28.880
守门员hp好的，很酷，那是结束的时间了

00:15:28.880 --> 00:15:32.639
主要举措部分，然后转到另一部分

00:15:32.639 --> 00:15:37.519
主动性，所以您需要满足1.5微米的要求

00:15:37.519 --> 00:15:40.880
ipfs问题没有真正的更新

00:15:40.880 --> 00:15:45.040
有人自愿去接工作，这很令人兴奋

00:15:45.040 --> 00:15:47.360
嗯

00:15:48.079 --> 00:15:51.600
我不太确定接下来会发生什么，但是

00:15:53.360 --> 00:15:57.839
嗯，jsi pfs中附带的块存储中的迁移多哈希键

00:15:57.839 --> 00:16:01.519
现在，嗯，这很酷

00:16:01.519 --> 00:16:04.639
固定系统改造的下一部分，我将介绍这一点

00:16:04.639 --> 00:16:07.680
周，但我想得到伊拉克的所有变化

00:16:07.680 --> 00:16:10.480
因为我感觉有点瓶颈

00:16:10.480 --> 00:16:13.440
很多东西，所以我将专注于那个，然后希望

00:16:13.440 --> 00:16:18.240
在本周晚些时候，拿起待处理的系统内容

00:16:18.959 --> 00:16:26.959
所以接下来分享rpfs note是的，所以我做到了

00:16:26.959 --> 00:16:33.519
嗯，我想我把它们放在错误的地方了

00:16:33.519 --> 00:16:38.959
注意抱歉，我做了例子，选择了一个

00:16:38.959 --> 00:16:43.199
共享ipfs节点，演示如何使用它

00:16:43.199 --> 00:16:49.120
就像我们有其他示例一样，我已经更新了拉取请求以执行此操作

00:16:49.120 --> 00:16:52.480
这是一个等待审查，我仍然必须拉

00:16:52.480 --> 00:16:59.759
最新的东西，即ipfs ad和ipfs完全分开，我要去

00:16:59.759 --> 00:17:04.480
今天就可以处理，再次更新拉取请求

00:17:04.480 --> 00:17:12.240
嗯，下一个是改善网络文件广告，嗯，所以我们进行了一次对话

00:17:12.240 --> 00:17:17.120
与亚历克斯（Alex）和雨果（Hugo）一起，呃决定拉出文件然后吹

00:17:17.120 --> 00:17:21.600
我做的js ipfs碎片

00:17:21.600 --> 00:17:26.240
并以注释中链接的库形式发布

00:17:26.240 --> 00:17:29.679
我已经加入并集成了ipfs和

00:17:29.679 --> 00:17:36.000
在那里的所有分离处，并更新它的拉取请求

00:17:36.000 --> 00:17:41.200
我添加了一堆测试来尝试捕获可能

00:17:41.200 --> 00:17:45.039
发生在我们的广告输入规范化中，以确保

00:17:45.039 --> 00:17:48.400
我们不会退缩

00:17:48.480 --> 00:17:56.080
在改进中，是的，所以现在的拉取请求是

00:17:56.080 --> 00:18:01.200
在审查中被阻止了另一件事是我们确实有另一个补丁

00:18:01.200 --> 00:18:04.880
据说是固定设置的Web ui是

00:18:04.880 --> 00:18:09.280
主要用例嗯，等待哪种变化

00:18:09.280 --> 00:18:13.440
js ipfs着陆之前，我们可以将它们带到那里

00:18:13.440 --> 00:18:18.160
我想到的一件事也许是更糟

00:18:18.160 --> 00:18:22.480
在不等待js ipfs的情况下登陆请求请求

00:18:22.480 --> 00:18:27.200
现在它会优化呃

00:18:27.200 --> 00:18:32.320
像uh一样，只使用jsi pfs http api

00:18:32.320 --> 00:18:37.840
直接呃，一旦jsipfs更换镜头，我们就可以撕开那块

00:18:37.840 --> 00:18:42.240
出来并利用js ipfs嗯，我不知道那是怎么回事

00:18:42.240 --> 00:18:45.440
还是没有，但是如果我们有时间压力

00:18:45.440 --> 00:18:48.960
我们也可以考虑这样做

00:18:49.039 --> 00:18:58.080
所以很酷，所以继续进行设计审查

00:18:58.080 --> 00:19:03.120
在该部分中没有任何建议

00:19:03.919 --> 00:19:06.960
阻止者并询问

00:19:08.840 --> 00:19:16.720
问题，哦，我的院长，问，哦，继续，想给你

00:19:16.720 --> 00:19:25.679
嗯那里ips密钥有问题um

00:19:25.679 --> 00:19:31.360
在js之间使用ips over pub sub到你喜欢的地方

00:19:31.360 --> 00:19:33.679
在js上发布，然后您就无法解决问题了，

00:19:33.679 --> 00:19:39.280
去吧，这是我

00:19:39.280 --> 00:19:42.799
认为这仅仅是因为一个问题，就像我们曾经

00:19:42.799 --> 00:19:48.160
我们一直在寻找与其他地方不同的公钥

00:19:48.160 --> 00:19:53.360
ips记录已经过时了一段时间，嗯，我有一个公关，我认为

00:19:53.360 --> 00:19:56.720
应该解决这个问题，但是如果有人可以

00:19:56.720 --> 00:20:01.440
用互操作测试运行它，我认为贡献者提出了新的建议

00:20:01.440 --> 00:20:05.520
出现故障的分支

00:20:05.520 --> 00:20:12.480
并查看它是否可以正常工作，所以那太好了

00:20:18.320 --> 00:20:23.440
作为额外的奖励，这将加快ipfs上的ips分辨率

00:20:23.440 --> 00:20:26.880
基本免费

00:20:33.600 --> 00:20:38.320
嗯，我有一个与锈ipfs不相关但与固定有关的问题

00:20:38.320 --> 00:20:43.760
api um，我们是关于轨道数据库

00:20:43.760 --> 00:20:47.520
我们正在探索使用钉扎API或钉扎

00:20:47.520 --> 00:20:51.600
规范，以允许轨道数据库挂钩的事情

00:20:51.600 --> 00:20:55.760
例如filecoin或其他您知道的

00:20:55.760 --> 00:20:59.679
那种性质的东西，我想知道问题是

00:20:59.679 --> 00:21:03.600
我们现在应该继续前进吗？

00:21:03.600 --> 00:21:07.280
 Powergate与Filecoin集成还是我们应该

00:21:07.280 --> 00:21:11.039
等待固定api获得更多报价

00:21:11.039 --> 00:21:14.559
还是我们应该合作确定um orbitdb

00:21:14.559 --> 00:21:19.360
您知道可以帮助简化一些用例或类似的事情

00:21:19.360 --> 00:21:22.799
嗯，我想知道这里是否有人愿意跳一下

00:21:22.799 --> 00:21:26.240
不同的电话或只是给我发电子邮件或其他东西

00:21:26.240 --> 00:21:34.400
将其中的一些散列出来，是的，我想也许是莱特尔，我可以

00:21:34.400 --> 00:21:37.679
跳上去谈论我这样想

00:21:37.679 --> 00:21:41.200
可能取决于您要做什么，因为像现在这样的绘画

00:21:41.200 --> 00:21:45.440
服务规范非常基础，因为

00:21:45.440 --> 00:21:48.400
我们不确定长期内会发生什么，而且还有很多

00:21:48.400 --> 00:21:51.280
好的讨论的内容，让我们更改固定为

00:21:51.280 --> 00:21:55.039
实际上就像是销螺纹一样，但是我们需要做一个

00:21:55.039 --> 00:21:58.159
还有很多工作需要冲洗，所以我想如果您要

00:21:58.159 --> 00:22:02.320
方向，那么我没有看过很多Powergate，但也许Powergate是一个

00:22:02.320 --> 00:22:05.760
更好的选择，但是我们可以

00:22:05.760 --> 00:22:12.320
我们可以在离线状态下聊天，也可以拨打电话或通话

00:22:12.320 --> 00:22:16.880
关于那是的，为什么有人不给我一个好东西

00:22:16.880 --> 00:22:19.600
达到你们所有人的方式，否则我将与您取得联系

00:22:19.600 --> 00:22:22.880
然后我们将其整理出来

00:22:24.840 --> 00:22:27.840
谢谢

00:22:32.720 --> 00:22:44.640
很酷的停车场的任何东西哦，我猜我已经为我准备了一份公关文件

00:22:44.640 --> 00:22:51.039
dag size命令显然我是的，你知道我最近

00:22:51.039 --> 00:22:54.559
告知没有简单的方法，或者您可以要求

00:22:54.559 --> 00:23:00.240
没有unif fs而依赖unix中的字段的dag

00:23:00.240 --> 00:23:04.559
 fs，所以有一个

00:23:04.559 --> 00:23:08.000
公关中看起来像什么的原型

00:23:08.000 --> 00:23:13.200
去ipfs我怀疑js ipfs可能有一些兴趣

00:23:13.200 --> 00:23:17.600
嗯，大约一个月以前，我花了一些时间

00:23:17.600 --> 00:23:21.360
向皮纳塔解释说，他们不能真正相信unix fs和

00:23:21.360 --> 00:23:25.520
就像人们可能撒谎一样，所以我们一定要记录在案

00:23:25.520 --> 00:23:28.559
他们在某个地方，并有此命令指出人们将是超级

00:23:28.559 --> 00:23:32.480
很有用，因为它就像您在现实世界中的一种可信任的事物

00:23:32.480 --> 00:23:35.840
可以吗，我实际上是在和哑光说话

00:23:35.840 --> 00:23:40.880
关于这个，这给了我动力去周末做些什么

00:23:42.640 --> 00:23:47.919
是的，如果您在UM中粘贴一个链接，这将非常有用

00:23:47.919 --> 00:23:51.840
在笔记中，这将是rad

00:23:52.000 --> 00:23:56.159
我们在数据结构屏幕xsp2中所做的一件事

00:23:56.159 --> 00:23:58.400
这以及灵活的字节布局

00:23:58.400 --> 00:24:01.120
处理所有字节的布局

00:24:01.120 --> 00:24:05.679
嗯，如果您躺在任何地方的大小，那意味着您无法真正阅读

00:24:05.679 --> 00:24:10.000
数据结构有效，因此当您说谎时，它实际上会破坏事物

00:24:10.000 --> 00:24:12.240
就我们所能达到的程度而言

00:24:12.240 --> 00:24:19.840
使其不太可能或无法激励人们撒谎

00:24:21.279 --> 00:24:24.880
是的，我的意思是现在它就像最简单的一样

00:24:24.880 --> 00:24:28.080
愚蠢的事情，就像遍历了呆子

00:24:28.080 --> 00:24:31.200
然后读出所有大小和块数，并将它们加起来

00:24:31.200 --> 00:24:35.360
返回给您，它会跳过重复项，所以有

00:24:35.360 --> 00:24:38.720
但是就像你可以变得更聪明，做类似的事情

00:24:38.720 --> 00:24:43.520
实际不读取实际不读取原始块

00:24:43.520 --> 00:24:45.520
记忆，因为你知道他们不会

00:24:45.520 --> 00:24:49.679
任何您可以从磁盘获取大小的地方，就足够了

00:24:49.679 --> 00:24:53.279
嗯，像这样的东西，但现在就像

00:24:53.279 --> 00:25:00.240
总比没有好，总比没有好

00:25:00.240 --> 00:25:03.279
所以这是随机的，但有些相关

00:25:03.279 --> 00:25:07.679
我正在努力对汽车文件格式进行潜在升级

00:25:07.679 --> 00:25:11.679
这将在清单的末尾粘贴清单，因此清单将允许您

00:25:11.679 --> 00:25:14.720
寻找汽车档案并实际读取内容

00:25:14.720 --> 00:25:18.240
无需进行文件的完整解析

00:25:18.240 --> 00:25:21.600
甚至是整个区块的um，所以我们有点像

00:25:21.600 --> 00:25:24.640
应该和应该出现在此清单中，但显然会出现的一件事

00:25:24.640 --> 00:25:27.440
有像块大小，但我正在辩论是否

00:25:27.440 --> 00:25:31.440
甚至不将um链接信息放在其中

00:25:31.440 --> 00:25:35.039
这样可以为您呈现dag中链接的完整图片

00:25:35.039 --> 00:25:38.799
无需解析文件中的任何内容或解码任何内容

00:25:38.799 --> 00:25:41.679
嗯，这确实可以帮助处理类似这样的事情，例如，您能够

00:25:41.679 --> 00:25:44.640
无需解码块即可计算损失

00:25:44.640 --> 00:25:48.799
像这样的东西，所以结果可能像是这种形式的清单

00:25:48.799 --> 00:25:50.799
建筑也是我们也要利用的

00:25:50.799 --> 00:25:53.039
存储层之类的东西，因为它可以

00:25:53.039 --> 00:25:57.840
使很多事情变得更快，包括gc

00:26:04.400 --> 00:26:09.360
是的，有很多类似的话题，例如以各种方式使用清单

00:26:09.360 --> 00:26:12.320
加快调查数据和移动数据的速度

00:26:12.320 --> 00:26:15.760
就像是，周围有任何探索

00:26:15.760 --> 00:26:19.679
可能对我有用，是的，我对

00:26:19.679 --> 00:26:21.520
周末我无法摆脱困境，所以我

00:26:21.520 --> 00:26:25.840
写了一个解析器

00:26:30.960 --> 00:26:34.559
但是我们有时在这里，谢谢大家的光临

00:26:34.559 --> 00:26:38.799
您认为2020年7月20日的核心实施方案

00:26:38.799 --> 00:26:42.960
如果尚未完成，请在注释中填写异步更新

00:26:42.960 --> 00:26:50.799
嗯，我们下周见

