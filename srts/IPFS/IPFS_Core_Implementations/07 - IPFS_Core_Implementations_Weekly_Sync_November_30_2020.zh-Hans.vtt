WEBVTT
Kind: captions
Language: zh-Hans

00:00:01.839 --> 00:00:05.680
大家好，我们欢迎您每周同步ipfs核心实现

00:00:05.680 --> 00:00:09.599
11月30日，星期一我就像大脑，我将成为您的房东

00:00:09.599 --> 00:00:12.000
要经历我们的超级计划

00:00:12.000 --> 00:00:15.120
其他举措Qa停车场所有常规物品

00:00:15.120 --> 00:00:19.760
会为高优先级而开始

00:00:19.760 --> 00:00:26.640
计划即将推出，并发布了最新版本的ipfs 0.8

00:00:26.640 --> 00:00:30.960
 rc在附近，我们就像在这附近

00:00:30.960 --> 00:00:37.680
嗯，有一些类似的东西需要完善

00:00:37.680 --> 00:00:41.120
嗯，绘画服务和本地固定，但它们似乎都是

00:00:41.120 --> 00:00:45.039
过去了，所以就像确保我们有一个决赛一样

00:00:45.039 --> 00:00:50.960
最终审查，确定了我们需要解释的所有互操作性内容

00:00:50.960 --> 00:00:55.440
钉下来，但是的

00:00:55.440 --> 00:01:02.000
我们快到了，我们将在下一节中介绍更多内容

00:01:06.640 --> 00:01:13.680
因此，我们也只是开始准备0.30版本

00:01:13.680 --> 00:01:17.119
嗯，我上周似乎拒绝了，我们决定

00:01:17.119 --> 00:01:21.439
因为我们已经发布了太多东西，以至于没有太大意义

00:01:21.439 --> 00:01:26.320
等待交会完成，所以我们也想开始

00:01:26.320 --> 00:01:29.600
从现在开始发布较小的版本，所以我们

00:01:29.600 --> 00:01:34.560
我们可能准备在本周准备rc，

00:01:34.560 --> 00:01:37.200
带有0.30的位，我已经开始集成

00:01:37.200 --> 00:01:44.159
用jspfs和ci是绿色的，这很好啊，是的，我基本上现在

00:01:44.159 --> 00:01:49.759
在中继器生产指南上整理一些码头

00:01:49.759 --> 00:01:52.960
使人们能够轻松使用自动继电器，以及

00:01:52.960 --> 00:01:59.119
刚刚完成了一些关于脂质速度汽车的js文档工作

00:02:02.320 --> 00:02:08.560
非常令人兴奋的肯定是很多小发行而不是大爆炸

00:02:08.560 --> 00:02:11.039
发布

00:02:11.840 --> 00:02:16.080
嗯，下一步是固定服务

00:02:17.599 --> 00:02:25.280
呃，莱拉，你想完全给我这个地位吗，嗯，嗯

00:02:25.280 --> 00:02:28.720
请求去ipfs的拉是绿色的，这很好

00:02:28.720 --> 00:02:32.160
嗯，已经准备好进行审查了，我偷偷溜进去了

00:02:32.160 --> 00:02:38.160
像消毒秘密之类的东西，它应该做与我们相同的事情

00:02:38.160 --> 00:02:44.400
已经为短故事的私钥做了，

00:02:44.400 --> 00:02:47.840
您可能创建了一个模拟固定服务，

00:02:47.840 --> 00:02:54.720
比使用docker compose运行整个导轨更轻

00:02:54.720 --> 00:03:00.959
在ci上，所以我们现在可能要切换到那个，我们知道

00:03:00.959 --> 00:03:04.159
测试路径和我们的绿色，我们可能会切换到该路径

00:03:04.159 --> 00:03:08.640
所以我们不需要基于docker的

00:03:08.640 --> 00:03:16.000
在将ci合并到master之前，对ci进行以下操作

00:03:16.000 --> 00:03:20.319
主要是为了确保ci的健壮性，因为现在

00:03:20.319 --> 00:03:24.799
即使我们查看了该版本的特定版本

00:03:24.799 --> 00:03:32.080
ravion rails pinning服务，docker撰写文件本身使用最新标签

00:03:32.080 --> 00:03:36.000
对于docker映像，因此实际上并没有

00:03:36.000 --> 00:03:40.400
将ci固定为特定版本，可能会破坏任何

00:03:40.400 --> 00:03:47.599
在任何时候，为了使ci稳定，我建议我们切换

00:03:47.599 --> 00:03:53.760
在我们匹配公关之前，但这不应该阻止审查公关

00:03:53.760 --> 00:03:58.159
翻转更换远程固定服务，

00:03:58.159 --> 00:04:01.760
对于sharness测试，我们仅将sharna的测试指向一个特定的

00:04:01.760 --> 00:04:06.799
端口它不应该做任何

00:04:12.840 --> 00:04:15.840
区别

00:04:16.880 --> 00:04:19.199
好的

00:04:20.079 --> 00:04:23.919
嗯，接下来是本地别针

00:04:24.000 --> 00:04:28.479
所以本地固定基本上已经完成，我们已经

00:04:28.479 --> 00:04:31.520
应对所有回购迁移

00:04:31.520 --> 00:04:35.759
之前，我们不得不回头，像由于某些原因而重写我们如何进行迁移

00:04:35.759 --> 00:04:40.560
我们注意到的问题

00:04:40.560 --> 00:04:44.000
我们切换了一些事情，我们遇到了一些小问题

00:04:44.000 --> 00:04:49.360
um与seabor序列化反序列化的东西

00:04:49.360 --> 00:04:52.560
现在已修复，因为我们正在使用图集

00:04:52.560 --> 00:04:57.360
嗯，我今天仔细检查了ii注意到的唯一一件事

00:04:57.360 --> 00:05:05.199
一些像js并互操作的东西是我们不使用我们使用uh

00:05:05.199 --> 00:05:12.160
我猜深度是枚举而不是整数

00:05:12.160 --> 00:05:17.440
go和js均不支持直接或递归之外的任何功能

00:05:17.440 --> 00:05:21.520
像我们谈论过的东西

00:05:21.520 --> 00:05:25.360
所以我不知道这是不是和遥控器一样

00:05:25.360 --> 00:05:30.080
固定服务也不执行此操作，因此看起来我们可能还不错

00:05:30.080 --> 00:05:35.520
将其保留为枚举，但如果您愿意，我也愿意对其进行更改

00:05:35.520 --> 00:05:39.600
如果人们认为为我们做好准备很重要

00:05:39.600 --> 00:05:45.039
嗯，我还注意到ii无法判断javascript是否

00:05:45.039 --> 00:05:51.120
将其数据存储存储在点针或斜线针中

00:05:51.120 --> 00:05:56.479
但是那些是剩下的仅有的两件事，然后我认为这已经完成了

00:05:56.479 --> 00:06:03.280
嗯，我们已经移除了secail

00:06:03.280 --> 00:06:06.720
一秒钟以来，bootstrappers一直处于关闭状态

00:06:06.720 --> 00:06:12.720
呃secio一直是旧的dht节点，而我们的dht booster节点已经

00:06:12.720 --> 00:06:18.479
关闭了，新的不支持secio

00:06:18.840 --> 00:06:22.800
因此仍在网络上的节点仍与之连接

00:06:22.800 --> 00:06:25.840
每个人或仍与之联系的人

00:06:25.840 --> 00:06:28.800
公众人物中的人们只是那些

00:06:28.800 --> 00:06:32.160
要么在事物周围乱砍，要么只是没有转身就走

00:06:32.160 --> 00:06:38.240
关闭，并重新启动um，希望那些人会

00:06:38.240 --> 00:06:41.360
意识到发生了什么并尽快升级，因为我们一直在发布

00:06:41.360 --> 00:06:47.680
关于这个呃，几个月的互联网，但一切似乎都很好，网络

00:06:47.680 --> 00:06:50.400
似乎实际上快了一点，因为我们

00:06:50.400 --> 00:06:54.800
你知道摆脱一些旧的节点

00:06:56.240 --> 00:07:00.560
我们还没有，我还没有看到任何人为没有安全感而尖叫

00:07:00.560 --> 00:07:04.319
删除所以是的，是的，我的意思是没有尖叫

00:07:04.319 --> 00:07:10.000
所以希望你知道一切都好，也许我们会再给它一个礼拜

00:07:10.000 --> 00:07:14.639
然后完全拆掉旧的助推器

00:07:14.639 --> 00:07:17.199
是的，我的意思是现在他们不在了，我认为这只是击中

00:07:17.199 --> 00:07:20.960
如果有一个星期没有人抱怨，我们会在实例上删除按钮

00:07:20.960 --> 00:07:24.880
可以直接点击删除按钮

00:07:25.840 --> 00:07:31.120
um关于记录jsrpfs的未决事项确实支持任意深度

00:07:31.120 --> 00:07:35.599
嗯，它只是不只是暂时不公开它

00:07:35.599 --> 00:07:40.160
让我觉得这很重要，因为他是你知道这是为了

00:07:40.160 --> 00:07:43.440
集群用例说，这就像一个dag

00:07:43.440 --> 00:07:47.280
只需将其固定，然后再将其固定即可，或者

00:07:47.280 --> 00:07:50.400
嗯，但是为了拥有api

00:07:50.400 --> 00:07:54.000
与go的兼容性仅实际支持uh direct或

00:07:54.000 --> 00:07:56.840
递归，但递归只是意味着无限

00:07:56.840 --> 00:08:01.919
吊坠有趣和

00:08:01.919 --> 00:08:06.720
我想我们可以存储销钉，也可以将销钉深度存储为

00:08:06.720 --> 00:08:11.599
如您所知，整数斜线无穷大，然后添加对

00:08:11.599 --> 00:08:15.280
深度如果我们想也许那将是

00:08:15.280 --> 00:08:21.440
你们中的一些人知道的不是很多工作，但可以拯救我们前进，但是像您

00:08:21.440 --> 00:08:27.199
知道可以帮助我们继续我们最初使用的固定服务API

00:08:27.199 --> 00:08:30.800
有深度参数，但我们喜欢将其删除

00:08:30.800 --> 00:08:37.760
就像现在，它只是隐式递归，主要是因为我们不想

00:08:37.760 --> 00:08:41.839
在该第三方api中做出决定

00:08:41.839 --> 00:08:46.080
在我们决定像js ipfs之前

00:08:46.080 --> 00:08:49.920
所以这就是为什么我们不喜欢别针类型的唯一原因

00:08:49.920 --> 00:08:52.480
隐含的

00:08:52.640 --> 00:08:58.399
是的，所以也许我们将深度添加为整数斜线无穷大，我会尝试

00:08:58.399 --> 00:09:01.040
并确保无穷大是相同的

00:09:01.040 --> 00:09:06.880
我们在javascript中使用的um我可能会标记您alex以便进行审核

00:09:06.880 --> 00:09:11.600
确保我做对了我的意思是什么，甚至我们的数字

00:09:11.600 --> 00:09:14.560
javascript不管怎样，即使我们的数字也很好

00:09:14.560 --> 00:09:18.959
确切地问他们是什么

00:09:19.440 --> 00:09:24.320
我们有用于深度的用例吗？固定深度

00:09:24.320 --> 00:09:28.160
集群是一个um，而我当时也是

00:09:28.160 --> 00:09:31.600
在ipfs上弄乱npm我不想固定所有

00:09:31.600 --> 00:09:36.000
npm我绝对只想钉一点

00:09:36.000 --> 00:09:38.560
的npm

00:09:41.279 --> 00:09:45.040
是的，我的意思是，仍然是用例有点时髦

00:09:45.040 --> 00:09:52.399
因为您似乎更喜欢给人

00:09:52.399 --> 00:09:57.600
像是dag的特定子树，但是您需要然后又需要一个

00:09:57.600 --> 00:10:00.800
像第一个选择器一样描述选择器的方式

00:10:00.800 --> 00:10:05.519
路径只有一条，然后是整条树

00:10:05.519 --> 00:10:09.360
但是代替它，你可以做得更深一点，只是说我会像

00:10:09.360 --> 00:10:12.880
你知道我会像往下走两层，是的，那是我当时的样子

00:10:12.880 --> 00:10:15.839
问那个在我看来似乎没有多大意义，但后来我

00:10:15.839 --> 00:10:19.360
反正我们以后可以再谈谈

00:10:19.360 --> 00:10:22.000
我说的原因之一是，如果我们要去做某事，也许我们

00:10:22.000 --> 00:10:24.800
需要为更多的东西腾出空间

00:10:24.800 --> 00:10:28.000
可能更符合实际用例，例如

00:10:28.000 --> 00:10:33.200
指定选择器而不是深度的能力

00:10:33.200 --> 00:10:38.320
是的，我想唯一的问题是，我要说的是同一件事，也许是这样

00:10:38.320 --> 00:10:42.399
通过选择器可能很有意义，我们只是支持

00:10:42.399 --> 00:10:46.399
一次等于无穷大的向量

00:10:46.399 --> 00:10:52.320
嗯，随着时间的推移，我们可以向其他选择器添加支持

00:10:52.640 --> 00:10:55.920
是的，空选择器将是默认选择器，然后

00:10:55.920 --> 00:10:59.040
是的，我的意思是在那一点上我觉得我宁愿离开

00:10:59.040 --> 00:11:02.000
保持原样，然后再写一个迁移，因为选择器

00:11:02.000 --> 00:11:06.399
只有在ipld prime中才真正存在，而在

00:11:06.399 --> 00:11:10.640
ipfs代码库除了非常切线之外，所以我

00:11:10.640 --> 00:11:14.480
不想下去，所以我现在想抓住，以便

00:11:14.480 --> 00:11:17.440
我的感觉是，因为我们在猜测需求

00:11:17.440 --> 00:11:21.920
对于深度，也许最好等到实际达到目标为止

00:11:21.920 --> 00:11:25.120
我们过桥之前

00:11:25.920 --> 00:11:32.640
只是旋转ipod 3的顶部意味着什么？

00:11:32.880 --> 00:11:37.120
我认为这使得它更方便

00:11:37.680 --> 00:11:43.600
在像群集环境中，您想要拆分

00:11:43.600 --> 00:11:47.440
人们之间的那棵树

00:11:47.440 --> 00:11:50.720
您可以协调所有这些，但无需使用

00:11:50.720 --> 00:11:56.639
像每个节点一样直接销钉，就像允许

00:11:56.639 --> 00:12:00.160
要管理起来更容易一点，我不相信这是最好的还是唯一的

00:12:00.160 --> 00:12:02.399
我刚刚看到我们谈论过的方式

00:12:02.399 --> 00:12:08.160
之前，那是在js中，是的，所以这件事就是

00:12:08.160 --> 00:12:11.200
这个问题会干扰内容路由

00:12:11.200 --> 00:12:16.399
因为嗯，这真的有点像内容路由

00:12:16.399 --> 00:12:21.519
类型策略，所以问题是人们是否应该想到

00:12:21.519 --> 00:12:27.120
内容树的内容

00:12:27.120 --> 00:12:31.920
与内容有关，与内容的性质有关，并且

00:12:31.920 --> 00:12:36.560
与某种分区机制相对的地方

00:12:36.560 --> 00:12:40.160
您想提供什么而不是我们需要的东西

00:12:40.160 --> 00:12:43.360
你明白我的意思是对的

00:12:43.360 --> 00:12:47.600
干净的心理单声道，理想的模式是人们

00:12:47.600 --> 00:12:51.360
内容树，以便您可以组织内容

00:12:51.360 --> 00:12:55.600
而且你不组织它而不用担心自己会怎样

00:12:55.600 --> 00:13:01.200
您知道先服务，然后是内容内容路由系统

00:13:01.200 --> 00:13:08.720
可能会担心嗯，您知道将三者分开

00:13:08.720 --> 00:13:13.680
人，以此类推，我是说我只是嗯，是的，我是说

00:13:13.680 --> 00:13:16.800
我的想法也许是我们应该

00:13:16.800 --> 00:13:20.160
将东西保留在上面，以便我们在添加时可以进行迁移

00:13:20.160 --> 00:13:23.360
功能，但我也想回到

00:13:23.360 --> 00:13:26.240
这和最后的东西一样，但我

00:13:26.240 --> 00:13:28.880
不想为此拖延会议的其余时间，所以让我们继续

00:13:28.880 --> 00:13:34.079
前进，我们将看到时间如何变凉，所以我们谈到了赛道

00:13:34.079 --> 00:13:38.639
删除下一步是js改善可发现性和连接性

00:13:38.639 --> 00:13:42.399
是的，因此websocket现在已更新，

00:13:42.399 --> 00:13:45.680
最终我们将不在浏览器拨盘中的任何位置

00:13:45.680 --> 00:13:51.519
嗯，非dns websocket可以保护多个其他服务器，所以所有那些烦人的警告

00:13:51.519 --> 00:13:54.639
人们抱怨很多事情最终将消失

00:13:54.639 --> 00:13:58.320
就像我之前说的那样，现在我正在研究现实生活中的制作指南

00:13:58.320 --> 00:14:03.120
在更新方面，我从一开始就开始致力于

00:14:03.120 --> 00:14:07.040
上周，我基本上到了

00:14:07.040 --> 00:14:10.560
mysql集成数据库模型和查询大部分完成

00:14:10.560 --> 00:14:15.199
嗯，但现在我开始准备下一个脂质释放，我最终会去

00:14:15.199 --> 00:14:19.360
再次回到本周，我们的下一个得到它

00:14:19.360 --> 00:14:22.800
完成，仅此而已

00:14:25.040 --> 00:14:28.320
接下来是浏览器中的双向流和流错误

00:14:28.320 --> 00:14:31.600
所以这和上周一样，我不认为我有任何评论

00:14:31.600 --> 00:14:36.800
该公关意味着我非常难以置信，这意味着它是完美的，或者

00:14:36.800 --> 00:14:40.959
只是没有人有时间去看它，如果人们可以请他注视

00:14:40.959 --> 00:14:46.240
对此我将不胜感激，因此在此期间我拿到了dht

00:14:46.240 --> 00:14:50.079
我们正在尝试的工作

00:14:50.079 --> 00:14:56.240
在node.js中实现它适当地具有某种合理的性能

00:14:56.240 --> 00:15:00.639
保证查询将运行多长时间

00:15:00.639 --> 00:15:04.079
第一部分是我想确保您可拨号，因为这是什么

00:15:04.079 --> 00:15:06.880
如果您无法拨打电话，则具有DHT的功能

00:15:06.880 --> 00:15:11.680
所以我实现了一个使用upnp的快速网络管理器

00:15:11.680 --> 00:15:15.680
如果路由器支持，可以通过路由器打孔

00:15:15.680 --> 00:15:19.199
嗯，有一个公关开放，如果人们能看到的话，我将非常感激

00:15:19.199 --> 00:15:22.959
呃，如果这也是我们要去的方向

00:15:24.079 --> 00:15:27.120
我的意思是，如果您有的话，它仍然会非常有用

00:15:27.120 --> 00:15:32.480
如果dht客户端工作正常，并且没有人可拨打，

00:15:32.480 --> 00:15:38.399
没有人曾经在服务器模式下，可能像

00:15:38.399 --> 00:15:42.720
是的，我至少对我知道，似乎更多

00:15:42.720 --> 00:15:46.399
用户就像是在问这种事情的用户，即使在旅途中，我们也看到了

00:15:46.399 --> 00:15:49.600
就像客户端节点的数量比

00:15:49.600 --> 00:15:54.480
服务器节点，嗯，是的，就像

00:15:54.480 --> 00:15:58.240
抬头就像你开始担心像autonat之类的

00:15:58.240 --> 00:16:01.920
其他像服务器一样的东西，就像你可以说像啊，拧它

00:16:01.920 --> 00:16:04.880
我们要做客户端模式

00:16:05.279 --> 00:16:08.399
无论如何，upnp对于时尚内容都是有用的，因此

00:16:08.399 --> 00:16:14.880
那不是说不这样做，是的，我看过upnp的东西了

00:16:14.880 --> 00:16:17.920
我需要多看一点，我认为总体看起来不错，只是

00:16:17.920 --> 00:16:21.600
我们需要一些如何更新地址的方法

00:16:21.600 --> 00:16:24.560
进行更新，但我会再研究一下

00:16:24.560 --> 00:16:27.120
在那发表评论

00:16:28.480 --> 00:16:31.920
好的，那是高优先级计划的结束，呃，继续

00:16:31.920 --> 00:16:38.160
到目前为止的其他举措在Web UI中添加了流程

00:16:38.240 --> 00:16:44.880
嗯，这就是我，而我正在工作

00:16:44.880 --> 00:16:52.240
远程清洁的东西，所以本周在那里更新，我在下一个

00:16:52.240 --> 00:16:56.560
项目也是ipfs的打字稿集成

00:16:56.560 --> 00:17:00.720
嗯，所以现在有一个提案

00:17:00.720 --> 00:17:04.559
试图描述我们如何做事的那种尝试

00:17:04.559 --> 00:17:08.079
更方便，希望更好

00:17:08.079 --> 00:17:11.439
如果您关心任何打字稿内容，那么看起来可能会更糟

00:17:11.439 --> 00:17:15.919
在这里并提供评论um

00:17:15.919 --> 00:17:19.439
我更新了ipfs速度交换的请求请求

00:17:19.439 --> 00:17:24.720
雨果四处浏览后，呃，我想我可能必须再做一遍

00:17:24.720 --> 00:17:29.840
在它上面，然后有一个拉取请求

00:17:29.840 --> 00:17:36.000
关于删除api管理器，这使ipfs的输入更加容易

00:17:36.000 --> 00:17:40.000
um alex，如果您可以回顾那将是很棒的

00:17:40.000 --> 00:17:46.480
然后我将审核您的补丁，我认为我们需要发布pfsd cto

00:17:46.480 --> 00:17:49.760
因为他们只是没有获得包json中的所有网址

00:17:49.760 --> 00:17:53.840
哦，是的，雨果我们可以释放它，因为我真的不知道是否有任何原因

00:17:53.840 --> 00:17:57.280
不发布它并不取决于此处的更改，因此会使它成为

00:17:57.280 --> 00:18:00.960
对我来说，也很容易继续将更新合并到

00:18:00.960 --> 00:18:06.480
嗯，最后一个是什么哦，是的

00:18:06.480 --> 00:18:10.480
然后我在我们打字的东西中发现了回归

00:18:10.480 --> 00:18:15.600
呃，超时选项已经移动了

00:18:15.600 --> 00:18:19.840
Typescript有一些尴尬之处，它会看到

00:18:19.840 --> 00:18:24.559
不在模块内，但不能真正与它们正确配合，因此一切

00:18:24.559 --> 00:18:28.240
最终以任何形式结束，因此有一个拉动请求将其修复，呃

00:18:28.240 --> 00:18:33.520
也许它已经降落了，那是我在打字稿上的结尾我

00:18:33.520 --> 00:18:39.919
认为雨果在这里有更多更新

00:18:39.919 --> 00:18:46.400
好吧，是的，关于位交换的东西嗯，我们已经谈到了

00:18:46.400 --> 00:18:49.840
接口数据存储数据存储核心

00:18:49.840 --> 00:18:54.640
多其他人，多其他人

00:18:54.640 --> 00:18:59.600
显然，我认为我们同意，我们将做出重大改变

00:18:59.600 --> 00:19:06.640
恩，因为恩喜欢导出恩，创建类的函数

00:19:06.640 --> 00:19:11.440
就像以旧的javascript方式很难

00:19:11.440 --> 00:19:17.840
让打字稿理解，所以只需导出类

00:19:17.840 --> 00:19:21.200
更好，但这对于

00:19:21.200 --> 00:19:25.120
用户，我们将尝试使其变得更容易一点，但我认为我们

00:19:25.120 --> 00:19:30.640
会做的，嗯，有触摸屏错误报告

00:19:30.640 --> 00:19:34.919
已被标记为错误并计划用于

00:19:34.919 --> 00:19:41.840
4.2所以这对我们来说超级好，这将使很多事情变得轻松起来

00:19:41.840 --> 00:19:50.400
使用jstocs进行输入，以及使用talk的下一个版本

00:19:50.799 --> 00:19:55.120
看起来与普通gs相比可以更好地工作

00:19:55.120 --> 00:20:02.640
和js库存类型um或具有jsoc类型的通用gs来源

00:20:02.640 --> 00:20:08.159
所以这也很棒，是的

00:20:08.559 --> 00:20:11.760
在脂质坑部位我更新了呃

00:20:11.760 --> 00:20:15.600
我的公关使用上周发布的新想法工具

00:20:15.600 --> 00:20:19.200
现在我也可以使用类型检查脚本

00:20:19.200 --> 00:20:26.640
我们在类型上有400多个错误，但我修复了大多数错误，但

00:20:26.640 --> 00:20:30.240
现在我需要去界面解锁

00:20:30.240 --> 00:20:33.919
其余的，因为我们有诸如运输和

00:20:33.919 --> 00:20:38.480
混合器，然后我们从那里访问方法

00:20:38.480 --> 00:20:42.159
而且我们没有针对它们的声明，因此基本上我将需要

00:20:42.159 --> 00:20:47.760
首先为每个接口创建一个类型声明，然后我将能够

00:20:47.760 --> 00:20:52.960
完成删除vpr就是这样

00:20:53.520 --> 00:20:56.799
实际上有一件事可能值得考虑

00:20:56.799 --> 00:21:00.640
我想做的一件事是组件之间的接口

00:21:00.640 --> 00:21:05.200
将它们定义为数据存储区之类的接口，以及其他一些接口

00:21:05.200 --> 00:21:08.640
运输的东西可能是有道理的

00:21:08.640 --> 00:21:12.640
在那里也很有意义，所以我们根据接口而不是接口进行编码

00:21:12.640 --> 00:21:16.559
反对我们自己的实现方式，这些实现方式取决于内部怪癖

00:21:16.559 --> 00:21:20.880
因为这样您就可以看到接口是否未完成并且有东西，那么我们

00:21:20.880 --> 00:21:22.640
应该像您在界面上进行交易

00:21:22.640 --> 00:21:27.919
改善它，而不是仅仅找到后门，是的，我在做

00:21:27.919 --> 00:21:31.360
也与接口，因为从

00:21:31.360 --> 00:21:35.600
基本上是椭圆形的，例如运输经理

00:21:35.600 --> 00:21:38.880
提供运输，但随后在运输经理内部

00:21:38.880 --> 00:21:42.640
就像一切都是交通工具，而不是Web套接字或tcp

00:21:42.640 --> 00:21:46.720
因此，您需要具有接口，以便可以使用并具有类型

00:21:46.720 --> 00:21:52.559
一般来说，是的，所以我认为决定在何处会很有趣

00:21:52.559 --> 00:21:57.120
我们保留这些接口文件吗，因为现在我有点

00:21:57.120 --> 00:22:00.400
我在ipfs仓库中的拉取请求中

00:22:00.400 --> 00:22:05.120
他们并不真正属于那里，所以也许我们需要一些包裹

00:22:05.120 --> 00:22:09.360
在脂质2p中有类似界面的东西

00:22:09.360 --> 00:22:13.919
脂质接口仓库，然后我们有一个接口文件夹

00:22:13.919 --> 00:22:19.679
而且我正在为每个文件夹添加类型，每个接口都有一个

00:22:19.679 --> 00:22:22.000
谢谢

00:22:24.960 --> 00:22:30.000
接下来是使用服务工作者提供的共享节点

00:22:30.159 --> 00:22:37.919
嗯，是的，我做了另一遍更新，将请求请求更新为

00:22:37.919 --> 00:22:41.360
解决三个视图评论，我不确定

00:22:41.360 --> 00:22:45.120
你不知道我是否必须看一下

00:22:45.120 --> 00:22:52.400
对于合并的示例，尚未进行审阅

00:22:52.400 --> 00:22:56.799
是的，好了，那么就完成了

00:22:56.960 --> 00:23:00.960
呃baja 2支持

00:23:04.400 --> 00:23:08.559
这是我们每周一次，他们还没有决定释放

00:23:08.559 --> 00:23:12.720
事情还好吧，我唯一要做的就是呃删除了一些

00:23:12.720 --> 00:23:15.520
剖析a 2的剖析信息

00:23:15.520 --> 00:23:18.320
合并前一阵子删除了，以便我们没有任何

00:23:18.320 --> 00:23:23.120
引用badge 2，所以他们并没有移动，只是检查了一下

00:23:23.120 --> 00:23:25.600
今天早上

00:23:27.280 --> 00:23:34.159
嗯，没有遍历螺母的更新SV 1.5的Unix上没有更新

00:23:34.159 --> 00:23:38.000
当时有意识，我确实想向前走谈论

00:23:38.000 --> 00:23:44.559
ipld一点点去ipfs gc改进一些原型工作

00:23:44.559 --> 00:23:51.120
但是还没有什么要报告的。。。。。。。。。。。。。。

00:23:51.120 --> 00:23:55.279
因为已经有一段时间了，但没有，他们做了一些原型设计工作，

00:23:55.279 --> 00:23:57.520
我将讨论的其他几件事

00:23:57.520 --> 00:24:01.360
与那些会关心它的人

00:24:01.360 --> 00:24:07.440
无论如何，是的，没有什么可报告的，除了那

00:24:10.080 --> 00:24:14.400
将um纳入其他内容设计审核建议中

00:24:14.400 --> 00:24:18.880
恩，请看一下我的双向流媒体公关

00:24:18.880 --> 00:24:23.279
嗯，拦截器并询问

00:24:23.520 --> 00:24:26.080
问题

00:24:26.720 --> 00:24:33.360
停车场，嗯，我问一个抱歉，嗯，我们可以吗

00:24:33.360 --> 00:24:38.240
在下周的会议之后创建这些会议记录，以便

00:24:38.240 --> 00:24:41.919
当我做事情时，我可以在那里添加节点，而不是像

00:24:41.919 --> 00:24:46.240
临时缓冲区，然后尝试将它们放入

00:24:46.240 --> 00:24:50.640
在见面之前，我认为如果这样做的话，将会非常有帮助

00:24:50.640 --> 00:24:55.039
不，谢谢

00:24:55.760 --> 00:25:00.320
好吧，我想我没有问过停车场，那是

00:25:00.320 --> 00:25:04.880
呃er​​ic链接不是你不是公开的，我不知道那是故意的

00:25:04.880 --> 00:25:08.400
还是不，哦，太好了，我不是很用Google文档

00:25:08.400 --> 00:25:12.080
很多，所以当我这样做时，坦率地说，我不知道我在做什么

00:25:12.080 --> 00:25:16.799
特别是使用访问控制um，所以我将弄清楚如何解决该问题

00:25:16.799 --> 00:25:20.159
稍后，但是有一个链接，您可以在其中

00:25:20.159 --> 00:25:22.080
人们应该能够看到，每个人都会看到

00:25:22.080 --> 00:25:28.159
后来，一旦我解决了这个问题，ipld小组就会弄清楚我们的工作重点是什么

00:25:28.159 --> 00:25:31.200
应该在来年，并尝试提前做一些笔记

00:25:31.200 --> 00:25:35.520
关于所有通常的上帝警告，我们都知道

00:25:35.520 --> 00:25:38.640
而且提前一年瀑布规划可能会失败，我们也将

00:25:38.640 --> 00:25:43.120
敏捷等，但我们正在尝试收集一些

00:25:43.120 --> 00:25:47.039
我们绝对知道的事情应该是高度优先的，而我已经

00:25:47.039 --> 00:25:53.039
开始将它们收集到码头中，因此其中一些可能会引起人们的兴趣

00:25:53.039 --> 00:25:57.520
这里的人可能不是

00:25:57.520 --> 00:26:00.799
这可能至少与一点相关性，特别是对于那些将要成为

00:26:00.799 --> 00:26:04.320
考虑我们如何集成最新的ipl代码库

00:26:04.320 --> 00:26:08.080
我认为特别是ipfs进入了

00:26:08.080 --> 00:26:14.080
那里有一些装修，如果有人在工作

00:26:14.080 --> 00:26:17.760
在ipfs上可以想到，这应该是我们的当务之急

00:26:17.760 --> 00:26:21.039
或支持听到您的想法会很高兴

00:26:21.039 --> 00:26:26.240
在那方面，也许尽早将其纳入我们的计划中，否则我想那是

00:26:26.240 --> 00:26:29.279
如果您找到大型计划文件，就可以了

00:26:29.279 --> 00:26:33.279
有趣，我有一份礼物给你

00:26:35.520 --> 00:26:41.520
您希望如何在文档注释中获得反馈，或者如何称呼它

00:26:41.520 --> 00:26:46.159
更改建议或确定

00:26:46.159 --> 00:26:53.039
我不知道我之前声明的Google文档是如何工作的

00:26:53.039 --> 00:26:55.919
听起来像是对您有意义的工作流程，这意味着，如果您

00:26:55.919 --> 00:26:58.880
有问题，然后你发表评论，如果你像我想你

00:26:58.880 --> 00:27:02.799
应该添加这个，然后您使用建议

00:27:03.600 --> 00:27:10.960
是的，汉娜（Hannah）和亚历克斯·克里克（Alex Alexekeekshank）也将在下周再回来，所以我们可以

00:27:10.960 --> 00:27:15.120
与他们保持同步，并弄清楚我们需要做的一切

00:27:15.120 --> 00:27:24.799
ipfs um里的所有IPL素都进去了，我还有另外一件我想做的事

00:27:24.799 --> 00:27:28.240
指出与这个主题无关

00:27:28.240 --> 00:27:31.520
嗯，因为我已经在做更多的工作了

00:27:31.520 --> 00:27:38.159
远程固定的东西，我确实发现某些api的东西有点尴尬，我

00:27:38.159 --> 00:27:40.720
想知道，然后我和莱德尔交谈，看来

00:27:40.720 --> 00:27:46.399
决定是有意的，目的是在以后修正它们

00:27:46.399 --> 00:27:50.960
我将建议在我们说的地方有一个文档是很好的

00:27:50.960 --> 00:27:54.559
这是我们想要成为的地方以及我们想要成为的样子，但是我们

00:27:54.559 --> 00:27:59.520
决定现在就这样做，所以很容易与所有人共享

00:27:59.520 --> 00:28:03.360
参与到能够看到它去哪里和什么

00:28:03.360 --> 00:28:10.080
最终目标是嗯，我相信我们有这个

00:28:10.080 --> 00:28:13.200
像hackpad一样的人造黄油文档

00:28:13.200 --> 00:28:19.120
一个远程销，然后我们尝试对本地销的外观进行建模

00:28:19.120 --> 00:28:21.840
杰克·杜德（Jake dude）是的，是的，所以我们有一个hack md

00:28:21.840 --> 00:28:26.640
我们试图从基本上

00:28:26.640 --> 00:28:32.720
当js ipfs像我们想要的ipfs一样时，就去ipfs

00:28:32.720 --> 00:28:34.880
看起来像这样的api允许我们执行此操作

00:28:34.880 --> 00:28:39.520
我怀疑我不确定您要到达的要点或

00:28:39.520 --> 00:28:42.799
无论是像我们不知道的事情

00:28:42.799 --> 00:28:46.000
不使用像lupita p流进行身份验证

00:28:46.000 --> 00:28:50.240
或者是类似的情况，还是有成组的ACL，或者是否

00:28:50.240 --> 00:28:54.080
就像您知道的事情一样，它可以将选择器传递给

00:28:54.080 --> 00:28:58.159
笔，所以我发现了两件事

00:28:58.159 --> 00:29:01.600
尴尬首先是让这个遥控器和

00:29:01.600 --> 00:29:04.960
我认为我会更自然地使用本地名称空间

00:29:04.960 --> 00:29:09.760
固定服务是说ipfs固定并指定目标磨损，这可能是

00:29:09.760 --> 00:29:12.799
我命名的本地和其他一些服务

00:29:12.799 --> 00:29:16.480
或喜欢遵循这些思路的东西，而不必

00:29:16.480 --> 00:29:20.880
程序上去，像钉住我想去的每个地方

00:29:20.880 --> 00:29:26.960
另一个是请求ID，我觉得很奇怪

00:29:26.960 --> 00:29:30.720
就像服务提供商生成一个，而它是从

00:29:30.720 --> 00:29:38.240
固定自己，就像我们可以使用cids这样

00:29:39.039 --> 00:29:44.159
是的，我的意思是，我不知道那是不是

00:29:44.799 --> 00:29:49.600
我们可以继续前进，因为我不知道是否严格要求

00:29:49.600 --> 00:29:54.159
现在，我们只是告诉人们使用独特的东西，

00:29:54.159 --> 00:29:57.200
我们可以回来，我的意思是我们可以回到那个，但是

00:29:57.200 --> 00:30:01.440
一个问题是，现在客户需要额外记账，我

00:30:01.440 --> 00:30:05.039
不能只检查这个cid东西是我要喜欢的

00:30:05.039 --> 00:30:09.279
在事物和请求ID之间建立这种映射是生成的，

00:30:09.279 --> 00:30:11.200
在某些时候，我还必须申请清理

00:30:11.200 --> 00:30:15.200
是的，想法是能够支持的事情之一

00:30:15.200 --> 00:30:18.960
多个针，我们有多个针用于同一个cid

00:30:18.960 --> 00:30:24.960
所以使用不同的独特视图是的，但是就像您创建图钉时一样

00:30:24.960 --> 00:30:27.440
对象，它有一堆其他领域，所以我想

00:30:27.440 --> 00:30:31.279
他们之间应该有一些不同的东西，所以他们会导致

00:30:31.279 --> 00:30:33.840
不同的cid，或者如果没有，可能应该有

00:30:33.840 --> 00:30:40.799
感觉像我不知道，也许你分配了另外的东西

00:30:40.799 --> 00:30:46.399
所以你你这是问题所在，所以你建议你要

00:30:46.399 --> 00:30:49.520
首先，您要假设这些引脚应具有

00:30:49.520 --> 00:30:52.720
他们里面有不同的东西

00:30:52.720 --> 00:30:58.159
我猜是引用的假设，但您是否建议像别针一样

00:30:58.159 --> 00:31:01.679
id应该是所有事物的某种哈希

00:31:01.679 --> 00:31:06.159
是的，所以我们确实有别针对象

00:31:06.159 --> 00:31:10.640
并不是真的，但是我们假装是这样，我们有别针对象

00:31:10.640 --> 00:31:14.480
元数据和许多其他内容，实际上已链接到cid，所以

00:31:14.480 --> 00:31:17.200
我说的也许是别针

00:31:17.200 --> 00:31:20.880
由某人生成的请求ID标识，但应

00:31:20.880 --> 00:31:24.240
由该事物的哈希标识，如果您想固定

00:31:24.240 --> 00:31:28.720
和狗一样的东西

00:31:28.720 --> 00:31:32.000
两个不同的针脚使它有所不同

00:31:32.000 --> 00:31:35.679
这取决于你，我认为可能是什么

00:31:35.679 --> 00:31:40.159
您可能会遇到一些类似的问题，例如我试图考虑是否要

00:31:40.159 --> 00:31:45.279
之类的因果关系或时间问题，因为您想要随机性，比如说您

00:31:45.279 --> 00:31:49.120
只是扔了一个随机数，所以这是问题所在

00:31:49.120 --> 00:31:52.640
是竞赛条件，因为您可以异步访问

00:31:52.640 --> 00:31:57.440
固定服务，如果您说类似删除我的

00:31:57.440 --> 00:32:04.240
Pin um um like a like

00:32:04.240 --> 00:32:09.279
我想它会变成一个uh项目按钮，所以如果您执行删除操作，实际上我们就是您

00:32:09.279 --> 00:32:14.080
以及一个广告和唯一的唯一编号

00:32:14.080 --> 00:32:19.039
被散列的事物的内部是在客户端生成的，然后

00:32:19.039 --> 00:32:22.080
那你就麻烦了，因为现在你不知道应该做什么

00:32:22.080 --> 00:32:24.799
首先发生

00:32:25.360 --> 00:32:29.760
所以随着时间的流逝，我们只是有点像这样

00:32:29.760 --> 00:32:34.159
有很多事情我们可以不时地做

00:32:34.159 --> 00:32:37.360
还有把东西拿出来的mbp范围

00:32:37.360 --> 00:32:40.559
我们现在正在做的事情，然后是很大的范围

00:32:40.559 --> 00:32:45.200
这可能是基于lib p2p的交换

00:32:45.200 --> 00:32:49.440
可能实际上在做线程db之类的线程

00:32:49.440 --> 00:32:53.519
实际的固定服务类似于今年初以来的pi和sky

00:32:53.519 --> 00:32:57.200
待定的服务，所以我同意所有内容汇总

00:32:57.200 --> 00:33:01.760
我们至少应该尝试做的此类信息收集以下内容的摘要：

00:33:01.760 --> 00:33:04.320
这尤其像我们在今年总结之前

00:33:04.320 --> 00:33:07.200
这样我们就知道人们不去度假，然后完全回来

00:33:07.200 --> 00:33:11.039
忘记我们正在做的事情，我们将如何创建这种思想流

00:33:11.039 --> 00:33:14.399
嘿，今年早些时候我们有别住了lydell

00:33:14.399 --> 00:33:19.679
为工作流创建了扩展坞，我们为

00:33:19.679 --> 00:33:23.039
像那些各种各样的东西，让我们来总结一下像

00:33:23.039 --> 00:33:26.080
好的，当我们回来重温这个过程时

00:33:26.080 --> 00:33:29.440
希望在明年年初改善内容路由，

00:33:29.440 --> 00:33:33.279
应该长期固定下来进行对话，以便我们可以

00:33:33.279 --> 00:33:37.519
然后用...写出周到的东西

00:33:37.519 --> 00:33:41.200
现在使该功能正常工作，以便我们可以迁移到

00:33:41.200 --> 00:33:44.720
是的，将来会更好地考虑周全，是的，这就是

00:33:44.720 --> 00:33:47.679
基本上我要的是特别是像现在这样

00:33:47.679 --> 00:33:49.760
有关事物为何以某种特定方式的更多反馈

00:33:49.760 --> 00:33:53.760
有一份我能读的文件比我能读的文件更有效

00:33:53.760 --> 00:33:56.960
知道推理是什么

00:33:57.120 --> 00:34:01.440
我也想像是对与ipfs api相关的事情的简要介绍

00:34:01.440 --> 00:34:04.720
至少在旅途中我们有一个非常困难的时期

00:34:04.720 --> 00:34:11.359
嗯，但是就像在不破坏每个人的流程的情况下更新更新api一样，所以我们

00:34:11.359 --> 00:34:15.359
有一些我们已经提出了一些建议

00:34:15.359 --> 00:34:17.839
就像我们可能如何解决这个问题，但这有点

00:34:17.839 --> 00:34:21.839
事情看起来有点尴尬的原因是因为逐步发展

00:34:21.839 --> 00:34:25.520
没有让一切都破灭，我们需要

00:34:25.520 --> 00:34:28.240
使我们的升级板更容易，但这就像呃

00:34:28.240 --> 00:34:31.599
这是路线图上的另一件事

00:34:32.159 --> 00:34:39.359
请看一下我的grpc pr，它对api很有帮助哦，天哪

00:34:39.359 --> 00:34:45.919
我主观上说这是更好的方法

00:34:45.919 --> 00:34:51.520
嗯，随着时间的流逝，我想我们应该把这个结束了，谢谢

00:34:51.520 --> 00:34:55.839
你来了，每个人都请把你的异步更新

00:34:55.839 --> 00:34:59.440
在笔记中，让我们知道您在被阻止的地方一直在做什么

00:34:59.440 --> 00:35:01.920
你接下来要做什么？就像每个人都想

00:35:01.920 --> 00:35:05.520
知道让我们来谈论这个东西吧太酷了，非常感谢大家

00:35:05.520 --> 00:35:08.079
这是ibf每周同步的核心实现

00:35:08.079 --> 00:35:13.440
11月30日，星期一，下周见

00:35:13.640 --> 00:35:16.640
再见

