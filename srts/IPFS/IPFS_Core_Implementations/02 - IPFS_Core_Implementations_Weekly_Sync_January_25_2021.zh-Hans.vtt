WEBVTT
Kind: captions
Language: zh-Hans

00:00:01.199 --> 00:00:04.240
大家好，欢迎来到ipfs核心实现

00:00:04.240 --> 00:00:09.440
2021年1月25日，星期一，每周同步

00:00:09.440 --> 00:00:12.559
您的主持人，我们将谈论我们的高优先级计划

00:00:12.559 --> 00:00:16.320
其他举措停车场质量检查，如果您之前曾去过这些事情

00:00:16.320 --> 00:00:21.520
现在知道演习了，我们可以从高优先级开始

00:00:21.520 --> 00:00:24.720
第一项即将推出并已发货的计划

00:00:24.720 --> 00:00:30.720
发布出货

00:00:30.720 --> 00:00:36.559
所以我们希望本周能得到下一个rc，而上周是

00:00:36.559 --> 00:00:39.040
你知道团队是全神贯注的

00:00:39.040 --> 00:00:44.000
与研究的东西，但是嗯，我们将尝试获得

00:00:44.000 --> 00:00:48.079
包括本周的更新版本

00:00:48.079 --> 00:00:53.680
ips分发站点，可以进行部署并让人们玩

00:00:53.680 --> 00:00:59.840
轻松得多

00:01:00.800 --> 00:01:04.159
还应包括升级后的迁移二进制文件

00:01:04.159 --> 00:01:07.280
迁移到下一个Uh版本

00:01:07.280 --> 00:01:11.760
如果碰巧有大量的别针，速度会更快

00:01:11.760 --> 00:01:15.040
是的，旁路正在加载到内存中，这不是

00:01:15.040 --> 00:01:18.560
这不是迁移大修，只是要清楚这是

00:01:18.560 --> 00:01:22.880
更高版本，这是当前正在等待审查的内容，所以只是不想

00:01:22.880 --> 00:01:29.200
将那些小修理与大修混为一谈

00:01:34.720 --> 00:01:44.720
下一步很酷，是将服务固定在gui端，我们正在接线

00:01:44.720 --> 00:01:50.799
设置和文件屏幕，以准备发布候选版本2

00:01:50.880 --> 00:01:55.680
我们还计划在不合并服务集成的情况下发布Web ui版本

00:01:55.680 --> 00:02:03.920
取消释放与固定服务的时间

00:02:03.920 --> 00:02:07.200
可用，也可以处理过渡期

00:02:07.200 --> 00:02:10.720
当Web ui可以与后端一起使用时

00:02:10.720 --> 00:02:15.520
我相信没有引脚远程命令

00:02:15.520 --> 00:02:22.400
mfs自动固定处于与Web ui uh兼容的状态，但

00:02:22.400 --> 00:02:26.480
我们缺少文档，我们需要使用

00:02:26.480 --> 00:02:34.319
皮纳塔嗯，我想就是我的结局

00:02:34.319 --> 00:02:39.040
嗯，针对js ipfs的pr为http客户端添加了命令

00:02:39.040 --> 00:02:43.040
嗯，我给了它一次，一切看起来很好，呃，只是有些冲突

00:02:43.040 --> 00:02:45.040
需要解决，我认为这将是

00:02:45.040 --> 00:02:51.599
琐碎的是的，我想我们是否可以像评论合并和运送那样

00:02:51.599 --> 00:02:55.200
这将使Web UI上的事情变得更加轻松

00:02:55.200 --> 00:02:59.120
而且因为npm不支持那些

00:02:59.120 --> 00:03:06.319
如果项目位于子目录中，则来自分支的uh依赖项

00:03:06.319 --> 00:03:10.000
我现在只是ipfs使用，所以

00:03:10.000 --> 00:03:14.640
引入了额外的测试步骤，是的，我希望那应该得到

00:03:14.640 --> 00:03:18.400
更好的是像npm进入了工作区游戏，所以希望他们会

00:03:18.400 --> 00:03:20.720
锻炼并使其正常工作，是的

00:03:20.720 --> 00:03:24.080
嗯，就像我在评论中说的那样，看起来不错，只是需要解决冲突

00:03:24.080 --> 00:03:26.159
出去

00:03:27.599 --> 00:03:34.640
酷本地固定是下一个没有什么没有什么

00:03:34.640 --> 00:03:39.040
特别是在这里，呃，这是我想停下来，直到我们决定是否

00:03:39.040 --> 00:03:44.879
我们是呃，如果我们要分配更多的时间来

00:03:44.879 --> 00:03:51.040
更改本地固定的api，并为此添加所有新的爵士乐命令

00:03:55.760 --> 00:03:59.920
足够公平了，出现了野生的花花公子，您可以更新数据

00:03:59.920 --> 00:04:05.360
传输速度提高是的，所以我只是复制粘贴了

00:04:05.360 --> 00:04:09.360
嗯，来自整理电子邮件的内容，虽然有点长，但是我们

00:04:09.360 --> 00:04:14.000
嗯，事情进展顺利，我们已经发货了。

00:04:14.000 --> 00:04:17.199
我的意思是我们展示了很多对graphsync的改进而不是

00:04:17.199 --> 00:04:21.759
与数据传输直接相关，但是有点像准备工作

00:04:21.759 --> 00:04:24.160
整理所有东西，我们已经开始进行测试

00:04:24.160 --> 00:04:28.000
um的基础设施已经到位，我们正在采取一些初步措施

00:04:28.000 --> 00:04:31.040
朝着实现我们所希望的方向迈出的良好解决方案

00:04:31.040 --> 00:04:35.840
嗯，我一直在想，我希望我对我们的解决方案感到非常满意

00:04:35.840 --> 00:04:39.120
提出最困难的部分

00:04:39.120 --> 00:04:42.720
很可能很难找到能够提供出色解决方案的解决方案

00:04:42.720 --> 00:04:46.800
不需要客户或需要的情况下进行改进

00:04:46.800 --> 00:04:50.080
客户进行升级以获得改进或需要网络

00:04:50.080 --> 00:04:53.919
升级以获得最佳，最大的进步，因此

00:04:53.919 --> 00:04:56.960
这将是一个挑战，因为您知道

00:04:56.960 --> 00:05:03.199
试图与ipfs和bitswap和graphsync中存在的内容一起使用

00:05:03.199 --> 00:05:08.160
部署ipfs 0.5或其他任何东西都会很困难

00:05:08.160 --> 00:05:11.759
进行重大改进，但是我们会尽力而为

00:05:11.759 --> 00:05:18.960
所以，嗯，所以我们正在取得进步，嗯

00:05:18.960 --> 00:05:22.639
很棒，我们安排好同步了吗

00:05:22.639 --> 00:05:25.199
为了明天

00:05:31.840 --> 00:05:36.720
下一个是js增加了可发现性和连接性

00:05:36.720 --> 00:05:40.320
是的，所以我开始考虑整个连接管理器

00:05:40.320 --> 00:05:44.160
上周的设计我正在制定设计方案

00:05:44.160 --> 00:05:48.560
为此，它应该已经准备好了

00:05:48.560 --> 00:05:52.960
征询本周的反馈意见，所以我很可能会带欧洲的爵士乐迷们

00:05:52.960 --> 00:05:56.639
也这样做，但可能对

00:05:56.639 --> 00:06:00.479
下周进行设计讨论

00:06:00.479 --> 00:06:05.520
让我们看看其中之一

00:06:05.520 --> 00:06:09.199
我们刚才在谈论id就像是

00:06:09.199 --> 00:06:12.800
该小组的下一个优先事项，并试图让所有人

00:06:12.800 --> 00:06:16.639
回到专注于更多的集体问题上，而不是每个人

00:06:16.639 --> 00:06:20.080
放在不同的东西上，所以我们谈论的一些东西是

00:06:20.080 --> 00:06:22.560
就像完成一起工作来完成

00:06:22.560 --> 00:06:25.919
打字稿的东西，然后看看我们需要做什么

00:06:25.919 --> 00:06:31.440
修复node.js中的dht或至少获得更高的性能um

00:06:31.440 --> 00:06:34.880
因此，我们可能会尝试在此方面大量涌现，并可能会借用

00:06:34.880 --> 00:06:39.039
像batara或dean这样的人

00:06:39.039 --> 00:06:43.520
去年，dht的很多工作有助于缓解这些差距，因此我们

00:06:43.520 --> 00:06:49.120
可以更快地完成这项工作，但是一无所获，所以继续

00:06:49.120 --> 00:06:53.599
提出您的建议，但我们可能要重点关注，以便我们可以

00:06:53.599 --> 00:06:57.360
就像你雨果和嗯亚历克斯都能够

00:06:57.360 --> 00:07:02.880
一起在dht上工作，是的，但是你不认为我们

00:07:02.880 --> 00:07:06.479
至少应该在...上有一些改进

00:07:06.479 --> 00:07:11.120
对adhd很重要的连接管理器，我们将

00:07:11.120 --> 00:07:14.639
需要研究一下，找出对dht所做的更改是什么

00:07:14.639 --> 00:07:17.759
以及我们需要执行的操作，但是再次正确

00:07:17.759 --> 00:07:21.440
这可能涉及专注于dht并不意味着在dht中有三个人

00:07:21.440 --> 00:07:24.319
反弹吧，让我们确保我们正在修复所有

00:07:24.319 --> 00:07:27.199
这些系统串联在一起以达到目标

00:07:27.199 --> 00:07:31.840
性能更高的jsthd

00:07:32.720 --> 00:07:36.319
一般而言，您不需要的dht

00:07:36.319 --> 00:07:39.919
每个与您保持联系的人都留在您的路由表中

00:07:39.919 --> 00:07:45.840
想大大减轻连接压力

00:07:53.440 --> 00:07:56.560
好的，这就是混合优先级计划的结束

00:07:56.560 --> 00:08:02.400
继续进行其他举措打字稿集成是第一个

00:08:06.160 --> 00:08:13.039
嘿，是我，好吧，所以我们合并了

00:08:13.039 --> 00:08:19.599
一堆pr的数据存储区一堆的数据存储区fs数据存储区

00:08:19.599 --> 00:08:23.680
级数据存储核心接口

00:08:23.680 --> 00:08:30.160
数据存储了一堆东西，所以有了这个高级repo类型的spr

00:08:30.160 --> 00:08:34.479
几乎完成了，只是失踪了

00:08:34.479 --> 00:08:38.719
就像多动作同步中的两个公关

00:08:38.719 --> 00:08:43.680
gdpr，而我仍在考虑如何处理

00:08:43.680 --> 00:08:48.480
迁移现在暂时不理会它，或者不进行迁移，所以如果您想

00:08:48.480 --> 00:08:54.160
帮助我解决问题，我们最终想通了

00:08:54.160 --> 00:08:57.839
怎么做正确的文档

00:08:57.839 --> 00:09:01.200
呃是从生成的文档

00:09:01.200 --> 00:09:04.320
从类型自动生成

00:09:04.320 --> 00:09:11.279
嗯，现在可以正常工作了，所以我们用来做的工具释放了

00:09:11.279 --> 00:09:15.040
新版本，所以现在它实际上可以更好地理解

00:09:15.040 --> 00:09:19.839
通用的js代码，而不只是esm

00:09:19.839 --> 00:09:26.320
所以我们最终将可以在没有api的情况下拥有大量库存

00:09:26.320 --> 00:09:29.600
像跳了铣削的希望，使它成为现实

00:09:29.600 --> 00:09:35.440
看起来不错，所以很好玩，是的，我认为

00:09:35.440 --> 00:09:37.839
我

00:09:38.080 --> 00:09:42.080
嗯，我开始从事肖像和出口商的unix fs的工作

00:09:42.080 --> 00:09:48.240
嗯，这意味着我开始研究ipod doug pb，这意味着我开始了

00:09:48.240 --> 00:09:54.000
在质子上工作，我现在正陷入地狱

00:09:55.600 --> 00:10:00.399
非常欢迎来到我的世界，是的，所以所有的数据都这么充实

00:10:00.399 --> 00:10:04.079
解锁仓库，然后解锁bitswap

00:10:04.079 --> 00:10:05.760
意味着我们可以开始将这些东西冒泡了

00:10:05.760 --> 00:10:10.320
取决于um到ipfs，这将会很棒

00:10:11.120 --> 00:10:16.640
酷的下一步是badge不是两个而是三个支持

00:10:16.640 --> 00:10:22.000
呃，目前还没有任何更新，嗯，我认为我们仍然是帕尔默

00:10:22.000 --> 00:10:24.079
等待我们要继续创建一个

00:10:24.079 --> 00:10:27.440
那个新的回购协议，我认为还没有决定

00:10:27.440 --> 00:10:32.399
我会再请教长，是的，我想

00:10:32.399 --> 00:10:36.000
我们应该写一个问题，并从中获得一些反馈

00:10:36.000 --> 00:10:41.519
你知道badge 2使用乡亲，但我认为与人交谈后

00:10:41.519 --> 00:10:44.399
丹尼尔（daniel）大概是最好的选择

00:10:44.399 --> 00:10:48.320
分支就像分支版本控制一样使用

00:10:48.320 --> 00:10:52.959
释放并释放标签呃，是的，我相信他

00:10:52.959 --> 00:10:56.640
即使像网站这样的go mod就像我们

00:10:56.640 --> 00:11:00.320
建议使用像您知道的子文件夹那样

00:11:00.320 --> 00:11:03.040
不再是个好主意，因为

00:11:03.040 --> 00:11:07.519
gopath不再在任何地方使用

00:11:08.399 --> 00:11:14.079
会点头，所以他似乎同意，是的，我想我认为，唯一真正的

00:11:14.079 --> 00:11:16.240
当时的问题是我们是否要提出另一个

00:11:16.240 --> 00:11:19.760
the中的标签或分支以回购还是我们

00:11:19.760 --> 00:11:23.120
试图将所有这些不同版本的of合并为just

00:11:23.120 --> 00:11:25.279
回购这将更有意义，但

00:11:25.279 --> 00:11:28.000
我们已经采用了重新发布变态的另一种方式

00:11:28.000 --> 00:11:34.079
嗯，就像你为什么要把badge 3拿出来

00:11:34.079 --> 00:11:38.480
r 2回购开始有点不直观是不幸的

00:11:38.480 --> 00:11:41.279
正确的是，如果我们要使用一个回购协议，我会

00:11:41.279 --> 00:11:43.200
可能将它们全部放入the仓库中

00:11:43.200 --> 00:11:50.560
为了理智，是的，还是，或者我们只是，或者我们可以

00:11:50.560 --> 00:11:55.920
忘了that存在两个回购协议只是弃用它，是的，这是

00:11:55.920 --> 00:11:59.440
您在哪里做，也许这是最简单的，这就是为什么我们会使用

00:11:59.440 --> 00:12:05.360
一个github问题和and回购，然后从那里继续正确

00:12:09.120 --> 00:12:12.959
嗯接下来是螺母遍历

00:12:14.079 --> 00:12:19.920
是的，所以Arsh拥有了tcp的pac poc和快速打孔功能

00:12:19.920 --> 00:12:22.399
嗯，他目前正在清理

00:12:22.399 --> 00:12:25.279
那些公关，因为他做了很多黑客来获得

00:12:25.279 --> 00:12:29.680
围绕一些接口，所以他正在努力清理它

00:12:29.680 --> 00:12:33.920
然后我们只需要对即时消息客户端多流进行一些评论

00:12:33.920 --> 00:12:39.600
规格书的扩展正在考虑将一个

00:12:39.600 --> 00:12:43.760
dht上打孔协调的概念证明

00:12:43.760 --> 00:12:47.279
服务器的想法是，如果我们可以合理地

00:12:47.279 --> 00:12:51.680
允许dht服务器执行有限带宽的打孔

00:12:51.680 --> 00:12:55.519
协调，那么我们就可以利用现有的

00:12:55.519 --> 00:12:58.399
基础设施要做很多事情而不是运行

00:12:58.399 --> 00:13:00.959
昂贵的继电器，所以他正在看的东西之一

00:13:00.959 --> 00:13:06.000
要做的是确定实际的类似带宽速率

00:13:06.000 --> 00:13:10.000
是为了进行协调，因此我们可以根据与

00:13:10.000 --> 00:13:13.120
dht服务器多少协调多少流量

00:13:13.120 --> 00:13:18.079
我们是否期望通过这些来协调打孔的数量，所以

00:13:18.079 --> 00:13:22.000
现在证明概念不是我们最终会使用它，而是

00:13:22.000 --> 00:13:26.079
一旦有了这些数据，我们就可以确定这是否值得

00:13:26.079 --> 00:13:34.399
走那条路，那看起来像什么

00:13:34.399 --> 00:13:40.720
这正在评估是否具有dht节点作为您知道的升级

00:13:40.720 --> 00:13:44.480
中继甚至是可行的，就像我们做了

00:13:44.480 --> 00:13:47.920
dht中继上的带宽速率限制

00:13:47.920 --> 00:13:51.040
因为就像我们不想将它们作为继电器打开一样

00:13:51.040 --> 00:13:55.040
嗯，所以了解带宽是多少

00:13:55.040 --> 00:13:59.440
我们需要做的管理，因为在大多数情况下，当您找到

00:13:59.440 --> 00:14:01.760
您要查询到最近的人

00:14:01.760 --> 00:14:06.160
人，那么，如果我能和我的20岁一起打孔

00:14:06.160 --> 00:14:09.600
提供最多价值的最接近的同行um

00:14:09.600 --> 00:14:14.399
能够获得最终内容的数量，因此只需确定可行程度即可

00:14:14.399 --> 00:14:19.199
是的，在这些dht节点上花费多少钱，

00:14:19.199 --> 00:14:22.399
成本评估真的在那里

00:14:26.880 --> 00:14:30.079
有趣的东西嗯，我们不能从

00:14:30.079 --> 00:14:34.399
现有的自动中继，就像我们已经将现有的协调功能从汽车中分离出来一样

00:14:34.399 --> 00:14:38.880
中继，嗯，我们可以有那个净带宽吗？

00:14:38.880 --> 00:14:40.880
然后将其扩展到我们的估计大小

00:14:40.880 --> 00:14:44.160
dahcy估计将会是什么，因为它应该是

00:14:44.160 --> 00:14:47.920
使用相同的协议进行坐标的操作

00:14:47.920 --> 00:14:53.519
好的，是的，是的，它只是越来越

00:14:53.519 --> 00:14:58.240
练习与练习的数量比较好吗，您介意吗

00:14:58.240 --> 00:15:01.760
跟进胡言乱语，探究一下他走的路

00:15:01.760 --> 00:15:06.160
去那里，嗯，是的，谢谢

00:15:07.920 --> 00:15:12.000
列表中的下一个字母是sv 1.5的unix并转到ipfs

00:15:12.000 --> 00:15:15.360
看起来好像没有更新，没有任何活动

00:15:15.360 --> 00:15:22.240
发出问题，所以继续进行ipfs gc改进是

00:15:22.240 --> 00:15:26.079
其实星期五正在测试其中一个

00:15:26.079 --> 00:15:30.480
或到目前为止我已经提出的原型

00:15:30.480 --> 00:15:33.519
有一些改进，我也有一些大问题

00:15:33.519 --> 00:15:36.800
我必须弄清楚如何解决这个问题，我会把那些发现折回去

00:15:36.800 --> 00:15:40.160
进入当前的设计平台，其中之一就是

00:15:40.160 --> 00:15:45.360
尽管自从我们开始

00:15:45.360 --> 00:15:47.920
讨论在这里，您也许有些人已经看到了

00:15:47.920 --> 00:15:52.240
在ipld频道上发生的讨论

00:15:52.240 --> 00:15:56.800
它的结论是，我们有几个领域正在引起

00:15:56.800 --> 00:16:03.199
在大多数节点上，性能会徘徊在15％到20％之间，并且能够

00:16:03.199 --> 00:16:09.680
减少我的dht连接数um，似乎可以扩展

00:16:09.680 --> 00:16:13.360
闲置的um cpu业务似乎与此相伴而生

00:16:13.360 --> 00:16:17.040
无论如何，这可能会导致其他与性能相关的问题

00:16:17.040 --> 00:16:20.639
讨论和我们需要做的事情，但就gc而言

00:16:20.639 --> 00:16:23.920
嗯，有一些改进，但也有一些改进

00:16:23.920 --> 00:16:28.160
我必须要问的一些问题

00:16:28.160 --> 00:16:31.360
关于您如何知道我们想如何解决这一问题，因此原型制作工作是

00:16:31.360 --> 00:16:34.160
往前走，但不是所有问题

00:16:34.160 --> 00:16:36.959
已经解决了，但是好像我们已经解决了一些问题，但我想我已经创建了

00:16:36.959 --> 00:16:42.560
可能有一些新的，所以它只是继续

00:16:43.839 --> 00:16:47.519
所以这是gc更新，但是是的，我认为会有一个我们需要扩展的领域

00:16:47.519 --> 00:16:49.920
如果不是，请参加其他有关dht的讨论

00:16:49.920 --> 00:16:55.199
已经通过那里的一些努力得到解决，因此澄清了dht

00:16:55.199 --> 00:16:58.240
事情不是如果我明白那就是

00:16:58.240 --> 00:17:02.480
就像一个p2p的东西，其中越来越多的系统

00:17:02.480 --> 00:17:06.079
叫它是两个，是的

00:17:06.079 --> 00:17:09.439
每次处理中的um数据包句柄数

00:17:09.439 --> 00:17:11.439
数据包，特别是传入数据包

00:17:11.439 --> 00:17:15.839
是造成大量闲置CPU使用的原因

00:17:15.839 --> 00:17:19.839
它保留在哪里，它将保留八核i7

00:17:19.839 --> 00:17:24.000
默认配置下大约为15至20 cpu

00:17:24.000 --> 00:17:27.839
然后在运行了半秒钟后，您就知道了稳态

00:17:27.839 --> 00:17:30.960
小时，我想知道是否有一些怪异的系统

00:17:30.960 --> 00:17:35.280
我知道在Windows上发生的配置问题

00:17:35.280 --> 00:17:39.120
拥有所有的错误，但有时这些错误是性能的提高

00:17:39.120 --> 00:17:44.240
呃，就像零，就像百分之一，是的，我想看看这份报告

00:17:44.240 --> 00:17:48.000
在所有三个平台上都不是，虽然不是ii

00:17:48.000 --> 00:17:50.799
在Windows上没有它，所以我在它上运行它

00:17:50.799 --> 00:17:57.120
linux和amd 64 linux a mac macbook pro和freebsd

00:17:57.120 --> 00:17:59.919
机器，他们三个都表现出相似

00:17:59.919 --> 00:18:03.360
具有默认配置的性能配置文件

00:18:03.360 --> 00:18:10.480
而这全都在uh rc-1或um或当前版本的

00:18:10.480 --> 00:18:14.799
你们中的人知道当前稳定的或稳定的当前发展分支

00:18:14.799 --> 00:18:18.400
所以如果有一个平台还没有经历过

00:18:18.400 --> 00:18:21.600
你知道有什么区别，我们在做什么

00:18:21.600 --> 00:18:24.559
让我们看看不想获取的原始配置文件数据是最大的事情之一

00:18:24.559 --> 00:18:27.600
结束会议，但您只知道执行例程的次数

00:18:27.600 --> 00:18:30.559
而调度程序是您知道快要疯了

00:18:30.559 --> 00:18:33.200
寻找事情是问题的一部分

00:18:33.200 --> 00:18:38.080
但是我能够将dht连接减少10倍，然后

00:18:38.080 --> 00:18:44.640
闲置的CPU下降了大约10倍。

00:18:44.720 --> 00:18:48.080
但是其中很多是与其他协议相比快速的

00:18:48.080 --> 00:18:52.000
是正确的，所以很可能有一些关于如何快速

00:18:52.000 --> 00:18:54.559
正在准确地计划和设置其go例程

00:18:54.559 --> 00:18:59.039
因为我们以前在dht中有这么多go例程，所以有这么多连接

00:18:59.039 --> 00:19:03.360
所以不一定就是你喜欢的

00:19:03.360 --> 00:19:06.240
它拥有更少的人脉和更多的人

00:19:06.240 --> 00:19:10.480
快速连接似乎是正确的，并且特别是在快速连接中

00:19:10.480 --> 00:19:13.919
我可以分享个人资料吗？我得到了许多个人资料运行

00:19:13.919 --> 00:19:16.640
出来非常相似，一切都很快

00:19:16.640 --> 00:19:22.240
嗯，这都是数据包处理，其中很大一部分都在内存中

00:19:22.840 --> 00:19:27.600
分配，所以我们可能应该打开一个

00:19:27.600 --> 00:19:32.640
发出一个问题，要研究的是快速的呃性能

00:19:32.640 --> 00:19:36.720
那可能值得对马丁·马丁·海曼进行ping操作，以便他可以看看

00:19:36.720 --> 00:19:38.880
是的，他是那个仓库的维护者

00:19:38.880 --> 00:19:44.000
相信，是的，他在我们的懒散中。哦，是的，我一定会让我

00:19:44.000 --> 00:19:47.919
将为他分享我拥有的个人资料呃图片

00:19:47.919 --> 00:19:53.840
是的，完美

00:19:55.679 --> 00:19:59.520
呃，你想直接跳到下一个吗

00:19:59.600 --> 00:20:03.679
这是自称为迁移的返工

00:20:03.679 --> 00:20:08.080
我正在等待审核，因为我们真的没有时间进行审核

00:20:08.080 --> 00:20:11.360
其中有很多工作要做，而我

00:20:11.360 --> 00:20:16.159
就像我上周所说的那样，仍然需要分配

00:20:16.159 --> 00:20:19.840
批准并合并，其他一切都在后面，不再进行任何工作

00:20:19.840 --> 00:20:23.280
少进行复查是必要的，除非复查指出

00:20:23.280 --> 00:20:29.039
嗯，我很高兴得到它，因为它看起来像一个巨大的东西

00:20:29.039 --> 00:20:33.120
改进，它将提供前进的道路，实际上是理智的

00:20:33.120 --> 00:20:38.000
无需大量麻烦即可编写迁移

00:20:38.000 --> 00:20:41.440
对在那里和我们有时间的时候感到非常高兴

00:20:41.440 --> 00:20:45.039
嗯，它将被审查并合并，

00:20:45.039 --> 00:20:48.080
因此，根据相对优先级

00:20:48.080 --> 00:20:51.679
是的，我认为这基本上就像第一步

00:20:51.679 --> 00:20:58.080
执行下一个rc，其中包括对dist的更新，然后一旦完成

00:20:58.080 --> 00:21:02.000
我们可以开始喜欢将这些外观合并到其他外观中

00:21:02.000 --> 00:21:04.320
因为它们都是基于这些

00:21:04.320 --> 00:21:08.640
因为新的所有这些存储在磁盘上的信息使一切都变得有点

00:21:08.640 --> 00:21:17.840
更有意义

00:21:19.120 --> 00:21:22.799
下一个很酷的项目是ipfs pub子api改造

00:21:22.799 --> 00:21:31.039
嗯，没有加沙的迹象，所以不要让我高兴

00:21:31.039 --> 00:21:34.799
它正在继续到呃内存泄漏和jsipfs

00:21:34.799 --> 00:21:42.559
您是否得到了另一个自我，是的，对此没有更新，我还发表了一些评论

00:21:42.559 --> 00:21:45.210
在vr中等待一些反馈，

00:21:45.210 --> 00:21:49.200
 [音乐]我只是在类型上做了很多工作

00:21:49.200 --> 00:21:53.200
他们暂时将其暂停

00:21:56.159 --> 00:22:02.400
下一个是嘴唇tcp测试设置

00:22:02.400 --> 00:22:06.080
我们的测试设置存在的问题是脂质pci

00:22:06.080 --> 00:22:10.480
注释15和npm 7中的文件

00:22:10.480 --> 00:22:13.760
我基本上是在概念证明中创建了一个提案

00:22:13.760 --> 00:22:19.919
linkedin注意到主要问题是更简单的依赖关系，因为我们有

00:22:19.919 --> 00:22:24.000
库模块仅取决于php和lipitp

00:22:24.000 --> 00:22:27.280
使用之间的模块作为开发依赖

00:22:27.280 --> 00:22:30.480
用集成测试来测试它们

00:22:30.480 --> 00:22:34.400
这基本上是通过新的npm 7更改实现的，

00:22:34.400 --> 00:22:38.640
自动安装对等依赖项

00:22:38.640 --> 00:22:43.360
基本上是版本不匹配的，是的，这里的短期目标是

00:22:43.360 --> 00:22:45.600
将集成测试移出

00:22:45.600 --> 00:22:49.919
将脂质2p连接到脂质p模块，然后我们可以支持

00:22:49.919 --> 00:22:54.080
注意15，从长远来看，我们应该创建

00:22:54.080 --> 00:22:57.280
使用测试环境进行一些系统测试，以及

00:22:57.280 --> 00:23:00.480
跟进中断，也许我们应该

00:23:00.480 --> 00:23:03.600
以后还要在这种情况下讨论

00:23:03.600 --> 00:23:09.120
最终，随着的获​​胜，将胶水交付给学习者的仓库

00:23:09.120 --> 00:23:13.760
ipfs one，是的，对

00:23:13.760 --> 00:23:16.480
有反馈

00:23:21.520 --> 00:23:25.360
这是为了其他倡议

00:23:25.360 --> 00:23:30.720
嗯，继续进行其余的项目，有人收到的设计审查建议

00:23:30.720 --> 00:23:35.200
您想提出的任何设计审查建议

00:23:35.200 --> 00:23:41.840
嗯，我现在那个汉娜和亚历克斯回来了。嗯，我

00:23:41.840 --> 00:23:48.720
我在大块周围提出了一些交换建议，嗯，这不是

00:23:48.720 --> 00:23:51.919
我们必须要解决的问题

00:23:51.919 --> 00:23:57.200
现在，但是我想有点像理智检查

00:23:57.200 --> 00:24:02.559
像这样有意义吗，还以为你知道我猜怎么

00:24:02.559 --> 00:24:05.200
看看您如何认为这与您当时的其他情况相符

00:24:05.200 --> 00:24:09.919
我正在计划我实际上已经读过你的

00:24:09.919 --> 00:24:12.159
对不起，我没有发表任何评论

00:24:12.159 --> 00:24:18.480
嗯，我的我正在尝试，好吧，嗯，让我

00:24:18.480 --> 00:24:22.480
让我我不应该与您离线讨论我们可以

00:24:22.480 --> 00:24:25.039
是的，我们可以再做一次，但是

00:24:25.039 --> 00:24:29.039
是的，我想在对话中得到这个

00:24:29.039 --> 00:24:33.600
在某些时候，确定是的，肯定有一个

00:24:33.600 --> 00:24:38.000
某种与um相关的主题，用于保存块，其中有一个

00:24:38.000 --> 00:24:41.520
那里有一个问题，有人在讨论

00:24:41.520 --> 00:24:44.080
关于流媒体的流媒体提案

00:24:44.080 --> 00:24:49.279
数据直接进入文件并绕过块存储

00:24:49.279 --> 00:24:53.919
那为我当时的某些事情提供了一些有趣的可能性

00:24:53.919 --> 00:24:57.360
碰到嗯，只是看着我们什么时候

00:24:57.360 --> 00:25:01.200
剩下的很小的空间来写块和周围的方式我

00:25:01.200 --> 00:25:03.520
不知道那是我们只是想提出来的内容，以防万一

00:25:03.520 --> 00:25:06.720
那是我们要形式化的东西，因为设计不是

00:25:06.720 --> 00:25:09.840
只是一个问题，我很好奇我们是否有文件

00:25:09.840 --> 00:25:13.440
存放在ipfs中，因为已经有东西了

00:25:13.440 --> 00:25:16.720
在这件事的另一端是稍有不同

00:25:16.720 --> 00:25:20.320
就像当您导入文件时，您实际上并没有将其放入块存储中

00:25:20.320 --> 00:25:24.799
您只需将其保留在um磁盘上，然后像将引用放入

00:25:24.799 --> 00:25:28.880
零拷贝选项是的，我的意思是，这是有问题的

00:25:28.880 --> 00:25:31.520
在实施中，因为就像各种各样的问题一样

00:25:31.520 --> 00:25:34.640
介绍您可以删除他们系统的文件

00:25:34.640 --> 00:25:39.120
嗯，你没有办法知道，但是，呃，我很好奇我们有

00:25:39.120 --> 00:25:42.799
ipfs，因为当他们使用时，就像文件硬币一样

00:25:42.799 --> 00:25:46.640
是的，我的意思是文件存储文件存在

00:25:46.640 --> 00:25:51.360
嗯，我不认为它会做任何可能会发生的事情，例如

00:25:51.360 --> 00:25:56.240
将os标记文件设为只读，这样您就不会在炸毁它们时将它们炸毁

00:25:56.240 --> 00:26:00.559
当您使用它们或其他任何东西时，但文件存储是

00:26:00.559 --> 00:26:03.600
我认为这是实验性的吗？

00:26:03.600 --> 00:26:07.200
好吧，我的意思是肯定可以肯定对我来说是

00:26:07.200 --> 00:26:14.080
就像我不认为这在理论上并不难，

00:26:14.080 --> 00:26:19.200
像从bitswap或从任何地方获得的东西一样流式传输呃

00:26:19.200 --> 00:26:22.240
将dag服务直接放入文件而不是直接放入文件中

00:26:22.240 --> 00:26:26.240
从理论上保存它，我认为当前的架构

00:26:26.240 --> 00:26:29.760
软件可能会使其更具挑战性，因为

00:26:29.760 --> 00:26:32.559
我的意思是，这是我一般必须在bitsoft中研究的东西

00:26:32.559 --> 00:26:36.880
就像bitswap就像是硬编码一样，喜欢保存到

00:26:36.880 --> 00:26:41.039
一旦您知道该块存储被阻止，我们可能

00:26:41.039 --> 00:26:43.440
我们必须至少引入一层

00:26:43.440 --> 00:26:46.559
那里是间接的，因为在百万种情况下

00:26:46.559 --> 00:26:49.120
可能希望将其放入其他块存储中，而您可能希望将其放入

00:26:49.120 --> 00:26:50.880
您可能不想放在块中的文件

00:26:50.880 --> 00:26:53.200
商店，但你知道那里有一堆

00:26:53.200 --> 00:26:56.240
一堆这样做的理由很明显，如果是

00:26:56.240 --> 00:27:00.559
也像与提供系统的超级集成，这将是一个

00:27:00.559 --> 00:27:04.240
真正有趣的事情，所有这些都会有

00:27:04.240 --> 00:27:07.120
被某种方式分解，这可能是

00:27:07.120 --> 00:27:09.760
将会是alex和我编写的软件

00:27:09.760 --> 00:27:14.320
当我们这样做时，我们将就流媒体目标与您联系

00:27:15.440 --> 00:27:19.760
是的，我只是其中之一，他就像哦，哇，这太棒了

00:27:22.159 --> 00:27:27.679
是的，我的意思是理论上并不复杂，因为在概念上

00:27:27.679 --> 00:27:31.200
从概念上讲，这是相当合理的

00:27:31.200 --> 00:27:34.480
直截了当，但是像你说的，你真的需要一个间接层

00:27:34.480 --> 00:27:37.600
嗯，这样您就不必担心自己在写什么，这就是

00:27:37.600 --> 00:27:39.600
您的传入块需要其他照顾

00:27:39.600 --> 00:27:43.039
无论将它们放置在何处，并将它们整理成文件

00:27:43.039 --> 00:27:48.720
商店或其他任何内容，是的，我的意思是您可能会看到下一个

00:27:48.720 --> 00:27:53.760
很少有公关人员提出我们进一步的建议，例如不提高绩效

00:27:53.760 --> 00:27:56.960
但要重新设计软件，以便可以

00:27:56.960 --> 00:28:00.320
曾经用来提高性能，所以我想我的意思是，也许

00:28:00.320 --> 00:28:04.720
一个应该有一个设计方案，否则有人应该考虑把一个

00:28:04.720 --> 00:28:08.399
只是为了那一层，这将允许我们继续下一步

00:28:08.399 --> 00:28:12.799
进一步构建其中的一些东西是很不错的，是的，我的意思是我认为

00:28:12.799 --> 00:28:15.600
我们应该我可能会写一个

00:28:15.600 --> 00:28:17.440
因为我很快就要做

00:28:17.440 --> 00:28:20.720
实施我们想要做的事情是的

00:28:20.720 --> 00:28:23.840
我只是意识到我们在这里的时间已经过去了

00:28:23.840 --> 00:28:27.279
嗯，所以如果有人需要下车，请放心

00:28:27.279 --> 00:28:30.799
嗯，如果是设计师建议书

00:28:30.799 --> 00:28:34.720
我们可以继续进行拦截，并询问

00:28:36.960 --> 00:28:44.320
是的，我有一个问题

00:28:44.320 --> 00:28:48.640
有人提出了一个问题，我不知道它是进行中还是js回购

00:28:48.640 --> 00:28:54.480
围绕ipves进口出口情况并非完全一样的事实。

00:28:54.480 --> 00:28:59.120
 Going.js基本上是因为呃js首先拥有它

00:28:59.120 --> 00:29:03.120
并使用像您知道的密码一样对事物进行加密的东西

00:29:03.120 --> 00:29:07.279
然后走，就像您要给我发一个钥匙

00:29:07.279 --> 00:29:10.720
而且我对密码一无所知

00:29:10.720 --> 00:29:15.679
那个那个我们有

00:29:16.720 --> 00:29:23.360
我们有办法表明还是应该有办法表明

00:29:24.000 --> 00:29:29.039
您正在查看什么http客户端内容

00:29:29.039 --> 00:29:32.080
我的意思是，我想我们正在尝试使它们看起来相同，这是我想

00:29:32.080 --> 00:29:38.159
问题出在哪里，我们是否需要进行中断测试

00:29:38.159 --> 00:29:40.880
这我不认为我什至没有

00:29:40.880 --> 00:29:44.240
认为我们有一个针对现实的规范，我们应该

00:29:44.240 --> 00:29:47.279
我们应该说明应该做什么

00:29:47.279 --> 00:29:52.799
然后编写测试，然后编写代码

00:29:53.360 --> 00:29:57.200
我的意思是我以为我们曾经谈论过删除

00:29:57.200 --> 00:30:00.320
http客户端的关键操作内容

00:30:00.320 --> 00:30:05.520
我们不喜欢我们需要客户吗，因为我们需要

00:30:05.520 --> 00:30:08.559
我们需要垃圾桶权利才能出口

00:30:08.559 --> 00:30:12.640
在命令行中本地导出密钥

00:30:12.640 --> 00:30:17.679
嗯，是的，我们应该在这个地方进行讨论

00:30:17.679 --> 00:30:21.919
该接口是为该接口规范设计的

00:30:21.919 --> 00:30:25.200
客户端http api并准确找出

00:30:25.200 --> 00:30:28.399
那东西应该做什么然后统一

00:30:28.399 --> 00:30:32.480
如果有意义的话，可以在两个实现中做到这一点

00:30:32.480 --> 00:30:37.520
可能是因为上下文，所以去ipfs

00:30:37.520 --> 00:30:41.279
当前允许您导入密钥，但不允许您导入

00:30:41.279 --> 00:30:44.960
如果节点在线，则导出密钥

00:30:45.279 --> 00:30:51.919
嗯，因为我们的工作要做

00:30:51.919 --> 00:30:57.919
来自本地的api安全性在本地运行的东西

00:30:57.919 --> 00:31:01.039
机器，你怎么知道谁在问你做

00:31:01.039 --> 00:31:05.840
这些命令

00:31:11.600 --> 00:31:15.039
是的，我想可能与此有关

00:31:15.039 --> 00:31:20.240
是詹在问我是否应该写一些博客文章或撰写有关

00:31:20.240 --> 00:31:23.360
安全研讨会以及我意识到的一件事

00:31:23.360 --> 00:31:26.799
非常不确定的是我们是否要谈论任何

00:31:26.799 --> 00:31:29.679
社区渴望的东西，以及我们要走的东西

00:31:29.679 --> 00:31:33.840
去做或者这些只是人们做的事情

00:31:33.840 --> 00:31:36.799
谈到呃，那就是你知道你知道

00:31:36.799 --> 00:31:40.240
我们将尝试与您打交道，他们知道不同的应用程序配置文件

00:31:40.240 --> 00:31:43.360
我们将要处理这个sid的http许可吗

00:31:43.360 --> 00:31:48.880
嗯，我们应该对此有所了解，所以我的回答是让我们等一个星期，直到

00:31:48.880 --> 00:31:52.399
优先排序的发生更多，我们有一种意识

00:31:52.399 --> 00:31:55.760
你知道你的时间表，你知道我们每个人将要付出多少努力

00:31:55.760 --> 00:32:00.320
在我们尝试设定期望之前，是的，我认为

00:32:00.320 --> 00:32:02.880
对于优先事项，可能一周还为时过早

00:32:02.880 --> 00:32:06.960
因为那现在仍然在发生，嗯，我

00:32:06.960 --> 00:32:10.640
无论我们是否最终会陷入困境，思考都会发生

00:32:10.640 --> 00:32:15.360
这种安全问题在这里使用的情况

00:32:15.360 --> 00:32:19.519
我们正在尝试将其作为核心开发和协议进行解锁的情况

00:32:19.519 --> 00:32:23.279
开发团队，我们要做的是确保

00:32:23.279 --> 00:32:26.000
像同行高斯这样的人，以及在通话中的其他人

00:32:26.000 --> 00:32:29.919
能够轻松扩展ipv以执行这些操作

00:32:29.919 --> 00:32:35.360
嗯，如果没有积极参与，也许至少会提供指导

00:32:35.360 --> 00:32:39.760
在那些人的发展中，但要确保

00:32:39.760 --> 00:32:44.159
您可以在块存储中编写ipld和ipfs，并且

00:32:44.159 --> 00:32:48.559
为此需要做任何其他事情，因此我们需要努力使这一过程变得更容易

00:32:48.559 --> 00:32:52.799
从um建立起来，然后也许也将有助于建立

00:32:52.799 --> 00:32:55.360
这些功能都出来了，所以我认为这有点像最低

00:32:55.360 --> 00:32:59.600
我们今年将要寻找的设置

00:32:59.600 --> 00:33:02.320
发生，我认为这只是其中的程度

00:33:02.320 --> 00:33:07.120
我们将参与其中，仍然需要确定

00:33:08.159 --> 00:33:12.320
是的，但我的意思是最具体的一个是这样的

00:33:12.320 --> 00:33:17.120
um sid在位交换中的许可，最初的建议是

00:33:17.120 --> 00:33:20.799
以某种方式基于即将进入的http标头

00:33:20.799 --> 00:33:25.120
他们想要让他们的位交换会话能够决定的网关式事物

00:33:25.120 --> 00:33:28.480
在允许某种形式的外部api的允许下，它将标头传递给

00:33:28.480 --> 00:33:33.200
我认为至少有一些设计回合可能

00:33:33.200 --> 00:33:36.480
我们至少对发生这种情况有意见

00:33:36.480 --> 00:33:40.000
像这样的东西实际上存在，所以这可能是

00:33:40.000 --> 00:33:43.360
问是我们可能需要检查一下最初的呃

00:33:43.360 --> 00:33:46.960
出现的问题，并开始考虑合理的设计

00:33:46.960 --> 00:33:51.600
实际上看起来像我怀疑那样的东西

00:33:51.600 --> 00:33:55.360
就像我们需要担心的更大引擎

00:33:55.360 --> 00:33:59.279
关于您如何知道作为一点交换的一部分

00:33:59.279 --> 00:34:03.200
要求您发送一个授予您访问权限的令牌，然后

00:34:03.200 --> 00:34:08.000
通过http客户端响应了解

00:34:08.000 --> 00:34:11.280
就像高度共享的自行车，

00:34:11.280 --> 00:34:21.839
有点不相关

00:34:22.399 --> 00:34:26.720
无论哪种方式，我们都不会在本次会议上进行梳理

00:34:26.960 --> 00:34:31.760
嗯，所以最后一部分是停车场停车场有两个项目

00:34:31.760 --> 00:34:35.839
一种是标签选择器CID缓存

00:34:36.240 --> 00:34:40.320
是的，这只是我想把它放在人们的视野中的一个东西

00:34:40.320 --> 00:34:46.320
嗯，但是嗯嗯，我也是因为我看到了

00:34:46.320 --> 00:34:49.839
安德鲁（Andrew）的更新中的一些内容暗示

00:34:49.839 --> 00:34:53.119
相似之处我们目前有什么东西吗

00:34:53.119 --> 00:34:58.720
像跟踪根一样向所有子节点或其他任何对象发送ipfs

00:34:58.720 --> 00:35:04.079
就像呃喜欢存储在我知道我们有一个块存储，我们有一个

00:35:04.079 --> 00:35:07.280
任何种类的dag商店

00:35:08.000 --> 00:35:11.599
您是什么意思，您希望能够进行查询

00:35:11.599 --> 00:35:14.640
根cid，然后为您提供所有不带子项的列表

00:35:14.640 --> 00:35:21.280
确实遍历了dag是的，不，我们遍历了标签yeah yeah okay

00:35:21.280 --> 00:35:28.000
嗯，这可能是我们从um的角度来看的东西，就像

00:35:28.000 --> 00:35:32.480
加快呃嗯，尤其是当我们看着

00:35:32.480 --> 00:35:36.079
像可以为您服务的东西一样朝着抱怨前进

00:35:36.079 --> 00:35:40.800
嗯，就像清单上的艾滋病一样，我想可能还有很多其他的事情

00:35:40.800 --> 00:35:44.079
发挥作用，我只是想再次想像这只是一个想法

00:35:44.079 --> 00:35:48.640
就像非常发芽，嗯，也许我的意思是像我

00:35:48.640 --> 00:35:52.320
不知道是否可以像您知道的那样对gc有帮助

00:35:52.320 --> 00:35:55.440
像那样，嗯，我的意思是大概到那个时候

00:35:55.440 --> 00:35:59.119
实现它将不会是爸爸查询，它将不会像爸爸商店那样

00:35:59.119 --> 00:36:03.440
像或像整个dag存储区，它将像根c id和选择器查询

00:36:03.440 --> 00:36:07.280
嗯，在我们处理图同步请求时，我们只是在记录内容

00:36:07.280 --> 00:36:12.480
嗯，然后下一次我们这样做时，我们也许可以更快地为其提供服务

00:36:12.480 --> 00:36:15.280
就像加载块并设置它们一样

00:36:15.280 --> 00:36:18.880
嗯，无论如何，就像你知道的只是一个，这是一个

00:36:18.880 --> 00:36:22.560
进行了大幅度更新，但可以加快这些更新的速度

00:36:22.560 --> 00:36:25.920
东西，是的，所以实际上有一些

00:36:25.920 --> 00:36:28.400
垃圾回收可以做什么的含义

00:36:28.400 --> 00:36:32.240
到目前为止，我已经避免了仅因为内存量大而已

00:36:32.240 --> 00:36:36.640
可能占用很大的空间，或者如果您有很多空间

00:36:36.640 --> 00:36:40.160
很多深深的物体

00:36:40.160 --> 00:36:43.599
里面有很多深的东西，是的，是的，是的

00:36:43.599 --> 00:36:46.720
但是如果他们继续进行设计，是的，我会对

00:36:46.720 --> 00:36:49.040
至少呃，跟上那个，因为你知道

00:36:49.040 --> 00:36:51.760
跟上任何想法，因为那确实有直接的

00:36:51.760 --> 00:36:54.160
我可以用垃圾回收做什么的含义

00:36:54.160 --> 00:36:58.400
是的，肯定是的，这就是为什么我只想

00:36:58.400 --> 00:37:01.520
把它说成你知道我在想些什么

00:37:01.520 --> 00:37:05.040
是的，我的意思是我想它可能会占用很多空间，但我的意思是

00:37:05.040 --> 00:37:09.040
我的意思是cid是40字节，我想与块存储相比

00:37:09.040 --> 00:37:13.119
只是就像不会变得太大而已，但是我

00:37:13.119 --> 00:37:16.000
意味着显然我们需要找出这是否是一个真实的假设

00:37:16.000 --> 00:37:20.000
如果保留所有内容，则可能不正确

00:37:20.000 --> 00:37:21.760
在内存中，我想我是在说这种情况

00:37:21.760 --> 00:37:24.640
哦，是的，那是事实，那就是全部都在记忆中，那就是

00:37:24.640 --> 00:37:26.640
问题，如果不是内存，那就不是

00:37:26.640 --> 00:37:30.720
是的，这就像一个磁盘上的东西，您可以将其快速加载到

00:37:30.720 --> 00:37:34.880
提供查询，或者在需要时帮助您低俗

00:37:34.880 --> 00:37:42.240
你知道的，好吧，反正不用担心

00:37:42.720 --> 00:37:46.720
对方要问对方那个是瑞巴

00:37:46.720 --> 00:37:50.800
谁正在做基于Postgresql的数据存储

00:37:50.800 --> 00:37:54.960
在猎鹰的背景下，它保持提交的数据信息

00:37:54.960 --> 00:38:00.000
就像我知道的那样，我正在与这些人进行深入对话

00:38:00.000 --> 00:38:01.839
它在发展，所以可以让你做

00:38:01.839 --> 00:38:05.040
一些使用该数据存储区的预加载流程

00:38:05.040 --> 00:38:08.800
是的，他们是他们，他们正在进入一堆不同的事物，

00:38:08.800 --> 00:38:11.520
实际上不再使用postgres，他们继续前进，我认为他们会做的

00:38:11.520 --> 00:38:15.280
lmdb是直接的，随后是新的db，它实际上是

00:38:15.280 --> 00:38:17.440
真的很有趣，这就是核心

00:38:17.440 --> 00:38:20.720
莲花的东西我还是会和瑞巴谈的哦

00:38:20.720 --> 00:38:23.760
继续沿着正在进行的postgres路线前进

00:38:23.760 --> 00:38:30.000
完整的dag元数据内容哦，是的，是的，我们可能想隐约

00:38:30.000 --> 00:38:32.320
了解他们在那做的事情，因为他们只是因为

00:38:32.320 --> 00:38:34.160
他们正在做很多数据存储测试

00:38:34.160 --> 00:38:37.680
我们可能就像在某处一样，哦，我们也可以这样做

00:38:37.680 --> 00:38:41.760
并取得了很大的进步，虽然我不知道我们的方式

00:38:41.760 --> 00:38:45.520
使用东西，你知道吗，所以

00:38:45.520 --> 00:38:48.480
很抱歉，我要走了很长时间

00:38:48.480 --> 00:38:51.520
快速进入另一个派对项目，这真的很快，这就是我

00:38:51.520 --> 00:38:57.520
嗯，我只是很好奇，我会随意和克里斯·克里斯蒂

00:38:57.520 --> 00:39:01.119
曾经在进行JS工艺同步的过程中感到高兴的嗯

00:39:01.119 --> 00:39:05.760
嗯，他呃，他说他不再和PL签约了

00:39:05.760 --> 00:39:09.359
嗯，我认为这意味着目前尚无人在JS交叉

00:39:09.359 --> 00:39:15.359
嗯，所以我的意思是你知道我不喜欢我

00:39:15.359 --> 00:39:19.280
不完全知道它实际上确实具有完全的功能

00:39:19.280 --> 00:39:21.599
但是，也许这还有很长的路要走

00:39:21.599 --> 00:39:25.760
甚至担心，但是你知道吗，特别是如果我们要

00:39:25.760 --> 00:39:29.359
就像银行图同步成为ipfs一样

00:39:29.359 --> 00:39:32.720
启用快速数据传输，就像我们无法做到的那样

00:39:32.720 --> 00:39:35.520
在js中做任何事情，所以我不知道这是否是一个问题

00:39:35.520 --> 00:39:39.599
是的，我们只是在Craftsync上做了js uh切换，因为chris

00:39:39.599 --> 00:39:42.800
目前无法对此进行处理，他可能会稍后再进行处理，所以我们会

00:39:42.800 --> 00:39:45.920
可能会暂停一下，直到我们对什么有了更好的了解为止

00:39:45.920 --> 00:39:50.720
确切地说，我们正在使用um，但是有一个有效的版本

00:39:50.720 --> 00:39:55.040
在回购中，我将回购添加到了笔记um中，我们将

00:39:55.040 --> 00:39:59.040
在某个时间点将其迁移，但也有一些可行的示例

00:39:59.040 --> 00:40:03.520
从撤离拉，但我不相信它的工作

00:40:03.520 --> 00:40:07.200
是的，目前是这样，是的，他正在做一些非常初步的事情，让我们

00:40:07.200 --> 00:40:12.480
只是看看我是否可以拿东西然后走，是的，那太完美了

00:40:12.480 --> 00:40:17.280
好的，对不起，我知道我要开会进行

00:40:18.240 --> 00:40:24.160
我想就是了，我想我们已经完成了，谢谢您坚持下去，如果您呃

00:40:24.160 --> 00:40:28.640
到目前为止，这已经是ipfs的最新消息了

00:40:28.640 --> 00:40:30.880
基金会从25日星期一开始的每周同步

00:40:30.880 --> 00:40:34.720
2021年1月的日期，请填写您的异步更新

00:40:34.720 --> 00:40:38.079
所以人们知道发生了什么，否则

00:40:38.079 --> 00:40:43.599
你可以自由去享受燃烧的夜晚，我希望你已经喝了威士忌

00:40:45.000 --> 00:40:48.000
再见

