WEBVTT
Kind: captions
Language: zh-Hans

00:00:05.930 --> 00:00:15.089
去谢谢你不按好吧，所以欢迎他

00:00:15.089 --> 00:00:22.590
访问第12个，是8月12日的二次置换同步II首先猜测

00:00:22.590 --> 00:00:30.980
是议程上的倡议，是的，所以发布过程是，有一个舞会

00:00:30.980 --> 00:00:38.129
分配给博客帖子的草稿全部都好了，是的，关于帖子

00:00:38.129 --> 00:00:41.399
应该希望很好，它将在第二个迹象出来了，餐厅

00:00:41.399 --> 00:00:45.570
看起来还不错，但是您难道还没有一个最终的看法吗？

00:00:45.570 --> 00:00:54.120
今天也许明天会说是的，JSF是您的观点，三七不是

00:00:54.120 --> 00:00:59.640
已发布，我想说的是他将是@jseifer的发布过程

00:00:59.640 --> 00:01:08.700
在所有列表中彰显您的角色的盛宴应该没什么更新

00:01:08.700 --> 00:01:13.979
据我所知，我应该拿回什么测试信息，这完全是

00:01:13.979 --> 00:01:17.909
说谎，这对于流程规则提出了一个非常好的建议

00:01:17.909 --> 00:01:24.290
我找到了用于测试的文档

00:01:30.350 --> 00:01:38.040
这是设计文档，这只是他的建议，例如适合自己的幸福程度

00:01:38.040 --> 00:01:40.920
理想情况下，我们可以重用现有的部分

00:01:40.920 --> 00:01:44.520
系统只是使这项工作，但他罢工试图提出一个非常

00:01:44.520 --> 00:01:47.970
可能会像您这样的通用系统取代我们

00:01:47.970 --> 00:01:50.880
插入自定义医生我只是在插入一个自定义测试包裹

00:01:50.880 --> 00:01:53.390
我的东西

00:02:00.700 --> 00:02:06.940
所以接下来要进行垃圾收集并固定所有更新，我不会混淆

00:02:06.940 --> 00:02:16.700
不，不，没有关系，我委托了JSF FS 0.37中发布的路由，可以

00:02:16.700 --> 00:02:27.080
可能现在脱落了，好吧，我的意思是委派路由作为一件事情

00:02:27.080 --> 00:02:41.180
噢，瓦斯科·乔什（Vasco Josh）的八卦消息出炉了，但我们有Jay SMTP哦26

00:02:41.180 --> 00:02:45.650
上周发布，它支持Qasim sub，我们只需要完成

00:02:45.650 --> 00:02:54.500
一个开放的PR 2gs ipfs将其作为默认路由器，然后将子域网关I

00:02:54.500 --> 00:03:02.360
猜想这是相关的，但是我们有一个HTTPS上的DNS的PR

00:03:02.360 --> 00:03:11.900
将使我们能够使此链接的ID更加安全，而不是完全安全

00:03:11.900 --> 00:03:15.019
这样做，但这就是我的重点是为了安全

00:03:15.019 --> 00:03:23.269
如此会坚持下去，我将在第二秒链接到此

00:03:23.269 --> 00:03:32.989
遇到一些问题，我们稍后也可以在电话中讨论

00:03:32.989 --> 00:03:39.110
整合是的，因此jisub PDP整合几乎完成了

00:03:39.110 --> 00:03:42.260
我可能不会在本轮中包括的几个模块就像NAP

00:03:42.260 --> 00:03:47.320
经理和钥匙串之一，因为午睡经理实际上还没有完成

00:03:47.320 --> 00:03:53.000
钥匙串实际上目前不在p2p中，它是独立的

00:03:53.000 --> 00:03:57.769
本身，现在仅在JSI BFS中使用，所以我可能会等到

00:03:57.769 --> 00:04:03.190
将其作为一个单独的对象执行，这样会导致一些API链

00:04:03.609 --> 00:04:08.150
是的，但是这周我应该做完了，雅各布你又起来了

00:04:08.150 --> 00:04:13.760
行业基本上是的，所以经历了

00:04:13.760 --> 00:04:18.530
我正在经历的中继上的分布式信令示例

00:04:18.530 --> 00:04:25.120
我一直发现杂项问题，例如J的多加法器未处理

00:04:25.120 --> 00:04:28.940
当您宣布自己确实在那儿时，电路中继会凝视

00:04:28.940 --> 00:04:34.190
只是解决了我没有解决的一件事

00:04:34.190 --> 00:04:39.260
现在是散布的冰块，但我们可能需要照顾

00:04:39.260 --> 00:04:43.789
在某个时候，因为否则，如果我们像默认的Google I一样使用

00:04:43.789 --> 00:04:49.610
在中国冰之类的地方变得非常容易阻塞的服务器

00:04:49.610 --> 00:04:53.750
你自己的外衣，对吧，我用什么来发现你的外衣

00:04:53.750 --> 00:05:00.110
地址是是，所以我们认为AlterNet可以做到这一点

00:05:00.110 --> 00:05:04.280
在许多情况下足以满足您的需求，就像在服务器上一样

00:05:04.280 --> 00:05:09.050
像您这样的各个地方，您可以问他们，嘿，我的外部地址是什么，

00:05:09.050 --> 00:05:13.669
它会开始回拨给您，所以我认为我们可能会被覆盖在那里

00:05:13.669 --> 00:05:19.310
确实它是分布式的，就像我们仍然希望您必须找到这些

00:05:19.310 --> 00:05:24.250
服务器可能很棘手，但对，她进入他的标头的另一件事是

00:05:24.250 --> 00:05:32.240
这些哦有这个PR up或spec TR关于是的，请

00:05:32.240 --> 00:05:40.310
这是有效的，我知道它叫什么，我猜电击给了正确的词

00:05:40.310 --> 00:05:46.340
通过接力，我们很幸运，是的，它正在试图弄清楚她基本上可以X um

00:05:46.340 --> 00:05:50.960
一讲，然后他们告诉你喜欢还是比你协调小姐

00:05:50.960 --> 00:05:55.220
连接尝试使用，就像我不说他们说的那样，否则我把它们拿出来，所以他

00:05:55.220 --> 00:06:05.240
开放以绕过路由器，所以您应该阅读任何人都可以阅读的内容

00:06:05.240 --> 00:06:09.229
就像尝试做他们所关注的全部一样，这确实需要

00:06:09.229 --> 00:06:14.330
首先建立电话连接，如果我们

00:06:14.330 --> 00:06:17.900
已经在使用继电器，也许在我们现有的继电器系统中打电话是不是

00:06:17.900 --> 00:06:22.940
缩放好，那么我们是的，我们认为要做的一件好事是

00:06:22.940 --> 00:06:27.200
很好地替换我们长期致力于J的信令服务器

00:06:27.200 --> 00:06:32.650
i PFS，然后将其替换为专用于Janus I的中继服务器

00:06:32.650 --> 00:06:36.590
认为要使其变得完全有用，我认为他们可能必须进行数据包交换

00:06:36.590 --> 00:06:41.690
某处的系统，因为中继器有这样的问题，就像他想踢

00:06:41.690 --> 00:06:44.360
到每个中继上的一个节点，您必须收集每个中继

00:06:44.360 --> 00:06:48.800
这意味着每个人都需要注意所有无效的方法，但是我们

00:06:48.800 --> 00:06:50.990
可以做尽可能多的关于背部的部分，所以您可以

00:06:50.990 --> 00:06:53.750
连接一个继电器另一个，让我们都互相连接，这样您就可以了

00:06:53.750 --> 00:07:00.590
向前跳，但我们目前不这样做，我们稍微容易一点

00:07:00.590 --> 00:07:04.010
像是从您那里备份的备份，基本上，您认为无法进行出站照明

00:07:04.010 --> 00:07:07.370
做到这一点，你现在说的所有日子都依赖，然后中继将其路由到

00:07:07.370 --> 00:07:10.280
正确的中继，然后基本上每个人都像网关一样

00:07:10.280 --> 00:07:14.300
节点，我认为这可能很难，因为您需要像这样努力工作

00:07:14.300 --> 00:07:21.890
喜欢思考和工作以使其正常工作，是的，所以继续前进吧

00:07:21.890 --> 00:07:30.650
eNOS没错，所以这对人中有一个合并了Huzzah，这意味着我们

00:07:30.650 --> 00:07:36.530
是二分之一的PRS，因为我已经分离出一些东西来做到这一点

00:07:36.530 --> 00:07:40.280
我们实际上可以喜欢使用它，您知道使用它并拥有它，您知道会

00:07:40.280 --> 00:07:45.350
从上周开始跟随一些设计师的靴子的功能，谢谢

00:07:45.350 --> 00:07:52.810
每个人都可以提供帮助，这几乎就是同行见解的终结了。

00:07:52.810 --> 00:07:59.750
与lib p2p记录验证器有关的几个设计问题浮出水面

00:07:59.750 --> 00:08:03.170
如果有兴趣，应该看看的界面

00:08:03.170 --> 00:08:08.170
基本上我们无法弄清楚事物是否相等，我们似乎只在乎

00:08:08.170 --> 00:08:13.130
有许多方法可以选择最佳记录的情况

00:08:13.130 --> 00:08:19.580
合并记录，就出现了这样的问题，例如拥有一个单独的名称sis

00:08:19.580 --> 00:08:24.010
我知道有些人对此感兴趣，我不确定他们是否在电话中

00:08:24.010 --> 00:08:30.950
但是，如果您愿意的话，请发表评论，以便我可以做您想做的，这一切都是为了

00:08:30.950 --> 00:08:33.040
我

00:08:33.770 --> 00:08:39.690
好吧，你好，还是希望这是这里

00:08:39.690 --> 00:08:46.380
不，是的，让我们知道关于迁移的更多消息了

00:08:46.380 --> 00:08:54.210
哈克特（Hackett）经理的混蛋正在起飞，这是我想的全部，但让我们

00:08:54.210 --> 00:08:58.350
见吉姆或其他人来了，您有想要的下一个主要更新

00:08:58.350 --> 00:09:03.930
包括好吧，我的意思是我有一个，我猜我把它放在这里，混蛋真的很有效

00:09:03.930 --> 00:09:10.350
很难提高速度，是的，所以如果你想看看

00:09:10.350 --> 00:09:21.560
刚去看棒球鱼就好了，最近一期是

00:09:27.440 --> 00:09:30.800
关键地找到这个

00:09:40.589 --> 00:09:46.329
这是关于改进这样的请求分片，我们找出

00:09:46.329 --> 00:09:52.689
似乎在问哪个路段开始吸引人

00:09:52.689 --> 00:09:56.679
这是Hayes可以开始工作的地方，因此，如果您有意见或想法

00:09:56.679 --> 00:10:05.589
但是很好，这是他们的另一个更新，我不得不和亚历克斯谈谈

00:10:05.589 --> 00:10:14.049
今天早上有一场表演，所以我想这是更多打包的问题

00:10:14.049 --> 00:10:18.549
更新真正有效的度量标准填充日期，但一切都很好

00:10:18.549 --> 00:10:30.699
杰西卡（Jessica）真的好吧，这是他很快确定的事情，有人在这里添加了

00:10:30.699 --> 00:10:38.199
正确地讲，这是切换到使用的长期持续重构

00:10:38.199 --> 00:10:43.899
基于promise的API适用于整个代码库中的其他应用程序，而不是

00:10:43.899 --> 00:10:52.179
回调它涉及到ipfs的p2p我kod多种格式有67个回购

00:10:52.179 --> 00:10:57.009
需要重构，例如链接到存在的问题

00:10:57.009 --> 00:11:02.040
这样做有很多充分的理由，在这个问题上有充分的理由

00:11:02.040 --> 00:11:09.999
像是捆扎面较小的东西，更好的员工会留下痕迹

00:11:09.999 --> 00:11:15.009
像那样，您知道与诺言如何合作是一种更现代的方式

00:11:15.009 --> 00:11:19.989
使用JavaScript的工作，希望我们可以吸引更多的人

00:11:19.989 --> 00:11:26.619
如果我们不提供类似API的API，那么有兴趣使用ipfs

00:11:26.619 --> 00:11:33.399
被视为某种形式的过时，所以有一些原因

00:11:33.399 --> 00:11:36.759
去阅读它们，它已经进行了很长时间了，有很多回购

00:11:36.759 --> 00:11:44.589
而且我们还没有资源让人们在他们的工作期间全力以赴

00:11:44.589 --> 00:11:49.899
宿舍，所以这是一种有时间并能完成尽可能多的工作的时候

00:11:49.899 --> 00:11:53.470
可以在问题中有一个清单

00:11:53.470 --> 00:11:58.630
我告诉过你的那67个回购协议，以及该所有者的当前人

00:11:58.630 --> 00:12:03.399
特别是不一定是回购的捐赠者，而是交易的所有者

00:12:03.399 --> 00:12:08.170
重构该特定的回购，正如您所期望的，有一个状态表情符号

00:12:08.170 --> 00:12:13.120
来自我在红苹果上花了一些力气才解决的问题

00:12:13.120 --> 00:12:17.560
尚未启动，但对于请求请求为橙色，对于某事为绿色

00:12:17.560 --> 00:12:24.009
该动议发布后，我们目前已完成了约64％的所需工作

00:12:24.009 --> 00:12:32.050
要做，我们最引人注目的例外是嘴唇e2p东西，我认为

00:12:32.050 --> 00:12:37.810
这意味着回购协议有很多实时供稿，只有两个人在工作

00:12:37.810 --> 00:12:43.149
专职工作，而不是专职从事这项工作，

00:12:43.149 --> 00:12:50.410
将它们重构为基于异步/等待而不是回调的过程

00:12:50.410 --> 00:12:55.660
更加棘手，因为我们不只是重构异步/等待，而是

00:12:55.660 --> 00:13:02.889
就是这样-也使用异步迭代器，而不是常规的完整流，因此

00:13:02.889 --> 00:13:09.100
p2p中的礁石行动者不仅参与其中，还参与其中

00:13:09.100 --> 00:13:16.000
回调到Promise，所以状态只是我们正在通过

00:13:16.000 --> 00:13:22.300
我认为我们赢得了一项回购，现在已经浮出水面，这是我们应该做的事情

00:13:22.300 --> 00:13:27.699
肯定会在下一步工作并得到反映是ipfs repo，因为

00:13:27.699 --> 00:13:34.930
阻止了许多人，我认为IP Odie进行了更新，并且以某种方式

00:13:34.930 --> 00:13:43.389
它取决于异步/等待，例如s repo for GC我们基于新的异步/等待的

00:13:43.389 --> 00:13:49.860
repo实际上有一个流API，我们真的需要它来进行垃圾回收

00:13:49.860 --> 00:13:56.350
这样，当我们有一个包含以下内容的存储库时，我们就不会遇到内存不足的问题

00:13:56.350 --> 00:14:02.800
其中有很多东西，而回购迁移工具还有另一件事

00:14:02.800 --> 00:14:07.700
现在可以但尚未合并的内容还取决于

00:14:07.700 --> 00:14:11.810
ipfs重放的基本版本，所以我们需要完成该动作

00:14:11.810 --> 00:14:17.330
接下来是优先事项，但我们确实值得一提，我们确实做了

00:14:17.330 --> 00:14:23.570
在该问题中优先考虑这些存储库，我们将p0编织成基本上

00:14:23.570 --> 00:14:31.040
没有其他模块的依赖关系，然后我们给其他模块p1 p1 p2 p3

00:14:31.040 --> 00:14:38.390
当我们应该在何时左右时，我们应该对其进行重构

00:14:38.390 --> 00:14:43.040
棘手的是，因为每一个重构都是一个重大的变化

00:14:43.040 --> 00:14:48.110
协调，这只是花时间，我知道这将花费很长时间

00:14:48.110 --> 00:14:53.480
它花费的时间比我预期或想要的要长，但我们正在努力，我们

00:14:53.480 --> 00:15:02.380
最终会到达那里，如何进行更新，这是一个很好的更新

00:15:02.380 --> 00:15:07.850
因此，我们谈到了DHT是使用数据存储的东西

00:15:07.850 --> 00:15:12.800
界面钥匙串是我使用的另一件事，所以我要解决这两个问题

00:15:12.800 --> 00:15:15.590
那两个我明天可能会尝试做

00:15:15.590 --> 00:15:20.720
这样就不会阻止ipfs repo进入JSI PFS，所以我们可以升级

00:15:20.720 --> 00:15:30.120
所有这三个同时Brad Thank You Jacob现在我的设计好了

00:15:30.120 --> 00:15:45.840
上周的提案中，我们为俱乐部开了个阴茎，所以也有一些问题，抱歉

00:15:45.840 --> 00:15:51.530
对上一个主题提出后续问题，是的，我很好奇

00:15:51.530 --> 00:15:56.700
让人们喜欢在线程上讨论过的东西

00:15:56.700 --> 00:16:00.420
上周，您知道如果我们进行冲刺或突刺，情况会怎样？

00:16:00.420 --> 00:16:06.630
在这个问题上，或者有几个人喜欢在第4季度全职致力于这个问题，

00:16:06.630 --> 00:16:11.580
像是大大改善并帮助我们能够解决这个问题

00:16:11.580 --> 00:16:17.760
而不是像我们一直在努力那样继续进行下去

00:16:17.760 --> 00:16:24.000
就像您知道的六个六个月一样，我们是64％，所以大概

00:16:24.000 --> 00:16:31.530
希望再过六个月才能100％达到我们的目标-即

00:16:31.530 --> 00:16:37.650
招募或帮助尚未在外部的人

00:16:37.650 --> 00:16:42.690
贡献那些人参与这种可行的事情，我们是什么

00:16:42.690 --> 00:16:51.840
是的，所以有人建议我们可以在Jas上冲刺

00:16:51.840 --> 00:16:58.740
核心团队专门从事此工作，就像我发现的那样，因为它已经开始了很长时间

00:16:58.740 --> 00:17:03.750
以前现在很难证明软件包管理者的目标

00:17:03.750 --> 00:17:09.080
除此之外，这将使Jess我给s大大简化调试

00:17:09.080 --> 00:17:13.890
从长远来看，维护和使用起来非常容易，但这只是

00:17:13.890 --> 00:17:18.750
需要做一些事情，所以是的，我们将整个进步

00:17:18.750 --> 00:17:23.339
如果我们让每个人都在努力工作，那就快得多了

00:17:23.339 --> 00:17:27.959
我很犹豫，要让没有经验的人像这样

00:17:27.959 --> 00:17:37.030
是回购协议，实际上只是一种机械式的回调交换

00:17:37.030 --> 00:17:42.799
抱歉，从回调切换到基于Promise的接口，您知道那会

00:17:42.799 --> 00:17:48.350
对于低级别的lippy dippy联网设备还可以，我比较犹豫

00:17:48.350 --> 00:17:52.640
允许任何公正的人或完全没有在利比工作的人给我

00:17:52.640 --> 00:17:57.409
之所以进行这项工作，是因为它对IDF及其方式至关重要

00:17:57.409 --> 00:18:05.750
如此运作，是的，如果有人愿意为您的回购做贡献

00:18:05.750 --> 00:18:10.100
然后拿起那些东西，绝对地，我们有来自外部的贡献者

00:18:10.100 --> 00:18:15.679
做到这一点，就像我们认为Dirk在他开始做这件事之前一样

00:18:15.679 --> 00:18:21.799
开始全职从事ipfs以及许多其他贡献者的工作

00:18:21.799 --> 00:18:29.600
您在社区中是谁，所以我绝对有可能，但是是的，我们可以

00:18:29.600 --> 00:18:35.330
也可以让外部机构来做，但是那只能超出一定范围了

00:18:35.330 --> 00:18:40.190
金额，我们认为您知道非常容易的是

00:18:40.190 --> 00:18:47.720
在很大程度上，我需要仔细检查一下，是的，我只是一点点

00:18:47.720 --> 00:18:52.880
犹豫不决，我想我不是，我并不完全反对它，是的，就像我一样

00:18:52.880 --> 00:18:57.559
很想拉J核心团队中的每个人，并说在这方面的工作

00:18:57.559 --> 00:19:03.110
直到完成，但我知道我们要实现这一目标

00:19:03.110 --> 00:19:08.210
原因，这就是为什么还没有真正快速地完成您的原因

00:19:08.210 --> 00:19:14.299
因为它一直是您有时间去做的时候，您知道并且

00:19:14.299 --> 00:19:19.280
整个过程中每个人都非常忙，所以这只是

00:19:19.280 --> 00:19:25.190
很长一段时间，所以完全有效，谢谢您，先生，我不知道那是否可以回答，是否

00:19:25.190 --> 00:19:30.320
比我拥有的东西还多，是的，我想要注意的另一件事是，

00:19:30.320 --> 00:19:35.120
就像在我们讨论过的线程中一样，有四个核心模块

00:19:35.120 --> 00:19:39.860
使多路复用器像M Plex这样的多路复用器完成

00:19:39.860 --> 00:19:44.210
连接接口完成，然后进行传输和多流选择

00:19:44.210 --> 00:19:49.450
因为如果我们能集中精力完成这四个任务

00:19:49.450 --> 00:19:53.529
然后像创建一些示例一样，您将如何执行这些特定的操作

00:19:53.529 --> 00:19:57.159
然后滚动到链条上的东西就像我们可以真正开始

00:19:57.159 --> 00:20:01.450
像这样将社区中的人们更容易地外包

00:20:01.450 --> 00:20:04.659
可以说嘿，这是过去使用拉流完成的过程

00:20:04.659 --> 00:20:08.950
是您如何使用异步迭代器执行相同的操作，现在这使得

00:20:08.950 --> 00:20:12.429
甚至在业余时间也更容易做到，或者只是那些那些

00:20:12.429 --> 00:20:20.320
例子，但是花些时间做那四个人会很好

00:20:20.320 --> 00:20:27.399
是的，我想嗯，所以我们有一个实施方案，我本周花了时间

00:20:27.399 --> 00:20:32.080
对不起，上周致力于多流选择和II，我认为这是关于

00:20:32.080 --> 00:20:41.139
90％完成后，我们为WebSockets和TCP传输打开了两个PRS，因此它们只是

00:20:41.139 --> 00:20:48.659
在接受审核的过程中，就像我们已经接近那个目标，是的

00:20:50.139 --> 00:20:54.129
太好了，谢谢你50

00:20:59.369 --> 00:21:06.129
所以现在我们有了设计视图建议，是的，我们完成了最后一个

00:21:06.129 --> 00:21:11.559
一周，您可以查看解决方案，以解决HTTP HTML问题，并尊重这一点

00:21:11.559 --> 00:21:15.699
不是我认为这是我们需要的，并且不关注容器，因此我们可以

00:21:15.699 --> 00:21:19.569
这样做的问题是我们正在尝试使用

00:21:19.569 --> 00:21:26.169
多标头在ifs中配置DNS解析器，以便我们可以实际使用它

00:21:26.169 --> 00:21:34.869
不幸的是，这是基于TLS的DNS，我们拥有HTTP链接，因此我们

00:21:34.869 --> 00:21:39.729
不会在休斯敦点起床指出需要一些HTM点

00:21:39.729 --> 00:21:43.299
我们实际上是指在端点处包含域的原因，因此

00:21:43.299 --> 00:21:46.779
这确实有一个好处，我们确实喜欢香肠来保持SAS域名的斜线

00:21:46.779 --> 00:21:51.219
之所以选择路径，是因为几乎所有的HTM点实际上都希望他们通过

00:21:51.219 --> 00:21:56.469
一个在1.1岁以下才需要的域名，大多数情况下，因为

00:21:56.469 --> 00:22:03.999
不幸的是，这台惠普目前的定义是不使用

00:22:03.999 --> 00:22:07.959
论点，我们已经有了一些您无需花钱就可以使用的用例

00:22:07.959 --> 00:22:12.159
参数，例如，如果您看一下这些内容，我们会有这样的HTTP斜杠

00:22:12.159 --> 00:22:17.619
p2p dec Web CRT最好的直接方式，所以您需要弄清楚如何处理这个问题

00:22:17.619 --> 00:22:20.559
打算在星期三或任何你知道的疯狂之前打电话给困惑的人

00:22:20.559 --> 00:22:23.699
开会，是的，这是我们看到的

00:22:23.699 --> 00:22:29.139
我们还有其他一些关于HTTP HTTP和TLS的随机问题，理想情况下

00:22:29.139 --> 00:22:32.979
撰写这些内容时，应该/ c少些，而不要自定义

00:22:32.979 --> 00:22:36.489
对于WebSocket来说，每一件事都是一样的。什么衣服是安全的，我们需要一些东西来

00:22:36.489 --> 00:22:40.989
升级路径很多有趣的东西基本上我们需要进行对话

00:22:40.989 --> 00:22:45.999
关于这个，所以我想开会开会再讨论一次

00:22:45.999 --> 00:22:51.219
星期三，所以我们在星期二下午有一些时间，直到我总结所有

00:22:51.219 --> 00:22:57.999
这是每个人，如果你想来，请注册，我将转

00:22:57.999 --> 00:23:01.709
可以与所有人一起工作的预定会议

00:23:04.440 --> 00:23:10.560
步行者问您需要的任何东西，而他拒绝了任何需要您的人

00:23:10.560 --> 00:23:13.710
知道对某事发表评论或听到某事或完成某事

00:23:13.710 --> 00:23:24.660
埃伦（Ellen），我在I / o网站的JSA ipfs上有PR，所以我认为Moxie

00:23:24.660 --> 00:23:28.710
不再专门在该网站上工作，所以这取决于我们

00:23:28.710 --> 00:23:37.080
审查并合并更多涉及到的事情，因为我

00:23:37.080 --> 00:23:40.200
在做的是更新网站上的示例以将新的构造函数用于

00:23:40.200 --> 00:23:45.240
最新版本的Jess IVF涉及更多，因为这些库

00:23:45.240 --> 00:23:50.700
该网站正在使用我不知道为什么要转载东西，但它正在转载

00:23:50.700 --> 00:23:56.610
被转运是在网站上运输东西，我需要升级

00:23:56.610 --> 00:24:02.190
库支持async / await，因为它很旧，因此PR的方式更多

00:24:02.190 --> 00:24:07.610
参与比我想要的要多，我可以希望一个人拥有一个

00:24:07.610 --> 00:24:13.080
像一个人那样看待它，或者更专注于前端

00:24:13.080 --> 00:24:23.910
看一看，并批准它告诉我，我错了或有什么问题

00:24:23.910 --> 00:24:27.810
就这样，是的，有人把它放进去了

00:24:27.810 --> 00:24:41.750
非常感谢任何其他阻止者提出需要的问题

00:24:44.039 --> 00:24:55.929
停车场好吧，是的，问题是，是的，所以有一些

00:24:55.929 --> 00:25:02.260
在某些代码中我注意到的，我们并没有像我们使用的那样

00:25:02.260 --> 00:25:06.549
接口，就像它们是Java接口和静态接口一样，我想知道

00:25:06.549 --> 00:25:12.400
如果这是故意的，或者如果我们没有真正利用这一事实

00:25:12.400 --> 00:25:15.520
那我们就可以在任何使用的地方定义接口，然后说

00:25:15.520 --> 00:25:20.890
好吧，我们只是在接口使用担保的方式上订立合同，所以我们

00:25:20.890 --> 00:25:26.500
应该在某些情况下做到这一点，就像半个问题之前一样

00:25:26.500 --> 00:25:31.029
确实有两件事我们使用接口，因为我们将它们用于合同

00:25:31.029 --> 00:25:37.779
当它发布时，我们的意思是希望我们满足您的要求，

00:25:37.779 --> 00:25:42.940
其实是的，就像我无论如何都可以用于文档编制，这就是为什么我们

00:25:42.940 --> 00:25:48.159
到那里，我可能应该做更多的工作，例如定义接口

00:25:48.159 --> 00:25:51.220
使用它们，但在某些情况下，看起来需要重新定义接口

00:25:51.220 --> 00:25:55.409
在我们不想要的地方，我认为这实际上仅取决于模块

00:25:55.409 --> 00:26:00.730
即使是在某些情况下，我们也很少使用接口，有时我们会

00:26:00.730 --> 00:26:04.270
那是因为我们认为您知道吃什么就好，这样他们才能杀死您

00:26:04.270 --> 00:26:08.830
不应该返回接口，您必须返回具体类型，但是

00:26:08.830 --> 00:26:12.880
有时我们还是使用接口，因为我们说的看起来像是

00:26:12.880 --> 00:26:15.850
要在将来更改具体类型，您可能需要添加其他

00:26:15.850 --> 00:26:19.659
具体类型，因此我们将仅将咖啡类型转变为

00:26:19.659 --> 00:26:24.070
面对的界面，就像我们在各处进行的操作一样，大部分都是

00:26:24.070 --> 00:26:28.990
像他这样的东西确实有成本，例如，如果我输入分配成本，那么需要

00:26:28.990 --> 00:26:33.220
要对此更加谨慎，但这是因为它取决于

00:26:33.220 --> 00:26:37.029
案例我想很多莎莎酱就像人们开始为此工作

00:26:37.029 --> 00:26:39.909
经验，但是他们带来了这些想法的语言，而不是两个

00:26:39.909 --> 00:26:44.020
分钟就像你在柜台上寻找lib p2p一样顺利

00:26:44.020 --> 00:26:47.110
具有主机接口的各种东西或群集的连接外观

00:26:47.110 --> 00:26:51.399
伙计们之类的东西，那是因为就像我们想要抽象的一样

00:26:51.399 --> 00:26:54.850
这就是说嘿用户在这里使用这些东西，就像这是

00:26:54.850 --> 00:26:58.810
您应该使用的类型，因为您不能依赖

00:26:58.810 --> 00:27:03.730
具体的信息基本上就是我们所做的，就像他们作为

00:27:03.730 --> 00:27:06.970
我发布的一些问题的例子，就像你知道的

00:27:06.970 --> 00:27:12.900
Golu p2p记录类型我不必与任何人进行长时间的讨论

00:27:12.900 --> 00:27:18.370
更改记录类型，我可以创建一个新接口和一个库

00:27:18.370 --> 00:27:24.550
它在库中使用，事物正在被消耗，就像没有全局变量一样

00:27:24.550 --> 00:27:28.990
在某些情况下需要外观上两个人的变化，是您的关注

00:27:28.990 --> 00:27:34.720
这就像如果你基本上有一些烟可以形成一些

00:27:34.720 --> 00:27:39.190
接口，那么您必须确保密钥支持该接口，另一个

00:27:39.190 --> 00:27:44.650
像我说的那样，如果您喜欢，如果您更改一件事情并添加功能，

00:27:44.650 --> 00:27:48.580
改变它，然后你改变其他东西去航行，我需要一些新的东西

00:27:48.580 --> 00:27:52.090
功能，那么其​​他任何可能知道该功能不起作用的功能都将无法正常工作

00:27:52.090 --> 00:27:55.870
这是我们使用界面力的主要原因之一

00:27:55.870 --> 00:28:02.020
支持部门Go Go由Google为Google编写，就像一个

00:28:02.020 --> 00:28:06.610
监控精神，在我们的情况下效果很好，你也许有那些

00:28:06.610 --> 00:28:11.050
许多不同的人在做这些事情，所以我们需要一些地方

00:28:11.050 --> 00:28:16.990
我们可以说，您知道看起来真的是那样，就像您知道基础

00:28:16.990 --> 00:28:24.010
因为这是我们要履行的合同，所以如果您

00:28:24.010 --> 00:28:26.620
重新定义相同的数据库，以使用一系列不同的操作

00:28:26.620 --> 00:28:30.310
事情是找到一个这样的应用程序，那么现在还不清楚

00:28:30.310 --> 00:28:36.010
例如发生向上的情况时，您可能会遇到诸如此类的情况，

00:28:36.010 --> 00:28:43.510
因为有道理的魔术原因而工作，所以谈论您的事情就很好了

00:28:43.510 --> 00:28:46.900
就像上下文一样，尽管只是看起来像事物看起来的形状

00:28:46.900 --> 00:28:49.900
他们做事的方式，因此，如果您正在与山谷地区交谈，那么您基本上想

00:28:49.900 --> 00:28:54.130
添加一个功能验证器接口，就像我们在这里找不到的原因是

00:28:54.130 --> 00:28:57.970
然后，就像我知道在任何地方都可以找到验证器，然后我可以通过

00:28:57.970 --> 00:29:01.810
潜水你们，然后它总是像一个有效的验证者，我

00:29:01.810 --> 00:29:05.170
继续寻找山花生基地本身，就像我们已经存储了

00:29:05.170 --> 00:29:08.650
验证器，我们使用它并构造所有内容，就像我们只是

00:29:08.650 --> 00:29:11.720
在端点定义验证器，然后像我可以有一个值

00:29:11.720 --> 00:29:26.690
某处搬出去或这就是为什么好，谢谢爸爸回答这个问题

00:29:26.690 --> 00:29:29.539
向其他问题提出任何其他问题

00:29:29.539 --> 00:29:35.470
时间到了，时间到了，Fi up对不起，好

