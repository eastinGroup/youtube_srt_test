WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:05.520
在这里，亚伦·戴维斯（Aaron Davis）也被kuma B所熟知，是的，所以现在

00:00:05.520 --> 00:00:08.189
极好尝试，让您握住自己的钥匙

00:00:08.189 --> 00:00:13.320
对于以太坊，我们现在正在尝试数字化我们的基础设施

00:00:13.320 --> 00:00:15.690
您会从中央集中阅读有关区块链状态的所有内容

00:00:15.690 --> 00:00:18.180
基础设施，但我们希望它有适当的可能性

00:00:18.180 --> 00:00:21.960
现在这很重要，因为我们无法访问我们没有的主网络

00:00:21.960 --> 00:00:26.369
我们需要在浏览器中执行的tcp / udp，所以我们必须做得更大

00:00:26.369 --> 00:00:30.689
工程项目，涉及创建第二个网络黑人客户

00:00:30.689 --> 00:00:37.020
这也使我们意识到，将会有几个数量级

00:00:37.020 --> 00:00:40.500
更像是客户端而不是完整节点，因此我们需要真正重新设计

00:00:40.500 --> 00:00:43.410
客户工作，他们如何共享数据以及如何彼此找到对方，这样他们就可以

00:00:43.410 --> 00:00:46.289
分享他们有想法的数据，所以这里有一些数据

00:00:46.289 --> 00:00:53.670
在现实世界的网络条件下可视化测试网络，让我们

00:00:53.670 --> 00:00:57.870
现在看一下，它开始像一个小毛团，可能不是

00:00:57.870 --> 00:01:00.510
有趣，但这很好，这意味着失去连接，您可以看到

00:01:00.510 --> 00:01:05.549
一部分的连通性不是很好，但是那是黑色的螺栓

00:01:05.549 --> 00:01:10.229
腿长矛正确，这样您就可以看到分离的结点使兄弟冷静下来

00:01:10.229 --> 00:01:14.220
是的，抱歉，WebRTC只是在任何网络情况下，有时您都知道

00:01:14.220 --> 00:01:19.200
将能够达到音符，但我不知道为什么这些音符无法到达，但是

00:01:19.200 --> 00:01:23.549
总的来说，您在这里的连通性非常好，并且您拥有

00:01:23.549 --> 00:01:28.350
正确的连接性，所以有趣的是这些节点是

00:01:28.350 --> 00:01:32.130
实际在遥测服务器上向您报告，而他们正在报告

00:01:32.130 --> 00:01:36.869
他们的连接数为零，让我们玩剩下的一个，是的，

00:01:36.869 --> 00:01:41.100
因此，您知道我们的遥测服务器是在云中运行，访问起来更轻松

00:01:41.100 --> 00:01:46.409
那么也许是其他在人们的笔记本电脑上运行的同行

00:01:46.409 --> 00:01:49.200
我现在特别感兴趣的是DHT和一些性能

00:01:49.200 --> 00:01:51.710
DHT的特性，尤其是在顶部运行

00:01:51.710 --> 00:01:55.460
我们是TC，并且在浏览器mm-hmm中运行，所以我在这里有其他一些看法

00:01:55.460 --> 00:02:01.369
我们可以看一下，并根据他们的喜欢X或放置他们的位置，例如，是的，

00:02:01.369 --> 00:02:06.890
看一看，所以把它们圈成圈，线是

00:02:06.890 --> 00:02:11.989
再次显示它们的连接mm-hm，这样我们也可以看一下

00:02:11.989 --> 00:02:18.670
DHT路由表是的，看起来非常相似，因为

00:02:18.670 --> 00:02:23.870
他们已经连接到路由表中的对等节点，因此显示

00:02:23.870 --> 00:02:27.800
我们基本上按照像kunia距离的方式来塑造网络的形状

00:02:27.800 --> 00:02:32.870
本质上是Khedive Miyake空间，这就是这条线

00:02:32.870 --> 00:02:36.680
实际上向我们显示了路由表中的成员资格，所以对等方持有什么

00:02:36.680 --> 00:02:40.940
路由表中其他对等点（现在颜色正确）是

00:02:40.940 --> 00:02:44.930
设置为平台的绿色，现在正在铬上运行，橙色

00:02:44.930 --> 00:02:52.690
那些是在Firefox上的，但我之前没有看到美国运通浏览器，是的，是的

00:02:55.720 --> 00:03:03.460
所以现在我们也可以将DHT查询可视化

00:03:03.460 --> 00:03:06.760
因此这就是网络的作用，并试图找到具有提供内容的人

00:03:06.760 --> 00:03:10.720
是的，所以实际上我实际上在顶部看到了这些小标签

00:03:10.720 --> 00:03:15.550
您是否能够根据不同的特性来更改颜色是

00:03:15.550 --> 00:03:19.300
实现了，是的，所以这是在此过程中构建的II

00:03:19.300 --> 00:03:24.340
数据可视化就像一个模块化的图形可视化工具，因此您可以添加

00:03:24.340 --> 00:03:28.060
影响您如何进行布局的不同模块，如何进行拓扑以及

00:03:28.060 --> 00:03:33.550
您如何正确选择颜色，所以现在我们正在寻找要搜索的平台-

00:03:33.550 --> 00:03:40.000
例如正常运行时间是倍数，或者让我们看一下，因此在此实验中，

00:03:40.000 --> 00:03:44.440
正常运行时间为两个小时，我只是重新启动了节点，所以您看到了

00:03:44.440 --> 00:03:48.280
红色或已经接近两个小时，而明亮的绿色

00:03:48.280 --> 00:03:53.290
还年轻，这实际上向我们展示了DHD在某种程度上就像是

00:03:53.290 --> 00:03:57.580
向我们展示了正确的流失和DHT想要留下的鼻子

00:03:57.580 --> 00:04:02.590
绿色环保产品在DHT上使用的时间更少了，这意味着他们可能

00:04:02.590 --> 00:04:07.660
有可能不是那么稳定，以至于无法提供这种稳定性

00:04:07.660 --> 00:04:14.950
您知道的DHD具有美味的理想特性，因此接下来

00:04:14.950 --> 00:04:19.270
我真的想展示的是我之前已经做过的DHT查询

00:04:19.270 --> 00:04:23.100
所以我现在就显示

00:04:26.190 --> 00:04:31.300
正确，所以现在我将拓扑和颜色更改为基于DHT

00:04:31.300 --> 00:04:36.669
查询我之前做过的你好，颜色是什么意思哦，是的，所以在这里

00:04:36.669 --> 00:04:41.410
很难看到是粉红色的，这是请求的发起者，但总的来说

00:04:41.410 --> 00:04:45.729
另一个黄色的音符，让我们靠近

00:04:45.729 --> 00:04:49.990
是的，所有黄色笔记都是在某些时候推荐的笔记，但我们

00:04:49.990 --> 00:04:55.810
不用打扰他们，推荐的是推荐的

00:04:55.810 --> 00:05:02.380
对我们来说，我们拨号，然后绿色的是结果，我们没有互动

00:05:02.380 --> 00:05:06.310
那太酷了，那太酷了，那该怎么办

00:05:06.310 --> 00:05:10.300
我们在这里看到，所以您可以看到肯尼（Kenny）的跳数

00:05:10.300 --> 00:05:19.660
没错，所有容量的所有网络请求都来自于大

00:05:19.660 --> 00:05:24.090
但是在这里，当您看到它反弹时，是因为

00:05:27.360 --> 00:05:33.780
很好很好，所以从这个快乐中实际上可以指导这一点

00:05:33.780 --> 00:05:39.330
特定节点以启动对网络的查询，我们也可以在其中运行它们

00:05:39.330 --> 00:05:44.129
批次，这样您可以获得更广泛的统计信息。

00:05:44.129 --> 00:05:48.960
实验平台同意在网络上实际运行实验

00:05:48.960 --> 00:05:54.509
本身是正确的，这样您就可以可视化网络，并且您能够

00:05:54.509 --> 00:05:59.729
指示特定的同行运行特定的操作，而您

00:05:59.729 --> 00:06:03.719
能够喜欢检查该操作实际上如何在网络中展开

00:06:03.719 --> 00:06:07.680
非常棒的可视化效果，因为它似乎是我们的网络

00:06:07.680 --> 00:06:12.629
很难理解，所以拥有这样的视觉效果使整个事情变得非常重要

00:06:12.629 --> 00:06:33.240
更有什者，这是很不对劲的事情，那又怎样呢？

00:06:33.240 --> 00:06:37.860
实际上，我想知道元掩码本身和您的项目

00:06:37.860 --> 00:06:42.779
知道是因为您说过您正在建立这些视觉效果，

00:06:42.779 --> 00:06:49.740
真正了解基础的工作原理的技术

00:06:49.740 --> 00:06:54.569
网络，那么您为什么真正选择Libby自己作为网络

00:06:54.569 --> 00:07:02.400
堆叠的基础，这是什么主要原因？

00:07:02.400 --> 00:07:07.050
与浏览器的唯一性无关

00:07:07.050 --> 00:07:12.660
是的，所以选择了以太网络的方式他们

00:07:12.660 --> 00:07:15.630
协议的硬编码内容，而这些协议对我们而言则不可用

00:07:15.630 --> 00:07:21.750
所以我们答应了，那当然要困难得多，然后

00:07:21.750 --> 00:07:25.950
能够让您知道可以在TCP UDP土地上运行的相同代码

00:07:25.950 --> 00:07:31.140
并能够在浏览器上下文中通过传输运行它

00:07:31.140 --> 00:07:38.010
透明性，您可以将WebRTC与相同的业务逻辑结合使用，从而

00:07:38.010 --> 00:07:43.020
如果您知道浏览器是什么，将来可以无缝切换到TCP UDP

00:07:43.020 --> 00:07:47.430
实施了一些努力朝着这个方向前进，例如

00:07:47.430 --> 00:07:53.160
是Deep Web，是的，所以您一直在与他们合作，否则我就没有

00:07:53.160 --> 00:07:56.700
正在运行它，因为我不希望它可用，但是我正在寻找什么

00:07:56.700 --> 00:08:00.810
可以做的就是从此处运行WebRTC获得良好的统计数据

00:08:00.810 --> 00:08:09.150
然后在Loopy Web上运行它，然后显示Lifti Web的数量级

00:08:09.150 --> 00:08:11.990
这真的很重要

00:08:18.810 --> 00:08:24.270
即使您完全可以很明显地看到，我也认为这个演示是

00:08:24.270 --> 00:08:27.540
令人惊奇的是，这种工具正是我们所需要的

00:08:27.540 --> 00:08:30.600
了解正在发生的事情以及我们尤其是点对点网络

00:08:30.600 --> 00:08:34.349
我来自Lippe，是一个团队，我们必须做出很大的发展才能到达一个地方

00:08:34.349 --> 00:08:37.469
这样，我们可能会继续与Kamali's合作

00:08:37.469 --> 00:08:42.210
得到一些他的学习，并得到一些他的见解以及如何

00:08:42.210 --> 00:08:46.980
构建这些工具，以便我们可以将它们提供给整个Lippe

00:08:46.980 --> 00:08:51.570
 Bierko系统，我只想说您还有什么想说的吗？

00:08:51.570 --> 00:09:00.870
告诉世界，是的，我们正在招聘您，您正在使用这些工具，是的，所以，您

00:09:00.870 --> 00:09:10.410
想要对浏览器中的内容进行远程工作，谢谢很多人

00:09:10.410 --> 00:09:12.470
ya

