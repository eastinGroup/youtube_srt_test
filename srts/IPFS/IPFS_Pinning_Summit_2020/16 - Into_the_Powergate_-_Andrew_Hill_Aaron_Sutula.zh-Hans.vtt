WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.149 --> 00:00:03.749
我的名字叫安德鲁（Andrew）我在纺织业工作，我将和您谈谈

00:00:03.749 --> 00:00:07.890
出现了几次的技术称为电源门

00:00:07.890 --> 00:00:13.769
关于纺织品，所以我们是一个由五个人组成的小团队，我本人和亚伦都会去

00:00:13.769 --> 00:00:17.699
今天向您展示，但我想确保向

00:00:17.699 --> 00:00:22.110
其他团队成员，尤其是伊格纳西奥（Ignacio），他真的让很多

00:00:22.110 --> 00:00:27.029
在我们的支持下在电动门上工作，所以只想

00:00:27.029 --> 00:00:30.449
确保我大声疾呼，但您可以在github上找到我们所有的工作，如下所示：

00:00:30.449 --> 00:00:35.880
好，这样您就可以看到那里的一切以及人们的贡献，所以今天

00:00:35.880 --> 00:00:40.770
谈论它，以便您将文件硬币插入到您的体系结构中，所以也许您想要

00:00:40.770 --> 00:00:45.780
将其作为API放到现有系统中，或者您想运行文件硬币

00:00:45.780 --> 00:00:49.980
以有状态的方式满足您的需求，或者您可能想做出

00:00:49.980 --> 00:00:55.410
您存储在文件硬币上的文件可以通过IP FS获得，也许您

00:00:55.410 --> 00:00:59.610
想要管理具有不同需求的多个地址，也许您想跟踪

00:00:59.610 --> 00:01:04.049
您的存储空间会随着时间推移而发生交易，因此，如果存储空间

00:01:04.049 --> 00:01:08.670
中断，或者如果交易即将到期而您仍可以续订它们，而您仍然

00:01:08.670 --> 00:01:14.279
希望这些数据持久保存在文件中，因此，如果其中任何一个引起您的共鸣

00:01:14.279 --> 00:01:18.689
或者您对那些正在正确讨论的人感兴趣，所以这就是

00:01:18.689 --> 00:01:23.849
电源门真的进来了，所以我已经为电源门准备了一个衬板

00:01:23.849 --> 00:01:29.009
一直在使用的是，它是API驱动的解决方案，可供开发人员部署

00:01:29.009 --> 00:01:33.240
多层存储系统在其应用程序和服务中，以及

00:01:33.240 --> 00:01:38.759
多层实际上是在获取存储，文件代币和可用性

00:01:38.759 --> 00:01:44.669
在ipfs网络上，就像纺织业正在建设的所有东西一样，

00:01:44.669 --> 00:01:48.630
值得一提的两个属性，实际上与某物确实相关

00:01:48.630 --> 00:01:52.709
非常酷的胡安（Juan）之前谈到线程时，我们实际上是在构建这些东西

00:01:52.709 --> 00:01:56.669
供您使用，因此它是开源的，我们真的希望您能休息一下

00:01:56.669 --> 00:02:01.229
分开看看是否满足您的需求，让我们知道我们如何以不同的方式构建它

00:02:01.229 --> 00:02:05.009
或与我们合作以不同的方式构建它，因此请记住这一点

00:02:05.009 --> 00:02:08.969
与您分享这件事，然后另一件事是，我们真正专注于

00:02:08.969 --> 00:02:12.329
试图使这些东西变得熟悉并且易于使用，因此

00:02:12.329 --> 00:02:15.459
希望您能得到，如果您使用电源门，那是

00:02:15.459 --> 00:02:18.940
显然是早些，所以如果明天再去那里，事情会很艰难，

00:02:18.940 --> 00:02:23.980
开始玩它，我当然仍然会鼓励它，但是它将获得更多，并且

00:02:23.980 --> 00:02:29.530
当我们接近主网时更加平滑，仅此功能的一些功能要点

00:02:29.530 --> 00:02:33.850
在我们深入探讨今天的话题之前，我们先讲一下亚伦的经历

00:02:33.850 --> 00:02:38.920
给出一些在CLI中工作的api的实时演示，因此我们将获得

00:02:38.920 --> 00:02:42.880
这里技术性很强，但某些功能突出了功率门的确

00:02:42.880 --> 00:02:47.769
旨在桥接此文件硬币存储和ipfs可用性，但它带来了一些

00:02:47.769 --> 00:02:52.239
系统构建者想要的其他非常出色的功能，例如

00:02:52.239 --> 00:02:55.570
能够在新交易到期的交易中创建交易修复交易

00:02:55.570 --> 00:02:59.980
这是有状态的，长期的债务以及对这些交易的长期监控

00:02:59.980 --> 00:03:04.959
可以做一些事情，例如让用户拥有系统中的地址，而他们可以

00:03:04.959 --> 00:03:08.620
沙盒，并创建自己的存储交易，这些交易是

00:03:08.620 --> 00:03:12.910
独立于系统中的其他任何人，然后它还会跟踪

00:03:12.910 --> 00:03:17.470
长期建立网络，以便建立声誉和信息

00:03:17.470 --> 00:03:21.340
有关矿工的信息，以便您可以轻松地针对或达成交易

00:03:21.340 --> 00:03:26.950
聪明地针对网络，所以例如我看到了鲁本一世的问题

00:03:26.950 --> 00:03:32.170
相信矿工的位置和筛选，所以这是一个好地方

00:03:32.170 --> 00:03:36.400
它在哪里做，所以功率门不仅会跟踪位置

00:03:36.400 --> 00:03:39.130
矿工，还有他们在网络上工作了多长时间，以及什么样的交易

00:03:39.130 --> 00:03:43.540
他们正在制作，因此您实际上可以根据过滤条件来创建交易，

00:03:43.540 --> 00:03:47.890
还设置了一些有关如何进行交易的配置，然后

00:03:47.890 --> 00:03:51.130
只是总是使用这些配置自动使它们生效，我们将讨论

00:03:51.130 --> 00:03:57.459
这里的配置很多，所以功率门的设计确实是

00:03:57.459 --> 00:04:02.019
集成到您现有的系统中并运行现有的应用程序，并且

00:04:02.019 --> 00:04:07.209
通过IP FS和以下方式将文件硬币的好处传递给您的用户

00:04:07.209 --> 00:04:13.329
您自己的api，因此出现了一些非常有趣的东西

00:04:13.329 --> 00:04:18.130
从使用我认为我想先指出的电源门开始，

00:04:18.130 --> 00:04:22.780
您可以将它们牢记在心，它确实扩展了文件硬币和ipfs

00:04:22.780 --> 00:04:27.370
网络，您可以构建一些非常有趣的配置

00:04:27.370 --> 00:04:33.850
通过ipfs网络和功率门为数据提供服务的应用程序

00:04:33.850 --> 00:04:38.530
保持以持久的长期方式将数据保存在文件中

00:04:38.530 --> 00:04:44.169
我会分享一些有关此事的更多信息，但您可以配置

00:04:44.169 --> 00:04:48.400
您希望该缓存工作正常工作，以便您可以说我想要有关缓存的数据

00:04:48.400 --> 00:04:53.410
网络，但如果降至我认为的可接受阈值以下

00:04:53.410 --> 00:04:57.580
网络上的可用性，可以及时对其进行衡量，您可以

00:04:57.580 --> 00:05:02.530
基本上使电源闸拒绝了网络上的数据，以便

00:05:02.530 --> 00:05:06.430
它在那里并且可以再次为您的用户或您的应用程序使用，这是

00:05:06.430 --> 00:05:13.960
对于这种混合网络用户来说，这非常令人兴奋，因此

00:05:13.960 --> 00:05:20.350
考虑到所有这些，让我们获取技术，以便立即使用电源门

00:05:20.350 --> 00:05:25.780
建立在一些不同的技术上，当您运行

00:05:25.780 --> 00:05:28.690
电源门，所以您将在这里看到这个小动画，这实际上是

00:05:28.690 --> 00:05:32.919
只需运行电源门的Docker眼睛版本，它将旋转

00:05:32.919 --> 00:05:37.630
功率门技术以及莲花节点，该节点是Go的go实现

00:05:37.630 --> 00:05:43.210
文件硬币规范以及将来的IP FS节点，我们可以想象

00:05:43.210 --> 00:05:47.349
现在我们可以交换其他文件硬币的实现

00:05:47.349 --> 00:05:52.720
虽然专注于Lotus，但这只是一种演示，它很容易开始

00:05:52.720 --> 00:05:55.930
运行并构建一些在这里实际发生的非常酷的事情

00:05:55.930 --> 00:06:02.229
尽管Lotus嵌入或运行了嵌入式开发网络，在这种情况下，它仍然可以

00:06:02.229 --> 00:06:08.710
模拟未成年人，以便您可以实际测试和部署测试并集成api的

00:06:08.710 --> 00:06:12.550
功率门，而不必总是去测试网或将来

00:06:12.550 --> 00:06:16.150
主网，您可以运行非常简化和快速的本地版本

00:06:16.150 --> 00:06:20.400
网络，以便您可以查看API的工作方式，并可以测试数据流

00:06:20.400 --> 00:06:25.660
将来，很多这些都将带上您自己的笔记，等等

00:06:25.660 --> 00:06:29.740
对于像固定服务这样的人来说，这真的很重要

00:06:29.740 --> 00:06:33.820
肯定已经拥有自己的IP FS节点和自己的IP FS网络

00:06:33.820 --> 00:06:39.180
我们将考虑将文件硬币附加到其现有IP FS的方法

00:06:39.180 --> 00:06:42.970
api，所以让我们多谈一点

00:06:42.970 --> 00:06:46.990
我在这里提到发生了什么事，它使Lotus旋转了

00:06:46.990 --> 00:06:53.020
注意在ipfs节点中，已经有人将其固定为一个

00:06:53.020 --> 00:06:57.790
内存使用的术语，所以这很棒，可以很好地比喻我们

00:06:57.790 --> 00:07:02.080
一直在考虑使用Power部署多层存储

00:07:02.080 --> 00:07:07.060
将ipfs用作热存储的通道，数据所在的快速层

00:07:07.060 --> 00:07:12.310
广泛适用于网络，并且您使用文件硬币来保持持久性

00:07:12.310 --> 00:07:15.880
存储，确保数据存在，然后通过一些连接

00:07:15.880 --> 00:07:20.440
您现在可以实际控制和配置的自动化流程

00:07:20.440 --> 00:07:23.980
我们专注于这两层，这两层有很大的空间

00:07:23.980 --> 00:07:27.340
也要扩展，我也要谈一点

00:07:27.340 --> 00:07:32.320
超出热的层以及介于热和冷之间的层，因此请保持在

00:07:32.320 --> 00:07:38.740
同样，所有这些实际上都被广泛支持

00:07:38.740 --> 00:07:44.170
G RPC API，关于该API方法的优点是它使它成为了

00:07:44.170 --> 00:07:49.360
从不同平台附加到此API的非常标准的方式

00:07:49.360 --> 00:07:52.900
语言，以便您可以建立自己的客户，可以建立自己的包装器

00:07:52.900 --> 00:07:59.590
您自己的库，我们将向您展示其中的一些，因此一个示例

00:07:59.590 --> 00:08:05.890
附加到该API的应用程序就是我们的CLI，因此当您运行

00:08:05.890 --> 00:08:10.060
功率门的二进制客户端，它实际上是为系统构建的

00:08:10.060 --> 00:08:13.810
管理员，高级用户或开发人员，我将尝试构建

00:08:13.810 --> 00:08:17.890
进行测试，但该CLI实际上正在击中该G

00:08:17.890 --> 00:08:22.690
 RPC API，它将使一切都变得非常简单，但请不要误以为这是

00:08:22.690 --> 00:08:28.000
相当漂亮，这非常强大，可以真正在系统内部运行，而不是

00:08:28.000 --> 00:08:34.599
必须在CLI内运行，因此电源门也可以为您工作，因此

00:08:34.599 --> 00:08:38.349
监控交易到期并自动续订是一个很好的例子

00:08:38.349 --> 00:08:43.110
它会自动修复您的文件，以便您实际上可以存储

00:08:43.110 --> 00:08:49.720
复制的配置，然后自动修复节点或其中之一

00:08:49.720 --> 00:08:54.760
如果问题自动发生，您可以一对一复制

00:08:54.760 --> 00:08:57.550
太多的沙箱​​地址，我们将讨论

00:08:57.550 --> 00:09:02.980
就像我已经提到的那样，您可以跟踪

00:09:02.980 --> 00:09:07.050
网络并利用它来发挥您的优势，以便您进行更明智的交易

00:09:07.050 --> 00:09:12.430
因此，API的表面积在功率门中相当宽广，并且

00:09:12.430 --> 00:09:15.910
扩展，实际上带来了许多已经可用的api

00:09:15.910 --> 00:09:20.589
在Lotus中传递给他们，让他们可以使用，但只有一个

00:09:20.589 --> 00:09:25.240
有点像我认为最感兴趣的领域

00:09:25.240 --> 00:09:30.670
人们试图将其部署在系统中是ffs领域，而ffs是

00:09:30.670 --> 00:09:38.620
这是文件硬币文件硬币文件系统的缩写，这是一个非常

00:09:38.620 --> 00:09:44.850
功率门堆栈的重要部分，因此文件硬币文件系统

00:09:44.850 --> 00:09:51.310
每个电源闸可以有一个到多个文件硬币FF资产，每个s

00:09:51.310 --> 00:09:56.200
有一个地址，它实际上可以管理多个地址，这就是

00:09:56.200 --> 00:10:00.430
沙盒事件发生了，所以如果说您想将电源门置于

00:10:00.430 --> 00:10:04.480
您想要为每个用户提供文件硬币地址的应用程序，因此

00:10:04.480 --> 00:10:07.180
他们可以管理自己的配置以了解存储方式

00:10:07.180 --> 00:10:10.360
碰巧他们可以拥有自己的帐户余额，而实际上

00:10:10.360 --> 00:10:15.250
为他们创建一个ffs，因此每个ffs都有自己的地址

00:10:15.250 --> 00:10:19.330
具有自己要管理的配置，并且它将具有自己的一套

00:10:19.330 --> 00:10:24.010
在网络上进行网上交易，并且还将拥有自己的数据集

00:10:24.010 --> 00:10:29.140
IP FS和Power Gate上可用的功能将管理所有这些不同的ff

00:10:29.140 --> 00:10:37.570
实例并使其保持活动状态，并使其数据可在您的API中使用，所以我

00:10:37.570 --> 00:10:41.260
提到FS对交易进行了配置

00:10:41.260 --> 00:10:46.330
我们将更多地讨论配置本身，但这仅仅是

00:10:46.330 --> 00:10:52.150
默认配置，如果创建，则是否在其中存储新数据

00:10:52.150 --> 00:10:55.810
您实际上可以覆盖默认配置的电源门，并具有

00:10:55.810 --> 00:10:59.500
我向您展示了每个文件的不同配置时请牢记这一点

00:10:59.500 --> 00:11:05.920
今后，每个存储都将对您提出的每个文件存储请求

00:11:05.920 --> 00:11:08.920
到电源门，您可以将其发送给您

00:11:08.920 --> 00:11:12.610
配置，实际上您可以覆盖这些配置，所以让我们

00:11:12.610 --> 00:11:18.399
说说我所说的配置是什么意思，我说了很多遍，所以我

00:11:18.399 --> 00:11:22.149
已经提到过，我们将其分解为冷库中的热库

00:11:22.149 --> 00:11:27.850
我们可以在这里查看配置本身，并查看发生了什么

00:11:27.850 --> 00:11:32.829
控制两层中将要发生的事情的配置

00:11:32.829 --> 00:11:38.139
的存储，所以在这种情况下，这是我的ffs的故障存储配置，就像我一样

00:11:38.139 --> 00:11:42.550
说我可以用我想用力存储的任何新文件覆盖它

00:11:42.550 --> 00:11:47.139
门，但默认情况下，您可以看到一些内容，这就是说我想要这个

00:11:47.139 --> 00:11:51.880
数据仅在热网络上可用，然后我实际上将跳过

00:11:51.880 --> 00:11:54.820
在接下来的两个中，因为它们很重要，但让我跳到

00:11:54.820 --> 00:11:59.110
冷库，所以冷库这些都是控制配置

00:11:59.110 --> 00:12:03.100
用于文件硬币存储，因此您可以看到类似复制因子的内容

00:12:03.100 --> 00:12:07.570
默认是一个交易持续时间，它有一个默认值，你可以有一些黑名单

00:12:07.570 --> 00:12:12.130
矿工，您可以使用国家/地区代码，并且可以实际设置是否要

00:12:12.130 --> 00:12:18.519
该文件将在交易到期时进行续订，因此，另一个非常有趣的

00:12:18.519 --> 00:12:23.440
在这里将其构建到应用程序中的事情是您希望此数据是

00:12:23.440 --> 00:12:28.930
在ipfs上可用，您可能实际上可以关闭这些层中的任何一个，因此

00:12:28.930 --> 00:12:33.670
您可以运行电源闸，然后将ipfs暴露出来，然后

00:12:33.670 --> 00:12:37.480
以后您实际上可以为所有这些数据打开文件硬币

00:12:37.480 --> 00:12:42.970
实际上被固定在ipfs上，但随后跳回到IP FS设置这些下一个

00:12:42.970 --> 00:12:48.130
两个非常有趣，所以IP FS添加超时这真的很整洁

00:12:48.130 --> 00:12:53.019
看起来很简单的配置，但实际发生的情况是它表示是否有请求

00:12:53.019 --> 00:12:58.750
传入我要存储的文件，如果我没有该文件，则不会跳转

00:12:58.750 --> 00:13:02.800
我的热巢穴，我不会跳起去投币以将其撤回

00:13:02.800 --> 00:13:06.430
我实际上要等一段时间，看看是否可以从网络上获取它，并且

00:13:06.430 --> 00:13:10.899
在这种情况下，默认值是等待30秒，这样您就可以

00:13:10.899 --> 00:13:15.730
实际上，让网络在您出发之前在此热点层为您提供数据

00:13:15.730 --> 00:13:19.300
返回文件硬币以创建新的检索协议，这就是这些

00:13:19.300 --> 00:13:22.300
真正有趣的网络配置出现了

00:13:22.300 --> 00:13:27.010
这就是允许解冻配置的地方，所以允许解冻

00:13:27.010 --> 00:13:31.240
就是说，如果您只在外套中有它，您是否要让这些ffs

00:13:31.240 --> 00:13:34.570
自动创建检索交易，将其从寒冷中撤回

00:13:34.570 --> 00:13:38.680
冷层，然后将其放入热层，以便进行自动化和

00:13:38.680 --> 00:13:43.570
简便性使您的API可以运行，然后您就可以做很多事情了

00:13:43.570 --> 00:13:50.560
您的数据如此冷热，而用于管理冷热的配置确实

00:13:50.560 --> 00:13:54.220
功能强大，即使在涂层上也可以做很多事情

00:13:54.220 --> 00:13:59.740
管理您的续订设置管理您的国家/地区设置以及最后一件事情

00:13:59.740 --> 00:14:04.990
我没有提到这里是在这种情况下ffs中只有一个CID，所以这里

00:14:04.990 --> 00:14:07.870
您将拥有正在被所有不同文件的列表

00:14:07.870 --> 00:14:15.580
保持在这些ffs中，所以我已经讨论了添加超时，但这是

00:14:15.580 --> 00:14:19.270
这是一个非常有趣的属性，真的是这些真的

00:14:19.270 --> 00:14:23.350
是一个我们认为非常重要的地方的完美例子，

00:14:23.350 --> 00:14:26.110
想发展壮大，所以我们很乐意您对这些事情以及您的反馈意见

00:14:26.110 --> 00:14:30.100
想像在您的系统中构建它，以便我们可以正确地做到这一点，但我们

00:14:30.100 --> 00:14:33.310
想象中的是能够构建实际具有

00:14:33.310 --> 00:14:37.510
像这样的配置，其中功率门外的ipfs节点

00:14:37.510 --> 00:14:41.620
也可以维护数据，而功率门只是确保数据

00:14:41.620 --> 00:14:45.820
将以文件硬币形式保存，并且在网络上可用（如果有的话）

00:14:45.820 --> 00:14:49.300
其他节点曾经消失，那是真的，那就像真的

00:14:49.300 --> 00:14:57.670
我认为很多应用程序都可以构建的简洁功能，而我

00:14:57.670 --> 00:15:00.100
已经提到过，这些只是位于

00:15:00.100 --> 00:15:04.960
配置已经完成，这是我们希望您提供反馈的领域

00:15:04.960 --> 00:15:06.730
开始看这个并尝试用它来构建

00:15:06.730 --> 00:15:09.760
是否还有其他其他配置层将有助于

00:15:09.760 --> 00:15:13.830
在这里进行标准化，所以什么比热更热，这将是在思考

00:15:13.830 --> 00:15:17.080
也许您正在运行的待定服务已在全球范围内分发

00:15:17.080 --> 00:15:21.940
节点，并且您希望能够智能配置这些数据

00:15:21.940 --> 00:15:25.990
被推到那些不同的节点，也许之间有层

00:15:25.990 --> 00:15:30.370
还有一件非常有趣的事情，我们没有花太多时间

00:15:30.370 --> 00:15:34.870
开发，但我认为它可以在这里使用，值得探索

00:15:34.870 --> 00:15:38.110
是在早期我会铸造力量之门

00:15:38.110 --> 00:15:44.080
能够帮助服务诸如本地可用数据之类的事情，因此通过了解

00:15:44.080 --> 00:15:49.300
哪些数据存储在电源门中，您可以进行交易以检索该数据

00:15:49.300 --> 00:15:54.250
数据并将这些交易传递给其他区域的两个节点，以便他们可以

00:15:54.250 --> 00:15:58.390
实际上是对请求数据的用户进行本地检索

00:15:58.390 --> 00:16:03.220
本地ipfs节点，但仅需在系统中运行一个电源一天，并且

00:16:03.220 --> 00:16:07.690
这种配置只是在我们的脑海中，但是我们很乐意

00:16:07.690 --> 00:16:11.410
知道您如何想象部署这些东西，以便我们能够做到这一点

00:16:11.410 --> 00:16:15.730
对，所以希望这是足够的早期信息，可以使您真正

00:16:15.730 --> 00:16:19.420
感兴趣的是看看这东西是如何工作的，并考虑将其放入您的

00:16:19.420 --> 00:16:24.610
应用程序，因此我将把它传递给亚伦

00:16:24.610 --> 00:16:29.980
小小的演示，但是，是的，我是亚伦，我一直在与Ignacio一起进行电力闸

00:16:29.980 --> 00:16:35.620
最近，这真的是一个非常有趣和令人兴奋的项目，而我

00:16:35.620 --> 00:16:45.040
很高兴向大家展示我们今天在这个演示中一直在做些什么

00:16:45.040 --> 00:16:53.050
我要做的事情就像安德鲁在谈论所有的事情一样

00:16:53.050 --> 00:16:56.530
使用我们随附的Docker映像可以轻松完成启动和运行

00:16:56.530 --> 00:17:01.810
我们的仓库，所以我要继续运行嵌入式测试网

00:17:01.810 --> 00:17:09.250
在我的计算机上本地有一个矿工，以便我们可以对它运行CLI

00:17:09.250 --> 00:17:14.410
过滤掉一堆多余的荷叶原木，这样我们就可以看到强大的功能

00:17:14.410 --> 00:17:22.150
此处正在发生的闸门日志，以便您将其启动

00:17:22.150 --> 00:17:28.000
然后在左侧，我们将开始使用CLI

00:17:28.000 --> 00:17:34.590
简称为POW，您可以从文档中看到这里发生了很多事情

00:17:34.590 --> 00:17:43.570
这里有很多命令，您可以自由使用它们，但是主要的

00:17:43.570 --> 00:17:49.870
就像安德鲁所说的是ffs实际上是ffs命令中的逻辑

00:17:49.870 --> 00:17:54.279
确实像这里公开的许多其他模块一样使用

00:17:54.279 --> 00:18:00.400
给你一个例子，比如说如果我说palnet piers我会得到一个

00:18:00.400 --> 00:18:04.929
网络上的码头列表，当然，因为我们只是在运行

00:18:04.929 --> 00:18:14.140
本地开发人员网，这只是我的未成年人，是的，还有其他命令

00:18:14.140 --> 00:18:20.740
可用于查询文件硬币询问和当前交易以及节点的运行状况

00:18:20.740 --> 00:18:27.760
和网络上的矿工，我们建立了一些不存在的索引

00:18:27.760 --> 00:18:32.470
一定像文件硬币区块链之类的东西，但是我们

00:18:32.470 --> 00:18:38.559
索引数据和建筑物信誉指数大幅削减指数和

00:18:38.559 --> 00:18:46.059
矿工，我们在其中添加矿工位置等其他元数据，是的，所以

00:18:46.059 --> 00:18:54.490
今天，我们将重点放在ffs命令上，所以ffs本身就是

00:18:54.490 --> 00:19:01.299
这里有很多事情要做，但是我们要做的第一件事就是开始

00:19:01.299 --> 00:19:05.799
与ffs交互是为我们自己创建一个实例，因此我

00:19:05.799 --> 00:19:14.110
要运行ffs，对不起，伙计ffs创建好了，我得到了

00:19:14.110 --> 00:19:21.070
从电源闸返回的身份验证令牌，我们需要将该令牌连同

00:19:21.070 --> 00:19:28.929
我们运行的每个命令都可以识别我们，并映射到ffs实例

00:19:28.929 --> 00:19:33.070
我之前看过一个关于这个东西是否是我今天想到的JWT的问题

00:19:33.070 --> 00:19:37.600
不是只是一些通用令牌，但实际上我们在进行中

00:19:37.600 --> 00:19:44.500
现在为客户端添加不同的授权级别，因此可以像

00:19:44.500 --> 00:19:49.450
一些仅对管理员有用的命令，而另一些仅对管理员有用的命令

00:19:49.450 --> 00:19:56.080
可供其他用户使用，因此我猜想我们将不得不使用该更改

00:19:56.080 --> 00:20:02.860
像贾达（Jada）的东西，所以在这里，我们要出口一个环境

00:20:02.860 --> 00:20:09.910
称为token的变量，并在此处设置off令牌，这将确保

00:20:09.910 --> 00:20:20.500
使用每个命令都可以对auth令牌进行简单借用，所以回到

00:20:20.500 --> 00:20:24.910
这里的文档只是做一个其他命令的快速示例

00:20:24.910 --> 00:20:31.870
让我们在这里使用adders子命令创建一个新地址，如果我说pow

00:20:31.870 --> 00:20:44.650
 ffff希瑟（Heather）是新来的，我给它起了个名字，好了，所以现在我们创建了一个

00:20:44.650 --> 00:20:52.240
我的ffs实例拥有并由其保护的新钱包地址

00:20:52.240 --> 00:21:01.900
与我的ffs实例相关联的身份验证令牌（如果我说此信息将返回）

00:21:01.900 --> 00:21:06.700
有关ffs实例的一些常规信息，您可以看到初始的

00:21:06.700 --> 00:21:11.740
存在的钱包地址，然后是我刚刚创建的新钱包地址，

00:21:11.740 --> 00:21:20.710
以及默认情况下也有一定数量的资金投入，但是好吧，让我们

00:21:20.710 --> 00:21:26.710
跳到实际将数据存储在此目录中，我只是有这个

00:21:26.710 --> 00:21:33.549
小index.html文件，我们将把这个东西存储在文件coin和

00:21:33.549 --> 00:21:41.290
然后我们将其从文件硬币中拉到ipfs网络上，

00:21:41.290 --> 00:21:49.090
这一切如何工作，所以这是我计算机上本地的HTML文件，然后，我们将

00:21:49.090 --> 00:21:59.169
回到这里，就像安德鲁在谈论电源门中的存储一样

00:21:59.169 --> 00:22:05.710
由配置管理，因此，如果我想查看默认配置，则全部

00:22:05.710 --> 00:22:11.610
如果不提供覆盖，数据将与存储在一起，我可以输入ffs

00:22:11.610 --> 00:22:17.460
 config default，这将打印我们的默认存储配置

00:22:17.460 --> 00:22:22.690
与单手操作类似，显示了启用了热存储和冷存储的位置

00:22:22.690 --> 00:22:32.920
默认情况下，使用一些合理的默认设置，让我们将此JSON对象保存到

00:22:32.920 --> 00:22:37.240
这里的文件，以便我们可以修改它我不想只做任何默认存储

00:22:37.240 --> 00:22:42.810
想要在这里实际进行一些自定义存储，所以我要做的第一件事是禁用

00:22:42.810 --> 00:22:51.250
ipfs的热存储，我们可以看看其他一些东西

00:22:51.250 --> 00:22:57.070
可以像在冷库中那样在此处进行配置复制因子的确是

00:22:57.070 --> 00:23:02.970
有趣的电源门实际上将负责将您的数据存储在

00:23:02.970 --> 00:23:10.330
但是，您在此处指定的许多矿工的交易持续时间将持续多长时间，如果

00:23:10.330 --> 00:23:14.890
您绝对不想与任何矿工一起存储数据

00:23:14.890 --> 00:23:18.880
可以在数组中指定它们，其他排除的矿工

00:23:18.880 --> 00:23:23.290
如果您更喜欢使用矿工，可以指定他们的ID

00:23:23.290 --> 00:23:30.160
如果您在此处，Power Gate将为那些矿工提供首选的国家/地区代码

00:23:30.160 --> 00:23:33.490
知道您希望存储指定数据的地理区域

00:23:33.490 --> 00:23:40.510
他们，知道在这里，然后更新功率门将自动更新任何

00:23:40.510 --> 00:23:45.970
即将到期的交易，您可以指定接近到期的交易

00:23:45.970 --> 00:23:52.830
希望续约在此处达到阈值，然后此处的加法器是

00:23:52.830 --> 00:24:00.580
我想在交易之前使用的钱包地址，然后可以修复

00:24:00.580 --> 00:24:05.920
您知道热和冷的程度，但如果同时适用于热和冷

00:24:05.920 --> 00:24:11.230
冷，但您已经通过电源门检测到存储配置不再

00:24:11.230 --> 00:24:17.020
被ipfs和/或文件代币兑现，它将竭尽所能

00:24:17.020 --> 00:24:26.530
自动修复它，所以我将继续运行几个命令来

00:24:26.530 --> 00:24:30.040
将数据添加到电源门，而我们正在等待

00:24:30.040 --> 00:24:35.800
要执行的工作，我会确切解释我刚才所做的事情，因为这将需要一个

00:24:35.800 --> 00:25:05.440
分钟，所以请给我一点时间，好吧，我首先在这里所做的就是

00:25:05.440 --> 00:25:14.650
将数据添加到正在运行的ipfs节点上的缓存中

00:25:14.650 --> 00:25:20.530
与Power Gate Way一起使用Power Gate可以将数据添加到Power Gate

00:25:20.530 --> 00:25:25.780
您只需按CC ID进行添加，这样ID不必一定要固定，但是

00:25:25.780 --> 00:25:30.820
它只是必须在ipfs网络上的某个地方可用，因此只是为了确保

00:25:30.820 --> 00:25:35.740
没错，我曾经用过这个小帮手来，我们称添加过热和

00:25:35.740 --> 00:25:42.220
我和我提供了文件的路径，并获得了CID，这是我做的下一件事

00:25:42.220 --> 00:25:47.740
实际上为存在的CID推送了新的存储配置

00:25:47.740 --> 00:25:57.550
我已经提供了这个watch标志的ipfs网络，并且watch告诉CLI要做

00:25:57.550 --> 00:26:02.470
这个东西在这里它阻止并显示了工作状态

00:26:02.470 --> 00:26:06.790
现在成功了，所以我们知道它已经完成了，因为我们不想使用默认值

00:26:06.790 --> 00:26:13.110
存储配置权我提供了C标志以及我们文件的路径

00:26:13.110 --> 00:26:19.330
保留了要使用的自定义配置，您还可以将JSON传递到

00:26:19.330 --> 00:26:24.790
这个命令和您想要的标准也可以，然后当然

00:26:24.790 --> 00:26:30.700
数据的CID，所以我们将其推送，然后我们正在观察作业状态

00:26:30.700 --> 00:26:35.260
我们看到了进展，但我不知道您是否已经在其中看到了一些信息

00:26:35.260 --> 00:26:40.360
也可以在右侧登录，但是现在它是成功的领先故事，所以让我们开始吧

00:26:40.360 --> 00:26:47.980
另一个命令ffs显示，然后提供CID，这将给

00:26:47.980 --> 00:26:55.780
我们该CID的当前存储状态，有一个执行它的作业ID

00:26:55.780 --> 00:27:02.860
我们的数据CID这发生的时间戳我们的热存储信息

00:27:02.860 --> 00:27:06.280
我可以告诉你这有点误导，但我可以告诉你这是

00:27:06.280 --> 00:27:11.500
实际上有点像禁用状态，没有热存储发生

00:27:11.500 --> 00:27:18.130
时间戳只是一些默认的空时间戳，因此与我们的一致

00:27:18.130 --> 00:27:23.470
在这里为文件Coyne配置我们的冷配置，您实际上会看到我们的列表

00:27:23.470 --> 00:27:27.970
提案，这些是在我们的仓库上执行的实际仓储交易

00:27:27.970 --> 00:27:34.930
在这里与我们的矿工进行测试的网络最少，交易达成的时期

00:27:34.930 --> 00:27:43.390
激活我们的交易持续时间，这样您现在就可以看到我们的交易状态

00:27:43.390 --> 00:27:55.360
您在这里的另一个很酷的命令，我需要再次导出我的令牌，所以

00:27:55.360 --> 00:28:08.910
pow ffs log和CID是错误的，给了我一秒钟

00:28:11.960 --> 00:28:20.419
到这里我们就可以了，所以log命令将基本上观察日志事件流

00:28:20.419 --> 00:28:26.179
我们支付API所提供的条件是，基本上我们对CID所做的任何更改都会有旧的

00:28:26.179 --> 00:28:34.279
一些日志输出，我们可以看到此处的更新，因此请回过头来，注意一下

00:28:34.279 --> 00:28:37.820
在这里，因为我们要在左侧进行更改，所以让我们开始吧

00:28:37.820 --> 00:28:43.009
继续并编辑我们的配置文件，因为我们以前只是

00:28:43.009 --> 00:28:50.990
现在将数据存储在文件Corinne中，从而使该数据可用于

00:28:50.990 --> 00:28:59.779
现在确定在ipfs网络上，以便启用要设置为允许的热存储

00:28:59.779 --> 00:29:05.539
解冻成真只是为了再次解释这一点，我知道安德鲁暗示了这一点，或者

00:29:05.539 --> 00:29:10.070
你原本不打算他讲得很好，但是真的很酷，所以

00:29:10.070 --> 00:29:16.249
我们是说这是我想使这些数据可用以查看想法可用

00:29:16.249 --> 00:29:23.269
ipfs我愿意执行检索交易以从文件点获取它

00:29:23.269 --> 00:29:28.129
但让我们看看是否可以从ipfs网络免费获取它，我们将等待30

00:29:28.129 --> 00:29:35.389
秒尝试执行此操作，并且只有在无法执行操作的情况下，我们才能从

00:29:35.389 --> 00:29:39.440
提交硬币并支付我们需要支付的填充才能在ipfs上获取

00:29:39.440 --> 00:29:46.159
网络，我们现在将所有旧配置保持不变

00:29:46.159 --> 00:29:52.369
再次运行相同的push命令，但是这次我只需要指定

00:29:52.369 --> 00:29:59.360
覆盖标志只是因为默认情况下电源门不会让您覆盖正确的位置

00:29:59.360 --> 00:30:05.720
就像现有的存储配置，而无需明确地说出您知道的

00:30:05.720 --> 00:30:09.649
这就是您正在执行的操作，而且您想执行此操作，因此我们提供了override flag

00:30:09.649 --> 00:30:15.799
那里很好，所以很快就发生了，可能是因为电源门

00:30:15.799 --> 00:30:22.549
能够发现缓存的CID仍然像在我们本地IP上一样

00:30:22.549 --> 00:30:26.720
网络或其他内容，您可以在此处看到一些较长的输出

00:30:26.720 --> 00:30:39.260
现在让我们再次运行Tao FS show和CID，现在我们看到

00:30:39.260 --> 00:30:45.170
该CID的更新存储信息已更改，我们现在有了一个真正的热点

00:30:45.170 --> 00:30:51.050
此处的存储配置启用了真理文件大小并创建了有效文件

00:30:51.050 --> 00:30:55.730
时间戳，冷库没有任何变化，但是如果我们运行在

00:30:55.730 --> 00:31:02.920
在测试网或主网上，我们可以增加许多矿工

00:31:02.920 --> 00:31:07.910
复制因子或国家/地区代码，或我们的冷藏库之类的内容

00:31:07.910 --> 00:31:10.930
会在这里反映出来

00:31:12.240 --> 00:31:20.020
让我们看看好吧，我们可以现在就转到这里，这是IP FS网关

00:31:20.020 --> 00:31:25.150
在我的计算机上本地运行时，我们可以看到数据可用，然后

00:31:25.150 --> 00:31:31.260
这是互联网上的公共IP FS网关，

00:31:31.260 --> 00:31:42.550
所以这主要是我想通过CLI向您展示的内容，我希望

00:31:42.550 --> 00:31:47.140
你会看到那里有很多潜在的事情要记住安德鲁

00:31:47.140 --> 00:31:54.010
提早提早是COI只是建立在我们的go客户端上

00:31:54.010 --> 00:31:58.840
库只是我们Power Gate回购的一部分，而客户端库是

00:31:58.840 --> 00:32:03.520
只是基于仓库中的G RPC定义而建立的，所以有很多

00:32:03.520 --> 00:32:09.760
堆栈的灵活性，您知道任何人都可以在任何地方建立新的客户端

00:32:09.760 --> 00:32:16.390
支持G RPC的语言以及任何想要构建或集成功率门的人

00:32:16.390 --> 00:32:20.860
进入go应用程序可以使用现有的go客户端，相同的CLI

00:32:20.860 --> 00:32:31.660
建立在这里，只是为了获得一些启发，这是一个需要进行的项目

00:32:31.660 --> 00:32:34.780
可能已经看到了一些截图，但我们正在与

00:32:34.780 --> 00:32:41.200
协议实验室研究如何使用Power Gate作为API来驱动这个很棒的文件客户端

00:32:41.200 --> 00:32:47.380
Web UI前端，我将大部分细节留给pooja

00:32:47.380 --> 00:32:52.240
稍后，当她提出更多关于闪电的演讲时，

00:32:52.240 --> 00:32:56.050
很快您就会看到其中一些概念如何很好地映射到Power Gate

00:32:56.050 --> 00:33:01.990
例如用户个人资料的想法干净地映射到ffs实例并在

00:33:01.990 --> 00:33:09.760
单个ffs实例，您拥有由该ffs管理的钱包地址

00:33:09.760 --> 00:33:14.980
在单个实例中，文件的存储状态为

00:33:14.980 --> 00:33:20.500
由单个ffs实例管理，有关文件硬币交易的信息等

00:33:20.500 --> 00:33:26.990
继续前进，我们真的很高兴看到我们的项目进行了，这真是太好了

00:33:26.990 --> 00:33:31.730
继续工作，这就是我回希瑟（Heather）的全部，谢谢亚伦（Aaron），我认为

00:33:31.730 --> 00:33:36.370
我们几乎没时间了，但我想让我很快就总结一下

00:33:36.370 --> 00:33:44.120
因此Aaron向您展示了很多东西，并通过您必须移动的CLI进行了展示

00:33:44.120 --> 00:33:47.270
通过它有点缓慢，所以我希望你能得到所有，但只是要回顾一下

00:33:47.270 --> 00:33:51.470
因为我很高兴这个小东西里面装了多少东西

00:33:51.470 --> 00:33:58.040
似乎，但针对每个用户配置的文件硬币存储交易管理

00:33:58.040 --> 00:34:03.020
您所有的用户都拥有IP FS和文件硬币互操作性

00:34:03.020 --> 00:34:08.650
Power Gates推动了DocHorizo​​n API驱动，希望您能看到趋势

00:34:08.650 --> 00:34:13.880
受到广泛支持和输入的api，我希望收到类似的反馈

00:34:13.880 --> 00:34:18.590
每个文件的每个用户的访问者控制有效期交易的存储缓存

00:34:18.590 --> 00:34:24.380
可用性是的，可以长期进行解冻维修和更新的管理

00:34:24.380 --> 00:34:29.300
pow-pow-pow好吧，还有一个漂亮的开源UI，

00:34:29.300 --> 00:34:36.650
人们已经在它上面建立了，是的，你已经有了它，所以我想我会

00:34:36.650 --> 00:34:39.860
留下你一个，但我只想提及最后一件事，因为当

00:34:39.860 --> 00:34:42.680
我们一直在建造电源门，我们一直对什么感到非常兴奋

00:34:42.680 --> 00:34:46.340
一种实现可能是最重要的，我们实际上是在构建它，因此

00:34:46.340 --> 00:34:49.310
您可以选择并采用它，这是我们测试的一种方式

00:34:49.310 --> 00:34:53.020
正在尝试将其运行在诸如纺织品和

00:34:53.020 --> 00:34:58.460
特别关注我们是否可以制造像buckets协议这样的系统，以及

00:34:58.460 --> 00:35:02.840
线程DB协议实际上在电源门上运行，因此我们将有很多

00:35:02.840 --> 00:35:06.350
很快会有更多的信息，但这就是令人兴奋的

00:35:06.350 --> 00:35:10.490
我们要走的方向是让用户实际拥有自己的数据集

00:35:10.490 --> 00:35:14.750
例如在一个线程中，并在其中放置自己的存储配置

00:35:14.750 --> 00:35:18.020
线程，然后电源闸可以为他们执行它，这就是地方

00:35:18.020 --> 00:35:21.980
绘画服务可能会加入进来，并在此基础上做一些真正的史诗般的事情

00:35:21.980 --> 00:35:26.060
所以希望您能捡起来并尝试一下，这样会非常好

00:35:26.060 --> 00:35:29.120
公司已经有人在踢轮胎并检查

00:35:29.120 --> 00:35:34.430
像我说的代码还为时过早，所以只需与我们合作，然后进入那里并给我们

00:35:34.430 --> 00:35:37.780
拉出请求并尝试这些东西，然后和

00:35:37.780 --> 00:35:41.380
就像我说过几次，我们很想知道您的用例和数据

00:35:41.380 --> 00:35:44.740
明确我们需要为哪些内容进行构建，以便您可以运行此内容

00:35:44.740 --> 00:35:49.000
事情，并通过应用程序将文件硬币与您的待处理服务一起加入

00:35:49.000 --> 00:35:52.720
不管你想运行什么，然后我就把这个留给你看

00:35:52.720 --> 00:35:59.520
我当然也会分享这些幻灯片，但非常感谢

