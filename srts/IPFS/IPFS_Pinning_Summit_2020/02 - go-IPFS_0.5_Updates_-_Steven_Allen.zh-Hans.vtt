WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.480 --> 00:00:03.280
大家好，我要说说

00:00:03.280 --> 00:00:06.879
我们将ipfs从零发布到五发布进行了改进

00:00:06.879 --> 00:00:10.080
这可能是我们削减的最大发行版之一

00:00:10.080 --> 00:00:13.920
呃不是最破的大概是0.4呃

00:00:13.920 --> 00:00:18.480
其实一点都不破，但绝对是最多的

00:00:18.480 --> 00:00:21.760
例如大规模协议的改进或至少投入了最多的工时

00:00:21.760 --> 00:00:26.000
嗯，好的，首先我们做了很多

00:00:26.000 --> 00:00:28.160
更改内容路由的改进

00:00:28.160 --> 00:00:33.280
内容路由是一种逻辑，就像宣布

00:00:33.280 --> 00:00:36.320
内容到网络，然后在网络中查找内容

00:00:36.320 --> 00:00:39.440
嗯，我们用于此的主要事情是所谓的dht分布式

00:00:39.440 --> 00:00:41.840
哈希表嗯，我们做了很多改进

00:00:41.840 --> 00:00:44.800
在这里大幅度提高性能并减少

00:00:44.800 --> 00:00:49.120
一些开销的连接形成之类的东西

00:00:49.120 --> 00:00:53.199
嗯，所以这里的一大改进是清理了dhc

00:00:53.199 --> 00:00:56.480
在此版本中，我们使用的是一种称为自动联网的工具

00:00:56.480 --> 00:00:59.680
确定他们的节点将使用此工具来确定他们是否公开

00:00:59.680 --> 00:01:02.160
可及的，如果他们不是公众可及的

00:01:02.160 --> 00:01:05.760
他们会喜欢放弃dhc，但仍然可以使用dhc

00:01:05.760 --> 00:01:09.600
他们只是不喜欢请其他同伴给他们或以他们的方式发送查询

00:01:09.600 --> 00:01:12.560
因为没有人可以在上一个DC中实际到达他们，发生了什么事

00:01:12.560 --> 00:01:16.560
对等方将加入网络um，然后其他人开始路由

00:01:16.560 --> 00:01:19.600
询问他们的方式，但这些同伴无法到达

00:01:19.600 --> 00:01:25.119
因此95％至99％的查询只会失败或超时

00:01:25.119 --> 00:01:27.040
因为你实际上无法达到期限

00:01:27.040 --> 00:01:33.680
您正在尝试达到嗯，所以除了这个，我们也

00:01:33.680 --> 00:01:37.119
如果以前的版本中，改进了路由表管理，相当多

00:01:37.119 --> 00:01:40.240
您从这里断开连接时，您会忘记它们的存在或至少

00:01:40.240 --> 00:01:42.799
您要在桌子旁四处走走，在此摆放别墅的品牌表

00:01:42.799 --> 00:01:45.280
有点像代替手指进入网络

00:01:45.280 --> 00:01:48.960
绕网络路由并真正找到您要查找的内容

00:01:48.960 --> 00:01:51.759
它允许您像跨网络越跳越近

00:01:51.759 --> 00:01:55.040
内容，但是如果您没有正确维护这些内容

00:01:55.040 --> 00:01:58.240
表，这意味着像查询一样，通常

00:01:58.240 --> 00:02:03.840
就像是，取网络时间到的对数大小

00:02:03.840 --> 00:02:06.159
完成可能需要线性和尺寸，我们有点像

00:02:06.159 --> 00:02:08.959
完全走过去，我们将排名

00:02:08.959 --> 00:02:14.319
嗯，是的，我们已经大大改善了圆桌会议的维护工作，例如

00:02:14.319 --> 00:02:17.760
草原时间实际上应该是网络规模的对数

00:02:17.760 --> 00:02:21.040
不幸的是，这两个功能在这里

00:02:21.040 --> 00:02:24.560
网络升级后，才能真正使用户受益

00:02:24.560 --> 00:02:28.080
因此，请升级您的节点，并告诉您的朋友进行升级

00:02:28.080 --> 00:02:32.640
当人们升级整个网络时，您的节点

00:02:32.640 --> 00:02:38.000
最终应该会更快，我们可以查找算法

00:02:38.000 --> 00:02:41.360
实际上，这将帮助正在升级的节点，即使其余

00:02:41.360 --> 00:02:44.480
网络尚未升级，基本上以前的Kindle都没有升级

00:02:44.480 --> 00:02:48.000
我们一直在寻找的项目，我们一直在搜寻，

00:02:48.000 --> 00:02:53.040
搜索以及搜索和搜索um主要是因为喜欢我们有这些喜欢

00:02:53.040 --> 00:02:56.160
维护不善的包装桌，我们有一堆令人难以置信的同行，所以您

00:02:56.160 --> 00:02:58.800
被困在角落网络中，并且像回溯一样遥远

00:02:58.800 --> 00:03:00.480
回去搜索更多，喜欢继续

00:03:00.480 --> 00:03:03.440
搜索呃，我们做了很多动作，例如如何处理并行性

00:03:03.440 --> 00:03:06.400
在写表中或对不起查询逻辑中，因为

00:03:06.400 --> 00:03:08.800
我们还改善了写表逻辑

00:03:08.800 --> 00:03:12.000
我们已经能够在查询逻辑中减少悲观情绪

00:03:12.000 --> 00:03:15.200
嗯，这导致uh减少了三到四倍

00:03:15.200 --> 00:03:22.720
拨号和uh的重大改进为uh提供了时间

00:03:22.720 --> 00:03:26.000
我们如何测试这个好吧，这实际上对我们来说是一个大问题，就像

00:03:26.000 --> 00:03:27.840
我们想对DHT进行一堆更改

00:03:27.840 --> 00:03:32.480
但是我们可以轻松地测试像查询方面的变化，就像我们可以说的一样

00:03:32.480 --> 00:03:35.599
我们是否像对网络的查询那样

00:03:35.599 --> 00:03:39.599
嗯，用更少的时间完成问题是真的很难

00:03:39.599 --> 00:03:43.920
像um一样进行测试，我想服务器端会实时更改

00:03:43.920 --> 00:03:47.599
网络呃，因为就像我们不能只告诉所有人嘿，请升级

00:03:47.599 --> 00:03:50.560
立即或者请喜欢测试这个新事物，嗯，所以

00:03:50.560 --> 00:03:53.760
我们建立了一个称为“测试场”的测试系统，它使我们能够

00:03:53.760 --> 00:03:56.319
基本上任意的分布式系统测试

00:03:56.319 --> 00:03:59.519
呃，我们用它来交换一下，现在用它来传播八卦

00:03:59.519 --> 00:04:03.280
将其用于uh或将其用于dht uh，这允许

00:04:03.280 --> 00:04:06.400
像一千到两千个节点一样旋转

00:04:06.400 --> 00:04:10.159
具有现实的网络延迟的虚拟化环境

00:04:10.159 --> 00:04:15.200
嗯，实际上是说嘿，这对您有帮助吗？

00:04:15.200 --> 00:04:18.880
所以这些结果是初步的，这些是测试的结果，所以

00:04:18.880 --> 00:04:21.600
他们不会与现实世界相提并论

00:04:21.600 --> 00:04:24.240
我们正在测试的秤，我们看到提供的访问权限

00:04:24.240 --> 00:04:28.639
在ddhd中，我们的速度比旧dhc快20至30倍

00:04:28.639 --> 00:04:30.960
一个测试环境，您将不会在真实网络中看到它

00:04:30.960 --> 00:04:34.479
嗯，绝对不是现在，您可能不会看到它那么好

00:04:34.479 --> 00:04:38.080
当它是完整的网络升级时，它将开始很多

00:04:38.080 --> 00:04:41.360
更接近这个，但乘数应该是

00:04:41.360 --> 00:04:45.680
准确度不是绝对的五倍，但是

00:04:45.680 --> 00:04:52.400
美好的时光要快2到6倍左右

00:04:53.840 --> 00:04:58.479
在新的逻辑中，ips的获取时间快了大约五倍

00:04:58.479 --> 00:05:03.840
所以是的，那里做了很多改进，所以实际上是在

00:05:03.840 --> 00:05:07.840
真实网络是的，所以即使大多数网络是

00:05:07.840 --> 00:05:09.759
升级后，我们已经看到了巨大的进步

00:05:09.759 --> 00:05:13.199
再次，我们看到的就像在左上角，在这里您可以看到

00:05:13.199 --> 00:05:18.639
嗯，他们提供了类似拨号和查询的功能，而且效果很好

00:05:18.639 --> 00:05:21.360
查询的数量没有，但是像外拨的数量一样

00:05:21.360 --> 00:05:23.680
网络已大量产生，应减少

00:05:23.680 --> 00:05:26.000
网络的聊聊带宽开销量

00:05:26.000 --> 00:05:29.199
通常只是右上角的网络负载问题

00:05:29.199 --> 00:05:33.360
嗯，你可以看到呃

00:05:33.360 --> 00:05:37.199
一张完整的类似查询的图表，您可以看到基本上您只是

00:05:37.199 --> 00:05:43.520
从60％的百分比提供查询到like区域和um uh

00:05:43.520 --> 00:05:47.520
 95或90 uh查找到100个双方的查询

00:05:47.520 --> 00:05:50.400
嗯，在左下角，您可以看到提供时间

00:05:50.400 --> 00:05:52.639
基本上从效果上消失了，就像你说的左侧

00:05:52.639 --> 00:05:55.199
他们实际上是在超时那些红线或超时

00:05:55.199 --> 00:05:58.800
嗯，在右边，他们实际上正在完成，需要花费一些时间。

00:05:58.800 --> 00:06:01.759
随着网络升级以及我们做出更多改进，它将变得更好，但是

00:06:01.759 --> 00:06:06.639
他们实际上已经完成了，这很不错，而且写作时光还不错的内容

00:06:06.639 --> 00:06:09.440
实际减少了

00:06:09.440 --> 00:06:13.520
美好的时光，第50个百分位数从8秒减少到了

00:06:13.520 --> 00:06:17.039
在这一点上大约是一秒钟，有时是一分半秒

00:06:17.039 --> 00:06:21.440
呃，第90个百分位数的根源大约是40秒钟

00:06:21.440 --> 00:06:25.840
10到14秒之间，这些数字变化很大，就像

00:06:25.840 --> 00:06:29.280
我试图像许多天一样平均一下，所以在这种情况下

00:06:29.280 --> 00:06:32.960
我猜这是一个星期的日期，嗯，我看到的这些数字

00:06:32.960 --> 00:06:36.960
随着网络升级，这些数字也变得更好了

00:06:36.960 --> 00:06:40.000
嗯，我们正在做更多的改进，但是

00:06:40.000 --> 00:06:42.639
我们已经对这些数字感到非常满意，对不起，我们不满意

00:06:42.639 --> 00:06:44.319
有了这些数字，我们对我们所取得的进步感到满意

00:06:44.319 --> 00:06:49.599
让我们想要变得更好很多，但是是的，这是一个开始

00:06:49.599 --> 00:06:53.520
好吧，嗯，我们对此所做的下一个重大改变确实是内容

00:06:53.520 --> 00:06:57.039
上下文更改，这将对固定服务产生很大的影响

00:06:57.039 --> 00:07:03.520
嗯，因为嗯，基本上就像

00:07:03.520 --> 00:07:07.360
在我们的上下文中，任何浪费的带宽um都会更改位交换之类的粒子

00:07:07.360 --> 00:07:13.199
呃，花钱，嗯，如果bitswap很慢，就好像有什么用

00:07:13.199 --> 00:07:15.199
人们认为哦，这很慢，他们不想使用

00:07:15.199 --> 00:07:20.319
fps，他们不使用bing服务，所以我们做了几个非常大的

00:07:20.319 --> 00:07:23.199
这里的改进，就像是在时间上

00:07:23.199 --> 00:07:26.639
防守实际表现，嗯，我们基本上是

00:07:26.639 --> 00:07:32.160
改进了多个对等方获取的性能

00:07:32.160 --> 00:07:35.680
恩，基本上，bitswap更擅长于

00:07:35.680 --> 00:07:38.400
共享带宽并立即从多个来源拉取

00:07:38.400 --> 00:07:41.199
实际上在过去会得到适当的提速

00:07:41.199 --> 00:07:44.080
它会加快速度并从多个同伴那里拉来

00:07:44.080 --> 00:07:48.400
但是就像不是那么多，你以后可以看这张图

00:07:48.400 --> 00:07:52.400
嗯，从浪费或重复的数据块来看，我们基本上已经消失了

00:07:52.400 --> 00:07:54.800
归零，底部的红线是新的

00:07:54.800 --> 00:07:59.440
换掉蓝线，所以旧的换位，你可以说基本上像

00:07:59.440 --> 00:08:02.560
当我们准备好正方形之后，我们现在不会再看到重复的块了

00:08:02.560 --> 00:08:06.080
嗯，当您开始增加延迟时间时，我们确实开始看到一些人的

00:08:06.080 --> 00:08:08.160
我们阻止了内部超时

00:08:08.160 --> 00:08:11.840
在下一个版本中，我们添加了一项功能，可以更好地估算这些

00:08:11.840 --> 00:08:13.919
超时，所以你应该看的更少

00:08:13.919 --> 00:08:16.560
重复的方块，但是是的，我们做了很多

00:08:16.560 --> 00:08:21.680
这里的改进呃图同步好吧所以graphsync是这个

00:08:21.680 --> 00:08:25.199
新的花式协议，使我们可以请求整个请求

00:08:25.199 --> 00:08:27.919
一次而不是请求每个单独的块，所以如果

00:08:27.919 --> 00:08:30.400
就像您说的那样被交换了，我希望此块与此块之上的该块

00:08:30.400 --> 00:08:33.440
嗯，但这意味着您知道很多往返行程，如果您想喜欢

00:08:33.440 --> 00:08:36.880
一次传输一堆数据图形看起来像您所描述的

00:08:36.880 --> 00:08:41.599
想要的数据子集，不幸的是，像拉进来一样全部拉进来

00:08:41.599 --> 00:08:45.040
我们不喜欢，因为基本上我们在图的内部就可以做到这一点

00:08:45.040 --> 00:08:49.120
它将所有数据提取到哪里，并且像花费一样将数据吐出，但是

00:08:49.120 --> 00:08:52.720
我们还没有像其他围绕图表同步的智慧一样完成um

00:08:52.720 --> 00:08:55.279
这样他们就可以实际选择要从中下载的同龄人

00:08:55.279 --> 00:08:58.800
在同级之间拆分请求继续执行所有此类请求

00:08:58.800 --> 00:09:01.519
因此，在此版本中，我们没有照片和支持，而是

00:09:01.519 --> 00:09:03.519
图形服务器端支持，这意味着

00:09:03.519 --> 00:09:08.399
一个ips节点可以通过图同步将数据提供给

00:09:08.399 --> 00:09:12.080
其他一些节点不一定是ipfs，而是一些自由p节点

00:09:12.080 --> 00:09:15.120
具有图同步客户端支持的um

00:09:15.120 --> 00:09:18.160
那么这对固定服务意味着什么呢？

00:09:18.160 --> 00:09:22.320
呃，如果你想像获取数据一样加快速度

00:09:22.320 --> 00:09:26.000
来自试图固定数据的人，您知道他们的对等ID

00:09:26.000 --> 00:09:29.680
您可以轻松地构建他们喜欢的工具

00:09:29.680 --> 00:09:33.200
完全放在这里，他们使用图同步吸收所有数据

00:09:33.200 --> 00:09:36.080
这是假设用户已启用此实验，而该用户未启用

00:09:36.080 --> 00:09:38.080
默认，您知道将来可能会默认

00:09:38.080 --> 00:09:41.519
发布，但假设他们已启用它，或者您已告诉他们将其启用，

00:09:41.519 --> 00:09:43.360
只需吸收所有日期和图形同步

00:09:43.360 --> 00:09:46.880
如果您想要此工具的示例，则在codefest存储库中有一个示例

00:09:46.880 --> 00:09:50.480
在测试中，您可以在那里阅读代码

00:09:50.480 --> 00:09:54.080
嗯，是的，我们希望最终我们将拥有完整的图表和支持

00:09:54.080 --> 00:09:57.040
这应该提高数据交换的性能

00:09:57.040 --> 00:10:00.640
和ipfs一般而言，我们所做的工作还不够完善。

00:10:00.640 --> 00:10:05.680
迈出一大步好吧，嗯，下一步就是进出口吧

00:10:05.680 --> 00:10:09.440
这就是您如何从ipas进出数据并进行了一些改进

00:10:09.440 --> 00:10:15.600
再次非常重要的发现服务，嗯，首先，嗯，我们改进了广告

00:10:15.600 --> 00:10:19.200
在批处理机上的性能特别是恩

00:10:19.200 --> 00:10:22.000
r就像我们试图切换到的下一代数据存储

00:10:22.000 --> 00:10:25.120
嗯，我们一直在慢慢地挖掘

00:10:25.120 --> 00:10:28.399
呃臭虫，喜欢其中的回归

00:10:28.399 --> 00:10:31.600
就像试图总结我们遇到的问题清单

00:10:31.600 --> 00:10:34.160
我们几乎到了那里，我们还有一些希望解决的问题

00:10:34.160 --> 00:10:39.279
这个在0.6的下一个版本中默认是稳定的嗯嗯

00:10:39.279 --> 00:10:42.720
抱歉，这就像默认情况下的数据存储库

00:10:42.720 --> 00:10:46.000
但是在此版本中，我们说的很稳定

00:10:46.000 --> 00:10:51.040
至少嗯，所以我们建议人们尝试一下

00:10:51.040 --> 00:10:53.839
如果您在这里查看右下角，您可以看到效果

00:10:53.839 --> 00:10:57.400
发行版中badge与飞行fs与电池的关系

00:10:57.400 --> 00:11:01.600
[音乐]此发行版中的badge现在可与之媲美

00:11:01.600 --> 00:11:05.120
至少在磁盘上有um与读取文件一样

00:11:05.120 --> 00:11:08.800
磁盘，然后添加或呃或它与复制文件相同

00:11:08.800 --> 00:11:11.920
从一个位置到办公桌上的另一个位置

00:11:11.920 --> 00:11:15.839
因此它的速度不如从网络中获取数据和

00:11:15.839 --> 00:11:19.680
然后写入磁盘，因为您嗯，我们正在使用某些磁盘io

00:11:19.680 --> 00:11:22.480
从同一磁盘读取数据，但是对于大多数用户来说，

00:11:22.480 --> 00:11:25.680
尝试将数据添加到ipfs中，应该和在数据库中一样快

00:11:25.680 --> 00:11:32.079
复制目录，是的，第二个，我们有

00:11:32.079 --> 00:11:36.480
即兴或抱歉，我们添加了一些用于导入导出标签的命令

00:11:36.480 --> 00:11:42.800
或对不起ipd dags，就像整个目录树或任意目录树一样

00:11:42.800 --> 00:11:47.279
理想的数据结构um以前像您一样做到这一点

00:11:47.279 --> 00:11:50.560
喜欢从bfs中提取数据到一组

00:11:50.560 --> 00:11:54.240
目录，然后重新导入数据，或者像拉出单个块一样

00:11:54.240 --> 00:11:57.120
然后做出反应或像这样移动到数据源

00:11:57.120 --> 00:12:01.040
恩现在你可以给我cid并取出这个档案

00:12:01.040 --> 00:12:04.880
像整个数据图一样，然后将其重新导入到ipfs中

00:12:04.880 --> 00:12:08.320
ping服务的最酷的部分是这样，就像这样，

00:12:08.320 --> 00:12:10.959
您需要从用户那里获取一堆数据，您可以从字面上获取它们

00:12:10.959 --> 00:12:15.519
就像运行ifis标签导出，将其导出到硬盘驱动器，然后将硬盘发送给您

00:12:15.519 --> 00:12:18.639
您只需导入ipfs，这可能是最快的方法

00:12:18.639 --> 00:12:22.480
在ibms中将数据移动到这一点，或者一般在Internet上

00:12:22.480 --> 00:12:25.360
因为像运送硬盘一样快于互联网

00:12:25.360 --> 00:12:30.079
嗯，所以，是的，如果您有用户，他们只需要喜欢

00:12:30.079 --> 00:12:33.760
给您大量数据，这是一个选择

00:12:33.760 --> 00:12:37.519
嗯，好吧，终于，我有很多头了

00:12:37.519 --> 00:12:40.880
适用于经营维权人士和基础设施的人们

00:12:40.880 --> 00:12:44.079
首先，我们启用了一项名为autonet的服务，默认情况下autonet是

00:12:44.079 --> 00:12:46.079
再次是我们用来改善dhd的服务

00:12:46.079 --> 00:12:49.279
允许节点确定是否拨号

00:12:49.279 --> 00:12:53.920
这里的要点是节点现在将帮助其他节点确定它们是否

00:12:53.920 --> 00:12:57.600
默认情况下可用，如果有问题，可以将其关闭

00:12:57.600 --> 00:13:02.800
配置文档godfs回购，但这是一项非常有限的服务，我们

00:13:02.800 --> 00:13:06.079
没想到这会带来问题，但是就像您不希望节点执行

00:13:06.079 --> 00:13:11.120
像执行任何无关的样式一样，那么您可以将其关闭

00:13:11.120 --> 00:13:14.160
并不是因为您希望通过将其保留在呃来帮助网络

00:13:14.160 --> 00:13:18.720
但是请注意，我们默认将tls切换为tls

00:13:18.720 --> 00:13:23.440
运输，嗯，这样基本上会给我们喜欢

00:13:23.440 --> 00:13:26.880
更好或更了解的更好的安全运输

00:13:26.880 --> 00:13:30.320
安全属性，通常更快，实际上更快

00:13:30.320 --> 00:13:35.279
比我们以前的运输心理呃，但是仍然没有开放的支持

00:13:35.279 --> 00:13:40.000
我们对此有一个开放的问题，嗯，这是对它的开放赏金。

00:13:40.000 --> 00:13:44.399
嗯，所以这确实意味着随着人们的升级，您可能会看到

00:13:44.399 --> 00:13:47.839
由于打开ssl导致uh cpu使用量增加

00:13:47.839 --> 00:13:51.839
嗯，嗯，打开单元格比简化要好得多

00:13:51.839 --> 00:13:54.639
嗯，安全有开放的SSL支持，所以

00:13:54.639 --> 00:13:59.199
就像您一直在使用开放式SSL支持来构建开放式辅助服务器一样

00:13:59.199 --> 00:14:02.480
然后像是的，您可能会看到来自tls的更多cpu用法

00:14:02.480 --> 00:14:07.680
连接是的，只是一个动手的传票网关，你可以阅读更多

00:14:07.680 --> 00:14:11.440
关于这个嗯，我现在相信博客

00:14:11.440 --> 00:14:14.079
嗯，我不确定我们是否专注于博客文章

00:14:14.079 --> 00:14:19.279
嗯，但是，是的，这让我们喜欢把呃

00:14:19.279 --> 00:14:22.399
cid或域名或ips密钥

00:14:22.399 --> 00:14:30.160
在子域中，因此它为每个um ips站点提供了一个单独的来源um

00:14:30.160 --> 00:14:34.320
嗯，这就像是的，对于跑步来说，这通常很重要

00:14:34.320 --> 00:14:39.760
在ibfs中编写dapp，这会影响您的基础架构

00:14:39.760 --> 00:14:43.360
因为像您可能会更改网关的运行方式，以支持某些功能

00:14:43.360 --> 00:14:46.160
起源不同，最后我们做了一些改进

00:14:46.160 --> 00:14:48.959
守护程序，一个嵌入式系统d支持

00:14:48.959 --> 00:14:52.639
嗯，嗯，就像嗯，我们现在支持该系统

00:14:52.639 --> 00:14:55.920
通知api和套接字激活，如果您想喜欢的话，这很有用

00:14:55.920 --> 00:15:00.399
自动启动刀或类似订单依赖项

00:15:00.399 --> 00:15:04.079
嗯，我们已经做到了，这样您就可以通过域套接字提供api了

00:15:04.079 --> 00:15:10.000
为了提高安全性，我们还进行了两次迁移

00:15:10.000 --> 00:15:12.639
释放他们是非常小的嗯，他们只是在移动一些东西

00:15:12.639 --> 00:15:18.079
像修复一些配置值一样，但是如果升级则只是提示

00:15:18.079 --> 00:15:21.600
嗯，然后您会自动迁移您的节点，则必须下载该节点

00:15:21.600 --> 00:15:25.440
升级时要升级，以使这些体积变小

00:15:25.440 --> 00:15:29.839
更改回购单，因此只需为那个um计划，

00:15:29.839 --> 00:15:33.600
更多，但我肯定没时间了，所以你可以读

00:15:33.600 --> 00:15:36.880
稍后在幻灯片上

00:15:38.320 --> 00:15:42.880
如果有人对斯蒂芬·斯蒂芬有疑问，我是否有时间回答您的问题？

00:15:42.880 --> 00:15:47.440
他们在问与答或聊天中您的一个问题

00:15:47.440 --> 00:15:49.360
人们是否想要链接到您的幻灯片

00:15:49.360 --> 00:15:55.839
以后我可以寄出去

00:15:57.759 --> 00:16:00.959
我还建议您阅读其中包含的发行说明

00:16:00.959 --> 00:16:11.440
此处的所有内容以及更详细的信息答案均已加密

00:16:11.440 --> 00:16:15.279
是私人表格的顶部，是的，是

00:16:15.279 --> 00:16:18.160
私人群组，我们将首先使用

00:16:18.160 --> 00:16:22.000
Swarm key um uh然后tls就像

00:16:22.000 --> 00:16:26.320
最重要的是加密，或者抱歉，我猜想在该加密下面

00:16:26.320 --> 00:16:29.920
我们将对cls进行加密，然后对它进行加密，问题是，我们能

00:16:29.920 --> 00:16:34.560
禁用tls来指示cpu的使用情况呃我们没有标记来禁用tls

00:16:34.560 --> 00:16:37.600
此版本，因为我们计划切换到

00:16:37.600 --> 00:16:40.399
新的tls版本（如果尚未手动编译）

00:16:40.399 --> 00:16:46.480
带有破折号之类的带有uh的节点等于openssl

00:16:46.480 --> 00:16:50.079
您实际上应该实际上注意到cpu使用量的减少

00:16:50.079 --> 00:16:52.639
仅当您已使用open sl显式编译节点时

00:16:52.639 --> 00:16:57.199
如果可能发生这种情况，请提供支持，这仅作为节点的升级

00:16:57.199 --> 00:17:00.240
科迪的问题是背后的历史是什么

00:17:00.240 --> 00:17:06.000
stuccio与tls哦，嗯，这很复杂

00:17:06.000 --> 00:17:09.679
我实际上并不了解很多，嗯，我知道现在我们最初看了一下

00:17:09.679 --> 00:17:13.760
使用tls，但是tls与

00:17:13.760 --> 00:17:17.919
嗯，像原始的theos粒子这样的东西第二次经过了很多次往返

00:17:17.919 --> 00:17:20.799
想少一些，我相信我不是想训练你不要检查那个

00:17:20.799 --> 00:17:23.839
嗯，就像tls一样，它与ci系统紧密地联系在一起

00:17:23.839 --> 00:17:26.959
您想要一个更简单易懂的系统

00:17:26.959 --> 00:17:30.960
而不是与CIA系统tls.3捆绑在一起

00:17:30.960 --> 00:17:35.120
嗯，这里混合了公数的改进，甚至在技术上都像这样支持

00:17:35.120 --> 00:17:38.960
就像完全放弃认证，我们不这样做

00:17:38.960 --> 00:17:42.320
像um与其他tls堆栈更好的互操作性

00:17:42.320 --> 00:17:47.760
嗯，对不起，我不知道那里的全部历史，我认为这是一个很好的总结

00:17:47.760 --> 00:17:52.400
那我想我们可以继续

