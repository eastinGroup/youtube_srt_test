WEBVTT
Kind: captions
Language: zh-Hans

00:00:01.429 --> 00:00:09.150
你好，抱歉，我今天不能在那里，但我将以

00:00:09.150 --> 00:00:14.039
互联网，我叫安德鲁，很高兴认识你，我是

00:00:14.039 --> 00:00:19.920
研究员的程序包经理我已经与ipfs团队合作了几次

00:00:19.920 --> 00:00:23.400
几个月专门研究我的PFS

00:00:23.400 --> 00:00:28.349
可以帮助改善包装管理，今天我将要讨论

00:00:28.349 --> 00:00:34.800
使用IP FS进行分散式软件包管理，这是一个棘手的问题

00:00:34.800 --> 00:00:40.079
做分散式软件包管理器涉及许多困难的部分

00:00:40.079 --> 00:00:46.199
今天我将要讨论分散式依赖解决方案

00:00:46.199 --> 00:00:53.219
基本上源于我所做的一些研究，以研究挑战

00:00:53.219 --> 00:01:00.690
参与分散式出版，以消除长篇小说的动摇

00:01:00.690 --> 00:01:06.750
就像在分散系统中发布软件包时一样

00:01:06.750 --> 00:01:12.600
同时发布该包的所有依赖项，这意味着

00:01:12.600 --> 00:01:17.820
您将打包所有内容并立即发布所有内容

00:01:17.820 --> 00:01:23.310
这样可以避免其他注册表中的可用性问题消失

00:01:23.310 --> 00:01:28.320
删除甚至可能只是看起来要脱机而已

00:01:28.320 --> 00:01:34.560
能够解决您的依赖关系，同时安装它很好地包装在

00:01:34.560 --> 00:01:38.790
微型注册表的想法是所有依赖项的一小部分，

00:01:38.790 --> 00:01:45.210
您只需要安装一个依赖项就需要的依赖元数据

00:01:45.210 --> 00:01:49.920
软件包，您可以制作其中许多内容并将其直接发布到您的IP FS

00:01:49.920 --> 00:01:57.420
并实际上控制了您如何使用软件包，而不是依赖

00:01:57.420 --> 00:02:02.340
在集中式注册表上，我制作了一个方便的小命令行工具，

00:02:02.340 --> 00:02:05.820
这使得它很容易为NPM工作，但是它应该

00:02:05.820 --> 00:02:11.549
其他软件包管理者也以类似的方式工作，所以让我们检查一下

00:02:11.549 --> 00:02:17.140
我在当前目录中有一个程序包，

00:02:17.140 --> 00:02:25.480
它有一些依赖关系，我可以使用我的将其直接发布到ipfs

00:02:25.480 --> 00:02:32.090
发布的命令这样做是在解决传递依赖树

00:02:32.090 --> 00:02:37.400
该库的名称，然后将其作为一个目录添加到ipfs中，您可以

00:02:37.400 --> 00:02:45.230
然后在网关上查看，您可以在这里看到我们拥有的软件包

00:02:45.230 --> 00:02:50.959
发布了其元数据及其所有依赖项，让我们对该版本进行修改，然后

00:02:50.959 --> 00:03:01.879
再次发布相同库1.5的新版本，我们解决了所有

00:03:01.879 --> 00:03:08.810
过境依赖关系，这会输出新的历史记录，但是如果我们想做的话

00:03:08.810 --> 00:03:17.659
添加以前的注册表，如果我们想将新程序包添加到

00:03:17.659 --> 00:03:23.359
以前的注册表很好，我们基本上可以通过以前的注册表cid

00:03:23.359 --> 00:03:28.790
出了错，因为出了一些可怕的错误，让我们尝试一下这种联系

00:03:28.790 --> 00:03:38.510
bot很棒，我们可以在网关上检查它，如您所见，我们已经

00:03:38.510 --> 00:03:46.010
在单个注册表中获得了同一个程序包的两个不同版本，所有

00:03:46.010 --> 00:03:54.349
他们两个的依赖关系让我们继续前进，我们也可以发布一些东西

00:03:54.349 --> 00:04:00.910
直接从NPM注册中心发布反应

00:04:00.910 --> 00:04:06.080
这样就发布了最新版本的react是16点8

00:04:06.080 --> 00:04:11.570
第六点，我们可以复制并粘贴运行它，我们已经安装了

00:04:11.570 --> 00:04:17.870
直接从ipfs反应完全自助，我们也可以发布较早的版本

00:04:17.870 --> 00:04:23.870
版本的react可能在15那里做出反应，我们只需从那里安装

00:04:23.870 --> 00:04:29.780
并且您已经有了以前的版本，那么您可以做的很酷的事情是

00:04:29.780 --> 00:04:36.200
实际上将我们创建的这两个注册表合并在一起以创建一个

00:04:36.200 --> 00:04:40.700
同时包含这两个版本的注册表

00:04:40.700 --> 00:04:45.470
网关，看看它看起来像什么，我们有两个不同的版本

00:04:45.470 --> 00:04:50.360
与所有依赖项进行反应，以便能够将这些依赖项一起安装

00:04:50.360 --> 00:04:56.419
是可组合的，因此您可以继续组成其他微型

00:04:56.419 --> 00:05:03.850
注册管理机构一起创建新的注册管理机构，并能够

00:05:03.850 --> 00:05:08.810
成功解决了IP FS上的那些依赖关系，而无需任何集中式

00:05:08.810 --> 00:05:15.770
当然需要注册表，它在github上，您可以签出并让我

00:05:15.770 --> 00:05:21.550
知道你如何相处，在营地玩得很开心，非常感谢

