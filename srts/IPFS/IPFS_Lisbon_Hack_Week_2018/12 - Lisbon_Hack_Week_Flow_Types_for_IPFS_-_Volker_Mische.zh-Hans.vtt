WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.030 --> 00:00:03.780
我将快速讨论基于工作原理的流程输入内容

00:00:03.780 --> 00:00:07.470
谁在做，因为管道的改进我们可以做得更好

00:00:07.470 --> 00:00:11.700
事情，我会很快，我希望会有讨论，我希望

00:00:11.700 --> 00:00:17.550
会有一些嘘声或损失，或者对于那些不知道流量的人，我们会看到这样的声音。

00:00:17.550 --> 00:00:22.890
以静态类型流向JavaScript，然后可以明显地进行类型检查

00:00:22.890 --> 00:00:27.660
如此之多的人使用它来实现更智能的自动完成，因为那时您已经

00:00:27.660 --> 00:00:31.009
知道类型，如果出了问题，就会出错

00:00:31.009 --> 00:00:37.020
引入流程类型的动机是一回事，就是我们拥有

00:00:37.020 --> 00:00:41.460
有机会重新访问我们的API，我们当然也可以不添加

00:00:41.460 --> 00:00:46.320
流程，但这就像一个不错的副作用，只是IP API使它变得更好

00:00:46.320 --> 00:00:52.289
因为如果您发现可以传递的类型非常复杂，那就是

00:00:52.289 --> 00:00:57.570
难以在类型系统中建模的IP目标API可能不是那么好，所以我们

00:00:57.570 --> 00:01:01.890
可以解决这些问题，我们可以找到错误，我的经验也很稳定

00:01:01.890 --> 00:01:06.600
键入，代码可能会变得更简单，因为就像在JavaScript中一样，

00:01:06.600 --> 00:01:12.900
需要像这样进行检查，以便基础知识可以放大您在CID中放置的P脸，并且几乎

00:01:12.900 --> 00:01:17.040
它需要CID的每个函数都会检查它是字符串还是缓冲区还是它

00:01:17.040 --> 00:01:23.330
作为CID类，但是如果您随后将API更改为仅能够采用CID类型

00:01:23.330 --> 00:01:26.549
您不再需要那些检查，因为类型检查器将对其进行检查

00:01:26.549 --> 00:01:31.890
对您来说，如果是错误的话，它将失败，因此，使代码更简单，一个人

00:01:31.890 --> 00:01:35.939
告诉我，您调查了代码，完全感到困惑，因为它可以

00:01:35.939 --> 00:01:38.729
如果有类型，那么要处理很多不同的事情，这很容易

00:01:38.729 --> 00:01:44.189
了解，目标是我们尽可能少地改变事物

00:01:44.189 --> 00:01:49.560
它只是运行一个测试，依此类推，因此该模块仍然需要

00:01:49.560 --> 00:01:53.700
在流程生态系统之外使用，因此可以将其集成到您的流程中

00:01:53.700 --> 00:01:58.439
但是，当然，如果您不使用流程，它就可以工作，而且重要的是

00:01:58.439 --> 00:02:02.549
我们有这么多的小模块和依赖项，链接仍然需要

00:02:02.549 --> 00:02:05.520
之所以起作用，是因为您确实更新了一个依赖项，并且想要链接到

00:02:05.520 --> 00:02:09.569
您正在处理的另一个仍然需要工作，而挑战是

00:02:09.569 --> 00:02:13.680
的流程是我们的es6模块，众所周知

00:02:13.680 --> 00:02:20.099
我认为我们将获得六个模块，但没有旧版本，因此

00:02:20.099 --> 00:02:26.129
您需要一个构建步骤，没有办法解决这个问题，而且

00:02:26.129 --> 00:02:32.180
流解析的方式与模块解析相同，因此它意味着

00:02:32.180 --> 00:02:36.569
谁在显示谁在包中是否包含主要属性

00:02:36.569 --> 00:02:42.439
需要指向一个节点可以运行的模块，但由于节点可以在此处运行，所以需要六个模块

00:02:42.439 --> 00:02:47.849
这是一个问题，因为流程也想运行它，但是它必须是六个

00:02:47.849 --> 00:02:51.569
我不知道他们是如何想到这个模块的，因为像那样

00:02:51.569 --> 00:02:55.349
特定的代码，因此解决方案通常是您具有以下文件的副本：

00:02:55.349 --> 00:03:00.260
点流扩展，然后它起作用，但是那是我认为它非常丑陋，但是

00:03:00.260 --> 00:03:08.730
是的，所以这就是我们过去两天所花费的成果

00:03:08.730 --> 00:03:13.980
现在要做的是，您可以更改代码并运行测试，而无需构建步骤

00:03:13.980 --> 00:03:18.449
只是在源目录中，所以这是whoohoo出现的部分

00:03:18.449 --> 00:03:26.370
是的，是的，这很酷，但是我们仍然要说的是，您需要

00:03:26.370 --> 00:03:30.419
构建步骤是我们有一个dist文件夹，其中包含我们将要使用的模块

00:03:30.419 --> 00:03:36.769
在NPM上发布，因为从那时起，它将基本上遍历两个非es6模块

00:03:36.769 --> 00:03:42.870
和上级，如果您将其链接起来，这也是我们可以避免的事情

00:03:42.870 --> 00:03:48.000
您是否需要在存储库中有一个观察者，因为如果您需要

00:03:48.000 --> 00:03:54.150
如果您需要从dist目录中获取内容，那是一件小事，但是

00:03:54.150 --> 00:03:57.989
好吧，基本上就是这样，所以您链接运行观察程序的mod并

00:03:57.989 --> 00:04:03.750
然后，如果您编辑源文件，它将显示出来，我实际上并不那么快

00:04:03.750 --> 00:04:08.729
如我所愿，所以我需要更快一些，因此他们需要做一个待办事项清单是

00:04:08.729 --> 00:04:12.870
与年龄和文档的集成度更高，因此人们可以说

00:04:12.870 --> 00:04:16.620
阅读并说确定，我想让我的模块流淌，这就是你需要的

00:04:16.620 --> 00:04:21.120
做，然后对您有用，还有一个未解决的问题

00:04:21.120 --> 00:04:26.590
是只发布该目录还是发布整个模块

00:04:26.590 --> 00:04:35.020
下午，但是是的，如果有任何问题，我不知道我们要花多少时间

00:04:35.020 --> 00:04:47.440
有，是的，但是我们当然可以改善事实，像我们一样说

00:04:47.440 --> 00:04:52.210
基本上是一个全球洗衣机，可以监视所有链接的模块

00:04:52.210 --> 00:04:57.460
但完全是因为像您这样，您基本上需要10塔

00:04:57.460 --> 00:05:03.760
在Windows中，您需要输入它的especi进入模块并输入

00:05:03.760 --> 00:05:09.040
NPM链接，它们会在之后到达，我们在年龄中添加了您使用的类型

00:05:09.040 --> 00:05:16.260
您的手表下次放下时，我将其连接至NPM链接，这就是您的方式

00:05:24.050 --> 00:05:27.100
[音乐]

00:05:54.120 --> 00:05:58.690
好吧，我想如果您已更改，则需要考虑很多事情

00:05:58.690 --> 00:06:05.200
如果您做错了事，我猜是它自己的问题，但即使您知道

00:06:05.200 --> 00:06:08.919
就像，但是我想问题是，是的，是的

00:06:08.919 --> 00:06:13.330
不，但是我说过您可以实施一项全球监视，基本上

00:06:13.330 --> 00:06:17.139
看着所有的东西，如果假设哦，一定有更好的方法

00:06:17.139 --> 00:06:20.289
像他们一样，这可能等待发现它是否链接，然后就

00:06:20.289 --> 00:06:23.830
遍历所有依赖项树并监视所有非依赖项

00:06:23.830 --> 00:06:26.039
大不了的

00:06:39.539 --> 00:06:44.050
因此，如果我们有战利品嘘声，并且很紧，是的，那么我们将填充它，现在

00:06:44.050 --> 00:06:54.060
它是无标题的，是的，现在我想含水层很好，如果您

00:06:54.060 --> 00:06:58.330
知道喜欢，如果您需要它会丢失它，但是如果您被导入了

00:06:58.330 --> 00:07:20.919
那不是六个模块之间的关键，如果需要的话

00:07:20.919 --> 00:07:25.810
依赖项的工作都是流程，那么您无需看那些电脑

00:07:25.810 --> 00:07:31.960
尤其是对于观看来说，这是整个需求的事情，这仅仅是

00:07:31.960 --> 00:07:38.199
排序正常，所以一点也基本上可以平滑过渡

00:07:38.199 --> 00:07:42.400
在流程和旧内容之间切换，因此您无需更改所有模块即可进行流程

00:07:42.400 --> 00:07:46.510
在某一时刻，但是如果一切都在进行，那就不再是问题了

00:07:46.510 --> 00:08:09.729
像其他用户一样，他们会使用分散吗？

00:08:09.729 --> 00:08:20.080
他们喜欢改变类型，我们有他们的想法，但一无所获，您可以

00:08:20.080 --> 00:08:23.889
使用以下方法接受适用于电机的流缓冲器或RCA：

00:08:23.889 --> 00:08:28.060
流程，但对于未使用封闭式服务的用户，我们仍然需要添加这些检查

00:08:28.060 --> 00:08:33.550
因为它们不会被编译成白色，所以我们

00:08:33.550 --> 00:08:38.969
是的，不要摆脱它们，是的，但是对于某些

00:08:38.969 --> 00:08:44.159
问题是我们想要更大的东西，然后说较低级别的模块

00:08:44.159 --> 00:08:50.790
例如，只接受CID作为类，而上层模块是

00:08:50.790 --> 00:08:55.829
支持传递字符串，但是不管我用什么意思

00:08:55.829 --> 00:08:59.369
简化API是因为我认为只有我们

00:08:59.369 --> 00:09:03.569
忙着需要事先盖好它，因为像许多徒步旅行一样融化了你

00:09:03.569 --> 00:09:07.109
您可以独立使用它们，我们仍然可以使用，但是大学

00:09:07.109 --> 00:09:12.269
准备，您需要将其自己转换为CID，例如，是的

00:09:12.269 --> 00:09:27.509
真的-是的，就像写出问题来回答他们的午餐，然后

00:09:27.509 --> 00:09:30.600
还有另一个会议，就像我们刚才提出的问题，这是关注的问题

00:09:30.600 --> 00:09:34.709
人们有，我将这些建议回答哦，是的，所以他们会

00:09:34.709 --> 00:09:37.309
像所有东西一样

00:09:41.600 --> 00:09:52.820
好吧，就像我今天总是想吃饱东西好吧，所以让我们尝试做

00:09:52.820 --> 00:09:56.120
例如在午餐时讨论，如果您觉得自己有事要报告

00:09:56.120 --> 00:10:00.250
小报告，如果没有，我们会跟进

00:10:04.700 --> 00:10:11.139
[掌声]

