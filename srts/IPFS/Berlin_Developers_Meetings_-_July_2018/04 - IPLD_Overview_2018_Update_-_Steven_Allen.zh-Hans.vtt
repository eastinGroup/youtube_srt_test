WEBVTT
Kind: captions
Language: zh-Hans

00:00:01.500 --> 00:00:06.600
所以我是史蒂芬（Stephen），通常被称为十亿美元

00:00:06.600 --> 00:00:12.059
应该希望很短我觉得D是行星际链接

00:00:12.059 --> 00:00:16.859
数据系统，这是我们用于的基础系统

00:00:16.859 --> 00:00:22.800
在ipfs中存储数据并引用数据的原因，为什么我建立II基本上给了我们一个

00:00:22.800 --> 00:00:26.939
分散式永久记忆，因为其强调许可权

00:00:26.939 --> 00:00:31.619
我再次承认，我们需要一个永久的文件系统，但是在每个文件系统的下面

00:00:31.619 --> 00:00:36.570
我的电脑中有某种形式的数据结构系统

00:00:36.570 --> 00:00:43.350
ipfs我们有生存能力，所以最初我们有一个叫做Merkel dag的东西

00:00:43.350 --> 00:00:49.739
默克尔·达格基本上拥有数据，并且链接每个节点看起来像这样，其中

00:00:49.739 --> 00:00:53.219
您可能有一个协议实验室的节点，它有一个数据部分

00:00:53.219 --> 00:00:56.309
它只包含原始数据，我在Jason中将其形成，对您很好

00:00:56.309 --> 00:01:01.890
在ipfs中，我们使用了我们的一部分，所以这只会看垃圾，然后说

00:01:01.890 --> 00:01:06.150
可以在数据部分中拥有另一个节点，史蒂文就是我，然后是一个链接

00:01:06.150 --> 00:01:09.750
回到我工作过的公司，并展示他们之间的关系

00:01:09.750 --> 00:01:16.259
我在公司里这样的工作方式有点烦人，所以我们组成了UD I

00:01:16.259 --> 00:01:21.180
感觉D是结构化的，因此与其仅具有此任意数据部分，不如

00:01:21.180 --> 00:01:23.700
整个事情都是结构化的，即使您不知道是什么，您也可以像

00:01:23.700 --> 00:01:27.360
您正在寻找，您可以他妈的了解其自身的结构

00:01:27.360 --> 00:01:31.950
描述，所以您在这里没有像磁盘映像这样的外部架构

00:01:31.950 --> 00:01:38.579
实际上是内置在ipfs中，它不是二进制文件，而是在IP LD中

00:01:38.579 --> 00:01:42.689
完全就像皮肤药一样，理想情况下是回到原来的样子

00:01:42.689 --> 00:01:46.799
第二个版本，所以您理想地知道我们

00:01:46.799 --> 00:01:50.790
基本上，只要有

00:01:50.790 --> 00:01:54.960
指向您的一些IPL D数据的指针指针说什么版本

00:01:54.960 --> 00:01:59.579
它是IPL D的类型以及它所指向的数据类型或演算解释

00:01:59.579 --> 00:02:02.969
数据，所以我可以说哦，您指向的是获取对象，我将在

00:02:02.969 --> 00:02:06.509
第二个，但是就像，然后就像那样，这就是您解码对象的方式，

00:02:06.509 --> 00:02:09.360
这是他们使用的IPL版本，所以这意味着，如果我们必须

00:02:09.360 --> 00:02:13.240
更改任何内容，我们都可以随时更改版本号，并乐意

00:02:13.240 --> 00:02:18.910
未来我们很难用这个来解决这个问题

00:02:18.910 --> 00:02:24.400
默克尔套牌，我们实际上必须像调用bcd b0一样

00:02:24.400 --> 00:02:26.620
再也不需要你了，如果你的话，我们基本上会说得很好

00:02:26.620 --> 00:02:29.860
如果他们将CA d b0描绘成这样，则看到的东西看起来完全像这样

00:02:29.860 --> 00:02:33.520
否则会有一个版本，您可以以正常方式对待它，

00:02:33.520 --> 00:02:38.260
必须再次这样做，因为口袋旁边有很多特殊的外壳

00:02:38.260 --> 00:02:43.390
包容性的，所以IPL de真的很酷，因为我们可以指向类似

00:02:43.390 --> 00:02:48.760
任何merkel链接数据，基本上都说现在是IPL d的一部分，所以我

00:02:48.760 --> 00:02:53.830
认为这是博格（Borg）或基本上说得很好，就像是默克尔链接的数据一样

00:02:53.830 --> 00:02:57.640
是的，基本上是关于前一个提交的列表

00:02:57.640 --> 00:03:03.340
提交，然后每个提交都指向树对象，是的，但是像那样

00:03:03.340 --> 00:03:07.780
意味着像从IPL D本身一样，您实际上可以喜欢探索获取提交树

00:03:07.780 --> 00:03:14.350
就像引用任何得到树的对象一样对待它，就像对待任何对象一样

00:03:14.350 --> 00:03:18.430
另一个理想的对象，我们可以用hiriam做同样的事情，我们也有自己的

00:03:18.430 --> 00:03:25.360
自定义格式使用C钻孔是的，最后它具有过去的反转

00:03:25.360 --> 00:03:31.600
实际去400解释它首先基本上可以让您命名任何东西

00:03:31.600 --> 00:03:36.220
我的建筑物是默克尔·达格的要点，你可以给事物起个名字

00:03:36.220 --> 00:03:41.110
但真正的方式是您需要像某些节点那样说一些话，然后

00:03:41.110 --> 00:03:45.880
链接号32，然后有点像链接号41或类似的内容

00:03:45.880 --> 00:03:49.720
像浏览链接号那样，虽然不是很友好，但我只是

00:03:49.720 --> 00:03:54.130
给你看这个例子，它很容易理解，所以这又是这个

00:03:54.130 --> 00:03:59.080
此处的示例，但改写为D，它只是公司的两个对象

00:03:59.080 --> 00:04:05.410
然后是我，然后我的对象是活跃公司的指针，但是链接

00:04:05.410 --> 00:04:10.930
实际上就像我有决心一样，所以我应该感觉自己的Content ID /公司

00:04:10.930 --> 00:04:16.720
/名称，该名称仅穿过我的对象到达该公司，然后穿过

00:04:16.720 --> 00:04:19.989
通过插槽名称访问公司对象，并解析为协议实验室

00:04:19.989 --> 00:04:23.280
只是在探索数据之前有所不同

00:04:23.620 --> 00:04:29.560
对于从事此工作的团队来说，工作组是我自己

00:04:29.560 --> 00:04:36.760
假人多德（Dodd）目前不在这里，沃尔克（Volker）是助产士，我称助产士

00:04:36.760 --> 00:04:40.870
这是因为像再次帮助李富出生的人一样

00:04:40.870 --> 00:04:46.060
杰夫米（Keremy）自己冒出权子镍，然后我们有一堆

00:04:46.060 --> 00:04:50.350
列出这些贡献者有点困难，因为我觉得这些传播非常广泛

00:04:50.350 --> 00:04:56.820
并通过许多讨论建立起来，其中一些状态

00:04:56.820 --> 00:05:02.380
目前，我们已经将ffs剥离到理想状态，并且具有C或D T，而我

00:05:02.380 --> 00:05:07.120
感觉D我们正在开发新的改进格式，实际上可能是您

00:05:07.120 --> 00:05:11.020
现在应该恢复部署，因为ipfs的下一发行版很好

00:05:11.020 --> 00:05:15.460
一旦下一个版本5f是，它就会发布，但是我们默认情况下会支持它，然后转到

00:05:15.460 --> 00:05:22.990
FS和是的，我们仍在努力使用户界面更加友好

00:05:22.990 --> 00:05:26.380
实际上，由于Jas或

00:05:26.380 --> 00:05:30.550
在本季度的Walker修复中，JavaScript一直在使用

00:05:30.550 --> 00:05:35.440
使用JavaScript构建更加友好的界面，CEO仍然有些犹豫

00:05:35.440 --> 00:05:41.229
职责，我再次相信我还没有进行中的研究

00:05:41.229 --> 00:05:44.860
太多了，但基本上我们正在努力将类型引入

00:05:44.860 --> 00:05:49.990
您的ipfs，因此目前我们喜欢其结构化数据，但事实并非如此

00:05:49.990 --> 00:05:53.800
我们正在丢失类型信息，就像当您中断程序时那样

00:05:53.800 --> 00:05:57.460
输入您要编程的信息，然后在您输入信息时就喜欢

00:05:57.460 --> 00:06:00.940
抱歉，数据源和IPL对不起，我们有点像我们保留了结构

00:06:00.940 --> 00:06:04.000
但是我们抛弃了我们希望保留的实际的额外类型信息

00:06:04.000 --> 00:06:07.660
将来我们会添加更多类型类和类似的东西，

00:06:07.660 --> 00:06:15.330
然后最终将能够发布具有ible的JavaScript代码，但状态是JavaScript

00:06:15.330 --> 00:06:19.330
只会在本季度或过去的几个季度发生

00:06:19.330 --> 00:06:23.050
得益于Volker，界面，格式和文档在稳步改善

00:06:23.050 --> 00:06:27.880
转到下一个转到是已发布查看并包括get IV插件的改进

00:06:27.880 --> 00:06:32.979
支持解码编码，但由于时间紧迫，其他大多数停滞不前，因此

00:06:32.979 --> 00:06:35.219
那是

00:06:36.570 --> 00:06:42.389
[掌声]

00:06:47.349 --> 00:06:52.599
这可能是一个问题或想法，但我只是想把它扔掉

00:06:52.599 --> 00:06:58.599
如果您考虑使用图QL作为EPL desanté的查询语言

00:06:58.599 --> 00:07:03.039
浴室Rosso等的结构，所以问题是您是否考虑过

00:07:03.039 --> 00:07:08.409
使用图QL尝试BLD，我们已经研究过了

00:07:08.409 --> 00:07:12.849
考虑到这是我们要提出的一个问题

00:07:12.849 --> 00:07:14.949
与这个人的查询长度，我想使查询语言它有一个

00:07:14.949 --> 00:07:18.939
良好的性能保证了我可以向任意任意新查询发送查询

00:07:18.939 --> 00:07:24.969
不信任我，它可以执行查询，并且知道您不喜欢接受

00:07:24.969 --> 00:07:29.679
像这样的指数时间，并且还非常理想地了解其他一些属性

00:07:29.679 --> 00:07:33.729
您将能够部分地对某些数据子集执行查询，然后

00:07:33.729 --> 00:07:39.579
返回可验证的结果外观查询，就像是要得到的人

00:07:39.579 --> 00:07:43.749
返回数据，然后验证查询是否正确执行，我不知道是否

00:07:43.749 --> 00:07:47.679
图进入提供了这些保证，所以我们一直在寻找

00:07:47.679 --> 00:07:52.839
其他选定的语言，这些语言允许我们实现或

00:07:52.839 --> 00:07:56.019
我们说我们仍然可以在像威士忌这样的其他系统上使用图2

00:07:56.019 --> 00:07:58.449
我给你一个图形查询，你还给我我需要的一切

00:07:58.449 --> 00:08:02.139
实际轻弹一下查询即可确定您是否执行了查询

00:08:02.139 --> 00:08:05.139
查询正确，但是很抱歉，它不会出现问题

00:08:05.139 --> 00:08:10.559
这是很常见的问题，对不起其他任何问题

