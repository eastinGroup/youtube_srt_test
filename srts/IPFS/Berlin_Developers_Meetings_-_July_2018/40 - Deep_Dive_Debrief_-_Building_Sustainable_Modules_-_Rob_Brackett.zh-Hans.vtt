WEBVTT
Kind: captions
Language: zh-Hans

00:00:01.740 --> 00:00:08.519
所以我们专注于研究一些维护船的问题

00:00:08.519 --> 00:00:14.190
诸如模块数量的不断增长和社区的不断增长，以及

00:00:14.190 --> 00:00:18.150
少数人是维护者，并试图缓解一些

00:00:18.150 --> 00:00:23.310
我们更特别地关注JavaScript方面的负担

00:00:23.310 --> 00:00:26.910
NGO方面的问题部分是因为这来自于

00:00:26.910 --> 00:00:30.960
发布的问题主要集中在JavaScript方面，还因为

00:00:30.960 --> 00:00:36.809
没有人会专注于出现的幽灵，所以这是最大的警告

00:00:36.809 --> 00:00:45.930
所有这些，我想是ipfs注释273就是

00:00:45.930 --> 00:00:50.700
这些问题就解决了，这些超级粗糙的笔记都贴在了那里

00:00:50.700 --> 00:00:57.690
今天晚些时候是我的工作，发布更好得多的书面版本，但是

00:00:57.690 --> 00:01:01.170
这是我们的新工作计划和我们认为是的事情清单

00:01:01.170 --> 00:01:06.030
重要的是，我们想出了哪些需要做的人是相当公平的

00:01:06.030 --> 00:01:12.000
含糊不清，有些是非常具体的，因此我们认为非常重要的一件事

00:01:12.000 --> 00:01:15.960
马上，就是监狱里已经发生的事情，那是

00:01:15.960 --> 00:01:19.860
每个模块都需要有一个明确的维护者，或者

00:01:19.860 --> 00:01:24.509
维护者所有者需要做的第一件事之一就是所有者

00:01:24.509 --> 00:01:28.619
不到100％的合理代码覆盖率水平，但是

00:01:28.619 --> 00:01:31.950
确实需要确保他们认为这是一个合理的水平，以确保

00:01:31.950 --> 00:01:38.460
维护并确保使用覆盖率工具，现在所有模块

00:01:38.460 --> 00:01:43.110
在CI中运行并不是每个人都知道如何使用和监视它们，我们需要做的是

00:01:43.110 --> 00:01:48.299
并确保我们保持合理的水平

00:01:48.299 --> 00:01:53.700
接下来需要发生的事情是我们需要开始自动化

00:01:53.700 --> 00:01:59.610
许多模块的发行版中，我们在处理以下问题的能力方面存在严重问题

00:01:59.610 --> 00:02:03.899
整体上对某些较大的对象（例如JSI PFS）执行此操作，因此我们将

00:02:03.899 --> 00:02:10.770
尽快开始使用像嫉妒的回购之类的较小型产品或类似的产品

00:02:10.770 --> 00:02:17.319
或类似多地址或-然后按比例放大

00:02:17.319 --> 00:02:20.920
在那里，接下来的是迈克尔在

00:02:20.920 --> 00:02:25.810
即将开始进行的工作实际上已经在尝试记录

00:02:25.810 --> 00:02:29.890
项目生命周期，因为我们认为存在大量实践

00:02:29.890 --> 00:02:34.270
在项目成熟时减轻维护人员的工作量非常重要，这是有害的

00:02:34.270 --> 00:02:40.150
当项目真的很年轻并且生命周期是目标的一部分时

00:02:40.150 --> 00:02:45.730
进行定义，并定义我们如何进行这些过渡以及其中的一部分

00:02:45.730 --> 00:02:49.840
如此定义了在给定点的那些需求是什么

00:02:49.840 --> 00:02:55.150
项目成熟度级别的另一部分是确保项目在

00:02:55.150 --> 00:02:59.620
正确的地方，我们有大量的回购协议位于ipfs org或

00:02:59.620 --> 00:03:07.209
造船厂组织，只是空着或者被弃用或死了，

00:03:07.209 --> 00:03:11.739
我们可以减轻负担的重要做法是确保不要

00:03:11.739 --> 00:03:16.239
住在那种更正式的地方，直到像嫉妒的ipfs之类的人

00:03:16.239 --> 00:03:19.930
或陷入悲痛或任何积极依赖于他们的一部分

00:03:19.930 --> 00:03:25.060
添加依赖项的拉取请求是该实验的动作

00:03:25.060 --> 00:03:30.400
从您的个人位置或其他任何东西回购到ipfs org或

00:03:30.400 --> 00:03:35.049
shipyard组织中有一些例外，例如当我们提取说go IP NS时

00:03:35.049 --> 00:03:38.769
一开始就很扎实，但是对于大多数人来说

00:03:38.769 --> 00:03:43.209
我们需要明确的其他事情是不要将其放置在非常正式的位置

00:03:43.209 --> 00:03:47.049
直接采取行动，因为这会产生我们不应该负担的负担

00:03:47.049 --> 00:03:52.480
还要忍受还增加了很多自动检查功能，我们有四个

00:03:52.480 --> 00:03:55.900
掉毛，但我们没有一些东西，而我们有一些东西

00:03:55.900 --> 00:03:59.380
到处运行以提高代码质量，并且对于

00:03:59.380 --> 00:04:04.660
可维护性是清晰的文档，因此我们正在研究如何

00:04:04.660 --> 00:04:09.280
我们可以测试JavaScript方面的内容，以确保所有内容都包含注释

00:04:09.280 --> 00:04:15.040
导出并不一定意味着我们将生成这些文档，但是

00:04:15.040 --> 00:04:18.549
从第一天开始就确保有人在思考它们

00:04:18.549 --> 00:04:22.599
因为对于那些真正不成熟的东西，拥有清晰的文档可以创建

00:04:22.599 --> 00:04:27.130
印象比现在更坚实，但我们需要有人来

00:04:27.130 --> 00:04:30.460
编写和思考这些文档时，将其翻转为更成熟的文档

00:04:30.460 --> 00:04:34.510
声明这并不是像有大量的工作被撤消，然后

00:04:34.510 --> 00:04:40.530
做得不好，然后还有其他一些与Jaya有关的事情

00:04:40.530 --> 00:04:45.280
我们需要有一个关于如何处理水槽类型的统一故事

00:04:45.280 --> 00:04:49.450
这样的东西就是回叫和答应之类的单一的呼叫和响应之类的东西

00:04:49.450 --> 00:04:55.150
与async / await以及流源池流之类的较长内容相比

00:04:55.150 --> 00:05:00.760
与异步生成器相比，问题的一部分不是我们支持所有

00:05:00.760 --> 00:05:03.490
这些东西，继续支持所有这些东西很重要

00:05:03.490 --> 00:05:09.300
像JSI PFS api中一样的顶层，但是对于所有子模块和子页面

00:05:09.300 --> 00:05:13.360
我们应该选择一个，而不用担心那些暴露了

00:05:13.360 --> 00:05:16.630
到处都是兼容的，我们只需要减轻负担即可，这就是方法

00:05:16.630 --> 00:05:20.920
对于那些

00:05:20.920 --> 00:05:26.410
不是主要的公共包，还有更多这些东西

00:05:26.410 --> 00:05:32.080
使用github检查和更多buff使用分支保护

00:05:32.080 --> 00:05:37.900
总是在所有存储库上的所有地方都在看哦和另一个

00:05:37.900 --> 00:05:42.400
真正重要的是我们在社区中拥有这两个贡献者指南之一

00:05:42.400 --> 00:05:47.410
这很长，而另一个也是令人难以置信的长名称贡献者

00:05:47.410 --> 00:05:49.750
这让很多人感到困惑

00:05:49.750 --> 00:05:55.720
我们需要将其重命名为维护者或提交者，或者您知道的更多参与者

00:05:55.720 --> 00:06:01.930
团队成员，对于第一个仍然很长的团队，我们需要它

00:06:01.930 --> 00:06:05.860
顶部的TLDR部分只是说要执行此操作，然后执行

00:06:05.860 --> 00:06:10.300
所有其他为什么解释为蓝色的解释，而其他事物却很少

00:06:10.300 --> 00:06:14.200
有关所有更多细节的问题，但这些是我们认为至关重要的事情

00:06:14.200 --> 00:06:18.270
重要的是要增加可维护性

00:06:18.350 --> 00:06:22.229
[掌声]

