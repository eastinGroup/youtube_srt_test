WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.410 --> 00:00:07.470
好的，大家好，谢谢VP的精彩介绍

00:00:07.470 --> 00:00:13.440
我通常要谈论的罂粟集中在应用程序的位置

00:00:13.440 --> 00:00:20.039
因为它很大程度上反映了我们如何开发这些东西并思考

00:00:20.039 --> 00:00:25.830
通过我们未来的优先事项，以便我们能够建立自己

00:00:25.830 --> 00:00:29.400
几乎可以扩展到很多方面，并且可以解决一些问题

00:00:29.400 --> 00:00:35.910
那些非常棘手的难题，所以我们在

00:00:35.910 --> 00:00:40.260
从长远来看，我们希望能大大改善人们的使用方式

00:00:40.260 --> 00:00:44.610
在他们的应用程序，平台和系统中建立网络

00:00:44.610 --> 00:00:50.059
是可以实现的，但需要在非常具体的领域进行大量工作，

00:00:50.059 --> 00:00:54.390
我们要做好准备，但我们还没有完全做到这一点，所以我想

00:00:54.390 --> 00:01:00.719
谈谈我们如何才能到达那里，我不会碰一点

00:01:00.719 --> 00:01:04.559
愿景和使命我认为他们已经充分涵盖了这一点，所以我

00:01:04.559 --> 00:01:07.640
完全不必花很多时间

00:01:07.640 --> 00:01:13.290
与ipfs共享了很多内容，只是因为这是很多

00:01:13.290 --> 00:01:16.890
项目问世了，但随着时间的流逝，它将变成一种自己的身份

00:01:16.890 --> 00:01:21.119
但我认为这张幻灯片仍可以捕捉到这个主意非常好，我们希望

00:01:21.119 --> 00:01:24.570
网络栈支持终端使用终端样式分布式

00:01:24.570 --> 00:01:27.869
您并不真正依赖任何中介的环境

00:01:27.869 --> 00:01:32.430
根本没有互联网，因此互联网无法正常运作，然后其他很多

00:01:32.430 --> 00:01:37.290
平台不是我OT不能像其他人那样对IT工作的某些部分进行分类

00:01:37.290 --> 00:01:43.649
对于我们期望计算如何在

00:01:43.649 --> 00:01:48.030
未来或对我们希望计算机在工作中发挥作用的美好愿景

00:01:48.030 --> 00:01:53.159
未来，以确保我们的网络堆栈能够以这种方式正常工作，

00:01:53.159 --> 00:01:57.270
应用程序不是在其他模型中意外走私的

00:01:57.270 --> 00:02:01.530
更加严格，并在以下情况下使我们的应用程序失败

00:02:01.530 --> 00:02:04.740
你知道他们真的变成了对他们来说极其重要的地方

00:02:04.740 --> 00:02:09.500
工作，因此请考虑一下灾难情景，如果现在发生了重大灾难

00:02:09.500 --> 00:02:14.590
一个城市很多人的正常通讯应用

00:02:14.590 --> 00:02:18.460
经常互相交谈会突然停止正常工作

00:02:18.460 --> 00:02:23.320
集中式消息传递系统高度依赖于一组工作条件

00:02:23.320 --> 00:02:27.910
如果链中的任何一个链断裂，整个系统就会出现

00:02:27.910 --> 00:02:31.720
向下，所以这不是互联网的设计方式

00:02:31.720 --> 00:02:36.700
这就是现代Web应用程序和移动系统的工作方式，因此我们需要

00:02:36.700 --> 00:02:41.590
回到旧的设计上，您就会知道放松下来

00:02:41.590 --> 00:02:48.160
不同的道路，所以很多事情都在思考着棘手的问题

00:02:48.160 --> 00:02:52.000
建立那些大型平台来像互联网一样工作

00:02:52.000 --> 00:02:57.010
再努力思考，然后思考我们如何构建软件库来实现这些功能

00:02:57.010 --> 00:03:01.720
应用程序和系统轻松完成它今天构建和依赖非常容易

00:03:01.720 --> 00:03:07.060
在云系统上，不做那些普通的架构，但这并不容易

00:03:07.060 --> 00:03:10.630
刚开始，人们付出了很多工作和精力来使所有这些

00:03:10.630 --> 00:03:14.740
库，所以今天很容易，我们只需要在

00:03:14.740 --> 00:03:22.450
点对点类型的事情值得记住，我认为人们是

00:03:22.450 --> 00:03:24.940
在过去的几天里已经卖了一些，但请记住这一点，因为

00:03:24.940 --> 00:03:30.400
您通常会考虑PvP，

00:03:30.400 --> 00:03:35.500
互联网没有互联网上主要城市的连接水平

00:03:35.500 --> 00:03:41.530
世界上它具有高度的移动性，这是我们需要使更多的东西

00:03:41.530 --> 00:03:47.110
专注于我们的项目，然后我们就不会真正描述这些

00:03:47.110 --> 00:03:54.760
问题等等，或者恢复所有这些，这些都是全部

00:03:54.760 --> 00:03:58.300
自称的网络问题很多都与网络堆栈有关

00:03:58.300 --> 00:04:04.180
以及如何在该平台之上构建数据

00:04:04.180 --> 00:04:09.370
这里可能会有更多的项目，但每个方面都有收获

00:04:09.370 --> 00:04:15.010
作为人们赖以生存的系统而成长，因此我们希望您知道一年

00:04:15.010 --> 00:04:19.060
网格已经扩展了很多，已经有很多不是

00:04:19.060 --> 00:04:23.290
代表那里，但会有更多的增长，我们想提一提的是

00:04:23.290 --> 00:04:27.190
像一个有趣的反转，我突然剥了皮

00:04:27.190 --> 00:04:33.660
如果它看起来像一个库，它实际上可能会成为有用的工具，这就是您所知道的

00:04:33.660 --> 00:04:37.000
尝试执行尚未完全完成的任务

00:04:37.000 --> 00:04:42.280
但我们会想想，通过我们继续进行研讨，我希望但实际上

00:04:42.280 --> 00:04:46.150
考虑使网络堆栈成为模块化网络堆栈以使其健壮

00:04:46.150 --> 00:04:50.590
易于构建的点对点系统构建健壮的点对点并不容易

00:04:50.590 --> 00:04:57.060
当今的系统，因此必须处理诸如过程寻址之类的问题

00:04:57.060 --> 00:05:04.480
认为此模块化想法的一个关键组成部分是使自己定位

00:05:04.480 --> 00:05:13.240
换句话说，这些事情中每一项都非常困难

00:05:13.240 --> 00:05:17.350
这些很难做到的每件事

00:05:17.350 --> 00:05:21.310
知道想起加密货币渠道或分布式记录存储或诸如此类的事情

00:05:21.310 --> 00:05:24.250
当您处理数十亿个

00:05:24.250 --> 00:05:30.850
处理那些事情已经足够困难了，这对我们很重要

00:05:30.850 --> 00:05:34.300
作为一个使自己处于可以攻击每个人的位置的项目

00:05:34.300 --> 00:05:38.710
这些问题，或者您独立地知道其中的一个子集，因此，当

00:05:38.710 --> 00:05:42.850
人们考虑实施合唱DHD之类的方法，或者您知道

00:05:42.850 --> 00:05:47.140
在过去五年中设计的一些较新的DHD，他们可以

00:05:47.140 --> 00:05:51.820
只是将其作为一个问题，并使用脂质EP中的任何工具包即可

00:05:51.820 --> 00:05:56.560
但是提供他们需要的任何接口，以便其他系统可以启动

00:05:56.560 --> 00:06:00.070
依赖于此，现在脂质V的发展高度

00:06:00.070 --> 00:06:03.430
集成了很多东西，所以人们很难

00:06:03.430 --> 00:06:05.560
做到这一点，但它变得越来越好，所以我认为

00:06:05.560 --> 00:06:09.250
今年比去年好很多，我认为明年甚至会更好

00:06:09.250 --> 00:06:14.560
我想我更容易与周围的人交谈

00:06:14.560 --> 00:06:18.580
接下来的几天，如果您实施了此版本的特定版本

00:06:18.580 --> 00:06:22.330
例如快速运输，您需要为其余的事情担心多少

00:06:22.330 --> 00:06:26.110
脂质EP界面，如果您知道这是任何重要措施，

00:06:26.110 --> 00:06:30.100
所有这些都是我们应该解决的问题，以便我们希望获得我们的

00:06:30.100 --> 00:06:33.610
发展到人们很容易将其分解为特定部分的程度

00:06:33.610 --> 00:06:39.490
然后只是构建一个新的构建基块，然后添加对套件的贡献，所以我

00:06:39.490 --> 00:06:43.450
想要展示一些重点，我们将规划从

00:06:43.450 --> 00:06:47.920
来自ipfs，所以我们一直在努力进行，喜欢将

00:06:47.920 --> 00:06:53.070
库等等，因此它需要做出努力才能确保像

00:06:53.070 --> 00:06:56.850
实际上，它们是不同的项目，计划是分别进行的，

00:06:56.850 --> 00:07:01.660
尽管有很多人的融合和共享，我们确实有两个两个

00:07:01.660 --> 00:07:04.930
不同的线程，这将特别有助于所有其他人

00:07:04.930 --> 00:07:08.830
依靠p2p参与p2p生态系统而不必

00:07:08.830 --> 00:07:14.490
担心了解或思考BFS如何组织自身

00:07:14.490 --> 00:07:20.470
的实现是令人兴奋的是，将锈添加到了

00:07:20.470 --> 00:07:25.540
去年，我认为Jas在去年也达到了一定程度的连通性

00:07:25.540 --> 00:07:29.080
并支持特别是在浏览器中的显着改进

00:07:29.080 --> 00:07:37.000
依此类推，去提高了性能，也很快了，所以

00:07:37.000 --> 00:07:42.520
一个，以后您会听到更多的信息，我们也知道

00:07:42.520 --> 00:07:46.480
结构化自己，我们有点开始​​工作的形成

00:07:46.480 --> 00:07:50.470
类似于我上个季度投资的团体，我们正在做

00:07:50.470 --> 00:07:58.090
对于BFS站点无法正常工作的脂类P声音，请让我修复，不，我将修复

00:07:58.090 --> 00:08:03.280
后来一个人浪费你的时间，所以你知道我们有

00:08:03.280 --> 00:08:06.490
这类工作小组正在萌芽，以后我会再说

00:08:06.490 --> 00:08:13.330
其中一些，所以我想谈谈我们应该

00:08:13.330 --> 00:08:17.140
考虑在接下来的几个季度集中精力，我的阵营

00:08:17.140 --> 00:08:21.760
已经对此进行了大量的思考和构造，他将谈论

00:08:21.760 --> 00:08:26.169
稍后可能在评论中的某个地方，但我想预览一下

00:08:26.169 --> 00:08:29.650
其中一些甚至可能投射到一些我们可能会想到的想法

00:08:29.650 --> 00:08:36.250
它进一步超越了2019年，所以我想我想从早些时候带回来

00:08:36.250 --> 00:08:41.110
一个星期，如果你在周围，如果不是的话，那是很棒的，当你考虑

00:08:41.110 --> 00:08:44.200
建立一个系统，您需要担心所有这些不同的方面，并且

00:08:44.200 --> 00:08:49.839
得到关注，每个关注都花费很多时间，并且您知道每一个

00:08:49.839 --> 00:08:54.320
这些尺寸（例如特征）会更多，您知道您需要

00:08:54.320 --> 00:08:59.800
只是增加了所有这些不同尺寸的覆盖物的体积

00:08:59.800 --> 00:09:04.220
当您在构建软件时，它仅消耗大量时间，因此

00:09:04.220 --> 00:09:08.990
这些方面中的任何一个方面的完成水平都非常好，

00:09:08.990 --> 00:09:11.750
一会儿，所以如果您想运送一些东西，您必须喜欢

00:09:11.750 --> 00:09:16.790
快捷方式，所以我们做到了，那么您知道我们有了可用的东西，并且

00:09:16.790 --> 00:09:21.139
在某种程度上值得信赖，但现在我们需要继续保持这种状态并保持

00:09:21.139 --> 00:09:24.370
深入研究这些方面中的每一个并进行改进

00:09:24.370 --> 00:09:27.199
升级或停靠升级或将来安装

00:09:27.199 --> 00:09:30.889
提升测试和质量检查的水平，提升性能水平的规格等，以及

00:09:30.889 --> 00:09:34.519
这不是一个，您知道我们会为此工作一段时间，并且您知道我们会做到这一点

00:09:34.519 --> 00:09:37.670
到最后，您将最大限度地发挥它的作用，就像我们设置的那样，

00:09:37.670 --> 00:09:41.300
你知道一个连续的东西，我们认为它就像一个螺旋，就像

00:09:41.300 --> 00:09:45.829
随着时间的流逝，我们就像在增加封面，随着我们的团队的成长，我们可以

00:09:45.829 --> 00:09:51.529
瘫痪，然后我们可以使不同的群体能够攻击不同的媒介

00:09:51.529 --> 00:09:55.639
另一件事是，由于脂质高度模块化，我们可以

00:09:55.639 --> 00:09:58.250
不同的组件，无论是不同的实现还是不同

00:09:58.250 --> 00:10:03.440
子作品可以按照自己的速度和自己的速度自行进行，

00:10:03.440 --> 00:10:09.949
在某种程度上，除了那些作为一个整体而依赖的事物

00:10:09.949 --> 00:10:16.010
例如界面之类的东西，例如测试文档之类的东西

00:10:16.010 --> 00:10:20.540
以及示例，通讯和网站等等

00:10:20.540 --> 00:10:27.139
共同的事情首先必须很好，这样每个独立的

00:10:27.139 --> 00:10:30.829
模块实现可以遵循自己的轨迹而不必

00:10:30.829 --> 00:10:35.449
被某些依赖所阻止，但鼓励考虑一下

00:10:35.449 --> 00:10:38.870
之所以这样，是因为有人在新交通工具上工作或有人在

00:10:38.870 --> 00:10:43.130
新的DHD或从事新的实现工作的人应该拥有一切

00:10:43.130 --> 00:10:49.550
他们需要建立实施的基础，依此类推，您知道

00:10:49.550 --> 00:10:54.589
继续自己的开发周期，而不必

00:10:54.589 --> 00:10:59.449
被基础组件所阻止，因此它们可以利用一些

00:10:59.449 --> 00:11:04.310
共享基础架构，因此能够运行真正的大规模网络测试或

00:11:04.310 --> 00:11:08.049
具有编写文档或类似内容的标准方式

00:11:08.049 --> 00:11:18.199
我们必须得到它，这对于思考上校的外壳和

00:11:18.199 --> 00:11:22.609
来自Unix的命令结构，这与PDP的结构非常相似

00:11:22.609 --> 00:11:26.749
工作正常，所以您可以认为Lapita P的内核是寻址

00:11:26.749 --> 00:11:31.489
以及现在都进行的切换，将来我们可能会进行电路搜索

00:11:31.489 --> 00:11:35.839
我们可能会在某天将数据包交换带到交换中

00:11:35.839 --> 00:11:42.499
故事又一次得到了答案，那就是有效的内核和一些

00:11:42.499 --> 00:11:47.149
接口在某种意义上定义为类似于sis调用，然后是shell

00:11:47.149 --> 00:11:52.220
而且您知道人们过去使用该东西的界面

00:11:52.220 --> 00:11:58.790
就像所有个人一样的模块接口，所以人们想到

00:11:58.790 --> 00:12:02.179
就像将驱动程序安装到内核中一样，就像您对每种传输方式的思考一样

00:12:02.179 --> 00:12:06.879
或每个HDS，以此类推，例如将新驱动程序安装到内核翻转p

00:12:06.879 --> 00:12:12.559
然后理想情况下，系统可以只建立在最上面，但是这又是耦合

00:12:12.559 --> 00:12:15.410
使我们可以轻松地在一个区域内进行开发，而无需

00:12:15.410 --> 00:12:19.209
担心项目的其余部分，我认为现在我们的状况不佳

00:12:19.209 --> 00:12:25.100
我们到了-好的地方，但我们需要做得更好，所以要升级很多

00:12:25.100 --> 00:12:30.859
事情和扩展我们的发展，所以嗯，是的，您知道我们有一个目标

00:12:30.859 --> 00:12:36.109
2018年使脂质成为一流的项目，这意味着您知道一些

00:12:36.109 --> 00:12:38.600
工作组结构或核心工作组来协调所有人

00:12:38.600 --> 00:12:45.139
其中清楚地阐明了不同实现的要求

00:12:45.139 --> 00:12:49.730
我们正在努力的路线图，并且还在增加

00:12:49.730 --> 00:12:56.480
全职专职人员的数量，然后围绕质量

00:12:56.480 --> 00:13:01.249
可靠性这是我想与人们谈论的更多内容，但只是

00:13:01.249 --> 00:13:05.239
我们在这类事情上的工作我们知道正确性会越来越高

00:13:05.239 --> 00:13:10.519
性能完整性可扩展性等等，我想谈谈

00:13:10.519 --> 00:13:15.559
这里的事情之一就是可视化协议对于

00:13:15.559 --> 00:13:20.959
了解如何与他们合作，所以我很高兴能完成一个项目

00:13:20.959 --> 00:13:23.089
想想今年，或者这样做

00:13:23.089 --> 00:13:27.170
明年或明年，它正在建立一个使人们能够

00:13:27.170 --> 00:13:33.010
可视化诸如DHT之类的东西或诸如流多路复用器之类的东西

00:13:33.010 --> 00:13:40.459
这是协议可视化的一个例子，这是重点

00:13:40.459 --> 00:13:46.339
是从点的日志输出直接生成的可视化

00:13:46.339 --> 00:13:49.250
请注意，这些是六个后窗，它们都散发着一点热量

00:13:49.250 --> 00:13:54.470
然后我们获取这些日志的输出，并消耗创建这些日志，然后

00:13:54.470 --> 00:13:59.450
可视化日志，因此我们可以追溯到拥有协议的样子

00:13:59.450 --> 00:14:03.440
运行并以这种可视化方式构建为

00:14:03.440 --> 00:14:08.000
我们可以将所有这些日志输出写入文件然后播放的方式

00:14:08.000 --> 00:14:10.940
他们回到未来，现在您可以想象这里的控件之类的东西

00:14:10.940 --> 00:14:13.910
你的自由就像在某个地方，就像哦，这里正在发生什么，就像什么

00:14:13.910 --> 00:14:17.870
这个奇怪的消息，就像我从没预料到的那样，还有一些

00:14:17.870 --> 00:14:21.320
就像自定义可视化一样，它们必须按照协议进行操作，就像这样

00:14:21.320 --> 00:14:25.640
法尔康的可视化，您拥有连锁店，就像市场一样

00:14:25.640 --> 00:14:29.120
存储市场结构等类似DHT的东西看起来很漂亮

00:14:29.120 --> 00:14:31.910
不同，但某些组件可能是可重用的，至少

00:14:31.910 --> 00:14:35.990
感兴趣的架构，将所有这些日志输出和

00:14:35.990 --> 00:14:39.740
以这种方式过滤它们，您知道这类东西已经可用，因此

00:14:39.740 --> 00:14:45.070
这实际上是脂质EP工具，并不是真的非常特定的工具

00:14:45.070 --> 00:14:49.910
关于测试的另一件事是，我们需要开始真正地做

00:14:49.910 --> 00:14:53.300
像我们这样的大规模测试需要达到测试数百万

00:14:53.300 --> 00:14:56.870
节点并完成所有设置，因此我们可以使用数十亿个音符进行测试

00:14:56.870 --> 00:15:00.560
这是planetlab，我不知道您是否熟悉它，规模很大

00:15:00.560 --> 00:15:05.750
我kima建立了几十年前的测试环境

00:15:05.750 --> 00:15:10.490
学术对等系统在诸如珊瑚之类的东西上进行了测试

00:15:10.490 --> 00:15:16.400
像是学者等等，我们也有另一个版本

00:15:16.400 --> 00:15:20.300
例如，正确的地图集在整个国家/地区投放了很多类似的小型设备

00:15:20.300 --> 00:15:24.380
不断测量的世界就像互联网的不同部分，所以

00:15:24.380 --> 00:15:29.480
这是两个小组的示例，这些小组全部部署了一点硬件

00:15:29.480 --> 00:15:33.589
遍布世界，并将其连接到网络中，然后他们就可以发货了

00:15:33.589 --> 00:15:38.000
测试事物的软件，所以这是我们可能要进行的另一个项目

00:15:38.000 --> 00:15:44.210
考虑今年可能在明年做，大概在明年

00:15:44.210 --> 00:15:47.510
拥有自己的测试基础架构，以至于

00:15:47.510 --> 00:15:51.350
写一个新的DHT说你知道我想测试什么是新的

00:15:51.350 --> 00:15:54.950
我们认为这个东西在模拟中真的很好用我们认为它真的很好用

00:15:54.950 --> 00:15:59.750
就像我们一样，您知道10,000个节点测试或任何在云环境中的测试，但是

00:15:59.750 --> 00:16:03.200
我们想在现实世界中对其进行测试，并使自己达到可以

00:16:03.200 --> 00:16:07.210
做到这一点，我们可以出货，甚至可以制造数百万个虚拟节点

00:16:07.210 --> 00:16:11.690
穿越地球上的这个网络，然后认真测试它，

00:16:11.690 --> 00:16:15.980
只有做到这一点，我们才能得到符合需求的东西

00:16:15.980 --> 00:16:21.560
你们中的人知道拥有数十亿用户的现代应用程序

00:16:21.560 --> 00:16:28.550
我想说的是研究，所以我倾向于对您考虑很多

00:16:28.550 --> 00:16:33.860
从创意到规范编码等等的流程

00:16:33.860 --> 00:16:38.150
大量的嘴唇研究工作正在推动研究领域的发展，并推动了

00:16:38.150 --> 00:16:41.600
关于点对点系统的知识前沿，如今已经

00:16:41.600 --> 00:16:46.400
我们做了很多事情，我们需要某种方式向世界传达有关信息，所以这

00:16:46.400 --> 00:16:50.000
可能意味着写论文，这可能意味着与

00:16:50.000 --> 00:16:54.980
其他群体对点对点有极大的兴趣，

00:16:54.980 --> 00:16:59.210
分散式系统，可以一直追溯到90年代末和早期

00:16:59.210 --> 00:17:03.770
2000年代，在某些情况下甚至更远，但是有很多很多

00:17:03.770 --> 00:17:08.030
当时发生在许多大学中的重要活动

00:17:08.030 --> 00:17:12.320
期间，其中的大部分时间都用尽了，这是在早期使用的

00:17:12.320 --> 00:17:17.030
出现unifor的应用程序，您知道第一个点对点浪潮，但是

00:17:17.030 --> 00:17:21.530
有很多原因，但实际上

00:17:21.530 --> 00:17:24.500
一个对等的冬天，其中许多人停止了这一工作

00:17:24.500 --> 00:17:28.520
的东西，但他们的许多实现和解决方案是

00:17:28.520 --> 00:17:32.510
非常好，他们只是没有被建起来，就在这里某个地方死了，所以

00:17:32.510 --> 00:17:35.930
很多非常好的点对点的想法和即将发生的事情

00:17:35.930 --> 00:17:40.250
点对点系统规模仅仅是您知道陷入想法或纸面

00:17:40.250 --> 00:17:44.150
取得了巨大成果的领域，然后这些小组继续前进

00:17:44.150 --> 00:17:47.930
其他事情，所以是时候该走了，找出那些可能

00:17:47.930 --> 00:17:51.000
成为并把他们带进去，就像实际上使他们到点

00:17:51.000 --> 00:17:55.080
您可以在其中使用它们，而在其他地方使用它又可以与

00:17:55.080 --> 00:17:58.590
那些我们正在做这项工作的人，说嘿，我们现在有一个很好的结构

00:17:58.590 --> 00:18:02.340
来构建和测试所有这些东西，您会知道恩滕曼的

00:18:02.340 --> 00:18:07.770
当我们喜欢使TCP和UDP协议像

00:18:07.770 --> 00:18:09.930
只有事情，就像你知道的那样，你不能真正进行新的转移

00:18:09.930 --> 00:18:13.380
协议，但我们正在努力解决该问题，并且现在以较低的p2p进行修复

00:18:13.380 --> 00:18:16.200
您可以完全部署新的传输协议，而不必担心

00:18:16.200 --> 00:18:21.030
关于您的信息，您知道您只是将其覆盖在UDP之上，就可以构建应用程序

00:18:21.030 --> 00:18:25.320
最重要的是，所有这些东西可以使大量的

00:18:25.320 --> 00:18:29.700
在所有这些群体中进行活动，因为如果我们给他们一个简单的方法

00:18:29.700 --> 00:18:35.310
测试实施，然后将其交付到实际的实时应用程序中

00:18:35.310 --> 00:18:39.600
会在这个世界上产生大量的活动，所以这是我们应该做的

00:18:39.600 --> 00:18:42.870
想一想，您在我的宿舍旁边就知道了，准备在

00:18:42.870 --> 00:18:47.730
2019真的很不错，顺便说一下它从来都不是线性的，就像

00:18:47.730 --> 00:18:53.760
它总是非常混乱的连接，这里另一件事是您知道解决

00:18:53.760 --> 00:18:57.540
下游项目的需求，所以这意味着要找出所有下游项目

00:18:57.540 --> 00:19:01.710
项目需要，所以这是本次活动目标的一部分，以便了解

00:19:01.710 --> 00:19:07.020
作为用户的生活变成了您所需要的，并且您知道建立一个

00:19:07.020 --> 00:19:12.540
注册注册表来跟踪这些用例和方法等，以便在

00:19:12.540 --> 00:19:18.570
我们每季度处理一次这些事情，我们弄清楚要做什么

00:19:18.570 --> 00:19:26.160
确定要做的事情的优先级，我想谈的另一件事是扩展

00:19:26.160 --> 00:19:31.140
开发，所以我们已经开始组建工作组，我们希望加倍

00:19:31.140 --> 00:19:33.480
基于这一点，我们想要衡量我们在做的正确的事情，

00:19:33.480 --> 00:19:37.230
那里没有更好的计划和安排以及所有类似的东西是错误的

00:19:37.230 --> 00:19:41.520
增加我们正在做的事情，例如期刊《俱乐部原则I》

00:19:41.520 --> 00:19:45.120
认为我们涵盖了珊瑚，我们涵盖了与同龄人有关的其他几件事

00:19:45.120 --> 00:19:51.030
同行，如果您想参与其中，请这样做，我想谈谈

00:19:51.030 --> 00:19:58.170
如何加快发展速度，所以我认为与其他系统不同

00:19:58.170 --> 00:20:02.610
ipfs和其他很多系统，需要高度支持

00:20:02.610 --> 00:20:06.929
除了p2p内核或内核之外，您还不需要真正思考

00:20:06.929 --> 00:20:11.220
与您在结帐建立帐单时与其他群组同步的内容非常重要

00:20:11.220 --> 00:20:16.679
这些协议的子集的独立实现，所以您知道

00:20:16.679 --> 00:20:21.540
这些事情中的每一个都可以并行进行，我遵循自己的方式

00:20:21.540 --> 00:20:25.950
时间轴，通常不需要了解获取

00:20:25.950 --> 00:20:30.150
一切都如此，而不是想像你知道的那样前进

00:20:30.150 --> 00:20:33.990
与您在一起知道一群人必须具有较高的情境和

00:20:33.990 --> 00:20:37.980
一切实际上都是一堆以自己的速度前进的小模块，

00:20:37.980 --> 00:20:40.950
一旦您知道其中一些达到一定的完成水平，那么他们

00:20:40.950 --> 00:20:45.270
像工具一样被拉入工作的实现中，因此这表明

00:20:45.270 --> 00:20:49.440
我们可以知道，围绕这些事情更好地组织我们的工作，

00:20:49.440 --> 00:20:53.400
我们可以描述一些东西，例如，嘿，我们需要蓝牙传输，

00:20:53.400 --> 00:20:56.580
这是你们两个的样子，这是它需要匹配的接口，然后

00:20:56.580 --> 00:21:00.299
将其作为需要发生的项目描述进行介绍

00:21:00.299 --> 00:21:04.410
然后那些想要那个东西或可能擅长建造那个东西的人

00:21:04.410 --> 00:21:06.720
事情可以只专注于此，而不必担心其余的

00:21:06.720 --> 00:21:11.280
主要是文档和项目管理的东西

00:21:11.280 --> 00:21:15.480
还没去过那里，但我想如果我们把自己设置在这条线去做

00:21:15.480 --> 00:21:21.450
这样我们就可以相当大地扩展开发规模，

00:21:21.450 --> 00:21:25.290
您认为这也成为RFP值得关注的东西，我们可以说您知道

00:21:25.290 --> 00:21:31.350
我们真正需要的视觉工具是因为我想将两部手机对准目标

00:21:31.350 --> 00:21:35.160
彼此像二维码一样的视觉效果，就像我唯一能做的一样

00:21:35.160 --> 00:21:38.940
在这种疯狂的环境中使用，但我真的没有时间去做

00:21:38.940 --> 00:21:43.860
我想像是，请其他一些可以做到这一点的小组，他们不知道

00:21:43.860 --> 00:21:47.640
关于循环的很多东西是必须的，但是要比一个循环有一个好的范围

00:21:47.640 --> 00:21:51.419
项目，他们可以深入研究代码并构建这一件事，然后

00:21:51.419 --> 00:21:55.020
然后出发，我认为如果我们做得好，那么我们可以扩大规模

00:21:55.020 --> 00:21:57.929
在接下来的将来非常有效地开发所有东西

00:21:57.929 --> 00:22:03.150
年，所以您知道这里是一些我们可能会组建的工作组的想法

00:22:03.150 --> 00:22:09.150
还有更多的东西，例如测试和可视化测试，就像

00:22:09.150 --> 00:22:13.260
现在我们正在进行大规模测试，然后开始考虑用例，因此让

00:22:13.260 --> 00:22:16.410
我要保留脂质b4区块链脂质b4浏览器OS

00:22:16.410 --> 00:22:20.550
移动的文件系统有很多东西，其中有五件事我

00:22:20.550 --> 00:22:28.040
认为在我的脑海里，我们正在尝试周围的事情

00:22:28.040 --> 00:22:33.180
项目，我认为迈克尔稍后会谈到这一点，但或者说我们会

00:22:33.180 --> 00:22:39.810
但我现在只提一下这种范围界定的想法

00:22:39.810 --> 00:22:44.700
蓝牙传输到定义明确的工作包中，这不是什么好话

00:22:44.700 --> 00:22:48.720
项目是一个更好的词，它将定义描述所有项目的项目

00:22:48.720 --> 00:22:51.540
可能发生的不同事情，例如不同的模块，也许

00:22:51.540 --> 00:22:56.250
处理某些库的不同语言，或者可能不得不编写一个

00:22:56.250 --> 00:22:58.950
库等等，然后我们将这些注册表

00:22:58.950 --> 00:23:02.160
我们认为很重要的项目，然后这将使我们能够

00:23:02.160 --> 00:23:06.740
确定优先顺序并说出您知道所有这些下游用户真正需要的东西

00:23:06.740 --> 00:23:10.710
你知道我要尿尿或什么东西，或者真的需要蓝牙，所以我们需要喜欢升降机

00:23:10.710 --> 00:23:14.400
我们提起这个项目，也许是超声检查，也许这是资源

00:23:14.400 --> 00:23:18.720
内部的或其他类似的项目

00:23:18.720 --> 00:23:22.890
管理结构将再次帮助我们父母许可证的规模

00:23:22.890 --> 00:23:27.870
开发过程中，因为所有的脂质B模块都这么多

00:23:27.870 --> 00:23:31.440
不需要很多人从事某些特定的事情，不需要所有的东西

00:23:31.440 --> 00:23:34.770
上下文，这就是为什么我们正在做这就是我们正在尝试的原因

00:23:34.770 --> 00:23:39.090
这种结构，我要说的最后一件事是嘿，我们应该有

00:23:39.090 --> 00:23:44.910
很有趣，该死的，我们很多人在这些东西上乱砍，因为

00:23:44.910 --> 00:23:49.380
做一些像构建这样的事情真是太棒了

00:23:49.380 --> 00:23:52.800
在浏览器中创建一个网络，您可能知道有数百万个浏览器

00:23:52.800 --> 00:23:57.120
彼此连接，并且您正在玩游戏或诸如此类的事情

00:23:57.120 --> 00:24:01.290
很棒的技巧，我认为我们需要做更多的事情，让p2p现在可以支持

00:24:01.290 --> 00:24:05.970
我喜欢看到这样的东西，就像随机的东西，你知道的

00:24:05.970 --> 00:24:09.900
有人会发布一个链接，他们会像这个疯子一样，你知道要测试一下

00:24:09.900 --> 00:24:12.960
HD实施，您将使浏览器保持打开状态，并且您知道它会启动

00:24:12.960 --> 00:24:15.660
做一堆请求，也许您可​​以可视化网络并

00:24:15.660 --> 00:24:19.550
那么这就是我们可以吸引更多人参与的方式，并且

00:24:19.550 --> 00:24:24.060
考虑这些系统可能发生的很酷的事情，所以我

00:24:24.060 --> 00:24:28.050
认为我们应该花更多的时间和精力让您知道

00:24:28.050 --> 00:24:31.550
做这样的事情，就像

00:24:31.820 --> 00:24:36.270
哇，听起来好像是我在说，努力工作，但实际上

00:24:36.270 --> 00:24:40.080
庆祝更多我们正在做的事情，是的，向世界讲述

00:24:40.080 --> 00:24:44.400
没关系，所以我认为那和我

00:24:44.400 --> 00:24:49.170
想谈谈什么样的协议，所以我们正在考虑如何

00:24:49.170 --> 00:24:52.500
像风琴师这样的界面，就像这个项目，

00:24:52.500 --> 00:24:58.100
在这里与项目一起工作就像一个协议实验室的例子

00:24:58.100 --> 00:25:02.270
神族的优先级可能是什么，或者如果您将其视为工作组

00:25:02.270 --> 00:25:07.230
我们短期内想做的事情，所以您知道全职招聘

00:25:07.230 --> 00:25:11.730
可以在整个PDP上工作的工程师具有某些功能

00:25:11.730 --> 00:25:15.750
以及有关pub / sub等的要求，对于

00:25:15.750 --> 00:25:19.230
福克兰（Falkland）和其他项目，所以您会知道专注于那种

00:25:19.230 --> 00:25:23.220
内容，然后进行安全审核，就像我们想要在整个过程中进行的一样

00:25:23.220 --> 00:25:29.760
网络堆栈是的，太棒了，就是您有任何疑问或是否

00:25:29.760 --> 00:25:36.230
你有时间提问，我想我们有一分钟的时间来提问

00:25:36.690 --> 00:25:44.509
[掌声]

00:25:46.040 --> 00:25:49.040
是的

00:25:52.040 --> 00:25:59.520
hye-won我有一个问题，我想只是像哲学一样的p式ipfs

00:25:59.520 --> 00:26:05.900
知道我们说过PTP就像一个位置，对不起，没有内容解决

00:26:05.900 --> 00:26:12.660
助手意味着有一个位置地址系统，你们看到一种方法了吗

00:26:12.660 --> 00:26:19.650
仍然将地址以某种方式附加到系统中还是这种情况

00:26:19.650 --> 00:26:24.150
就像认为我们要尝试去思考完全不同的事物

00:26:24.150 --> 00:26:28.050
立场是，您知道我们今天所考虑的事情，例如

00:26:28.050 --> 00:26:33.390
地理位置，并且您知道流行音乐或类似的东西并不是很喜欢

00:26:33.390 --> 00:26:38.910
考虑事物的一个很好的范例，所以我想这是我们开放的问题

00:26:38.910 --> 00:26:44.130
探索您正在做的新的联网方式

00:26:44.130 --> 00:26:49.970
通过其他方式寻址，例如geohlocation或诸如此类

00:26:49.970 --> 00:26:53.850
听起来不那么有趣，我们应该对它们进行探索，毫无疑问，我

00:26:53.850 --> 00:26:59.670
想想我们现在所处的是p2p的最低核心水平

00:26:59.670 --> 00:27:03.780
为什么用电路交换的东西而不是分组交换的东西呢？

00:27:03.780 --> 00:27:10.200
电路开关之类的东西，因为在2014-15年度，很难想到

00:27:10.200 --> 00:27:13.980
关于在浏览器中进行数据包交换或一堆数据包交换

00:27:13.980 --> 00:27:18.450
Nats及其所有防火墙和中间盒等的上下文

00:27:18.450 --> 00:27:26.220
防止任何非TCP / IP或UDP over IP的事情，或者防止您知道TLS和

00:27:26.220 --> 00:27:29.150
您知道快速通过那种总线，但是有很多其他产品

00:27:29.150 --> 00:27:33.990
协议失败，例如SSDP等，因此在这个世界上，我们必须想到

00:27:33.990 --> 00:27:37.800
说好吧，就像我们必须在这些协议上叠加一些东西

00:27:37.800 --> 00:27:42.210
现在已经存在，并开始将我们的东西用于所有内容，并且只是为了简单起见

00:27:42.210 --> 00:27:45.270
那应该是一个电路交换网络，但首先是数据包

00:27:45.270 --> 00:27:49.830
交换就像是正确的，所以类似其他类型的网络

00:27:49.830 --> 00:27:54.810
诸如一些以内容为中心的网络之类的想法或

00:27:54.810 --> 00:27:59.820
解决来自ndn和其他您知道的xIA的网络问题

00:27:59.820 --> 00:28:03.750
如果您听说过这些系统，但都想起了

00:28:03.750 --> 00:28:07.710
如果您要像今天那样从头开始构建Internet

00:28:07.710 --> 00:28:10.680
重新设计Internet的网络层（如IP层的IP层）

00:28:10.680 --> 00:28:12.510
互联网，您会做这些吗？

00:28:12.510 --> 00:28:16.140
进程地址或这些主机地址，或者您会这样做

00:28:16.140 --> 00:28:19.680
完全不同的东西，我们应该绝对探索那种

00:28:19.680 --> 00:28:23.310
我认为这就像是一首歌，

00:28:23.310 --> 00:28:25.860
工作组的想法，如果有足够的人感兴趣，我们可以组建这些

00:28:25.860 --> 00:28:32.070
各种工作组，但是的，这将是需求驱动的，而不是您所知道的

00:28:32.070 --> 00:28:36.660
明确地强迫自己先朝那个方向前进

00:28:36.660 --> 00:28:40.980
我们的首要任务是知道很多团体已经在使用

00:28:40.980 --> 00:28:45.930
所以我们要确保我们的大量

00:28:45.930 --> 00:28:51.060
带宽开始支持那些用户，但是是的，我们应该探索

00:28:51.060 --> 00:28:56.420
好的演讲很棒，谢谢你，我知道

00:28:56.420 --> 00:29:02.079
[掌声]

