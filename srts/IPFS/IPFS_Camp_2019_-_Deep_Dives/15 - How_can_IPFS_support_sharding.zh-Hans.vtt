WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.060 --> 00:00:07.980
大家好，我们今天对ipfs的可扩展性非常感兴趣，因此

00:00:07.980 --> 00:00:12.389
问题是它与区块链中的可扩展性不同

00:00:12.389 --> 00:00:18.690
实际上，我们的基本问题是，如果我们要存储100 GB的文件

00:00:18.690 --> 00:00:23.850
一个100 GB的袋子，因此我们如何存储每个IPFS的空间限制

00:00:23.850 --> 00:00:30.300
节点是10 GB，因此我们考虑使用分片

00:00:30.300 --> 00:00:35.610
将dag划分为几个节点，并假设该节点缺少

00:00:35.610 --> 00:00:40.020
存储空间，对于他们来说，存储要分割的Hodag是不够的

00:00:40.020 --> 00:00:47.129
攻击拦截不相交的部分并将字符共享给我们的其他节点

00:00:47.129 --> 00:00:55.500
考虑两个问题，第一个问题是我们如何均匀分片，所以我们

00:00:55.500 --> 00:01:03.870
提供了一个可能可以使用DFS的解决方案，因此您可以下载Hodag，然后

00:01:03.870 --> 00:01:11.010
您运行DFS算法，就可以直接运行差异算法，

00:01:11.010 --> 00:01:15.840
计算总空间的总大小，因此当空间已满时，您可以选择

00:01:15.840 --> 00:01:25.259
两个您可以选择此子标签，并且作为分片，第三个问题是

00:01:25.259 --> 00:01:30.270
当您固定在PFS上时，实际上是递归地固定他们的孩子，所以如果您

00:01:30.270 --> 00:01:34.799
固定整个标签将被添加如何解决它如何解决这个问题

00:01:34.799 --> 00:01:39.900
大喊我们提供了另一个解决方案，也许我们可以使用虚拟年龄，让我们

00:01:39.900 --> 00:01:47.700
说，每次我们划分dag时，我们都会将字符之间的年龄更改为a

00:01:47.700 --> 00:01:52.920
虚拟年龄，即您钉扎时忽略此年龄，但当您尿尿时

00:01:52.920 --> 00:02:01.020
和PFS猫，您将数据递归处理为年龄数据

00:02:01.020 --> 00:02:08.869
最后，您可以在dag yeah上下载整个数据，谢谢

00:02:10.170 --> 00:02:16.360
我们还做了一些他制作的宏伟的图纸供您查看

00:02:16.360 --> 00:02:23.470
请考虑深层陪审团，我们非常有兴趣，非常感谢您

00:02:23.470 --> 00:02:30.060
谢谢谢谢

