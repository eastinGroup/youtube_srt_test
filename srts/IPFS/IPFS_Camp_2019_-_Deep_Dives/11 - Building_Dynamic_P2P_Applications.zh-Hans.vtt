WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.060 --> 00:00:06.509
所以朱利安还没有走，我将尝试解释问题所在

00:00:06.509 --> 00:00:12.269
问题似乎是pop sub的速度很慢，并且它是不可配置的，并且

00:00:12.269 --> 00:00:17.970
pub / sub消息显示对等ID，因此计划将可插拔的流行音乐

00:00:17.970 --> 00:00:21.630
协议可能是特定于应用程序的，所以现在有一个默认值

00:00:21.630 --> 00:00:26.099
因此，如果您有可插入的发布/订阅协议，那么也许我们可以对其进行调整

00:00:26.099 --> 00:00:32.070
应用程序并窃取数据修剪，所以我们会收到一条消息，有时您有

00:00:32.070 --> 00:00:35.219
动态应用程序，因此您也有过时的消息，您也不需要

00:00:35.219 --> 00:00:40.230
它是无用的，所以我们不想我们不想传播它，如果

00:00:40.230 --> 00:00:44.969
你有一个结构化的弹出子叠加层，那么它的PRI ID

00:00:44.969 --> 00:00:50.969
可以用来在此处执行操作的pub子消息，因此弹出消息应该

00:00:50.969 --> 00:00:56.100
没有PID，我不知道最后一件事是什么，所以我问

00:00:56.100 --> 00:01:00.090
关于没有对等ID的发布/订阅消息传递，因为当前我们是

00:01:00.090 --> 00:01:03.840
考虑到那里，并在普通的烟雾中，例如当您不想要时

00:01:03.840 --> 00:01:07.770
通过pub表公开您正在做的事情，以便可以将其保留下来

00:01:07.770 --> 00:01:11.340
到应用程序层来决定他们如何处理对等ID和

00:01:11.340 --> 00:01:17.460
最后一个是因为我们目前的理解是pub sub

00:01:17.460 --> 00:01:21.390
数据格式与IP NS不同，因此，如果您订阅我们的MPLS，您将无法

00:01:21.390 --> 00:01:27.240
从那里重用您的结果会弹出，以便可以共享磁带格式

00:01:27.240 --> 00:01:30.390
在这两种机制之间，应用程序层可以有一种方法

00:01:30.390 --> 00:01:35.400
优化器机制，所以这不像是解决方案，而是一种愿望

00:01:35.400 --> 00:01:40.229
我们认为如果可以拥有的清单，将使动态构建成为可能

00:01:40.229 --> 00:01:44.640
应用程序更好，我认为我们值得奖杯，因为我深潜

00:01:44.640 --> 00:01:50.630
Satoshi步伐如此之深，所以别再步步向前，再也没有见过

00:01:51.810 --> 00:01:56.180
[掌声]

