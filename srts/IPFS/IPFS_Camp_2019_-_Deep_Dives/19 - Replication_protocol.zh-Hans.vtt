WEBVTT
Kind: captions
Language: zh-Hans

00:00:02.330 --> 00:00:08.910
好的，大家早上好，我认为Matilda在表达

00:00:08.910 --> 00:00:15.529
我们整个团队的总体感觉是，所以我们谈到了复制

00:00:15.529 --> 00:00:19.939
复制协议您可能会问什么是复制协议

00:00:19.939 --> 00:00:27.000
因此复制协议是一种复制全部或部分默克尔潜伏期的方法

00:00:27.000 --> 00:00:34.920
一个不受信任的环境，即仅以根块哈希开头的ipfs

00:00:34.920 --> 00:00:39.870
我们是否可以快速移动DAG？我们想快速做到吗？

00:00:39.870 --> 00:00:45.300
想要同时优化延迟和传输速度，我们需要利用

00:00:45.300 --> 00:00:51.780
ipfs的分布式特性，使其变得比以前更快

00:00:51.780 --> 00:00:59.039
您所知道的有关HTTP的昨天的消息，如果可以的话，最后会很好

00:00:59.039 --> 00:01:03.629
在IP FS环境中做到这一点，在整个环境中DDoS并非易事

00:01:03.629 --> 00:01:11.100
网络，因为那简直太无聊了，所以我们谈论了很多，而这些

00:01:11.100 --> 00:01:15.240
两个就像超级棒极了，就像滚滚一样，伴随着复杂的问题

00:01:15.240 --> 00:01:19.830
我花了大部分时间在思考，他们有很棒的主意，

00:01:19.830 --> 00:01:24.140
切实帮助我们到达一个凉爽地方的有用建议

00:01:24.140 --> 00:01:29.759
因此，我们永远拥有的一种解决方案是位交换

00:01:29.759 --> 00:01:35.009
允许您通过逐块行走来撕裂dag，以及

00:01:35.009 --> 00:01:38.400
易于验证，因为每个块都有一个哈希，您可以承担和

00:01:38.400 --> 00:01:41.850
重新整理您收到的数据并验证其正确性很容易

00:01:41.850 --> 00:01:48.270
平行谎言对于宽而平坦的图形非常有效，但特别适用于

00:01:48.270 --> 00:01:52.229
长而窄的图会有很多延迟，因为您必须这样做

00:01:52.229 --> 00:01:56.130
标记意味着我们已经完成了草公司的超好相反案例

00:01:56.130 --> 00:02:00.689
在查询语言中请求dag对于深度和窄度都非常有效

00:02:00.689 --> 00:02:05.939
图，但不适用于其他事物，同时表现出全新的事物

00:02:05.939 --> 00:02:11.720
从取消同步某人在房间里采取的想法，使同性恋酷去5

00:02:11.720 --> 00:02:15.410
然后您可能可以帮助您优化所有这些方面并选择

00:02:15.410 --> 00:02:18.110
他们之间，现在我们已经完成，因此我们将建立一个元协议，它可以完成所有操作

00:02:18.110 --> 00:02:25.000
对不起，我错过了规则部分

