WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.030 --> 00:00:04.200
嘿，大家好，我们要走得非常快，因为我是活动滑梯好，所以

00:00:04.200 --> 00:00:07.799
您接下来，我们将为ipfs实体提供哪些问题，

00:00:07.799 --> 00:00:11.639
不能仅在现有的大学中固定，所以最大的是

00:00:11.639 --> 00:00:15.150
就像一切都在Dague PB中一样，出于各种原因，我们很乐意

00:00:15.150 --> 00:00:19.050
继续喜欢所有这些伟大的新日期格式，实际上是一种称为Big C的格式

00:00:19.050 --> 00:00:23.670
板，您可以在UNIX fc-1中使用非常灵活的包结构，因此，如果您

00:00:23.670 --> 00:00:25.830
有一堆小文件和一个小目录

00:00:25.830 --> 00:00:29.160
您不能仅仅将所有内容内联到一个块中，最终会产生很多跃点

00:00:29.160 --> 00:00:33.270
很多微小的文件，就像Liddell之前所说的那样

00:00:33.270 --> 00:00:37.380
您最终会由于传入的参数而得到不一致的哈希值，并且

00:00:37.380 --> 00:00:40.260
没有很好的方法来查看数据并去掉哦，那是什么参数

00:00:40.260 --> 00:00:43.739
被用来创建这个城市，然后您可以再次再现相同的哈希值

00:00:43.739 --> 00:00:47.850
给我剥皮缓解角度的那些参数，您可以考虑一下

00:00:47.850 --> 00:00:52.530
Unix FS和真正的ipfs的使用，就像用例的第一个IP一样，因此ipfs得以构建

00:00:52.530 --> 00:00:55.920
所有这些惊人的工具，使使用默克尔袋的工作更加轻松

00:00:55.920 --> 00:00:59.039
然后，当您进入IP LD层时，您将没有很多这样的工具

00:00:59.039 --> 00:01:02.430
不再需要IP LD，我们真的很需要

00:01:02.430 --> 00:01:07.710
使用路径（例如程序路径）或程序路径的好方法，我们

00:01:07.710 --> 00:01:10.830
我们肯定需要一种方法来升级这些数据结构

00:01:10.830 --> 00:01:14.369
未来，而您却不知道更新与数据对话的每个客户

00:01:14.369 --> 00:01:18.720
结构，所以你怎么做，所以我剥D真的需要一个模型

00:01:18.720 --> 00:01:22.140
实现数据结构，然后将该实现放入

00:01:22.140 --> 00:01:26.189
数据本身，所以我们正在谈论使用此方法的很多方法，我没有时间

00:01:26.189 --> 00:01:29.820
深入探讨，但本质上这将是一个编程界面，因此

00:01:29.820 --> 00:01:33.270
可以为您的数据提供很好的路径，而实际上可以作为附件

00:01:33.270 --> 00:01:36.780
只需在此IP LD系统中实现漂亮的ipfs路径，那将是

00:01:36.780 --> 00:01:41.310
所有人都可以使用IP LD，系统也可以强制执行该操作

00:01:41.310 --> 00:01:45.840
这些用于处理数据结构的程序功能只能访问

00:01:45.840 --> 00:01:49.170
他们的数据里面的东西，这实际上将迫使我们采取一切

00:01:49.170 --> 00:01:52.829
我们用来创建这些结构并将其放入

00:01:52.829 --> 00:01:57.420
到实际数据本身，这样我们就可以重现

00:01:57.420 --> 00:02:00.600
给定新数据的任何文件，因为我们会知道所有配置和

00:02:00.600 --> 00:02:04.759
花费的参数，我已经花了很多时间

00:02:05.360 --> 00:02:10.280
[掌声]

