WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.620 --> 00:00:04.740
好吧，现在第三次录制是一种魅力

00:00:04.740 --> 00:00:12.500
欢迎来到2019年4月23日的包裹经理每周同步我是安德鲁

00:00:12.500 --> 00:00:18.840
主持人准备在本周为疼痛的大脑而来的人

00:00:18.840 --> 00:00:24.199
原因，所以我们将去做人们有的任何更新

00:00:24.199 --> 00:00:30.810
与包管理器工作组相关的东西，我将从我开始

00:00:30.810 --> 00:00:35.670
写一个叙事文件，就像一个很长的博客

00:00:35.670 --> 00:00:43.320
ipfs概念如何映射到现有软件包管理器概念的文章

00:00:43.320 --> 00:00:48.719
能够将其提供给包管理器的特定重点

00:00:48.719 --> 00:00:55.620
维护者，让他们自己了解如何开始

00:00:55.620 --> 00:01:01.530
在ipfs一词中有软件包管理器，所以它不是一种完整的软件

00:01:01.530 --> 00:01:06.360
这是在ipfs上构建去中心化软件包管理器的方法，但更多

00:01:06.360 --> 00:01:10.590
在学习有关如何使用ipfs扩展现有软件包管理器的同时，

00:01:10.590 --> 00:01:17.189
他们所涉及的不同种类的技术，例如IP ns

00:01:17.189 --> 00:01:26.700
 IP LD和类似的步骤，特别是像这样思考

00:01:26.700 --> 00:01:31.979
好的，有人如何发布他们的第一个软件包，然后

00:01:31.979 --> 00:01:36.990
如何为一个软件包索引不同版本的数量，然后如何

00:01:36.990 --> 00:01:42.000
跟踪多种不同的包装及其映射方式

00:01:42.000 --> 00:01:46.409
包管理器的现有工作方式，所以链接在

00:01:46.409 --> 00:01:51.149
注意到这是我正在开始获取的正在进行的Google文档

00:01:51.149 --> 00:01:57.390
很快就收到了一些反馈，也有一个非正式的软件包经理来开会

00:01:57.390 --> 00:02:03.810
伦敦与埃里克·霍利（Eric Holly）和亚历克斯（Alex）

00:02:03.810 --> 00:02:10.470
问题和否定某些问题的潜在方法以及一个有趣的问题

00:02:10.470 --> 00:02:17.670
关于MPM的讨论，它现在可以在客户端中使用

00:02:17.670 --> 00:02:26.970
指定给定日期之前的软件包发行版，以避免这种情况

00:02:26.970 --> 00:02:32.790
就像我几乎只需要发布软件包那样，几乎不需要锁文件

00:02:32.790 --> 00:02:36.660
在给定日期之前，但实际上发生在客户端而不是服务器上

00:02:36.660 --> 00:02:43.730
因此，如果数据和服务器发生更改，则说明某个软件包被拉了，那将

00:02:43.730 --> 00:02:48.300
还是仍然要求服务器提供一切，而客户端只决定它

00:02:48.300 --> 00:02:52.440
想要它返回的一部分，而我们可以使用NPM

00:02:52.440 --> 00:03:02.580
 ipfs实际上是通过我们npm桥上EMFs驱动器根目录的CID传递的

00:03:02.580 --> 00:03:09.690
免费副本，这将为您提供整个快照的时间

00:03:09.690 --> 00:03:13.890
注册表，这样即使以后删除某些内容，您仍然可以

00:03:13.890 --> 00:03:21.860
回滚并确保您具有一定的可重复性

00:03:21.860 --> 00:03:28.470
开始研究如何为雅典项目增加ipfs支持，

00:03:28.470 --> 00:03:35.820
是Go包管理的代理服务，就像您在Rev中指出的那样

00:03:35.820 --> 00:03:43.980
您在雅典服务器上进行现金交易或服务的go模块配置

00:03:43.980 --> 00:03:48.450
从缓存直接将模块收入分配到许多不同的git

00:03:48.450 --> 00:03:54.800
 github上的存储库主要适用于私有和公共事物，并且

00:03:54.800 --> 00:03:59.100
有一个非常好的界面用于构建存储适配器，我们可以

00:03:59.100 --> 00:04:03.900
可能会构建一个已编写并继续运行的IP FS存储适配器，因此

00:04:03.900 --> 00:04:09.290
go ipfs有很多交叉，这可能是另一种方式

00:04:09.290 --> 00:04:16.829
重新引入将包内容存储在ipfs上的方法

00:04:16.829 --> 00:04:22.860
现在，GX已经在ipfs和协议实验室的其他项目中

00:04:22.860 --> 00:04:29.219
被遗弃了，所以在我看来，有一条相当幸福的道路可以公平地到达那里

00:04:29.219 --> 00:04:35.520
迅速地提出我是其中一员的一部分

00:04:35.520 --> 00:04:40.020
每周打一次电话，所以我可能会潜入那里，看看他们对

00:04:40.020 --> 00:04:45.629
补充说，作为支持，UM不会阻止任何内容，接下来，我将

00:04:45.629 --> 00:04:51.229
继续进行我到目前为止一直在做的记录

00:04:51.330 --> 00:05:01.870
只是在开玩笑，所以上周我在DPLA节上走了很多

00:05:01.870 --> 00:05:06.340
在那儿举办了一个与包装经理没有特别关系的研讨会，但确实

00:05:06.340 --> 00:05:11.740
对于新手黑人很有用，什么也没做，所以接下来的步骤我真的很喜欢

00:05:11.740 --> 00:05:16.360
需要确定我的实际工作计划，或者本周对此进行一些聊天，

00:05:16.360 --> 00:05:20.380
只是设置一些东西，我知道有些事情在我的雷达上出现问题41

00:05:20.380 --> 00:05:25.539
 42首先是记录软件包管理器的阶段和类型

00:05:25.539 --> 00:05:30.550
然后，用户和核心Dems之间的反馈循环也需要挖掘一点

00:05:30.550 --> 00:05:34.990
稍微深入一点，看看如何在这些问题中发挥作用，然后

00:05:34.990 --> 00:05:39.940
也只想保留关于渐进式UX的讨论Eliab，

00:05:39.940 --> 00:05:47.560
 vs的菜单栏，我为我们选择了与之共存的桌面

00:05:47.560 --> 00:05:53.949
给包装经理的实际视觉反馈，然后也许

00:05:53.949 --> 00:05:59.950
潜入命令行消息中，我也知道

00:05:59.950 --> 00:06:03.340
应该将我们在其他地方的最佳做法放在一起，这样我们就可以

00:06:03.340 --> 00:06:06.970
肯定是从中借用的，但只想确保它不会落空

00:06:06.970 --> 00:06:15.729
如果有什么不对劲或感觉好像我走错了，请暂时关闭

00:06:15.729 --> 00:06:18.520
方向，请喜欢您知道，因为我仍然有点像您知道找到我的

00:06:18.520 --> 00:06:20.669
办法

00:06:23.260 --> 00:06:26.740
埃里克再次加入

00:06:27.590 --> 00:06:32.060
嗯，是的，我不知道我是否有很多意见要评论哦，是的，我们有一个

00:06:32.060 --> 00:06:39.710
我会在伦敦进行可爱的聊天，所以我总是有同样的愿望清单

00:06:39.710 --> 00:06:44.000
就像让我们尝试找出一些更简单的要点一样

00:06:44.000 --> 00:06:49.070
喜欢如何对这些东西进行分类，所以本周主要感谢

00:06:49.070 --> 00:06:54.940
与安德鲁的对话我正在做一份草稿，就像

00:06:54.940 --> 00:06:59.960
我们可以使用ipfs进行不同级别的集成选择

00:06:59.960 --> 00:07:03.850
包管理器等，就像分支一，这正试图使其像

00:07:03.850 --> 00:07:07.280
你知道你曾经做过像高中生物学教科书那样的事吗

00:07:07.280 --> 00:07:11.060
尝试像是什么样的生物，它有是/否的问题

00:07:11.060 --> 00:07:16.280
它是否有鳍，您知道吗，所以它正在尝试达到该水平并使其

00:07:16.280 --> 00:07:23.780
它是超级显式的，像这样是否使用ipfs是，否，它是否使用

00:07:23.780 --> 00:07:28.580
ipfs存储原始锥体和所有叶子，并且cid一样

00:07:28.580 --> 00:07:34.640
实际上出现在索引中，然后逐渐深入到索引中，所以它

00:07:34.640 --> 00:07:38.330
最终成为一棵更像右倾的树

00:07:38.330 --> 00:07:42.890
集成，因为我一直说“是”，所以我猜这是一个比我更简单的结构

00:07:42.890 --> 00:07:49.180
期望，并在最下面打开了一个未知领域，所以我

00:07:49.180 --> 00:07:55.400
最初不确定是不是我最初不确定是否值得

00:07:55.400 --> 00:07:58.850
是否公开共享，因为它最终到达了未知领域

00:07:58.850 --> 00:08:03.530
但是我想我是从乡亲那里得到的反馈，如果可以的话，

00:08:03.530 --> 00:08:06.950
应该超级分享，所以我想以后会出现在一个问题中

00:08:06.950 --> 00:08:09.280
今天或其他没有其他地方

00:08:09.280 --> 00:08:19.050
那就是我的项目，为什么你想问些事情，是的

00:08:19.050 --> 00:08:25.440
一件事是我快速进行了Twitter Twitter Twitter对话，我想你

00:08:25.440 --> 00:08:27.530
知道

00:08:29.210 --> 00:08:33.950
从事wasper mer的人们，这是一个很棒的新软件包管理器

00:08:33.950 --> 00:08:39.290
我相信明天即将发布，这是令人兴奋的

00:08:39.290 --> 00:08:45.500
他们路线图上的一件事是ipfs集成，所以我已经安排了一个

00:08:45.500 --> 00:08:51.890
与他们聊天，因为您知道一群想要的软件包管理员用户

00:08:51.890 --> 00:08:56.000
了解更多关于他们如何使用IP FS来与该组的软件包管理者进行交流的信息

00:08:56.000 --> 00:08:59.090
因为这对于我们与尝试使用的人交谈也非常有益

00:08:59.090 --> 00:09:05.120
这个和喜欢自己优先考虑这个问题

00:09:05.120 --> 00:09:07.790
迄今为止，我们如何才能最好地满足他们的需求？

00:09:07.790 --> 00:09:10.130
像这样的东西，所以我正在尝试

00:09:10.130 --> 00:09:15.770
安排到星期四早上，如果到目前为止，我想我就把包裹打包好了

00:09:15.770 --> 00:09:23.260
经理工作组电子邮件列表在电子邮件线程中，但如果有的话

00:09:24.920 --> 00:09:29.340
我将尽力确保您加入到会议中来聊天

00:09:29.340 --> 00:09:34.320
关于他们如何使用IP FS进行自我预测

00:09:34.320 --> 00:09:41.850
到目前为止，他们有兴趣追求的后勤树叶

00:09:41.850 --> 00:09:50.010
昨晚与史蒂芬（Steven）进行了超长的聊天，讨论了各种可能有价值的工具

00:09:50.010 --> 00:09:54.150
建立在IP FS之上，用于不同类型的程序包管理器，例如

00:09:54.150 --> 00:09:59.970
在短期内似乎是可行且无价的，这就是

00:09:59.970 --> 00:10:05.580
我们如何与生态系统中其他合作伙伴合作的目标

00:10:05.580 --> 00:10:09.210
已经尝试向您展示价值所在，我们可以在其中添加其他内容

00:10:09.210 --> 00:10:15.150
重视或满足某些用户群体对套餐的需求，

00:10:15.150 --> 00:10:19.560
经理们最终有望拥有可靠的默认值之类的东西

00:10:19.560 --> 00:10:22.680
真正可以成为每次进行压力测试的最佳选择

00:10:22.680 --> 00:10:30.810
使用它，我们有点像三个顶级想法，一个正在聊天

00:10:30.810 --> 00:10:35.790
与云播放器人员讨论CDM Jas并找到更多方法

00:10:35.790 --> 00:10:42.630
实际上是CD MJS之类的东西附近的现金流

00:10:42.630 --> 00:10:48.210
当您加载网站时，您只会像

00:10:48.210 --> 00:10:53.130
常见的嫉妒脚本，然后您访问的每个网站都使用

00:10:53.130 --> 00:10:59.420
相同的jquery东西可以从ipfs抓取它，而不是从CloudFlare重新加载它

00:10:59.420 --> 00:11:03.870
另一个人正在考虑Linux发行版，您真的很烂

00:11:03.870 --> 00:11:09.240
互联网，您想要在机器上传递两个镜像到

00:11:09.240 --> 00:11:13.920
机器，因为当两个镜子非常大，因此成本

00:11:13.920 --> 00:11:18.690
正在运行和ipfs节点将比必须加载每个打开的文件小得多

00:11:18.690 --> 00:11:24.210
分别镜像，最后一个不是Linux，而是Windows

00:11:24.210 --> 00:11:28.530
和巧克力，我想他已经在包装上评论了好几次了

00:11:28.530 --> 00:11:33.090
经理回购一些您知道的东西，安德鲁我知道

00:11:33.090 --> 00:11:36.500
您对巧克力的用途做了一些分析

00:11:36.500 --> 00:11:41.090
但是对于那绝对是一件大事，因为Windows计算机是个人计算机

00:11:41.090 --> 00:11:45.050
那将是天然的鬃毛之类的东西，我们就是

00:11:45.050 --> 00:11:49.070
头脑风暴，所以我们要确保头脑风暴的输出

00:11:49.070 --> 00:11:53.860
知道在下一组暴雨中会继续向外渗滤

00:11:57.250 --> 00:12:03.529
是的，很酷，所以我也偶然遇到了另一个Windows巧克力之类的东西

00:12:03.529 --> 00:12:10.820
包管理器今天称为scoop，它看起来很像自制软件，而

00:12:10.820 --> 00:12:19.070
chocolaty看起来很像牛轧糖，它们都是windows.net软件包管理器

00:12:19.070 --> 00:12:28.490
以某种元方式工作，因为它们确实提供了

00:12:28.490 --> 00:12:34.610
软件包管理器本身及其注册表实际上是一组安装脚本，

00:12:34.610 --> 00:12:40.850
包含一个URL，以从其他地方获取实际的二进制文件，这可能或

00:12:40.850 --> 00:12:49.070
可能不会继续存在，以与自制软件相同的方式

00:12:49.070 --> 00:12:57.649
尽管现在自制软件正朝着更多的缓存或类似于发布的方向发展

00:12:57.649 --> 00:13:01.220
将源代码构建成自己的二进制文件

00:13:01.220 --> 00:13:09.079
现在是垃圾箱的基础设施，实际上就像巧克力一样

00:13:09.079 --> 00:13:14.660
出售比他们的专业版稍微更可靠的版本，所以他们

00:13:14.660 --> 00:13:22.339
不太可能想通过破坏自己的商业模式

00:13:22.339 --> 00:13:26.810
一切都会自动发送到ipfs，但周围也有类似的问题

00:13:26.810 --> 00:13:37.029
将二进制文件存储为私有或类似非开放源代码的文件

00:13:37.029 --> 00:13:45.709
ipfs上的应用程序可能会使某些笼子混乱，但是这些二进制文件可以自由地

00:13:45.709 --> 00:13:50.690
从这些网站下载，只是您可能必须像

00:13:50.690 --> 00:13:57.820
隐私政策或类似政策，然后您才真正同意下载它，因此

00:13:57.820 --> 00:14:05.950
我猜是一个灰色的区域，也许更多的是个人选择加入的软件包

00:14:05.950 --> 00:14:11.800
进一步希望启用该ipfs现金，而不是仅仅尝试

00:14:11.800 --> 00:14:18.820
像批发一样，将每个Windows二进制文件的全部随机存档

00:14:18.820 --> 00:14:30.700
专有程序包或应用程序还有其他要点吗？

00:14:30.700 --> 00:14:40.210
来吧，也许是克里斯，因为你是新来的。

00:14:40.210 --> 00:14:44.380
应该让大家知道我正在申请Jas核心技术经理职位

00:14:44.380 --> 00:14:49.600
现在我对协议实验室正在做的事情感到非常兴奋，我正在加入

00:14:49.600 --> 00:14:53.230
之所以会面，主要是因为我有点想了解身份

00:14:53.230 --> 00:14:58.090
而且我很好奇它如何适应包管理器世界，因此简而言之

00:14:58.090 --> 00:15:02.860
如果您考虑设计，那么我正在考虑的身份认同问题

00:15:02.860 --> 00:15:06.370
空间就像三种身份，就是个人身份

00:15:06.370 --> 00:15:10.720
你知道的实际上是真实的东西，然后就像你的

00:15:10.720 --> 00:15:19.480
我认为像您一样的可验证的东西，您知道要像

00:15:19.480 --> 00:15:22.590
不管这些做法是什么

00:15:24.000 --> 00:15:29.830
足够了，那就是派生的身份，就像您的ISP一样

00:15:29.830 --> 00:15:35.529
知道你是否想要他们，所以我有点想

00:15:35.529 --> 00:15:40.510
例如，如果我们构建了可以追溯历史的工具，那么我们可以构建工具

00:15:40.510 --> 00:15:46.209
Debian软件包仓库是透明的，就像这样，很奇怪

00:15:46.209 --> 00:15:50.830
一个签名未通过验证，就像我们正在仔细研究那个签名一样

00:15:50.830 --> 00:15:54.490
或哦，在那包上换我的教练，所以我有点红黄

00:15:54.490 --> 00:15:59.830
图中不同状态的绿色只是那些工具（如果您建立了

00:15:59.830 --> 00:16:03.430
它们对于程序包管理器在该领域将非常有用，但是我

00:16:03.430 --> 00:16:06.790
认为他们也会横向转移到那种

00:16:06.790 --> 00:16:11.890
可以帮助最终用户了解第三方正在处理的内容

00:16:11.890 --> 00:16:15.970
他们等等，所以我不知道那是那种

00:16:15.970 --> 00:16:20.260
我认为现在这些东西很有趣，是的，

00:16:20.260 --> 00:16:25.930
两者之间也存在巨大的鸿沟，尤其是在涉及某种可重复性方面

00:16:25.930 --> 00:16:33.400
以及类似的验证链，就像我们在github仓库中看到的那样，

00:16:33.400 --> 00:16:38.590
就像哦，如果此版本已发布，那么这就像一个跳跃

00:16:38.590 --> 00:16:42.310
发生，通常发生在某人的笔记本电脑上，然后

00:16:42.310 --> 00:16:47.410
NPM或Ruby gems上有一个包装，没有任何保证

00:16:47.410 --> 00:16:53.140
如果可以运行相同的脚本并结束，则可以在这两个地方之间切换

00:16:53.140 --> 00:17:00.030
与人们经常会使用的相同程序包甚至此应用程序

00:17:00.030 --> 00:17:06.310
可靠，并且Greenkeeper经常会参考变更日志中的新内容

00:17:06.310 --> 00:17:10.630
软件包已经发布，但是当他们自动打开一个拉取请求时说

00:17:10.630 --> 00:17:14.650
就像哦，这件事有新的更新，他们引用了他们的数据

00:17:14.650 --> 00:17:21.760
来自github而不是来自发布的软件包之间的实际差异

00:17:21.760 --> 00:17:27.220
包管理器，因为在所有的历史记录中数据都是有损的

00:17:27.220 --> 00:17:32.050
程序包中可能不存在经过的更改和更改日志

00:17:32.050 --> 00:17:37.960
而它确实存在于github上，所以他们只是希望并梦想着那里

00:17:37.960 --> 00:17:43.090
没有人在此过程中进行任何更改，因此变得很难

00:17:43.090 --> 00:17:48.550
确保那里发生了什么，或者同一个人是否做过同样的事情

00:17:48.550 --> 00:17:53.410
因为大多数注册管理机构实际上并没有为您提供此类日志

00:17:53.410 --> 00:17:57.970
发生在幕后他们真的只会给你最终结果

00:17:57.970 --> 00:18:03.070
然后就像实际工作一样，可复制的构建项目是

00:18:03.070 --> 00:18:08.700
放入Eric绝对可以谈论更多

00:18:08.700 --> 00:18:15.000
是的，我想我对这件事的看法是，您可以尝试使用验证来

00:18:15.000 --> 00:18:18.780
强制一切都很完美，但是就像您仍然会感到奇怪的滑倒一样

00:18:18.780 --> 00:18:22.290
在历史记录中或以某种方式进入验证系统时进入系统

00:18:22.290 --> 00:18:29.520
主动的或其他方式，所以必要的方法有点像

00:18:29.520 --> 00:18:33.900
与派生身份方法类似的是，查看实际情况

00:18:33.900 --> 00:18:38.040
在那里，然后再给人道感觉，就像我有点红，黄，绿

00:18:38.040 --> 00:18:41.700
对于我的图形的不同部分，以便作为开发人员，您可以知道是否

00:18:41.700 --> 00:18:45.270
您会陷入混乱，或者您的依赖链中有一部分是

00:18:45.270 --> 00:18:49.440
相对干净，我不知道我们是否在这方面谈论得太多

00:18:49.440 --> 00:18:55.140
分组，因为我们很多注意力都集中在更直接的方式上

00:18:55.140 --> 00:18:58.140
关于内容可寻址性的对话，即使是在那些

00:18:58.140 --> 00:19:04.140
还没有，因为上帝知道太多了，但我认为那是一个

00:19:04.140 --> 00:19:09.420
真的是很棒的整个对话范围，另一个可能是

00:19:09.420 --> 00:19:13.250
如果您没有被运气绊倒的话，可以作为一个很好的搜索词，

00:19:13.250 --> 00:19:20.040
二进制透明性类似于证书透明性，我不知道是否

00:19:20.040 --> 00:19:23.730
该术语已被超级积极地使用，但有一些像

00:19:23.730 --> 00:19:29.520
讨论了该主题的邮件列表和档案

00:19:29.520 --> 00:19:32.130
听起来您已经考虑过这种相似性，也许其中的所有内容

00:19:32.130 --> 00:19:36.990
会有旧帽子给你，但哦，我想过你知道它的广度

00:19:36.990 --> 00:19:39.420
我想我记得曾经参加过一个人的会议演讲

00:19:39.420 --> 00:19:42.900
试图建立一个已全部签名的新程序包管理器

00:19:42.900 --> 00:19:46.830
你知道海龟一路走下来，但你知道那是个主意，但你做不到

00:19:46.830 --> 00:19:50.220
验证所有内容，您不能um无法清理历史记录

00:19:50.220 --> 00:19:54.240
注意那里发生了什么，我认为我们有一些有趣的事情

00:19:54.240 --> 00:20:00.750
可以说我们在这个小组中发现的还包括推杆的命名

00:20:00.750 --> 00:20:06.990
在设计中过早或集中到某些地方会变得很奇怪

00:20:06.990 --> 00:20:12.210
因为就像我们都在这里，因为我们有内容可寻址的内容，

00:20:12.210 --> 00:20:16.350
那么理想情况下，我们希望拥有类似内容的可寻址索引，

00:20:16.350 --> 00:20:20.100
诸如此类的不可变元数据

00:20:20.100 --> 00:20:22.050
锻炼，因为它更像

00:20:22.050 --> 00:20:30.960
埃塞俄比亚人民峡谷地带历史上使埃塞俄比亚

00:20:30.960 --> 00:20:39.270
可以肯定，就像是希望，是的，我的意思是对的，除了

00:20:39.270 --> 00:20:47.820
他们是我们这一代最聪明的人，他们正在这样做来出售广告，是的，如果

00:20:47.820 --> 00:20:51.840
您对如何使用不同的形式和身份有很多想法

00:20:51.840 --> 00:20:55.770
与包装材料有关，您内心深处有些火

00:20:55.770 --> 00:21:01.620
写关于它的内容，是的，我是说我在看一个，我想我知道

00:21:01.620 --> 00:21:04.350
我在哪里提出类似问题的正确位置是我想到的一些主意

00:21:04.350 --> 00:21:06.890
集思广益和包装材料的回购之一

00:21:06.890 --> 00:21:14.100
是的，软件包管理器存储库是仅用于发布问题的好地方

00:21:14.100 --> 00:21:20.550
并带有类似的讨论区或类似的指针，就像这里有一些东西

00:21:20.550 --> 00:21:25.920
希望能得到一些有趣的东西，可能是

00:21:25.920 --> 00:21:32.400
与ipfs和软件包管理器有关，无论是短期的还是

00:21:32.400 --> 00:21:37.410
长期来看，这就像把锅塞扔进去的好习惯

00:21:37.410 --> 00:21:42.510
我们还没有真正开始谈论另一种形式的身份

00:21:42.510 --> 00:21:46.650
在这里浮现的东西，从技术上讲，我不能

00:21:46.650 --> 00:21:53.100
在7月之前做任何工作，因为竞争不足是解决某些问题的原因。

00:21:53.100 --> 00:22:01.020
一种或多种类似的功能，可以对您的返回进行存档，然后

00:22:01.020 --> 00:22:04.200
弄清楚正在发生的事情，并突出显示相似点和非相似点

00:22:04.200 --> 00:22:14.040
值得信赖或奇怪的是尽职调查和安全性

00:22:14.040 --> 00:22:19.230
公司向所有人开放自己的开源许可

00:22:19.230 --> 00:22:25.270
各种风险，实际上能够

00:22:25.270 --> 00:22:31.540
为公司举起红旗，然后走开，您是否意识到像过去的某个地方

00:22:31.540 --> 00:22:38.110
从GPL项目到MIT的重新许可

00:22:38.110 --> 00:22:43.630
不应该发生的项目，就像原始人发现的那样

00:22:43.630 --> 00:22:48.450
然后他们可以像一直弹回链条一样

00:22:48.450 --> 00:22:53.490
则可能会在GPL软件之上构建专有软件

00:22:53.490 --> 00:22:59.170
陷入各种混乱，公司意识到了风险，并且

00:22:59.170 --> 00:23:05.940
非常哦你好绽放什么

00:23:08.140 --> 00:23:13.690
抱歉，变焦镜头只是告诉我，由于某些原因，我只有三分钟的时间

00:23:13.690 --> 00:23:21.060
非常像他们对风险评估的重视程度足以实际支付

00:23:21.060 --> 00:23:26.200
能够做到这一点的工具，只是进入其中的数据是

00:23:26.200 --> 00:23:31.480
真是糟糕透顶，公司倾向于保留他们可以获得的任何质量数据

00:23:31.480 --> 00:23:36.490
而不是共享出去，实际上数据应该像是

00:23:36.490 --> 00:23:41.770
开源项目，如果它被收集起来，应该像

00:23:41.770 --> 00:23:48.420
它基于Commons，应该在Commons of

00:23:48.420 --> 00:23:55.110
该项目以一种持续的方式进行，但我认为我们有

00:23:55.110 --> 00:24:02.090
时间用完了，这是老虎机的尽头，所以感谢大家的光临和

00:24:02.090 --> 00:24:07.880
我们下周再见，谢谢您现在停止录制

