WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:13.200
好吧，美丽，您是否在录制任何人的音符，我相信我们也有

00:00:13.200 --> 00:00:17.400
迈克尔·罗杰斯（Michael Rogers）称呼他一直在思考的这个新包装经理的想法

00:00:17.400 --> 00:00:26.840
关于我昨晚只是在想，我不知道我是否更新了

00:00:26.840 --> 00:00:30.179
日程安排在某个地方，所以我就像是，是的，我们应该仔细阅读一下

00:00:30.179 --> 00:00:32.969
您知道我们本周要做的事情，然后给任何人留出时间

00:00:32.969 --> 00:00:37.670
像Michael Welcome那样谈论我的自行车，所以我们可以做到这一点

00:00:37.670 --> 00:00:41.790
在这种情况下，很难说出它是否在实际录制中

00:00:41.790 --> 00:00:45.750
谁能看到它是否有一个小按钮，好的，非常感谢，所以它是

00:00:45.750 --> 00:00:55.320
8月22日，星期二，我们的27位包裹管理者每周电话也冲刺

00:00:55.320 --> 00:01:03.239
进行计划，以便我们开始工作，让我们看看有人能做到这一点吗？

00:01:03.239 --> 00:01:08.580
您在哪里打电话给下一个人，让他们让我们知道的事情

00:01:08.580 --> 00:01:14.600
他们接下来要做的，但首先，我要说的是院长的祝贺

00:01:14.600 --> 00:01:23.260
他可以先说几句一周的情况怎么样一周的情况还可以吗

00:01:23.260 --> 00:01:28.259
[音乐]基本上会继续

00:01:28.259 --> 00:01:34.829
上周关于将发现内容构建到其中的持续内容

00:01:34.829 --> 00:01:40.049
pub / sub希望我会怎么做

00:01:40.049 --> 00:01:47.280
发现事情在起作用我今天有工作，然后明天可以

00:01:47.280 --> 00:01:51.149
开始吧，你能知道在好的工作上，让我们完善小狗的部分

00:01:51.149 --> 00:01:59.490
这是82项贷款，您正在查看，好吧，这是一件好事

00:01:59.490 --> 00:02:06.420
不，不，那是81，甚至是出色的，是的，哦，这是我的主要选择，是吗

00:02:06.420 --> 00:02:10.759
现在将发现内容分解为一个单独的问题很有用

00:02:10.759 --> 00:02:17.060
好吧，能够关闭事物，是的，我是说，这个原因是

00:02:17.060 --> 00:02:22.580
这里没有结束的东西，除非我想重复所有这些，否则这些都是

00:02:22.580 --> 00:02:28.010
是像Galecki FS这样的那些，是的，这些只是指向

00:02:28.010 --> 00:02:32.660
其他问题，我要尝试对不起我所有的问题，就像我说我没有感觉

00:02:32.660 --> 00:02:36.049
超级棒，所以我的大脑有点慢，我要尝试看看我是否可以放

00:02:36.049 --> 00:02:43.370
在进入ipfs小艇的地方，我们将看看它是否可能是唯一的另一个

00:02:43.370 --> 00:02:47.180
好吧，跨过你的手指，是的，那就给我们走吧

00:02:47.180 --> 00:02:52.700
它的纯度就像一堆东西，所以暂时我们会看到

00:02:52.700 --> 00:02:56.920
哦，很酷，谢谢

00:02:57.129 --> 00:03:02.870
你可以选择自己的继任者

00:03:02.870 --> 00:03:10.600
Dominic这是怎么回事，嘿，基本上，我刚去过

00:03:10.600 --> 00:03:15.980
最近我一直在考虑如何接受我一直在做的工作，

00:03:15.980 --> 00:03:23.720
放入可审查的公关中，至少在今天意味着什么

00:03:23.720 --> 00:03:28.970
像ipfs config一样进行操作，只是添加实验性标志和

00:03:28.970 --> 00:03:34.340
基本上只是把已经完成的事情挂起来，然后我就

00:03:34.340 --> 00:03:39.650
将要采取的方法，您知道基本上就是尝试并提出一些方法

00:03:39.650 --> 00:03:44.959
是像常规测试还是外部测试

00:03:44.959 --> 00:03:51.530
我们在谈论使用fsx，它是文件系统练习器，我认为这是什么

00:03:51.530 --> 00:03:59.810
X是为了但那是我必须要像往前那样看的东西

00:03:59.810 --> 00:04:05.060
今天他们可以解决这一点很明显，然后在那之后我不得不

00:04:05.060 --> 00:04:09.200
想一想在其他一些话题中讨论了哪些

00:04:09.200 --> 00:04:15.410
像史诗般的问题，甚至在某些研究资料中

00:04:15.410 --> 00:04:21.530
使我们走向可以拥有的东西的最紧迫的问题是什么

00:04:21.530 --> 00:04:26.770
我认为这将像我们的想法一样，我想那可能是

00:04:26.770 --> 00:04:33.080
元数据是在节点上存储元数据的一些方法，是的，

00:04:33.080 --> 00:04:39.950
管理它，这是我必须要研究的问题

00:04:39.950 --> 00:04:48.610
特定于此的东西，而不是像UNIX FS v2或v 1.5之类的东西

00:04:48.610 --> 00:04:54.140
只是因为它必须如何工作的性质，是的，

00:04:54.140 --> 00:05:00.800
对我来说是冗长的更新，让我们看看任何人在我们之前对此有任何疑问

00:05:00.800 --> 00:05:08.090
只知道一个简短的问题，例如雨果过得如何？

00:05:08.090 --> 00:05:13.970
将智商降到丹尼斯·帕克身上，如果您需要在所有方面的帮助，那么我

00:05:13.970 --> 00:05:19.460
大多数情况下，只要等到那里，我们就已经有了某种

00:05:19.460 --> 00:05:23.120
我不知道你想怎么称呼它是一件未完成的事情

00:05:23.120 --> 00:05:27.410
与那里的原型一起工作，但是因为它不是标准的，所以它是

00:05:27.410 --> 00:05:32.900
不符合规范或任何可能只是适应问题

00:05:32.900 --> 00:05:38.600
您将其放回去并为此编写测试有点困难

00:05:38.600 --> 00:05:42.490
现在，因为我们只有一台实验性的名称服务器，而没有

00:05:42.490 --> 00:05:48.560
无论出于何种原因，该值和键都向后退，是的

00:05:48.560 --> 00:05:52.280
一旦我们对其进行标准化，我认为它只是在解决这个问题，而且不应该花太多时间

00:05:52.280 --> 00:05:57.289
很多时间取决于我们将如何参与规范工作，以及

00:05:57.289 --> 00:05:59.680
所有的

00:06:03.229 --> 00:06:08.949
让我们看看有什么后续问题，您什么时候会认为自己会

00:06:08.949 --> 00:06:13.310
需要输入，或者当您说出我们需要的东西时您对您有好处吗？

00:06:13.310 --> 00:06:21.199
谈论下一步该做什么是有意义的，是的，我想我会把

00:06:21.199 --> 00:06:27.380
对于某些工作，我将首先提出PAPR，例如

00:06:27.380 --> 00:06:31.729
技术的东西，然后我想如果你想称它为设计或方向或

00:06:31.729 --> 00:06:37.220
像这样的东西可能应该进入同一类型的新发行中

00:06:37.220 --> 00:06:42.770
像第74号一样，有那么大的尺寸，我们可以谈论一下

00:06:42.770 --> 00:06:48.680
当我们继续前进时，我觉得听起来像是计划，或者您知道总是可以随时与我们联系

00:06:48.680 --> 00:06:58.250
对团队中的任何人肯定还是不打扰每个人都没有问题

00:06:58.250 --> 00:07:04.450
一个好吧，让我们看看德克，你想下一步吗

00:07:04.450 --> 00:07:11.230
好的，所以上周我自己和史蒂芬（Stephen）一起创作了这个新的wop

00:07:11.230 --> 00:07:17.110
提案，所以我整理了一个问题，就像它的草案版本一样

00:07:17.110 --> 00:07:23.830
简短而引起评论，因此Hanna可能在这里和那里发表了一些评论

00:07:23.830 --> 00:07:28.120
同时，我正在实施一个概念，我想尝试达到一个目标

00:07:28.120 --> 00:07:31.540
可以进行基准测试，以确保您知道

00:07:31.540 --> 00:07:35.830
我们期待的改进，因此希望我能够获得

00:07:35.830 --> 00:07:42.940
基准在本周末结束之前，与此同时，巴拿马

00:07:42.940 --> 00:07:47.950
组合了一个非常非常不错的测试套件，稍后将进行演示

00:07:47.950 --> 00:07:53.470
今晚，所以一旦可以了，我就准备好出发了，我们可以实际上

00:07:53.470 --> 00:08:02.110
对真实机器和AWS做一些基准测试，关于以下方面的任何问题

00:08:02.110 --> 00:08:11.070
他们好吧亚历克斯，你知道你的名字

00:08:12.440 --> 00:08:18.020
可以肯定，所以我一直在尝试加快异步速度，就像添加一个

00:08:18.020 --> 00:08:26.510
迭代器给约瑟夫，您在矿山上的最佳公关，也是一个很大的大公关，我

00:08:26.510 --> 00:08:29.390
分解成一堆小象牙，这样小象牙将被合并

00:08:29.390 --> 00:08:34.510
基于基础是费率和添加代理集成商lon

00:08:34.510 --> 00:08:40.760
就像约瑟夫已经通过了测试，但是界面测试电话

00:08:40.760 --> 00:08:48.890
通过，因为它需要一个新版本的HTTP客户端，该客户端随后依赖于某些客户端

00:08:48.890 --> 00:08:55.250
其他需要合并但需要更新的内容，因此

00:08:55.250 --> 00:09:01.190
开玩笑，就像ipfs CTL模块一样，这是如何进行测试的，

00:09:01.190 --> 00:09:06.320
拆卸恶魔，因此它用于运行测试工作，因此已移植到

00:09:06.320 --> 00:09:12.500
加速迭代器，并且有一个针对嫉妒的ipfs的出色PR，可以拉动它

00:09:12.500 --> 00:09:20.120
但在Windows上却失败了，因为Windows基本上就像一堆

00:09:20.120 --> 00:09:23.420
需要完成的杰出工作，我觉得

00:09:23.420 --> 00:09:29.180
只丢掉艾伦的所有笑声是很糟糕的，因为他是唯一的人类，

00:09:29.180 --> 00:09:35.240
只有两只手可以快速打字，是的，我要尝试在南方

00:09:35.240 --> 00:09:39.830
令人讨厌，因为我打算去ipfs添加性能

00:09:39.830 --> 00:09:44.150
改善，但我只是想可以离开该州的贸易基地

00:09:44.150 --> 00:09:47.420
这是因为我们已经备份了所有内容，并且变得越来越难

00:09:47.420 --> 00:10:02.090
是很棒的事情，所以您知道你们希望我能对您有所帮助

00:10:02.090 --> 00:10:06.580
我有两只手，但他们不做那些事

00:10:14.420 --> 00:10:18.650
现在称为史蒂文·乔纳森（Steven Jonathan）

00:10:22.440 --> 00:10:41.220
迈克尔再次想告诉我们您所从事的工作

00:10:41.220 --> 00:10:45.370
可以肯定-我们拉起那只狗有点咬

00:10:45.370 --> 00:10:48.490
尽管我不想打扰您的整个工作，但本节已完成

00:10:48.490 --> 00:10:53.410
好吧，我想我应该给它一个快速的更新

00:10:53.410 --> 00:10:57.790
我想抱歉，史蒂文花了我一秒钟的时间来解析您的实际意思

00:10:57.790 --> 00:11:02.430
这就是为什么要长时间停顿的原因感谢您的莫莉填写

00:11:02.430 --> 00:11:08.290
所以在这里，我将提供与上周相同的快速操作

00:11:08.290 --> 00:11:13.030
在所有这些方面的进步，我们总是有一堆小东西，例如获得回报或

00:11:13.030 --> 00:11:16.990
无论是复古的商品，还是我要浏览的所有旧复古文件，

00:11:16.990 --> 00:11:24.640
确保这些击球手和我都有，所以在本周，让我们看看我

00:11:24.640 --> 00:11:28.150
认为这是有问题的，好了，我们的包裹经理好了，我们的

00:11:28.150 --> 00:11:31.120
事情如此接近，莫莉（Molly）我看到了您关于得分的记录，所以我们会得到

00:11:31.120 --> 00:11:37.930
这个星期，也许没有人情愿去做，但是更新

00:11:37.930 --> 00:11:42.430
自述文件和其他文档，说明我们所做的工作包括

00:11:42.430 --> 00:11:45.580
我们在本季度之前所做的事情，使这一点更加清晰，因为

00:11:45.580 --> 00:11:52.680
从本季度开始到

00:11:52.680 --> 00:11:57.160
轮到您知道，回购已不再只是一种研究，尽管

00:11:57.160 --> 00:12:01.030
我们还有其他事情在进行，所以请确保它已更新并

00:12:01.030 --> 00:12:02.940
人们可以清楚地知道我们在做什么

00:12:02.940 --> 00:12:07.420
是的，所以我在计算机上开始了一些工作，但我会在

00:12:07.420 --> 00:12:15.640
希望很快我的淋巴结不会发疯，好吗

00:12:15.640 --> 00:12:21.430
对我的问题或使我感到困惑的事情，您希望我继续前进

00:12:21.430 --> 00:12:24.030
我的待办事项清单

00:12:25.860 --> 00:12:27.920
你

00:12:30.800 --> 00:12:32.860
你

00:12:34.670 --> 00:12:39.510
然后莫莉，我不知道你是否有什么事情可以更新团队或喜欢

00:12:39.510 --> 00:12:46.040
您说我们可以将其传递给迈克尔，他可以与他人分享他的最新动态

00:12:46.720 --> 00:12:51.339
是的，我想让我们帮助迈克尔，我没有任何压力

00:12:51.339 --> 00:12:56.490
最终，它变得美丽嗨，迈克尔，你需要什么

00:12:59.700 --> 00:13:04.900
你吃肉了对不起对不起，我在那儿迷路了，iPad Windows umm

00:13:04.900 --> 00:13:11.370
是的，我应该与文档共享我的屏幕，以确保不是迈克尔吗

00:13:15.660 --> 00:13:20.920
我们应该是一个出现的窗口，但是我的屏幕共享中断了

00:13:20.920 --> 00:13:27.970
知道所以好吧，是的，是的，iOS，是的，让我抓住一个

00:13:27.970 --> 00:13:33.670
链接，我想我实际上确实先打开了链接共享，我应该这样做

00:13:33.670 --> 00:13:41.170
无论如何，哦，莫莉，有一件事情是你想要的，是的，我刚刚打开了哦

00:13:41.170 --> 00:13:47.740
在那里，我们行得很行，所以今年已经很久了

00:13:47.740 --> 00:13:52.390
是现在有一个很大的迁移，这将不得不

00:13:52.390 --> 00:13:56.920
发生在JavaScript生态系统中，所以大约有一百万个模块，然后

00:13:56.920 --> 00:14:04.330
下午只有很多，现在有一个针对浏览器的模块标准，

00:14:04.330 --> 00:14:07.330
人们长期以来一直在使用此模块标准进行引用-取消引用

00:14:07.330 --> 00:14:12.460
通过编译器花费的时间，因此保持它有点复杂

00:14:12.460 --> 00:14:16.089
就人而言，像这样的头实际上就像是一个相当新的事物

00:14:16.089 --> 00:14:19.720
在浏览器中本机使用它并编写与本机一起使用的模块

00:14:19.720 --> 00:14:24.100
出一个已编译的工具链，但这始终是

00:14:24.100 --> 00:14:27.760
您知道标准是使浏览器拥有一个本机模块系统，该系统可以

00:14:27.760 --> 00:14:33.160
如果您尝试使用它，则不需要额外的工具。

00:14:33.160 --> 00:14:38.800
今天，您最终陷入了一个巨大的盒子，在那里您实际上什么都无法使用

00:14:38.800 --> 00:14:43.450
从他那里得到的，包括所有引用的东西，例如新模块标准中的

00:14:43.450 --> 00:14:46.810
因为所有这些都假定您正在通过编译的工具链运行它

00:14:46.810 --> 00:14:50.740
它实际上破坏了尝试在浏览器中本地使用它的功能，

00:14:50.740 --> 00:14:58.360
有趣的是，这种形式提供了一个有趣的机会

00:14:58.360 --> 00:15:01.930
需要新的注册表和新的软件包管理流程

00:15:01.930 --> 00:15:08.290
如果您做对的话，模块样式就可以打开包注册表

00:15:08.290 --> 00:15:12.640
无需安装步骤即可创建曾经创建的每个模块

00:15:12.640 --> 00:15:16.630
无需像某种软件包管理步骤，就可以依靠

00:15:16.630 --> 00:15:19.570
从本质上讲，它可能就像它可用的那一刻一样可用

00:15:19.570 --> 00:15:23.079
发布的流程与任何JavaScript软件包的流程都非常不同

00:15:23.079 --> 00:15:27.459
经理现在有可能是他，因为那里很小

00:15:27.459 --> 00:15:32.500
选择，但我的意思是我认为TM中的东西现在有选择地公开零

00:15:32.500 --> 00:15:37.209
实际上在这种环境下可以正常工作，构建起来并不费力

00:15:37.209 --> 00:15:41.200
一个新的注册表，因为它具有如此不同的流程，并且因为您

00:15:41.200 --> 00:15:43.750
知道实际上你会遇到兼容性中断

00:15:43.750 --> 00:15:49.390
我在这里做了一些实验，叫做bundle sync，

00:15:49.390 --> 00:15:54.160
想法是，如果我们像使用某些ipfs技术那样被抛弃，但不是全部

00:15:54.160 --> 00:15:59.230
在我的PFS中，我们可以将Ravin编码成块，然后像这样移动

00:15:59.230 --> 00:16:04.300
捆绑包的零件列表，而不是将JavaScript捆绑包加载到

00:16:04.300 --> 00:16:08.170
浏览器这就像是一种古老的烷基链方式，我所要做的事情之一

00:16:08.170 --> 00:16:12.760
注意到我们堆栈中的故障是从您开始的那一刻起

00:16:12.760 --> 00:16:17.860
通过压缩机拉宾运行的东西只是不得到demin是不好的

00:16:17.860 --> 00:16:21.310
为了获得ram足够的重复数据删除，您必须

00:16:21.310 --> 00:16:25.720
像降低块大小，然后这意味着

00:16:25.720 --> 00:16:28.690
数据实际上非常大，因为您有很长的哈希表

00:16:28.690 --> 00:16:32.560
因为有很多小零件，然后它本身并不能证明其合理性

00:16:32.560 --> 00:16:36.040
这个新模块标准的神奇之处在于，就像没人

00:16:36.040 --> 00:16:39.480
压缩和缩小这些模块，就像它们只是在浏览器中加载标签页一样

00:16:39.480 --> 00:16:43.420
因此我们可以真正有效地包含它们，这表明了很多

00:16:43.420 --> 00:16:47.860
我们在使用此模块标准时遇到的新的位置优势是

00:16:47.860 --> 00:16:53.500
就像所有这些明显的性能问题一样

00:16:53.500 --> 00:16:56.920
模块系统的倡导者和浏览器供应商都说像

00:16:56.920 --> 00:17:00.640
人们可以解决这个问题，就像他们一直说的那样

00:17:00.640 --> 00:17:04.030
会找出如何在传输层上有效解决此问题的方法

00:17:04.030 --> 00:17:08.410
认为就像一些非常花哨的服务器端事物将开始使用HTTP

00:17:08.410 --> 00:17:13.150
 2并进行推送以预取所有这些模块，而没人

00:17:13.150 --> 00:17:16.660
实际上建立了这个，但是就像我看过演示那样展示它一样

00:17:16.660 --> 00:17:23.110
不能很好地工作，但是我就像没有人真正喜欢做得很好

00:17:23.110 --> 00:17:28.280
我们之间可以做的事情有所不同，因此我们可以解决

00:17:28.280 --> 00:17:32.180
性能问题，但实际上是在客户端

00:17:32.180 --> 00:17:37.160
我们有效地拥有本地服务的服务工作者，例如IP FS本机商店

00:17:37.160 --> 00:17:40.430
我会觉得这与我所有的剧院是如何分离的

00:17:40.430 --> 00:17:45.020
很快，但是就像在serviceworker中的NTFS数据存储中一样

00:17:45.020 --> 00:17:49.460
下拉所有这些模块并进行所有快速浸入，并完成所有

00:17:49.460 --> 00:17:52.790
预取，这样就可以解决这些性能问题，您将获得

00:17:52.790 --> 00:17:56.720
真正有效的重复数据删除，您可以获得我们没有的东西

00:17:56.720 --> 00:18:00.350
现在，所有内容都可以在网络上找到，就像后台更新一样，因此当您更新

00:18:00.350 --> 00:18:03.290
应用程序，我们可以在后台获取所有这些资产，而

00:18:03.290 --> 00:18:06.350
应用程序正在运行，并且在您加载时正在运行一些服务程序

00:18:06.350 --> 00:18:10.310
新应用程序的代码就在那里，因此可以解决很多问题

00:18:10.310 --> 00:18:15.850
像是常见的性能问题，我正在使用很多技术

00:18:15.850 --> 00:18:20.420
关键路径中会影响页面加载的所有内容都必须删除

00:18:20.420 --> 00:18:25.250
脱离中央服务，因此即使我们像UNIX的防御系统一样使用

00:18:25.250 --> 00:18:28.220
有点像是在引擎盖下，我们需要点对点

00:18:28.220 --> 00:18:33.260
协议非常快速，因为任何可以增加页面的内容

00:18:33.260 --> 00:18:37.460
加载时间就像您注意到的用户性能问题一样，但是一旦我们有了

00:18:37.460 --> 00:18:41.630
最初的代码，就像我们从冷启动中有效加载的代码一样，

00:18:41.630 --> 00:18:45.560
可以为那些在该网络和所有想法中加载的文件提供服务

00:18:45.560 --> 00:18:49.190
我认为随着时间的流逝，更新基础架构中的这一点可能会结束

00:18:49.190 --> 00:18:53.540
像他的数据迷一样，是大多数实际转移的人，

00:18:53.540 --> 00:18:57.380
实际上可以住在ftfs网络中，因为这些都不会导致

00:18:57.380 --> 00:19:02.870
明显的用户滞后，如果对我们来说，这对我们来说是一个非常有趣的机会

00:19:02.870 --> 00:19:07.100
我想走一点，这是一个未开发的项目，我们知道

00:19:07.100 --> 00:19:11.060
空间将急剧扩大，即使我们

00:19:11.060 --> 00:19:14.300
不像某些巨大的市场份额，我认为我们最终会暴露出

00:19:14.300 --> 00:19:18.710
很多开发人员都在开发我们一直在构建的原始模型，但是，那是

00:19:18.710 --> 00:19:22.850
我落入这个想法并试图在这里写下来的想法有点像

00:19:22.850 --> 00:19:26.960
很多技术细节方面的背景知识，例如为什么不使用NPM

00:19:26.960 --> 00:19:31.100
只是会很容易地倒入这个，然后我试图简洁地写出来，但是我

00:19:31.100 --> 00:19:35.350
确保人们每秒都会有一些细节问题

00:19:37.020 --> 00:19:47.220
来自米歇尔，因为你看不见我，因为我是我的其中一件作品

00:19:47.220 --> 00:19:50.130
试图说这个季度我们一直在戳一些

00:19:50.130 --> 00:19:55.410
导致其他问题的ipfs核心性能问题

00:19:55.410 --> 00:20:00.300
与其他包裹经理一起工作是不是知道

00:20:00.300 --> 00:20:03.210
回合本质上是不同的，或者如果在我看来我们会有相同的

00:20:03.210 --> 00:20:07.530
性能问题，无论如何我们都需要解决这些问题，我不确定我会怎么做

00:20:07.530 --> 00:20:14.730
如果这是一条不同的道路，或者是那种道路，您是否走了不同的道路？

00:20:14.730 --> 00:20:19.320
同样的事情，下个季度的变化将比这更多

00:20:19.320 --> 00:20:26.429
一季度，所以我需要一些单元52来处理一些复杂的问题

00:20:26.429 --> 00:20:30.750
一点点地融入法典，这确实需要您成为

00:20:30.750 --> 00:20:35.520
表演者，我正在以任何方式开发新配件，并且喜欢计划

00:20:35.520 --> 00:20:38.340
在本季度末具有JavaScript版本，这有点像

00:20:38.340 --> 00:20:43.230
我们根据任何其他工作开展工作的主要前提

00:20:43.230 --> 00:20:48.450
性能正常的JSI PFS肯定会移植，但是这些都没有使用

00:20:48.450 --> 00:20:54.240
像go idea这样的go基础设施随时随地都可以

00:20:54.240 --> 00:20:57.270
会直接翻译过来，但不是那样会浪费在

00:20:57.270 --> 00:21:01.710
全部，然后我认为其他软件包经理正在处理的一些问题

00:21:01.710 --> 00:21:07.320
与我们在这里处理的问题可能不一样我不喜欢

00:21:07.320 --> 00:21:12.090
并不是所有这些优先事项都那么深入，但肯定是任何绩效工作

00:21:12.090 --> 00:21:14.520
或另一端可能会添加到各层的功能

00:21:14.520 --> 00:21:19.820
更好地选择，显然所有ricci感兴趣的工作都会把它倒过来

00:21:25.730 --> 00:21:28.310
好吧，如果没有人，他们的手，但我

00:21:28.310 --> 00:21:38.840
要看看是否有人看起来像迪安（Dean）亲手举的，是的，只是我不是

00:21:38.840 --> 00:21:43.790
100％确定II掌握了这里发生的一切，就像澄清了一点一样

00:21:43.790 --> 00:21:54.470
有点想法基本上只是让您的浏览器像fetchin

00:21:54.470 --> 00:21:59.030
只是为您缓存更新，我们的缓存就像基于它们的块一样为您缓存

00:21:59.030 --> 00:22:07.490
像TLDR那样的哈希而不是yeah，所以会发生什么

00:22:07.490 --> 00:22:11.750
是导入中的so基本上就像浏览器中的模块导入

00:22:11.750 --> 00:22:18.440
变成了基本类似于HD get调用的HTTP提取，我们可以在其中拦截

00:22:18.440 --> 00:22:22.340
服务人员，然后将其转变为您所知道的

00:22:22.340 --> 00:22:28.040
像针文件实例一样有效地调用MF。

00:22:28.040 --> 00:22:32.150
本地缓存，所以它像有效地使用ipfs应该只说

00:22:32.150 --> 00:22:37.010
对于这个伯爵空间，所有这些文件都将来自想法fess，因为

00:22:37.010 --> 00:22:40.550
我们知道所有这些都喜欢，因为我们拥有这个发布点，我们知道

00:22:40.550 --> 00:22:44.390
他们都是被而不是被分割的，而所有这些我们都知道

00:22:44.390 --> 00:22:48.110
实际上，将通过所有这些哈希进行非常有效的分块

00:22:48.110 --> 00:22:53.480
可以接受的文件，并且由于我们拥有发布点，因此我们可以执行以下操作

00:22:53.480 --> 00:22:58.850
当模块发布时，请查看导入图，然后查看是否有人

00:22:58.850 --> 00:23:03.110
做一个冷启动，我们可以问一下，我们基本上可以说喜欢做某一种

00:23:03.110 --> 00:23:06.830
在那个导入图上掌握样式请求，所以只要把所有的东西交给我

00:23:06.830 --> 00:23:10.340
你知道，如果我没有整个文件的缓存，那我就需要

00:23:10.340 --> 00:23:14.780
是所有ES和倡导者一直在说的事情

00:23:14.780 --> 00:23:17.840
建立没有人都没有的想法，他们全都把它想像成一个

00:23:17.840 --> 00:23:28.160
服务器端推送，而不是像这样更高级的推送-好的

00:23:28.160 --> 00:23:31.149
是的，我想我只是想喜欢

00:23:31.149 --> 00:23:37.270
关于人们是否正在尝试解决这个问题的一点点，我承认我

00:23:37.270 --> 00:23:44.590
杀死交易，他们只是会像他们所说的那样依赖

00:23:44.590 --> 00:23:50.679
就像已签名的已签名资产一样，只有现金已签名的资产并获得

00:23:50.679 --> 00:23:58.770
就像很多好处一样，工作量不大

00:23:58.830 --> 00:24:06.130
您的意思是什么，因为我的意思是如果这个想法就像我必须

00:24:06.130 --> 00:24:10.779
取东西，我将通过HTTP从某个地方取东西，然后我将拥有

00:24:10.779 --> 00:24:15.730
我将对内容进行哈希处理，所以我知道它们在各种情况下都是相同的

00:24:15.730 --> 00:24:23.409
不同的网站，只要我需要一个模块，即使没有IP LD和

00:24:23.409 --> 00:24:29.470
您仍然可以得到多种格式，就像标准遗忘一样

00:24:29.470 --> 00:24:40.480
就像没有webpack一样忘记像散列对象一样，这是您在谈论网络

00:24:40.480 --> 00:24:46.419
包装是的，我说的是，是像资产一样的资产

00:24:46.419 --> 00:24:51.700
就像散列的少尉，是的，​​这是一个不同的标准，

00:24:51.700 --> 00:24:58.090
目前处于停滞状态，因此像Google一样被开发

00:24:58.090 --> 00:25:04.450
采取他们在EMP中所做的事情的方式，并将其转变为他们想要为P做的事情

00:25:04.450 --> 00:25:08.770
并将其转变为更通用的网络标准，但如果呢？

00:25:08.770 --> 00:25:13.570
实际上，它所做的是它使用SSL证书只是对一堆签名

00:25:13.570 --> 00:25:19.029
单个HTTP资产，然后将其打包到一个标准捆绑包中，以便

00:25:19.029 --> 00:25:23.679
在文件级别为您提供HTTP级别的资源缓存，而在文件级别却没有

00:25:23.679 --> 00:25:26.890
在文件中进行重复数据删除，就像我们在鸡中说唱一样

00:25:26.890 --> 00:25:32.440
因此，我们仍然需要对性能进行一定程度的升级

00:25:32.440 --> 00:25:37.179
像我们一样利用网页包装，如果

00:25:37.179 --> 00:25:41.919
如果我们在那儿有服务订单，我们已经可以像您知道的那样得到

00:25:41.919 --> 00:25:46.330
整个资产树，甚至在其中

00:25:46.330 --> 00:25:49.480
资产树，我们有视频应用程序，我不会，我不明白为什么我们会以失败告终

00:25:49.480 --> 00:25:52.390
用我的包装，就像我说的那样，该标准实际上已经停顿了，因为

00:25:52.390 --> 00:25:57.970
嗯，Mozilla原则上反对它，所以我实际上不

00:25:57.970 --> 00:26:01.990
认为这会发生在任何地方，迪特里希（Dietrich）有点

00:26:01.990 --> 00:26:07.080
我认为更多地参与其中，而我认为吉姆技术也参与其中

00:26:15.419 --> 00:26:19.090
好吧，米歇尔（Michelle）的问题是包装经理的最大卖点是什么

00:26:19.090 --> 00:26:23.860
维护者，如果是消费者，那么对消费者最大的好处就是

00:26:23.860 --> 00:26:28.029
他们不必像没有任何使用报价一样取消报价的包管理器

00:26:28.029 --> 00:26:32.169
将其拉下并运行到我的已编译链式步骤中，就像从字面上看

00:26:32.169 --> 00:26:37.269
II刚开始使用模块，我可以在整个行业中使用任何东西，因此

00:26:37.269 --> 00:26:41.470
这实际上就像是Web开发人员提供的非常好得多的工作流程

00:26:41.470 --> 00:26:45.039
只要可以解决这些性能问题，就可以从他们的角度出发

00:26:45.039 --> 00:26:49.510
SM在那里，那么这对他们来说是一个巨大的好处，而且更容易

00:26:49.510 --> 00:26:55.659
我认为包装上的包装消费经验

00:26:55.659 --> 00:27:00.940
在这种情况下，我想是我们的经理维护人员

00:27:00.940 --> 00:27:04.000
维护者沙皇当然是一个受众，尽管像软件包维护者那样

00:27:04.000 --> 00:27:07.360
人们发布软件包，我的意思是从字面上看对他们的好处是

00:27:07.360 --> 00:27:12.850
你知道任何人现在都很容易使用他们的包裹

00:27:12.850 --> 00:27:15.669
在这样的新生态系统中，激励机制略有不同

00:27:15.669 --> 00:27:18.940
比起长期的贷款体系，我想

00:27:18.940 --> 00:27:22.510
许多人都在使用一些像较新技术这样的新事物

00:27:22.510 --> 00:27:25.809
出现的实际上是想要的人，例如对

00:27:25.809 --> 00:27:30.820
绿色领域空间，并希望在该空间中发布第一个软件包，例如

00:27:30.820 --> 00:27:34.029
就像我认为您认识的第一个喜欢您的人一样会上网

00:27:34.029 --> 00:27:38.049
以这种方式构建框架，您知道的样式将使您知道一些要点，或者

00:27:38.049 --> 00:27:41.500
无论如何，这吸引了很多人，我们在早期的node.js中看到了这一点

00:27:41.500 --> 00:27:45.549
也是几天，因为我们也没有包裹，每个人都必须露面

00:27:45.549 --> 00:27:48.940
然后写所有的第一件事，然后像某些类型的人一样写曲目

00:27:48.940 --> 00:27:54.309
但我认为随着时间的流逝，好处确实在于，这对我来说是一种方式

00:27:54.309 --> 00:27:57.850
将我的作品发布到一个全球性的生态系统

00:27:57.850 --> 00:28:12.660
全世界的每个浏览器用户都可以立即访问，是的，我确实没有

00:28:12.660 --> 00:28:16.920
弄清楚这将是一件事情，直到我开始尝试实际使用

00:28:16.920 --> 00:28:22.180
是的，我本机在浏览器中，很快意识到我无法

00:28:22.180 --> 00:28:27.750
自行使用NPM中的任何东西

00:28:27.750 --> 00:28:32.080
就像是的，您现在正在从头开始运行所有自己的依赖项，因为

00:28:32.080 --> 00:28:36.970
没有像新样式那样的软件包管理器覆盖

00:28:36.970 --> 00:28:48.160
打包了一些资源完整性，是的，这肯定有一个

00:28:48.160 --> 00:28:55.500
与我们为自己设定的目标相反

00:28:55.500 --> 00:29:01.060
拥有我们将要使用的大型软件包管理器基础架构

00:29:01.060 --> 00:29:05.740
然后必须在

00:29:05.740 --> 00:29:11.560
集中式注册表组件，我有点像蜘蛛绒般的感觉

00:29:11.560 --> 00:29:15.700
实际上比夫妇的子弹还要花很多功夫

00:29:15.700 --> 00:29:20.380
似乎在本次演讲中，并且网关实际上将最终结束

00:29:20.380 --> 00:29:26.620
像我们继续进行下去一样进行投资，甚至

00:29:26.620 --> 00:29:33.850
适度的摄取继续支持它，并使其成为良好的体验

00:29:33.850 --> 00:29:39.520
人而不是烧掉他们可能是很大的努力，因此

00:29:39.520 --> 00:29:46.290
应该像我猜想的事情的另一面是对的

00:29:46.290 --> 00:29:54.520
所以我知道您在尝试发短信，而聊天实际上只是将其发送到

00:29:54.520 --> 00:29:57.850
院长，但那是在院长对不起之前，我会在稍后再讲到

00:29:57.850 --> 00:30:05.890
回应安德鲁，所以我当时已经在领事馆工作了一些

00:30:05.890 --> 00:30:09.220
做bundle thang实验，因为我当时想

00:30:09.220 --> 00:30:12.039
很好，这已经在CD端了，甚至

00:30:12.039 --> 00:30:17.769
聪明的一面也就像拥有少量现金，而且少了很多

00:30:17.769 --> 00:30:20.950
运行基础架构，因为您没有放置我们不管理的服务器

00:30:20.950 --> 00:30:25.570
所有这些东西就像自动化一样，当然也是可行的

00:30:25.570 --> 00:30:31.299
就像我们可以使用云字母订单来完成所有这些工作，绝对是您必须要做的

00:30:31.299 --> 00:30:35.740
减少您将要使用的编解码器和哈希的数量，但是

00:30:35.740 --> 00:30:39.100
因为我们拥有它的发布方，所以我们可以确保我们不会像

00:30:39.100 --> 00:30:47.499
只是采取任意喜欢的块，但这并不意味着有

00:30:47.499 --> 00:30:51.580
没什么要管理的，而且没有潜在的成本中心，所以

00:30:51.580 --> 00:30:56.860
例如，例如，我正在使用俱乐部的我们的关键价值商店，那就是

00:30:56.860 --> 00:31:01.720
非常快而且非常好，您知道它也有2 Meg的限制，所以

00:31:01.720 --> 00:31:06.690
就像真的真的很适合我们的堆栈，嗯，但是

00:31:06.690 --> 00:31:10.809
问题之一是，我不知道我的成本结构是什么

00:31:10.809 --> 00:31:14.049
看起来随着时间的流逝，如果我们真的想迁移到

00:31:14.049 --> 00:31:17.080
不同的存储结构，然后仅将云用于工作人员

00:31:17.080 --> 00:31:21.100
作为计算机的计算层，它非常便宜，您知道

00:31:21.100 --> 00:31:26.649
可以与其他服务产品相提并论，即使它具有全部优势，是的，我

00:31:26.649 --> 00:31:30.820
认为可以以尽量减少我们的工作量的方式来构建它，但是我

00:31:30.820 --> 00:31:34.509
不知道它的构建方式可以将我们的成本降到最低

00:31:34.509 --> 00:31:38.820
无限期地，所以我们想寻找降低成本的机会，例如

00:31:38.820 --> 00:31:43.480
也许与勒夫勒（Leffler）合作，然后说“嘿”

00:31:43.480 --> 00:31:46.539
与我们共同赞助并托管类似的基础架构

00:31:46.539 --> 00:31:50.799
我认为确实可以为我们提供帮助，但是，我对此的担心要少得多

00:31:50.799 --> 00:31:53.919
基础架构维护方面，因为我们可以通过这种方式进行构建，但是我

00:31:53.919 --> 00:32:02.019
我仍然担心基础设施成本，所以安德鲁如果这样输入

00:32:02.019 --> 00:32:06.369
会变成我的皮卡，所以皮卡很棒，我爱他们，很多我不喜欢

00:32:06.369 --> 00:32:09.039
不要以为我会在精神上没有去过这个地方

00:32:09.039 --> 00:32:14.259
进入pika之前，但是pika有点在两个注册表上

00:32:14.259 --> 00:32:19.240
和运输，所以pika试图找到一个可以排序的NPM模块

00:32:19.240 --> 00:32:23.860
进行如何编译步骤的工作，就像

00:32:23.860 --> 00:32:28.720
最小的设置，然后他们对传输不执行任何操作

00:32:28.720 --> 00:32:33.010
层，所以我之前谈到的所有性能问题都像

00:32:33.010 --> 00:32:37.900
每个文件基本上都是一次新的往返，但这仍然是一个问题

00:32:37.900 --> 00:32:42.460
与异食癖，他们他们是我不认为他们甚至真的在努力

00:32:42.460 --> 00:32:45.340
我认为他们实际上在看如何改善其他一些

00:32:45.340 --> 00:32:49.809
分开体验，所以我认为，如果我们做了足够有趣的事情，

00:32:49.809 --> 00:32:54.820
他们最终会因为喜欢使用我们的东西或与我们合并或像我一样

00:32:54.820 --> 00:32:57.130
没有去那里，最终我在那里没有很多合作

00:32:57.130 --> 00:33:00.150
他们最终会竞争

00:33:03.240 --> 00:33:08.710
是的，我是说我不是没有说过有关Cloud Flair的事情

00:33:08.710 --> 00:33:11.320
我要么认为像那里可能实际上就有一个真正的机会

00:33:11.320 --> 00:33:16.270
我们与他们合作，他们是他们真正在寻找自己想要的东西

00:33:16.270 --> 00:33:20.020
如果所有新的JavaScript开发人员都为他们的基础架构而努力

00:33:20.020 --> 00:33:26.080
他们肯定会喜欢他们已经在使用node.js基础

00:33:26.080 --> 00:33:30.820
它们作为CDN，用于所有非estar球的所有人，并且他们提供了

00:33:30.820 --> 00:33:34.720
免费使用了多年，就像他们以前在开源项目中所做的一样

00:33:34.720 --> 00:33:38.290
他们真的很喜欢它，他们也喜欢爱我们的技术栈并拥有

00:33:38.290 --> 00:33:41.830
我做了很多与我有关的事情，所以这不是不可想象的

00:33:41.830 --> 00:33:51.700
我们与他们合作，所以Michelle嘿，是的，我想有机会阅读

00:33:51.700 --> 00:33:56.740
您的文档完整，请稍加思考，但我担心我们已经花了

00:33:56.740 --> 00:34:01.809
去年花了很多时间，所以我想或要花两年时间

00:34:01.809 --> 00:34:05.679
整洁的你知道未来的样子的例子，而我们还没有

00:34:05.679 --> 00:34:10.270
有机会解决了核心性能问题，并进行了ipfs等

00:34:10.270 --> 00:34:14.230
像一般技术一样在阻止，所以我担心如果

00:34:14.230 --> 00:34:19.840
我们加进去的时候一般不会在团队中有更多的人，我给我们

00:34:19.840 --> 00:34:25.780
像帮助管理它一样，它会分散精力去做像改进我们这样的核心工作

00:34:25.780 --> 00:34:30.520
我们真正需要做的技术，以便不仅仅是

00:34:30.520 --> 00:34:34.030
您在谈论迈克尔的人们人们对新事物感到兴奋

00:34:34.030 --> 00:34:36.310
我想使用它的东西，我们实际上可以

00:34:36.310 --> 00:34:41.650
为人们解决了一些问题，但我绝对想看看

00:34:41.650 --> 00:34:47.740
停靠，所以你到了那里，听听其他人怎么说

00:34:47.740 --> 00:34:53.050
就资源而言，即使我们全力以赴，这也不会拖延任何人的步伐

00:34:53.050 --> 00:34:58.450
之所以加入它，是因为实际上所有工作都是使用JavaScript进行的，包括

00:34:58.450 --> 00:35:04.240
工人的东西，但我的意思是您仍然可以看到它在这里产生了巨大的影响，

00:35:04.240 --> 00:35:08.440
并不是说我们没有相同的需求和增长需求

00:35:08.440 --> 00:35:12.790
通常在另一侧，所以它肯定仍然像我一样适用

00:35:12.790 --> 00:35:17.590
就像最重要的部分说的那样，如果我要构建这个

00:35:17.590 --> 00:35:22.960
无论如何，在这个角落，所以会有一些有意义的进展，所以

00:35:22.960 --> 00:35:25.930
我们有一段时间想想一下，然后炖一下

00:35:25.930 --> 00:35:29.890
在我们需要考虑对它或您进行优先级分配或资源配置之前

00:35:29.890 --> 00:35:33.760
知道的很少，你知道把其他东西从盘子里拿走还是从我们的手里拿走

00:35:33.760 --> 00:35:38.770
优先级列表，所以您知道我会继续插拔它，也许

00:35:38.770 --> 00:35:44.020
得到一个演示碗的东西，然后在那一点上你知道它是否是东西

00:35:44.020 --> 00:35:46.450
我们觉得自己有投资的余地，我们可能会改变一些

00:35:46.450 --> 00:35:50.350
资源，但我不认为这需要摆脱任何东西

00:35:50.350 --> 00:35:53.380
我们目前正在研究中，我不认为这真的

00:35:53.380 --> 00:36:07.420
在这个阶段就可以得到它，谢谢，我只想说这真的很酷

00:36:07.420 --> 00:36:12.610
你知道这很高兴听到你喜欢探索的东西

00:36:12.610 --> 00:36:18.730
这是一个非常雄心勃勃的方向，我喜欢这个主意

00:36:18.730 --> 00:36:24.070
比目前的工作效率高得多的事情，所以我

00:36:24.070 --> 00:36:27.790
绝对值得在某种程度上追求某个地方，至少可以看到

00:36:27.790 --> 00:36:35.440
有我的练习能力，是的，是的，我想我应该是

00:36:35.440 --> 00:36:39.250
会很有趣，我对人们没有做的事情感到失望

00:36:39.250 --> 00:36:47.530
3sm传输层上还有更多东西，因为像

00:36:47.530 --> 00:36:51.490
mitad就其本身而言存在大量的性能问题，并且没有人

00:36:51.490 --> 00:36:56.710
改变这一点真的很努力，我认为这只是其中的原因之一

00:36:56.710 --> 00:37:01.810
每个人都被卡在编译模块的流程中，因为

00:37:01.810 --> 00:37:05.020
每个人都在编译模块，如果他们不能真正获得很多好处

00:37:05.020 --> 00:37:09.010
脱离这个新的本机系统，但是一旦您开始使用本机模块

00:37:09.010 --> 00:37:13.000
在浏览器中，它就像是一个非常不错的工作流程

00:37:13.000 --> 00:37:17.710
希望您能全力以赴，是的，我想还有一些

00:37:17.710 --> 00:37:20.980
新的浏览器标准对我们来说会更好

00:37:20.980 --> 00:37:25.990
导入地图标准，可能会使某些预加载发生，例如

00:37:25.990 --> 00:37:29.050
甚至在安装服务人员之前就已经开始了

00:37:29.050 --> 00:37:31.930
这样，事情就会像在Web平台中一样不断发展

00:37:31.930 --> 00:37:38.110
一个方向一致，甚至可以改善这个想法的方向，所以在

00:37:38.110 --> 00:37:41.380
就像我看不到有人真正在解决这个问题一样

00:37:41.380 --> 00:37:45.670
勤奋地工作，所以这不是我们需要改变我们正在做的所有事情，

00:37:45.670 --> 00:37:49.630
继续下去，就像我们可以继续弄乱它一样

00:37:49.630 --> 00:37:55.000
是的，我想我的下一个问题是嗯，您是否认为这是某件事

00:37:55.000 --> 00:37:58.860
我们可以让人们兴奋到足以为我们而努力

00:37:58.860 --> 00:38:06.010
意味着它需要工作，然后才需要工作，是的，我认为

00:38:06.010 --> 00:38:09.010
人们可以实际使用，然后我想是的，我认为很多人都可以帮上忙

00:38:09.010 --> 00:38:13.240
嗯，就像它的某些部分一样，我不担心要做很多事情

00:38:13.240 --> 00:38:17.320
像您知道的那样进行开发，使您知道的命令行有很多

00:38:17.320 --> 00:38:20.530
诸如人之类的很酷的功能将填补这一部分，因为我没有实现这一目标

00:38:20.530 --> 00:38:23.860
我更担心的是，例如让我们进行基本的发布，

00:38:23.860 --> 00:38:27.820
消耗量下降，使基础设施正常运转

00:38:27.820 --> 00:38:34.960
容易缩放的地方，是的，所以有一些关于战车和

00:38:34.960 --> 00:38:40.060
熵，所以我实际上已经与艾萨克（Isaac）谈论过很多关于坦克的事情，因为

00:38:40.060 --> 00:38:46.660
我们仍然挂出了几个月的时间，所以其中一件事情将会变得很沉重

00:38:46.660 --> 00:38:53.950
并在此过渡过程中付出的代价是，您使用任何

00:38:53.950 --> 00:38:58.540
这些新样式模块之一中NPM现有的数百万个模块

00:38:58.540 --> 00:39:03.349
您现在不能本地使用该模块，因为其部分原因

00:39:03.349 --> 00:39:09.349
Deb树现在包含了这个东西，实际上需要一个编译步骤，因此

00:39:09.349 --> 00:39:14.270
这更多的是生态系统问题，实际上与问题非常相似

00:39:14.270 --> 00:39:18.770
就像您知道的那样，Python多年来一直在尝试采用新的Python

00:39:18.770 --> 00:39:22.849
并发模式，即它们具有如此庞大的模块生态系统，

00:39:22.849 --> 00:39:26.839
使用阻塞式I / O，然后当您尝试使用非阻塞式I / O时，您会感到自己

00:39:26.839 --> 00:39:30.200
现在在这个角落，您可以使用其中一个喜欢的系统来运行系统

00:39:30.200 --> 00:39:36.740
破坏了您的全部服务，因此就像他们将拥有非常相似的服务

00:39:36.740 --> 00:39:41.330
问题变得像现有的神明生态系统与

00:39:41.330 --> 00:39:47.420
就像热带的本地系统一样，它是建立在内容障碍之上的

00:39:47.420 --> 00:39:53.900
就像我的意思是，在某个时候我们可以使更多人进入熵，但我不会

00:39:53.900 --> 00:39:57.320
由于各种原因，我对该项目抱有很大的信心，例如我不认为

00:39:57.320 --> 00:40:02.359
那真的会去任何地方，就像你知道他们有更多的力量，如果他们

00:40:02.359 --> 00:40:06.380
如果他们这样做，我的意思是说他们对

00:40:06.380 --> 00:40:12.920
维护者，他们不是我会选择这样做的人，就像他们不是

00:40:12.920 --> 00:40:17.599
擅长于建立社区或与其他人一起支持

00:40:17.599 --> 00:40:27.230
生态系统，但是是的，我不知道，是的，我是说我在

00:40:27.230 --> 00:40:33.770
他们是非常聪明的工程师，但是我不喜欢这很难

00:40:33.770 --> 00:40:40.310
出于其他原因看到npm生态系统中的伤心欲绝

00:40:40.310 --> 00:40:46.700
像从字面上只是脱机或完全崩溃一样失败

00:40:46.700 --> 00:40:50.900
知道并且喜欢我见过人们尝试替换，就像您知道的那样Ruby pack Avengers

00:40:50.900 --> 00:40:55.010
 Python软件包管理器，并且经常做得更好

00:40:55.010 --> 00:40:58.250
像这样的功能和东西，到了一天结束时，它们就变成了

00:40:58.250 --> 00:41:00.740
凹痕我的意思是我们看到了一点

00:41:00.740 --> 00:41:06.680
纱线权利，就像您知道他们受益于最大的一样

00:41:06.680 --> 00:41:10.040
像在工作中一样，在世界各地工作的大错特错中建立框架

00:41:10.040 --> 00:41:12.670
他们的东西，并真正炒作他们，

00:41:12.670 --> 00:41:17.710
嗯，他们仍然像您所了解的那样，在整体上并不是一个很大的因素

00:41:17.710 --> 00:41:24.549
生态系统，我想就像这里的转变，如果你想

00:41:24.549 --> 00:41:27.400
关于新的程序包管理或JavaScript，必须有一些东西

00:41:27.400 --> 00:41:31.690
更根本的是，这将推动人们朝这个方向发展，我认为

00:41:31.690 --> 00:41:36.280
这就是现在仅在本机模块中启用的本机模块体验

00:41:36.280 --> 00:41:40.569
就像我们一直在使用浏览器中的模块那样的浏览器超出了

00:41:40.569 --> 00:41:43.359
大概十年了，所以人们并没有真正注意到

00:41:43.359 --> 00:41:48.220
这是不同的，并且您在执行操作时平台已经追赶了多少

00:41:48.220 --> 00:41:59.200
事情是自然的，嗯，哦，迪诺，是的，瑞安，是的，我和

00:41:59.200 --> 00:42:04.540
Ryan关于Dino的很多东西，实际上，您知道它有一些有趣的想法吗？

00:42:04.540 --> 00:42:10.480
包管理以及有关模块应如何工作的信息

00:42:10.480 --> 00:42:14.410
有趣的是，我认为，就像浏览器中的大多数内容一样，

00:42:14.410 --> 00:42:19.930
在浏览器中工作，您现在生活在约束之中并假设

00:42:19.930 --> 00:42:25.299
很多可能会起作用的东西，根本无法使用

00:42:25.299 --> 00:42:29.799
今天的浏览器，或者需要您像整个编译步骤一样再次知道

00:42:29.799 --> 00:42:33.940
或诸如此类的东西并不是所有有趣的约束之一

00:42:33.940 --> 00:42:38.470
浏览器就像导入一样，将变成HP调用，例如

00:42:38.470 --> 00:42:42.640
这将永远发生，并严重限制了您可以做的事情

00:42:42.640 --> 00:42:46.329
钩子和模块系统中的突变方面，没有像

00:42:46.329 --> 00:42:49.809
实际的钩子基础结构，您可以通过一种方式将名称转换为

00:42:49.809 --> 00:42:54.700
一天结束时要有珍珠空间，就像您想做些别的事情一样

00:42:54.700 --> 00:42:59.950
如何获取该模块，您将无法在

00:42:59.950 --> 00:43:03.460
import语句，您必须在服务工作的HTTP层上执行此操作

00:43:03.460 --> 00:43:11.500
嗯，或者在后端，就像良好的浏览器约束令人难以置信

00:43:11.500 --> 00:43:15.280
复杂，并且它们是乘法的，就像当您将一个层叠在一起时一样

00:43:15.280 --> 00:43:21.010
您就像在这里继续将自己陷于一个越来越多的角落，

00:43:21.010 --> 00:43:24.640
现有的软件包管理器都不像主题或NPM或真正的

00:43:24.640 --> 00:43:29.610
任何人都试图生活在

00:43:29.610 --> 00:43:34.440
浏览器的约束全部来自某些节点背景，例如

00:43:34.440 --> 00:43:40.260
老实说我，所以您已经习惯了这种难以置信的灵活环境

00:43:40.260 --> 00:43:44.040
在这里您可以做任何事情，然后您就可以知道将任何东西扔给

00:43:44.040 --> 00:43:48.030
查询，并使其在浏览器中运行，如果看起来很正常的话

00:43:48.030 --> 00:43:58.290
不同的是，在这个本地人的空间里生活是的，是的，是的，

00:43:58.290 --> 00:44:01.440
评论xhr，当人们意识到这样的事情我可以做的时候

00:44:01.440 --> 00:44:05.130
那是非常重要的事情，因为像人们一样，它意识到

00:44:05.130 --> 00:44:08.700
如果事情没事，当微软停止转储浏览器时，您认为正确吗？

00:44:08.700 --> 00:44:11.820
他们确实取得了这一市场份额，就像字面上唯一的新事物一样

00:44:11.820 --> 00:44:17.160
使用xhr和类似的东西在Web开发中发生大约四到五年

00:44:17.160 --> 00:44:21.570
上面的大量黑客攻击，然后您就知道密苏拉州必须占据足够的市场份额

00:44:21.570 --> 00:44:30.810
远离微软，我认为实际上就像Web平台中的新事物一样

00:44:30.810 --> 00:44:38.760
我完成了还有什么我不介意谈论经验的事情了

00:44:38.760 --> 00:44:44.550
借助扬声器浏览器，保罗正在构建更大的浏览器，

00:44:44.550 --> 00:44:49.680
但是一年前尝试使用yes模块进行实验，这仅是为了

00:44:49.680 --> 00:44:53.580
同样的原因，例如，如果您不从

00:44:53.580 --> 00:44:58.560
等式在分散的用例和所有其他方面都非常有效

00:44:58.560 --> 00:45:04.290
到处都可以得到现金，这实际上非常棒，也可以任命

00:45:04.290 --> 00:45:09.359
dot社区的另一个项目，该项目实际上在Ranger的ipfs上工作

00:45:09.359 --> 00:45:17.580
鲍勃（Bob）他似乎以2.0领先，在获得这份合同之前，他是

00:45:17.580 --> 00:45:21.270
在他的小项目中从事该项目的工作称为网络阅读和

00:45:21.270 --> 00:45:27.270
它允许您为nodejs运行某种非捆绑的yes模块，请同样

00:45:27.270 --> 00:45:32.670
在浏览器中使用的模块，是的，您可以像FS一样将它们放在

00:45:32.670 --> 00:45:39.880
加载它们到节点或爸爸，所以这使用编译器使它们

00:45:39.880 --> 00:45:47.050
运行与否我认为您只是在使用基本的模块

00:45:47.050 --> 00:45:55.090
首先为网络编写的，它是节点的加载器，我认为它们是加载器

00:45:55.090 --> 00:46:00.400
你知道这看起来有点像迪诺（Dino）所做的，但它正在使用一个

00:46:00.400 --> 00:46:08.560
知道爸爸或ipfs很有趣，所以我会深入研究，是的，所以他不是

00:46:08.560 --> 00:46:14.620
polyfill是的，我实际上是您参加在多伦多举行的会议我们的网络

00:46:14.620 --> 00:46:20.500
所以哦，我再次看到这很有趣，所以基本上他在做

00:46:20.500 --> 00:46:24.100
就像他为所有浏览器提供了大量的polyfills一样，以便您可以运行

00:46:24.100 --> 00:46:29.050
那里的大多数其他东西是的，然后我会看到，除非他正在使用节点

00:46:29.050 --> 00:46:36.640
12带有实验性模块标志，那么他可能正在向他们加载

00:46:36.640 --> 00:46:42.700
有趣的是，我也喜欢使用更大的浏览器

00:46:42.700 --> 00:46:48.970
我认为Paul在过去的一年中一直在写零捆绑，因此所有

00:46:48.970 --> 00:46:52.650
进入更大浏览器的新代码通常是用这种样式编写的

00:46:52.650 --> 00:46:58.930
使用模块，因此，如果您向下看一下此语法，这是一件很酷的事情

00:46:58.930 --> 00:47:04.810
从该URL和IP FS URL导入的方法，因此您可以在节点中执行此操作

00:47:04.810 --> 00:47:09.760
因为知道它内部有一个钩子基础结构

00:47:09.760 --> 00:47:12.850
新模块和标签，您将无法像它们一样在浏览器中进行操作

00:47:12.850 --> 00:47:16.960
变成HP岁的孩子，但是如果我们有服务人员安装了，您可以

00:47:16.960 --> 00:47:20.740
相反，只是有一个伯爵空间，就像FS的下划线一样，所以我

00:47:20.740 --> 00:47:24.670
只是想要那样，然后将所有这些都从ipfs网络中拉出

00:47:24.670 --> 00:47:29.410
请注意，因此您可以执行相同的操作，只是语法看起来像

00:47:29.410 --> 00:47:36.620
几乎没有什么不同，一旦您必须将其运行给网络工作者，是的，我有点

00:47:36.620 --> 00:47:42.080
在未来第2部分的底部，就像如果您有这个

00:47:42.080 --> 00:47:46.460
很多人在他们的应用程序中使用的服务工作者，您可以开始

00:47:46.460 --> 00:47:50.420
只需添加其他协议，您甚至不必真正污染

00:47:50.420 --> 00:47:53.900
捆绑包，您可以在人们要求时动态加载所有内容

00:47:53.900 --> 00:47:59.080
那些网络中的东西，你可以做一些很酷的东西

00:48:00.290 --> 00:48:03.890
好的，所以依赖关系图锁和捆绑程序的可重复性是

00:48:03.890 --> 00:48:08.090
是的，嗯，是的，我不是，我不想参与其中，因为它就像

00:48:08.090 --> 00:48:14.120
真的，它真的很书呆子，而且很早就详细了，但是有效，所以，因为

00:48:14.120 --> 00:48:18.440
这就像IPL是甲基-p图的注册表，所以呃Tildy

00:48:18.440 --> 00:48:22.190
图就像您知道每个程序包的每个名称一样，指向一些元数据的链接

00:48:22.190 --> 00:48:29.450
以及指向sq2目录的Unix中的链接，这意味着您知道

00:48:29.450 --> 00:48:33.260
内容中的内容，所有内容都正确散列，

00:48:33.260 --> 00:48:38.480
每次发布都被散列，因此如果您想做类似锁的操作

00:48:38.480 --> 00:48:44.390
例如，您确实可以轻松地生成um，例如整个哈希表的哈希值

00:48:44.390 --> 00:48:52.190
树，然后加载，然后专门加载该哈希，以便您像创建时一样锁定

00:48:52.190 --> 00:48:56.750
一旦我们处于那种顶峰，那种锁定基础设施真的很容易

00:48:56.750 --> 00:49:01.760
行业是在此内容地址树之上的，还有一些

00:49:01.760 --> 00:49:06.800
有趣的东西，所以这些模块的问题之一是

00:49:06.800 --> 00:49:12.980
如果您要从其他位置加载模块并进行更新，则可以

00:49:12.980 --> 00:49:17.930
可能会得到旧模块之一和新模块之一，就像

00:49:17.930 --> 00:49:20.630
如果您只是加载一堆脚本标签，而您确实做了同样的事情

00:49:20.630 --> 00:49:23.930
极大地推动了基础设施的发展，您可能会陷入奇怪的境地

00:49:23.930 --> 00:49:27.620
人们获得新网站一半的资源，另一半则获得一半的资源的情况

00:49:27.620 --> 00:49:30.890
那些旧的，除非你真的很复杂

00:49:30.890 --> 00:49:37.430
基础设施来解决这个问题，但是在此系统中，注册表只有一个哈希

00:49:37.430 --> 00:49:43.730
对于根节点，是权益图，所以在应用程序加载时，我们

00:49:43.730 --> 00:49:48.050
可以实际锁定注册表状态并知道每个依赖项

00:49:48.050 --> 00:49:50.420
就像所有依赖解决方案一样

00:49:50.420 --> 00:49:55.369
正确的事情，即使您没有明确地将其正确锁定，然后再一次

00:49:55.369 --> 00:49:59.750
发生更新时，我们可以进行很多此类更新，然后从

00:49:59.750 --> 00:50:04.760
像是从相同状态再次加载应用程序，这样我们就可以开始生产了

00:50:04.760 --> 00:50:10.309
比起您所知道的更容易的阻止状态，它提供了更好的保证

00:50:10.309 --> 00:50:13.069
一旦我们有了事情，注册表的内容就解决了

00:50:13.069 --> 00:50:16.730
从本质上讲，是的，您可以做很多非常非常好的事情

00:50:16.730 --> 00:50:21.079
在锁定所有依赖项方面，我在同一列火车上与众不同

00:50:21.079 --> 00:50:35.210
和所有的东西，虽然我有一个手都拥有所有的功能

00:50:35.210 --> 00:50:40.519
主题略有不同我们只是我已经订阅了ipfs笔记

00:50:40.519 --> 00:50:48.260
或什么东西，并注意到最近三天左右的音符出现了一些动静

00:50:48.260 --> 00:50:57.859
关于IP FSA Nix集成的信息，这很好奇人们是否看过它

00:50:57.859 --> 00:51:04.009
趋向于最终转向更多的思想思考练习

00:51:04.009 --> 00:51:11.210
围绕区块链层并将其用作这些层之上的一层

00:51:11.210 --> 00:51:18.769
各种各样的事情，但也许有一个有用的有用的讨论可以继续

00:51:18.769 --> 00:51:23.809
跳下来看看下一面是否有当前运动

00:51:23.809 --> 00:51:27.920
如果他们需要我们提供某些特别的东西，似乎有些

00:51:27.920 --> 00:51:32.769
积极感兴趣的人，也许值得与他们联系

00:52:09.030 --> 00:52:13.440
现在使用下一个十多年

00:52:14.560 --> 00:52:20.470
看起来很自然，就像因为所有散列的um保持不变

00:52:20.470 --> 00:52:24.360
史蒂文在这里你要打电话吗

00:52:25.020 --> 00:52:30.640
是的，我要称呼他是关于新的CID格式的评论，

00:52:30.640 --> 00:52:34.900
只是为了看到ID混在一起，如果它们是为什么他为什么不能

00:52:34.900 --> 00:52:39.640
有一个是两个链接的块，然后如果可以的话转到该块

00:52:39.640 --> 00:52:46.000
没有，你不知道为什么他不想要Basu他只想指出

00:52:46.000 --> 00:52:54.490
源代码不想要删除代码或其他很棒的内容，您是对的，是的，我的意思是

00:52:54.490 --> 00:52:58.600
理想情况下，我们将使用sb2或类似的单位

00:52:58.600 --> 00:53:02.800
元数据，然后像二进制文件一样，最终也有了

00:53:02.800 --> 00:53:08.680
指出来源是的，不，这绝对不是我们想要的情况

00:53:08.680 --> 00:53:17.440
像这样的第二个CID并不是C 80指向内容的原因，因为您确实

00:53:17.440 --> 00:53:23.320
如果您有两个不一样的内容，就不会想要

00:53:23.320 --> 00:53:29.860
必然是可证明相关的，那么您想要在那里签名而不是哈希

00:53:29.860 --> 00:53:36.100
因为我毫无意义，对，你就像我不知道你是如何编译一个

00:53:36.100 --> 00:53:40.210
进入B，所以我不知道这两件事实际上是相同的还是

00:53:40.210 --> 00:53:44.920
很好，这两个成熟的大缺口确实提供了类似的功能

00:53:44.920 --> 00:53:48.760
正确的急流我不认为事情也是如此，我们就像是在试图

00:53:48.760 --> 00:53:54.010
具有可复制性，因此构建脚本会准确地告诉您，如果

00:53:54.010 --> 00:53:59.380
您会发现很多东西，但从理论上讲，您可以检查一下它，以及人们会想到的想法。

00:53:59.380 --> 00:54:02.770
检查一下，就像你得到的那样，你会问多方，好吧，这是什么

00:54:02.770 --> 00:54:07.960
这些东西比你还哈希，但是像这样诚实，在这种情况下，他应该

00:54:07.960 --> 00:54:13.540
就像指向，然后指向包含这两个对象的对象

00:54:13.540 --> 00:54:17.380
件信息，然后可能还有其他元数据，比如他

00:54:17.380 --> 00:54:26.260
不连续的洗牌，我想我更喜欢

00:54:26.260 --> 00:54:31.150
收集人们说是的事实的签名，实际上是

00:54:31.150 --> 00:54:35.620
之所以变成B，是因为我的想法是我将在没有实际使用B的情况下

00:54:35.620 --> 00:54:42.220
检查它是否大部分时间都来自我，我想您的来临时

00:54:42.220 --> 00:54:45.250
到软件包管理器，这就是当前的运行情况，就像您拥有一套

00:54:45.250 --> 00:54:53.550
每个R信任节点的数量，因此它实际上是一组激烈的构建者

00:54:53.550 --> 00:55:00.180
想想如果你喝醉了，你现在只相信一秒钟就可以了

00:55:00.180 --> 00:55:09.940
所以我们有一个关于Deepix Enix sp1添加文件元数据的问题

00:55:09.940 --> 00:55:13.900
好吧，它添加了像权限数据这样的文件，它现在已经全部结构化了

00:55:13.900 --> 00:55:19.360
我们是否应该像通用字符串字段那样添加，我们不说应该怎么做

00:55:19.360 --> 00:55:29.410
就像是，理想情况下，理想情况下，我们可以添加任意CID，但我们

00:55:29.410 --> 00:55:34.030
不要因为所有内容都键入到我们不想喜欢的地方

00:55:34.030 --> 00:55:38.770
为此用例添加一个字段，我们是否要在其中添加一些内容，以便

00:55:38.770 --> 00:55:44.170
当人们进行黑客攻击时，他们并不像有史以来最糟糕的黑客攻击，而是从理论上讲

00:55:44.170 --> 00:55:49.360
我们可以添加到另一个对象的链接，然后使该另一个对象可见

00:55:49.360 --> 00:55:52.360
对于对象，您可以看到其中的每个人，也可以解释您想要的任何东西

00:55:52.360 --> 00:55:55.750
看看您想要什么，就像我们有一个元数据字段，它具有CID类型

00:55:55.750 --> 00:56:01.780
他们只是指出任何问题，这是我不认为我们可以做

00:56:01.780 --> 00:56:05.230
这是因为像这样的上下移动，然后您到处都有骇客

00:56:05.230 --> 00:56:08.230
假设所有来自文件的链接都指向块

00:56:08.230 --> 00:56:15.580
在文件中，因为它们很容易dag protobuf，这很奇怪

00:56:15.580 --> 00:56:20.500
这不是另一个原因之一，是的，嗯，我会

00:56:20.500 --> 00:56:24.820
around一下，看看也许我们能在我着陆之前做点什么

00:56:24.820 --> 00:56:30.100
那些和COBOL的变化很酷漂亮

00:56:30.100 --> 00:56:36.580
大家都选择合适的时机，因为正确的时间，所以请继续进行最后的对话

00:56:36.580 --> 00:56:39.850
你有十秒钟，你可以说些其他的话

00:56:39.850 --> 00:56:47.880
绑好了，下次再见，谢谢大家

00:56:51.660 --> 00:56:53.720
你

