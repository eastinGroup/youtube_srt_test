WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.920 --> 00:00:07.080
您好，欢迎来到包管理器，每周进行同步，我们还没有完成

00:00:07.080 --> 00:00:12.540
其中一段时间​​是因为我们一直在整理事物，所以这似乎

00:00:12.540 --> 00:00:19.590
像是个好时机，讨论我们应该如何处理这次会议以及那种

00:00:19.590 --> 00:00:25.980
我们应该关注的领域或我们应该具有的形式

00:00:25.980 --> 00:00:31.890
持续的基础上，我仍然认为进行公开通话是一个好主意，

00:00:31.890 --> 00:00:36.360
记录下来，可以很好地输出我们正在处理的内容

00:00:36.360 --> 00:00:45.539
我们ipfs和软件包经理，但也许这将是讨论该问题的好一周

00:00:45.539 --> 00:00:52.680
我们认为对社区输出有用的各种选择

00:00:52.680 --> 00:00:59.579
以及我们应该做的事情，然后看看被拥抱的狗

00:00:59.579 --> 00:01:09.510
沙发哦，不要担心我的狗现在不在这儿了

00:01:09.510 --> 00:01:17.100
人们会像每周一样做这件事，这就是我工作的地方

00:01:17.100 --> 00:01:20.130
在这周，这就是我下周要研究的内容，就像写下来一样

00:01:20.130 --> 00:01:29.130
之前有过那个会议，但是没有被记录或公开，就像

00:01:29.130 --> 00:01:38.369
让我们回顾一下Zen Hub，看看是否有人阻止了输出

00:01:38.369 --> 00:01:44.409
那不是完全不明显，我想是

00:01:44.409 --> 00:01:49.930
大多数情况下，就像与“进行中”列中的问题保持一致一样，

00:01:49.930 --> 00:01:55.140
如果您不打算继续前进，我想他们会积压

00:01:55.140 --> 00:02:01.720
米歇尔点头，那就是这是我们经历过的第一个，所以我

00:02:01.720 --> 00:02:08.080
想象他们会变得更有条理，或者变成我们认为最重要的东西

00:02:08.080 --> 00:02:13.150
当我们继续发展这种东西时很有用，但是是的，所以我们有

00:02:13.150 --> 00:02:18.849
sprint计划在此调用之前引用-取消引用，以便解释一下我猜

00:02:18.849 --> 00:02:24.209
我们所发生的事情的一点点

00:02:26.800 --> 00:02:32.640
我在这里知道，我将尝试解释在大量数据包丢失之间

00:02:32.640 --> 00:02:38.590
让我们看看进展如何，我想是你不知道，直到它开始，所以我会

00:02:38.590 --> 00:02:42.370
重复一切，我会重复多次，然后

00:02:42.370 --> 00:02:51.090
最终它将回到我们举行的ipfs团队周和ipfs训练营

00:02:51.090 --> 00:03:00.400
上个月至少在六月初，并且进行了一些重组

00:03:00.400 --> 00:03:07.180
ipfs项目中的团队和工作组的重点是

00:03:07.180 --> 00:03:14.800
我们要真正取得进展的关键领域的数量，其中之一是

00:03:14.800 --> 00:03:23.200
软件包管理器使用ipfs等支持软件包管理器，而不是

00:03:23.200 --> 00:03:27.820
只是成为一个特殊的兴趣小组进行研究，我们实际上现在有了一个真正的

00:03:27.820 --> 00:03:33.910
专注于改善ipfs不同部分的团队

00:03:33.910 --> 00:03:39.130
与包裹管理直接相关，在下个季度，我们将

00:03:39.130 --> 00:03:46.330
在一起我们的好，他们联系在一起，并在新的更新的自述文件中

00:03:46.330 --> 00:03:53.890
github上的软件包管理器存储库，我们将重点放在文件上

00:03:53.890 --> 00:04:02.860
基于系统的软件包管理器，主要是Linux系统发行版软件包管理器，但

00:04:02.860 --> 00:04:08.440
基本上也可以为您使用maven Sipan的任何软件包管理器

00:04:08.440 --> 00:04:15.120
可以使用我们的接收器制作镜像或备份，并可以将其放入

00:04:15.120 --> 00:04:24.190
目录基本上就像这样，为什么我们为什么要选择关注

00:04:24.190 --> 00:04:31.459
那是因为这是软件包管理器仓库中的一种

00:04:31.459 --> 00:04:37.429
一个不错的文件，介绍了当您失败时的不同级别的实现

00:04:37.429 --> 00:04:44.110
就文件系统而言，基于文件系统的软件包管理器是最简单的

00:04:44.110 --> 00:04:51.079
将所有内容放到ipfs上，因为所有内容都是基于文件的

00:04:51.079 --> 00:04:57.169
索引以及各个tarball都很好地包含在其中

00:04:57.169 --> 00:05:03.319
我认为是我实际上尚未与许多基于流程的对话的简单文件

00:05:03.319 --> 00:05:10.369
打包了许多维护者z'，但在为运营而设置时会遇到

00:05:10.369 --> 00:05:17.139
简单易用，可以轻松地使用以下命令进行复制和镜像

00:05:17.139 --> 00:05:25.009
传统的Linux工具，而无需构建额外的数据库或

00:05:25.009 --> 00:05:32.449
运行应用程序，您实际上可以使用HTTP服务器和rsync和

00:05:32.449 --> 00:05:38.869
ftp服务器，使许多人可以运行自己的软件包管理器镜像

00:05:38.869 --> 00:05:46.039
然后所有的东西都签名了，那真是太好了

00:05:46.039 --> 00:05:51.199
不必担心的是，所有签名都包含在以下文件中：

00:05:51.199 --> 00:05:56.989
在该软件包管理器中，因此我们可以获得对基于文件系统的全面支持

00:05:56.989 --> 00:06:05.029
软件包管理器，只需将目录放入ipfs中，然后

00:06:05.029 --> 00:06:14.839
能够使人们使用UNIX FS通过路径进行下载，然后每次

00:06:14.839 --> 00:06:17.179
该软件包管理器有更新

00:06:17.179 --> 00:06:22.489
该目录的根哈希将更改，并且需要广播该根哈希

00:06:22.489 --> 00:06:29.419
通过IP NS或更新DNS链接进行火警，但这种情况给了我们一个

00:06:29.419 --> 00:06:37.180
很好的小目标专注于我们，然后我们就可以做大

00:06:37.180 --> 00:06:41.979
影响他们，这也是我们对快速系统所做的所有改进

00:06:41.979 --> 00:06:45.639
基于基础的程序包管理器对其他类型的程序包管理器做出了贡献

00:06:45.639 --> 00:06:53.160
以及彼此之间也是如此，所以这是数据库事实或它们基于

00:06:53.160 --> 00:07:00.910
包管理器具有更高的复杂性，因为尝试将数据库放入其中

00:07:00.910 --> 00:07:06.389
ipfs或尝试使它像ipfs内部的数据库一样工作

00:07:06.389 --> 00:07:13.000
当涉及到对其命名的权限和授权时，它变得很棘手

00:07:13.000 --> 00:07:19.530
哦，你有疑问吗，对不起

00:07:20.130 --> 00:07:24.759
而在基于文件系统的软件包管理器中，您有一个集中的来源

00:07:24.759 --> 00:07:31.020
事实是，你通常吃谁拥有管理员权利的人说deb

00:07:31.020 --> 00:07:36.039
他们可以写到debian版本库的任何部分的版本库，它们很友好

00:07:36.039 --> 00:07:42.370
值得信赖，而许多基于数据库的软件包管理器

00:07:42.370 --> 00:07:47.560
看起来很好，我可以更改此数据库的这些行，也可以更改

00:07:47.560 --> 00:07:52.479
这些tarball，或者我可以从

00:07:52.479 --> 00:07:57.010
当您尝试放置所有数据库时，最终会变得非常复杂

00:07:57.010 --> 00:08:03.490
到ipfs上，但对于那些数据库包合并实际上存储

00:08:03.490 --> 00:08:08.409
在tarball中最终成为

00:08:08.409 --> 00:08:13.300
文件系统基本程序包页面，这就是我们摇摇欲坠的地方，就像

00:08:13.300 --> 00:08:17.889
首先，这似乎是一个不错的选择，然后一旦完成

00:08:17.889 --> 00:08:25.750
成功的话，我们可以继续研究如何支持

00:08:25.750 --> 00:08:30.400
文件系统基础版本工作之后，其他类型的程序包管理器

00:08:30.400 --> 00:08:40.300
很好地掩盖了为什么我们能很好地展示出来，然后像在里面一样

00:08:40.300 --> 00:08:46.779
在过去的几个月中，我们已经掌握了一些知识

00:08:46.779 --> 00:08:51.050
包管理者特殊兴趣小组的成员

00:08:51.050 --> 00:08:56.330
获取基于文件系统的程序包所涉及的挑战

00:08:56.330 --> 00:09:04.850
管理者对ipfs的性能导入性能进行更新

00:09:04.850 --> 00:09:10.940
然后使用不同的api和用户进行更新的挑战

00:09:10.940 --> 00:09:16.250
从维护者的角度进行此操作的经验，然后在翻转时

00:09:16.250 --> 00:09:22.930
方面是消费者具有性能和用户体验

00:09:22.930 --> 00:09:29.810
挑战以及我们在这方面形成了一些不可思议的想法，但我

00:09:29.810 --> 00:09:35.570
认为首先我们将重点放在维护者方面，因此设置

00:09:35.570 --> 00:09:40.760
镜子，然后能够定期更新这些镜子

00:09:40.760 --> 00:09:47.959
看起来相当大的东西，因此在应用程序存储库中赞它们的统计信息是

00:09:47.959 --> 00:09:55.430
单个文件中有50,000个目录中的近一百万个文件

00:09:55.430 --> 00:10:02.660
他们得到更新的根目录，也许每一次我认为它们是平均值

00:10:02.660 --> 00:10:09.740
如果您建议同步，则建议每4到6个小时之间一次

00:10:09.740 --> 00:10:15.079
最终成为主要对象，因此许多镜像设置看起来像

00:10:15.079 --> 00:10:21.290
他们喜欢的主要和次要的哦，尝试并尝试更新

00:10:21.290 --> 00:10:27.800
每天每隔24小时，其中有些就像哦，您可以同步

00:10:27.800 --> 00:10:33.860
如果您使用的是这种特殊类型的同步脚本，则每10分钟

00:10:33.860 --> 00:10:39.560
首先，您通常是上游源将推送到的镜像

00:10:39.560 --> 00:10:43.670
您的服务器，并通过SSH说，然后说，像哦，您应该有一件新的事情

00:10:43.670 --> 00:10:51.560
运行在一个水槽中，最终就像很小的差异，它们不是

00:10:51.560 --> 00:10:58.370
就像NPM一样频繁，因为NPM每次都看到一个新版本的软件包

00:10:58.370 --> 00:11:02.660
几秒钟，我们看到Erb大概每四个

00:11:02.660 --> 00:11:03.850
小时是

00:11:03.850 --> 00:11:10.449
因为目前提交差异大约需要四个小时，

00:11:10.449 --> 00:11:16.930
通过重新哈希每个文件，并检查是否已更改，方法是使用

00:11:16.930 --> 00:11:24.819
直截了当的ipfs add再次添加了整个东西Dominic一直在努力

00:11:24.819 --> 00:11:30.250
关于能够将ipfs挂载为文件系统的一些有趣的工作

00:11:30.250 --> 00:11:35.980
这将使我们能够直接链接到IP FS

00:11:35.980 --> 00:11:40.870
真的很酷，因为那时我们只需要重新整理具有

00:11:40.870 --> 00:11:46.569
进行了更改，并且可以直接与该程序包的现有工具一起使用

00:11:46.569 --> 00:11:51.759
使用经理维护而不是必须创建和维护特定的

00:11:51.759 --> 00:12:00.130
包管理工具，如果我们可以使用现有的UNIX工具，那么

00:12:00.130 --> 00:12:05.920
太棒了，这意味着我们可以依靠所有现有的知名品牌

00:12:05.920 --> 00:12:12.459
技术而不是必须成为维护者x'是的，莫莉我正在接受

00:12:12.459 --> 00:12:20.079
看看这个小组的提示树，我们注意到了，我注意到

00:12:20.079 --> 00:12:24.339
零好吧R这是基于系统的软件包管理器，应该可以

00:12:24.339 --> 00:12:28.509
大型卡车文件树，并从头开始将其导入到ipfs中

00:12:28.509 --> 00:12:34.810
合理的时间，然后进行更新，没有任何主动权

00:12:34.810 --> 00:12:41.170
或围绕它的指标，大概是因为之后的下一个

00:12:41.170 --> 00:12:45.310
定义了相关指标或其他指标，例如您

00:12:45.310 --> 00:12:50.110
刚刚描述的声音听起来像是一个主动性，就像没有在任何地方进行跟踪一样

00:12:50.110 --> 00:12:53.769
欧洲，我们很抱歉，我错过了第一部分

00:12:53.769 --> 00:12:59.620
但是米歇尔肯定听过，如果你想听，可以先听我说吗

00:12:59.620 --> 00:13:04.990
是的，全是零，这真的不好吗，阿里，我不知道把它放在哪里

00:13:04.990 --> 00:13:08.319
不仅如此，一旦我们开始分解东西，就像

00:13:08.319 --> 00:13:12.370
北极星之类的东西，然后是它下面的东西，就像这样

00:13:12.370 --> 00:13:21.250
这就是我们将如何解决那可以解决的药物，然后我的替代品

00:13:21.250 --> 00:13:27.220
反馈循环实际上是您的三个好方法之一，嘿，我们应该

00:13:27.220 --> 00:13:30.730
我们应该衡量一些重要的东西，我非常支持

00:13:30.730 --> 00:13:33.970
那是伟大的，就像研究和我们应该了解的东西

00:13:33.970 --> 00:13:37.360
有些事情，而我们应该做的一件事情，就是我们应该快乐，我们应该成为

00:13:37.360 --> 00:13:41.430
作为一个团队运作，所有这些都是伟大的事情，而实际上这些都不是。

00:13:41.430 --> 00:13:46.840
像其中许多这样，使ipfs使软件包管理器的使用体验很棒

00:13:46.840 --> 00:13:53.650
实际上，第二项工作是研究和改进用户

00:13:53.650 --> 00:14:02.560
经验，所以这不是我们绝对测试的研究，不是，不是

00:14:02.560 --> 00:14:08.080
说喜欢研究，喜欢和喜欢说改善研究和改善用户

00:14:08.080 --> 00:14:13.870
经验，但我正在研究的主要结果是

00:14:13.870 --> 00:14:22.360
倡议，以便我们进行研究和改进

00:14:22.360 --> 00:14:32.020
主动行动是我们要做的事情，我们绝对可以等待，我的意思是让我们

00:14:32.020 --> 00:14:39.040
改变我们想像的措辞，第二个问题全都解决了

00:14:39.040 --> 00:14:47.080
我们如何在用户体验中包括哪些痛点呢？

00:14:47.080 --> 00:14:53.740
速度，然后实际上希望能够提高速度，但是我们目前

00:14:53.740 --> 00:15:02.590
不完全确定除最终目标外，我们应采用哪种方法进行改进

00:15:02.590 --> 00:15:10.029
应该更快，人们应该玩得开心我也可以对我说

00:15:10.029 --> 00:15:13.779
有点像我们在一个有趣的地方，我知道我们在聊天

00:15:13.779 --> 00:15:19.480
在青少年的一周里，好词可能正在做很多测试，而Shipyard

00:15:19.480 --> 00:15:23.230
并可以说我们已经完成了所有这些工作，并且已经完成了十次pocs

00:15:23.230 --> 00:15:27.310
而且我们认为这是做到这一点的方法，但是我们不确定我们

00:15:27.310 --> 00:15:32.320
实际上可以将任何东西带入核心实现中，因为那不是

00:15:32.320 --> 00:15:36.700
反正就是我们，所以对我来说测试有点像POC，我们要

00:15:36.700 --> 00:15:42.150
去做这些事情，我们可能会想出如何做的事情，但是

00:15:42.150 --> 00:15:52.990
是的，就我个人而言，这就是我，我不知道我是否回答过，感觉也一样

00:15:52.990 --> 00:15:56.440
所以我从谈话中得到的理解来自团队周和

00:15:56.440 --> 00:15:59.770
该小组过去的讨论是，像核心协议改进一样，

00:15:59.770 --> 00:16:05.670
为了实现这些，安德鲁只是描述而已

00:16:05.670 --> 00:16:13.420
我们确实对下一件事有更多的针对性的理解

00:16:13.420 --> 00:16:16.750
认为需要发生的能力是否是我们认为需要的能力

00:16:16.750 --> 00:16:20.650
添加或这是否像对特定产品的性能改进

00:16:20.650 --> 00:16:28.450
领域，但通过阅读这些倡议，他们似乎并没有

00:16:28.450 --> 00:16:32.980
你知道的是，如果这些像是超高水平的，而这些指向像

00:16:32.980 --> 00:16:37.060
四个问题，就像在一件很酷的事情中在一件事情上做一件事情

00:16:37.060 --> 00:16:40.290
但是我认为它需要非常精确的指标来衡量我们

00:16:40.290 --> 00:16:46.180
就像嘿，我们要像这样，Threepio看到了所有已经存在的东西

00:16:46.180 --> 00:16:52.600
存在，喜欢让他们溃烂或减轻他们的烦恼

00:16:52.600 --> 00:16:54.940
或类似的东西，因为现在我只是觉得它将真的

00:16:54.940 --> 00:16:57.730
您很难衡量这些事情，是的，我们希望能到达那里

00:16:57.730 --> 00:17:01.150
重点是我们实际上还不知道改善意味着什么，

00:17:01.150 --> 00:17:04.120
这是本季度我们工作的一部分，我们不知道这是否意味着

00:17:04.120 --> 00:17:09.189
XYZ需要更快还是ABC新闻更快，我们不知道是否更快

00:17:09.189 --> 00:17:11.650
我们应该关注的东西，或者那边还有其他东西

00:17:11.650 --> 00:17:14.709
像广告API所做的事情很奇怪

00:17:14.709 --> 00:17:18.400
等等等等，这大概是你的经历，所以尽快

00:17:18.400 --> 00:17:26.320
我们拥有这些东西，我们一定会添加它，所以我认为我要做的工作

00:17:26.320 --> 00:17:33.120
排成本周重点的一种是生成一个排成一行的文档

00:17:33.120 --> 00:17:41.020
就像这个部分一样对不起

00:17:41.020 --> 00:17:46.030
互联网很糟糕，所以基本上就像这里的摘要

00:17:46.030 --> 00:17:53.020
过去三个月中基于的所有文件系统，包括所有

00:17:53.020 --> 00:17:59.410
已知的阻止者和已收集的现有指标进行分组

00:17:59.410 --> 00:18:07.060
进入需要研究的领域

00:18:07.060 --> 00:18:13.720
经历过的事情，然后像他们一样，他们将如何去

00:18:13.720 --> 00:18:17.860
关于被固定，他们甚至应该考虑甚至应该考虑

00:18:17.860 --> 00:18:22.890
只是被扔掉，因为这不是使用ipfs的正确方法

00:18:22.890 --> 00:18:32.370
那么我们已经拥有的指标（例如36个小时）可以从头开始制作ipfs广告

00:18:32.370 --> 00:18:42.310
对于应用程序存储库结果，因为像他这样的人之一，这是唯一的

00:18:42.310 --> 00:18:49.890
不加DHT的唯一方法

00:18:50.250 --> 00:18:56.159
基本上，该文档将成为以下四件事之一的先驱

00:18:56.159 --> 00:19:00.929
他们喜欢它，该文件结论处的输出基本上是

00:19:00.929 --> 00:19:07.140
将会像一种方式将ipfs挂载为文件系统并进行同步

00:19:07.140 --> 00:19:15.860
直接进入另一种方式是看当前

00:19:15.860 --> 00:19:22.470
通过CLI添加文件的多个选项，以及每个选项不起作用的方式

00:19:22.470 --> 00:19:29.520
像一些特别烦人的事情，然后表现我

00:19:29.520 --> 00:19:37.940
说ipfs广告，但实际上有正确的ipfs文件或其他内容

00:19:37.940 --> 00:19:45.240
就像那样，这就是工作的全部，一旦我们走得很好，我们就

00:19:45.240 --> 00:19:49.409
绝对不能使用此API，或者像我们认为的那样

00:19:49.409 --> 00:19:57.770
值得投资，但我认为结论将与他们的一致

00:19:57.770 --> 00:20:02.820
我们所拥有的东西，然后能够与包裹进行实际交谈

00:20:02.820 --> 00:20:07.020
经理维护者x'会告知我们我们将会做很多事情

00:20:07.020 --> 00:20:14.309
一旦我们有了对ipfs内部知识的了解的人员，便可以进行课程更正

00:20:14.309 --> 00:20:21.179
在我们已经产生的东西中加入了更多种类的东西

00:20:21.179 --> 00:20:26.610
从研究的角度出发，而不是从类似的知识角度出发，

00:20:26.610 --> 00:20:31.470
内部因素或我们认为我们可以实际交付并试图做到相当

00:20:31.470 --> 00:20:37.020
以迭代的方式解决问题，而不是试图

00:20:37.020 --> 00:20:42.650
推测太远，因为那是我发现

00:20:43.320 --> 00:20:49.380
定期指导，成为喜欢思考的有效方法

00:20:49.380 --> 00:20:57.290
最终用户将始终保持关注

00:20:57.290 --> 00:21:03.000
这就是为什么我们将关键结果作为维持该结果的原因

00:21:03.000 --> 00:21:08.490
就像成功一样，如果我们做对了，人们应该会

00:21:08.490 --> 00:21:14.820
开始反映事物，我们将能够喜欢它，但也许可以放一个

00:21:14.820 --> 00:21:21.720
说有X个镜子的关键度量是放货车的一种

00:21:21.720 --> 00:21:30.510
在马的前面，我听到你的声音，我想我就是那种

00:21:30.510 --> 00:21:34.770
我希望通过我们所做的工作可以证明这一点

00:21:34.770 --> 00:21:39.090
这些POC已经指出了一些真正的痛苦

00:21:39.090 --> 00:21:42.540
我们喜欢的地方哦，也许人们不想运行这些PLC的全部

00:21:42.540 --> 00:21:47.720
的时间，因为他们有一些很烦人的特征

00:21:47.720 --> 00:21:53.310
甚至到我们现有的POC都知道的时候

00:21:53.310 --> 00:21:58.410
像我们认为的那样，在合理的时间内以合理的开销运行

00:21:58.410 --> 00:22:03.240
很好地将人们指向这些事物，就像他们应该做的榜样一样

00:22:03.240 --> 00:22:10.800
模拟这样的事情，只是数据点就像到达一个地方

00:22:10.800 --> 00:22:15.360
您实际上可以测量此区域的关键结果，就像这样

00:22:15.360 --> 00:22:18.960
我完全同意，这就是我们应该针对的目标，我认为我们

00:22:18.960 --> 00:22:22.740
应该在其他地方旋转我只是认为这很难衡量，所以

00:22:22.740 --> 00:22:28.860
查看您可以使用的其他数据点以及您已经拥有的数据

00:22:28.860 --> 00:22:35.870
用来驱动工作并喂饱天底好吧，我们的可能真的很有用

00:22:35.900 --> 00:22:38.429
否则，您必须创建某种拉动机制

00:22:38.429 --> 00:22:43.889
对于所有软件包管理器存储库，请维护Ares并向他们询问这些

00:22:43.889 --> 00:22:47.519
问题，让他们做出回应，并让他们在之前和之后有一个增量

00:22:47.519 --> 00:22:52.710
之后，就像我们不会那样做，因为那是开销，我们有

00:22:52.710 --> 00:22:59.759
工程工作要做的是一点点的人是的，是的，我看不到我在哪里

00:22:59.759 --> 00:23:05.570
看看你要去哪里，我会思考一下

00:23:06.290 --> 00:23:11.360
我们如何做到这一点，我有点想像自己是

00:23:11.360 --> 00:23:15.200
维护者zazz好，我不确定这是否一定是个好主意，但

00:23:15.200 --> 00:23:19.460
肯定有点像哦，我可以一次又一次尝试它是我们的镜子，

00:23:19.460 --> 00:23:24.500
反复说我过得不好，它比

00:23:24.500 --> 00:23:32.300
上次，但仍然不尽如人意，我可以在合理的范围内设置镜子

00:23:32.300 --> 00:23:36.350
作为一个已经建立了镜子的人的时间之窗，也许你对

00:23:36.350 --> 00:23:40.220
像是应该花多长时间然后从那面镜子消费的时间是

00:23:40.220 --> 00:23:45.260
就像你知道的东西和从其他人那里消费一样好

00:23:45.260 --> 00:23:54.110
我已经跑过的镜子，我知道我们还可以，所以这真的是很好的反馈

00:23:54.110 --> 00:23:59.660
莫莉，我认为我们绝对应该考虑到这一点，并考虑如何

00:23:59.660 --> 00:24:04.790
使测量得到更多控制，而不是拥有

00:24:04.790 --> 00:24:13.450
有些松散的东西，看来我下周要做什么

00:24:13.450 --> 00:24:19.640
每周要求包装经理会提出一个主题，我

00:24:19.640 --> 00:24:24.980
可能会打开一个问题或将其放入我们本周要讨论的问题中

00:24:24.980 --> 00:24:31.460
如果有人想提出一个主题，则进行同步，然后再投入

00:24:31.460 --> 00:24:38.600
该问题也是如此，我们可以对我们如何做到这些做些迭代

00:24:38.600 --> 00:24:47.260
每周开会，并获得更多社区摘要或类似信息

00:24:47.260 --> 00:24:58.660
这些会议中有趣的信息领域，我们可以

00:24:58.930 --> 00:25:04.780
也许希望每周都能把我们的事情做好

00:25:04.780 --> 00:25:10.930
我认为我们即将进行的审查领域还有一个OPR会议即将结束

00:25:10.930 --> 00:25:15.910
周末的一周，我们可以跟进，希望我会有所改善

00:25:15.910 --> 00:25:21.670
在我们编织了不同组的ro对的展示之后，

00:25:21.670 --> 00:25:27.700
我们将记录星期四并确保它成功完成

00:25:27.700 --> 00:25:33.850
感谢大家的通知，我会把它们放在更少的你和她里，我们会见到你的

00:25:33.850 --> 00:25:36.240
下周

