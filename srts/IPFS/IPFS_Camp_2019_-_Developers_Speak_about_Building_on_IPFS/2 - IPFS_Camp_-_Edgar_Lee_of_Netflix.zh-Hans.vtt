WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:04.890
嗨，我叫埃德加（Edgar），我来自香港，目前在加利福尼亚州工作，

00:00:04.890 --> 00:00:10.530
 Netflix之前我也曾在docker工作过，所以我的重点是容器化

00:00:10.530 --> 00:00:15.150
Netflix项目的工作服工程工具和基础设施

00:00:15.150 --> 00:00:21.689
我正在研究的实际上是通过ipfs分布容器层，我们运行

00:00:21.689 --> 00:00:28.019
Netflix每周有多达300万个容器，所以您

00:00:28.019 --> 00:00:31.800
知道创新的容器分配非常重要，这就是我为什么

00:00:31.800 --> 00:00:36.930
认为ipfs有潜力改变私有基础设施的运作方式

00:00:36.930 --> 00:00:42.180
因为在用于分发的传统体系结构中，您有一台服务器，

00:00:42.180 --> 00:00:46.469
客户端，您可以按服务器的水平水平扩展

00:00:46.469 --> 00:00:51.270
顶部的保镖，并可能将其与内存数据库一起缓存，然后在需要时

00:00:51.270 --> 00:00:56.340
您可能想将内容镜像到跨区域的流量

00:00:56.340 --> 00:01:03.690
在不同地区，这一切都超出了ipfs的成本和复杂性

00:01:03.690 --> 00:01:10.380
可以用作CDN，因为我们实际上可以定义我们想要的内容

00:01:10.380 --> 00:01:15.900
从我们如何获得它，所以使用IP FS而不是从中获得相同的数据

00:01:15.900 --> 00:01:21.060
在世界各地，您都可以从邻居那里得到它，这是另一个有用的方面

00:01:21.060 --> 00:01:29.909
IPS提供的功能是将内容分成不同的块的方式以及

00:01:29.909 --> 00:01:36.240
您这样做确实可以取决于数据，例如，如果我们拆分

00:01:36.240 --> 00:01:41.610
容器层，如果我们在肮脏的边界上这样做，则更有可能

00:01:41.610 --> 00:01:45.930
文件之间的重复数据删除，如果我们之间有更多的重复

00:01:45.930 --> 00:01:50.700
文件，这意味着您不仅减少了存储需求量

00:01:50.700 --> 00:01:55.770
网络流量，您需要获取剩余数据，前提是您拥有

00:01:55.770 --> 00:02:02.610
重复的容器层已经很低了，因此总体吞吐量

00:02:02.610 --> 00:02:09.599
容器的分配将更高，甚至更多

00:02:09.599 --> 00:02:14.730
我们实际上可以将文件系统的元数据与

00:02:14.730 --> 00:02:22.970
文件的实际内容，因此我们可以实际安装使用

00:02:22.970 --> 00:02:30.950
清单文件系统元数据序列化并做一些简短形式的内容，然后

00:02:30.950 --> 00:02:38.849
通过分发，我们可以展示一个您可以进入的惰性文件系统

00:02:38.849 --> 00:02:42.299
遍历而不实际下载任何文件内容，并且

00:02:42.299 --> 00:02:48.659
然后根据需要执行容器操作，并且您需要某些可执行文件，

00:02:48.659 --> 00:02:52.349
您需要阅读的文件是通过相同的文件下载到该人的

00:02:52.349 --> 00:02:59.280
ipfs提供的Peter pure接口，因此有一篇名为slacker的论文

00:02:59.280 --> 00:03:03.510
调查了大约57种不同的集装箱应用程序，它们

00:03:03.510 --> 00:03:09.359
发现实际上只读取了6％的数据，因此对于10

00:03:09.359 --> 00:03:15.510
例如，千兆字节的映像，我们只需要大约60兆字节即可

00:03:15.510 --> 00:03:22.410
执行容器，我认为RIF最有趣的特征之一是

00:03:22.410 --> 00:03:28.459
能够通过许多不同的运输方式运作，这意味着

00:03:28.459 --> 00:03:33.629
您的日常用户是您不必使用互联网即可

00:03:33.629 --> 00:03:40.199
访问来自ipfs网络的内容，您可能正在访问自己的内容

00:03:40.199 --> 00:03:47.419
通过蓝牙通过红外线或其他任何形式的邻居

00:03:47.419 --> 00:03:52.889
互联网是一种可以访问互联网的方式来访问内容

00:03:52.889 --> 00:03:59.760
您想要的，但这不是唯一的，而且最重要的是，

00:03:59.760 --> 00:04:07.739
 ipfs的内置功能使查找具有以下功能的其他人变得异常容易

00:04:07.739 --> 00:04:12.060
通过所有可用的运输方式寻找的内容

00:04:12.060 --> 00:04:17.459
给你，所以你可能会在蓝牙Wi-Fi和更大的互联网上寻找

00:04:17.459 --> 00:04:22.470
同时，这使得分发内容更加有效

00:04:22.470 --> 00:04:30.690
以及更快地下载我认为用于视频的所有内容

00:04:30.690 --> 00:04:36.510
尤其是转移Netflix具有自己的超级超优化类型

00:04:36.510 --> 00:04:42.840
基础设施，所以我想象的ipfs和Netflix用例更多

00:04:42.840 --> 00:04:48.150
专为分发支持Netflix而不是

00:04:48.150 --> 00:04:53.460
视频传输本身，我们实际上将这些东西称为“开放式连接”

00:04:53.460 --> 00:04:58.170
是我们在您的互联网提供商向您提供服务的地方安装的硬件

00:04:58.170 --> 00:05:04.290
互联网Netflix正在为您提供视频内容，所以我认为

00:05:04.290 --> 00:05:08.850
我已经有点虚拟机无法满足特定的利基市场

00:05:08.850 --> 00:05:13.080
构想未来的一种BitTorrent甚至Peter pure协议

00:05:13.080 --> 00:05:18.840
可以共享构建的缓存，以便如果我开始在云中构建项目

00:05:18.840 --> 00:05:25.710
我的比例高达50％，而一位同事希望加入并进行相同的编译

00:05:25.710 --> 00:05:30.390
项目，假设他们正在建立，他们应该直接跳到50％

00:05:30.390 --> 00:05:38.370
相同的git仓库和相同的git commit，所以这个问题看起来像它

00:05:38.370 --> 00:05:43.290
从理论上讲应该像四年前一样是四年

00:05:43.290 --> 00:05:49.620
Peter的纯连接性协议并不是他们的市场眼球

00:05:49.620 --> 00:05:55.830
今天是ipfs，所以我相信docker对下一个做了什么

00:05:55.830 --> 00:06:01.260
名称命名空间功能是ipfs为对等网络所做的工作

00:06:01.260 --> 00:06:05.760
甚至将其带给非技术用户

00:06:05.760 --> 00:06:09.050
应用程序开发人员

