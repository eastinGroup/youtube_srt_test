WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.530 --> 00:00:05.940
如果您访问github.com Lippe TV或希望成为榜样的孩子，然后再做同样的事情

00:00:05.940 --> 00:00:22.650
因为当我们爆发时，因为我们只会经历其中的一些，但是

00:00:22.650 --> 00:00:25.260
您可以随意将其放下并进行下一周的操作，因为我们已经进行了交谈

00:00:25.260 --> 00:00:29.300
对你来说，我认为你最喜欢的那个

00:00:29.300 --> 00:00:33.450
只是因为您将要经历很多概念，所以这里的工作是

00:00:33.450 --> 00:00:42.930
大部分都在浏览器中，所以当每个人都这样做时，我们将介绍一些

00:00:42.930 --> 00:00:49.980
基本概念并开始与事物交谈，所以什么是p2p，所以我们得到了

00:00:49.980 --> 00:00:55.920
于28年前的91年建立了万维网，并建立了网络和

00:00:55.920 --> 00:01:00.149
如果您要进行分布式或

00:01:00.149 --> 00:01:05.460
对等网络，这很辛苦，所以最终我们想要

00:01:05.460 --> 00:01:10.290
do能够创建一个库，我们可以在其中提取我们所需要的位

00:01:10.290 --> 00:01:14.700
需要针对我们的应用程序使用特定的用例，然后专注于实际

00:01:14.700 --> 00:01:18.810
编写我们的应用程序代码无需担心网络影响，因此

00:01:18.810 --> 00:01:21.630
这也是我们正在尝试实现的目标，因为我们正在尝试简化这一过程

00:01:21.630 --> 00:01:24.900
只需将其拉入网络层，然后将其命名为“ day”

00:01:24.900 --> 00:01:31.770
 limpia Pete是我得到最佳利用的网络层，最终它只是

00:01:31.770 --> 00:01:35.790
一个可组合的而不是模块化的网络图书馆员，所以如果你要鞭打我成为

00:01:35.790 --> 00:01:39.990
核心通常没有很多逻辑，所有逻辑都有

00:01:39.990 --> 00:01:45.030
这些不同的项目，但您可以将它们捆绑在一起，那么我们是什么

00:01:45.030 --> 00:01:50.310
今天构建，所以这是我们正在构建聊天应用程序的浏览器版本

00:01:50.310 --> 00:01:56.159
课程结束时，我们将使用pub / sub进行聊天

00:01:56.159 --> 00:02:01.020
整个可用客户的邮件，我们有一个基本的聊天指标

00:02:01.020 --> 00:02:05.520
被幼崽们传递过去，以及与其他同伴相处时，你可以

00:02:05.520 --> 00:02:10.890
也不久在这张幻灯片上，像耳朵一样

00:02:10.890 --> 00:02:27.290
加入网络最坏的情况会走

00:02:31.550 --> 00:02:37.980
好吧，所以另一个渠道为什么我们甚至要建立一个基本的聊天应用程序也要建立一个聊天

00:02:37.980 --> 00:02:42.000
让我们来解决建筑方面的许多问题

00:02:42.000 --> 00:02:47.160
仅连接到网络的分布式系统我们如何连接shion的系统

00:02:47.160 --> 00:02:49.740
我们可以确保我们的聊天数据是安全的

00:02:49.740 --> 00:02:53.130
我们如何创建自己的聊天板错误这是很多事情

00:02:53.130 --> 00:02:56.010
人们在建立PPP时会挂断电话

00:02:56.010 --> 00:03:02.640
协议，如果我们要经历无数次使用，我们将如何使用连接

00:03:02.640 --> 00:03:08.730
不同的协议dhts pub / sub直接消息传递标识我们不想

00:03:08.730 --> 00:03:12.420
每次我们创建泪水时，我们都不想多个

00:03:12.420 --> 00:03:15.930
与同伴的联系，那么我们如何重用我们所拥有的注意力

00:03:15.930 --> 00:03:18.959
谈论发现眼泪不是很好

00:03:18.959 --> 00:03:22.950
如果我们不能证明网络上的眼泪是合理的，然后我们认为很有趣

00:03:22.950 --> 00:03:26.370
同行，如果他们是Navin，我们如何与他们联系，所以与浏览器交谈

00:03:26.370 --> 00:03:32.220
与家庭网络上的人交谈哦，我一直在玩，我得到最好的

00:03:32.220 --> 00:03:36.209
他们可能在家中这样做，而大多数房屋都落后于Nats，所以

00:03:36.209 --> 00:03:42.390
我们能否拨通那些希望能够在协议上处理更复杂数据的人

00:03:42.390 --> 00:03:46.320
拥有一个可以执行许多不同任务的协议，而不仅仅是一个特定的协议

00:03:46.320 --> 00:03:51.799
所以我们如何使数据在那里变得更复杂，然后我们还将介绍

00:03:51.799 --> 00:03:56.430
通过pub / sub进行广播和门控，以及如何通过

00:03:56.430 --> 00:04:03.330
博士所以柠檬很多，所以我们要做的第一件事

00:04:03.330 --> 00:04:08.370
为了连接需要出现我们的运输工具，所以我们使用Lippe

00:04:08.370 --> 00:04:14.250
在Lib PP中进行传输以进行实际的接口数据交换，因此我进行传输

00:04:14.250 --> 00:04:17.070
将有两个组成部分他们将有一个拨号组成部分

00:04:17.070 --> 00:04:19.049
出站连接和侦听组件

00:04:19.049 --> 00:04:23.370
在所有运输方式上需要注意的重要事项，我们将能够听到

00:04:23.370 --> 00:04:29.550
对于浏览器来说很常见，但是我们确实有该规则的例外，我们

00:04:29.550 --> 00:04:33.479
实际上今天还没有运行，所以我正在此IP地址上运行我的计算机

00:04:33.479 --> 00:04:39.389
一个引导节点，该节点也正在运行Web RTC信令服务器

00:04:39.389 --> 00:04:44.159
除了信号服务器和rondalee服务器之外，还有一点点

00:04:44.159 --> 00:04:49.770
阿拉使我们能够使用浏览器注释在该服务器上进行监听并使用

00:04:49.770 --> 00:04:56.130
作为切入点，所以我们有点克服了歌曲兄弟的匹配，所以

00:04:56.130 --> 00:05:01.440
让我们一些运输，这只是我们拥有的运输的一个子集

00:05:01.440 --> 00:05:06.690
可用的是一些更常见的TCP，我们可以看到它

00:05:06.690 --> 00:05:11.400
TCP在各种实现中的可用性在

00:05:11.400 --> 00:05:17.310
不幸的是，浏览器还没有，但是它确实可以正常工作，并且不会生锈，因此

00:05:17.310 --> 00:05:21.419
一个不错的选择，尤其是在运行服务器的情况下，WebSockets可以在所有服务器上正常运行

00:05:21.419 --> 00:05:27.539
他们中的一个，因此查看WebRTC绝对是一种选择

00:05:27.539 --> 00:05:31.740
实施然后li行离开它就在那里了，那很好，因为

00:05:31.740 --> 00:05:36.960
网络RTC具有一些内置的Nats刷毛技术，因此一旦获得

00:05:36.960 --> 00:05:41.729
有助于网络连接，然后快速实施

00:05:41.729 --> 00:05:48.060
进行中，但他们可能尚未完成，所以我们不会看到很多

00:05:48.060 --> 00:05:51.029
其他东西的注释，直到完成为止，尽管我相信

00:05:51.029 --> 00:06:03.120
aj / s版本在各省都可以，所以对于今天的车间来说，

00:06:03.120 --> 00:06:07.349
我们将要使用的是TCP和WebSockets，这将使

00:06:07.349 --> 00:06:10.919
能够用尽节点并使用WebSockets，我们将能够添加到

00:06:10.919 --> 00:06:15.539
浏览器，然后在jas方面，我们将添加Web RPC等

00:06:15.539 --> 00:06:18.719
WebRTC将为我们提供的是直接浏览器

00:06:18.719 --> 00:06:23.400
交流，这也将使我们有能力聆听

00:06:23.400 --> 00:06:28.520
发信号，所以您提到我们必须看到

00:06:28.520 --> 00:06:35.719
您将要使用的这些良好格式需要使用系统服务器才能具有

00:06:35.719 --> 00:06:40.460
访问紧急情况提要，因此您仍然需要电击服务器，但是我们在

00:06:40.460 --> 00:06:44.990
建立方面的合作伙伴以创建分布式信令

00:06:44.990 --> 00:06:50.479
服务器，从而使任何节点都能为您运行电击服务器

00:06:50.479 --> 00:06:54.020
当您连接到节点时，可以将该节点用作签名红色

00:06:54.020 --> 00:06:58.639
微风超级咕呀，希望那将是其中之一

00:06:58.639 --> 00:07:04.339
我在正确的事情上做的事情，这就是当我们打破并进入

00:07:04.339 --> 00:07:08.569
配置传输，因为我们处于压缩的时间轴上，因此我们将跳过

00:07:08.569 --> 00:07:13.009
但是，当您正在经历的过程中，如果您自己执行此操作或您正在执行此操作

00:07:13.009 --> 00:07:18.889
现在，如果您遇到困难，请继续阅读第二章的内容。

00:07:18.889 --> 00:07:22.339
将为您提供所有解决方案代码，我们很可能会通过

00:07:22.339 --> 00:07:26.870
我们可能会在第4章停下来，逐步讲解其中的一些内容，可能会导致

00:07:26.870 --> 00:07:32.089
有点复杂，这将需要一些时间才能通过更多

00:07:32.089 --> 00:07:42.500
复杂的消息，因此一旦有了初始传输配置，我们就想要

00:07:42.500 --> 00:07:45.620
创建我们的第一个连接通常是

00:07:45.620 --> 00:07:50.479
在这里进行引导，因此对于我们本地而言，这就是我正在使用的引导代码

00:07:50.479 --> 00:07:55.310
为ipfs运行一台长机器，这些是网关说明，尤其是

00:07:55.310 --> 00:07:59.990
这就是我们拥有的IP，因为我们有10个新网关注释的列表，并且我们拨打

00:07:59.990 --> 00:08:03.499
直接针对那些我们现在开始时的人，这就是网络的束缚，我们

00:08:03.499 --> 00:08:10.219
可以从那里找到工作人员，以便拨打到我们需要知道的人员

00:08:10.219 --> 00:08:16.069
地址，因此这是多地址输入的地方，通常称为多地址

00:08:16.069 --> 00:08:22.610
加法器，因为轻松吸吮，所以多地址的作用是让

00:08:22.610 --> 00:08:31.009
我们组成物种时灵活的地址，我们的沟通方式发生了很大变化

00:08:31.009 --> 00:08:35.789
时间和那些表格通讯的地址已更改为邮政

00:08:35.789 --> 00:08:41.760
地址电子邮件地址电话号码域格式已更改

00:08:41.760 --> 00:08:47.340
随着时间的流逝，我们需要做的就是建立一种灵活的日子机制，

00:08:47.340 --> 00:08:51.840
如果我们有无线电，就可以随着时间的推移描述地址，因为我们可以练习练习传输

00:08:51.840 --> 00:08:56.100
运输那些看起来像什么的东西，我们如何确保我们有一个灵活的

00:08:56.100 --> 00:09:01.590
描述它的形式，这就是多地址旨在实现的目的

00:09:01.590 --> 00:09:07.410
在其中的一些情况下，如果您运行IP FS服务器，则可能会看到

00:09:07.410 --> 00:09:15.120
首先弹出的弹出窗口，这是在端口上的本地IP上运行的TCP地址

00:09:15.120 --> 00:09:18.510
4001，所以明天拨打那个节点

00:09:18.510 --> 00:09:24.030
可以本地访问它，第二个几乎相同，四个都运行

00:09:24.030 --> 00:09:29.220
一千二百个，但是如果您看到WSS，最后有一个WS是WebSockets

00:09:29.220 --> 00:09:34.470
这是WebSocket安全的，这是对它的庆祝，它还告诉我们

00:09:34.470 --> 00:09:39.570
WebSocket将来可能在DCP传输上运行

00:09:39.570 --> 00:09:42.810
进行更改，也许一开始不是TCP传输，可能是

00:09:42.810 --> 00:09:50.280
WebSocket运行的其他东西，所以让我们来看一些有趣的代码

00:09:50.280 --> 00:09:56.790
上面是我们今天使用的TC星形地址，我们可以

00:09:56.790 --> 00:10:00.710
这些是我发现从右侧阅读的最好的

00:10:00.710 --> 00:10:05.490
因为我们选择了目标节点正在运行的东西，所以在这里我们看到了

00:10:05.490 --> 00:10:08.100
目标节点正在运行PGP天气arkinson启动

00:10:08.100 --> 00:10:11.760
这是我们的信令服务器地址，表明无论我们在做什么

00:10:11.760 --> 00:10:16.650
样式在Singh上运行，它正在监听这是网络服务器，因此

00:10:16.650 --> 00:10:22.530
然后我们可以看到信令服务器的地址是TCP上的WebSocket地址

00:10:22.530 --> 00:10:31.350
十五点五十五分，下一个更复杂的是电路

00:10:31.350 --> 00:10:38.060
地址，所以这意味着我们正在中继中继上运行，该中继的想法是

00:10:38.060 --> 00:10:45.410
PT p qm relays这是您的qm i t的缩写版本

00:10:45.750 --> 00:10:51.810
如果您在野外查看多个地址，尽管PGP可能会击败ipfs

00:10:51.810 --> 00:10:56.279
目标是要成为罂粟，目前在狼人的嫉妒中得到支持，

00:10:56.279 --> 00:11:02.910
走，我们将退回到PFF，但是因为当我们建立它时，它非常

00:11:02.910 --> 00:11:07.980
具体还是喜欢我最好，但是没有人可以使用任何唇形p2p节点

00:11:07.980 --> 00:11:14.009
可以使用它，所以我们需要成为人，然后我们看到中继服务器是

00:11:14.009 --> 00:11:21.560
在快速传输上运行，该快速传输在四个410上运行UDP

00:11:21.560 --> 00:11:33.180
超级容易，所以一旦我们有了该多地址，就可以对其进行设置

00:11:33.180 --> 00:11:37.379
实际拨打到同伴的多地址告诉我们有关同伴的很多信息

00:11:37.379 --> 00:11:41.189
大多数时候，我们要启用多种传输是很清楚的，所以我们

00:11:41.189 --> 00:11:45.060
将获得大量潜在的多地址列表，这真是一件好事

00:11:45.060 --> 00:11:49.079
因为我们拥有的交通越多，我们支持的人越多，可以拨打的电话越多

00:11:49.079 --> 00:11:58.170
我们假设我们的地址是公开的，因此第二章将重点讨论

00:11:58.170 --> 00:12:01.290
只是添加它，所以如果您进入代码，那将是您要去的

00:12:01.290 --> 00:12:06.839
添加您的收听地址（如果可以的话）

00:12:06.839 --> 00:12:09.689
能够添加此新地址，因为我们正在使用信令

00:12:09.689 --> 00:12:15.600
服务器，然后是将拨号到良好引导节点的拨号地址

00:12:15.600 --> 00:12:20.819
在本地为您提供了node.js文件夹，并且在其中有一个bootstrap文件夹

00:12:20.819 --> 00:12:25.559
在那里，它在信令服务器中具有引导节点，因此如果您运行该节点

00:12:25.559 --> 00:12:30.839
您可以自行在本地进行操作，示例将自动拨号到该示例

00:12:30.839 --> 00:12:35.569
如果将它们设置为外观

00:12:37.210 --> 00:12:45.340
所以当您这样做时，这就是通过Wireshark发生的事情，这就是连接，因此

00:12:45.340 --> 00:12:50.050
我们在这里看到的唯一一件事是，我们重新拨打了重要的

00:12:50.050 --> 00:12:54.850
beechcraft引擎盖，我们交换的唯一信息是多流

00:12:54.850 --> 00:12:59.950
养老金，这是我们的协议谈判和录音带，我们将稍作讨论

00:12:59.950 --> 00:13:03.850
关于符号的更多信息，然后我们看到明文开关非常

00:13:03.850 --> 00:13:09.970
非常安全的加密旋转木马加密有点，但这

00:13:09.970 --> 00:13:17.560
它停止了，就像没有更多的数据交换一样，我们已经连接好了，怎么办？

00:13:17.560 --> 00:13:22.210
我们是否可以重用该连接，我们可以使该连接点亮p2p想做一堆

00:13:22.210 --> 00:13:25.830
要在后台进行大量交换以验证事物

00:13:25.830 --> 00:13:30.880
但是当我们没有多重连接时，我们很难

00:13:30.880 --> 00:13:35.710
首先要做那个痛苦的事情，所以我们希望能够重用该连接

00:13:35.710 --> 00:13:39.760
我们有发布/订阅消息DHT查询，我们有待确定

00:13:39.760 --> 00:13:44.320
协议，有直接沟通，我们要写的聊天协议

00:13:44.320 --> 00:13:49.620
为此，我们希望能够使用它来重新使用那里的连接

00:13:49.620 --> 00:13:56.980
你们中有多少人熟悉锡罐电话，所以您可以

00:13:56.980 --> 00:14:01.420
拿一罐您最喜欢的食物在它的底部打一个孔

00:14:01.420 --> 00:14:09.480
串到另一只kam上，您可以与某人交谈，也许还不知道

00:14:09.480 --> 00:14:16.090
也许有一天，它将是像这样的网络上非常可靠的一次科学博览会

00:14:16.090 --> 00:14:23.920
今天是的，所以我们如何从这里到这样的东西，但是

00:14:23.920 --> 00:14:28.180
拥有多个连接，如果我们有一个连接很多

00:14:28.180 --> 00:14:34.150
虚拟实力，这是此工作组合的多流计划

00:14:34.150 --> 00:14:39.730
口头上像混合，所以多路复用并不是一个新概念，他们实际上已经在使用它

00:14:39.730 --> 00:14:44.740
在1870年代的电报时代，如果您已经有很长的时间了

00:14:44.740 --> 00:14:47.330
考虑通过IP地址运行的TCP连接

00:14:47.330 --> 00:14:52.820
这些是通过波特电话线复用的，他们将通过以下方式收集电话

00:14:52.820 --> 00:14:57.230
电话的历史事件频率，因此，如果您正在呼叫邻居

00:14:57.230 --> 00:15:00.380
在路上，它会以不同的频率运行，而其他人

00:15:00.380 --> 00:15:04.760
使用线路，一旦我们有太多人居住在一个没有人的空间中

00:15:04.760 --> 00:15:08.269
设备最终用完了频率，我们不得不添加更多电话

00:15:08.269 --> 00:15:15.950
Lippe面向人的技术讲座的工作方式不同，但它们的做法相似

00:15:15.950 --> 00:15:22.579
因此，例如，多路复用RM辫状结构是通过在数据前添加数据来实现的

00:15:22.579 --> 00:15:26.630
带有流线型的流线型和流线的长度

00:15:26.630 --> 00:15:30.680
您想要发送的内容，因此当我们进入并通过网络发送聊天时

00:15:30.680 --> 00:15:35.450
您会看到聊天消息是100字节，这是我们一开始所做的

00:15:35.450 --> 00:15:39.980
我们说好吧，让我们创建一个新的流将调用该流v

00:15:39.980 --> 00:15:43.550
我们将发送一个一百字节的消息，所以我们说它将是一百个字节

00:15:43.550 --> 00:15:47.660
然后我们坚持我们的信息，我们通过网络发送该信息，我们将

00:15:47.660 --> 00:15:51.290
读进去，你说好吧，这些数据将流式传输五个

00:15:51.290 --> 00:15:55.490
它的一百个字节，所以我不会读接下来的100个字节，然后我

00:15:55.490 --> 00:15:59.089
我要停止，我要以这种方式将其拉进参议院

00:15:59.089 --> 00:16:02.959
流或连接上的下一条消息，因为它可能正在进行

00:16:02.959 --> 00:16:09.050
在其他地方如此糟糕的搜索中，我们目前可以以美元购买的是

00:16:09.050 --> 00:16:16.600
最广泛支持的是使用JSON rust llaman进行快速锈蚀Jason go

00:16:16.600 --> 00:16:21.829
 quick具有内置的多收集器，所以现在只有go具有该支持

00:16:21.829 --> 00:16:26.950
然后天皇也是事情又去了

00:16:28.540 --> 00:16:35.959
您可以将多个多路复用器配置为多个

00:16:35.959 --> 00:16:40.040
优势可能不是所有的节点都一样

00:16:40.040 --> 00:16:44.329
我们在这里讨论了不同程度的支持，一些多路复用器是

00:16:44.329 --> 00:16:48.140
比其他产品性能更高，因此，如果您带来多个多路复用器，您将

00:16:48.140 --> 00:16:54.170
拥有更多选择，这也有助于升级网络

00:16:54.170 --> 00:16:58.480
在添加支撑时，我们可以放慢已弃用的支撑的速度，而不是减少

00:16:58.480 --> 00:17:06.220
每种类型的网络，因此第三章的代码将集中于狼混合性和

00:17:06.220 --> 00:17:11.110
加密，让我们花点时间，回到Wireshark，看看有什么

00:17:11.110 --> 00:17:16.449
如果我们仅启用多路复用代码的其他阴影，则会发生这种情况

00:17:16.449 --> 00:17:24.549
如果您在右侧看到，则会发生滚动条，所以我们仍然

00:17:24.549 --> 00:17:30.220
进行多流握手，然后获得超级安全的纯文本，

00:17:30.220 --> 00:17:36.130
然后我们在执行逻辑后就立即协商这是我们的工作流

00:17:36.130 --> 00:17:41.770
老鼠发生了，我们协商了电路中继，我们协商了通过ID发送，所以我们

00:17:41.770 --> 00:17:45.700
让对方知道我们支持的协议，我们正在协商

00:17:45.700 --> 00:17:50.640
迟些确定我们理想的支持方式，这会缩短很多时间

00:17:50.640 --> 00:17:56.820
目前，多流100协议协商的效率很低

00:17:56.820 --> 00:18:01.059
我们有正在为这两个工程而努力的规范

00:18:01.059 --> 00:18:04.690
希望将其缩短很多，以便我们能够获得所需的所有信息

00:18:04.690 --> 00:18:12.820
少得多的对话，但是是的，这只是启用多流而已，对不起

00:18:12.820 --> 00:18:20.770
多点触控，您会在这里注意到所有这些数据都可以自由查看

00:18:20.770 --> 00:18:27.520
电线不是最好的，我们的纯文本使我们失败了，那么我们如何放置这些数据，以便

00:18:27.520 --> 00:18:33.630
幸运的是，我们可以看到p2p，您可以携带任何东西

00:18:33.630 --> 00:18:40.600
您目前希望sekai启用的加密框架主要受支持，即

00:18:40.600 --> 00:18:48.760
在go Jas和Russ TLS的支持下，当我们

00:18:48.760 --> 00:18:52.620
获得更多支持可能会从SEC I / O迁移到TLS三

00:18:52.620 --> 00:18:58.360
或其他一些主要加密中的一种，有些人正在研究噪声

00:18:58.360 --> 00:19:04.059
然后快速传输也具有内置的TLS加密支持，我们

00:19:04.059 --> 00:19:08.350
最初建造的sekai哦，这只是一个简短的历史概述，因为

00:19:08.350 --> 00:19:13.500
需要中央机构进行无效的证书生成

00:19:13.500 --> 00:19:18.630
在此期间，我记得很清楚，所以我们将其滚动到密封

00:19:18.630 --> 00:19:23.250
s13虽然并完成它几乎在那里

00:19:23.250 --> 00:19:29.970
4 KS，所以人们也有相同的知识。在第3章中，我们将处理

00:19:29.970 --> 00:19:35.310
加密，因此当您阅读第3章时，将添加流多路复用

00:19:35.310 --> 00:19:38.580
在那里加密，如果您在任何时候卡住

00:19:38.580 --> 00:19:46.470
查阅第4章，现在回到Wireshark看看

00:19:46.470 --> 00:19:51.720
我们将看到多流明文不见了，现在我们进行了几秒钟的IATA数据交换，

00:19:51.720 --> 00:19:58.470
然后在那之后我们进行了一些螺母交换，例如24或32字节，然后

00:19:58.470 --> 00:20:02.910
原始身份交换后，所有内容都被加密掉了，所以

00:20:02.910 --> 00:20:10.680
我们鲨鱼不能再解析了，所以一切都是安全的，所以现在

00:20:10.680 --> 00:20:15.600
并不能证明我们一直在谈论协议和Lippi这么多

00:20:15.600 --> 00:20:21.000
多流100协议中有IPF，协议中有

00:20:21.000 --> 00:20:27.000
某个真正的早期协议，那么如果您认为协议到底是什么呢？

00:20:27.000 --> 00:20:32.280
就像一个宁静的api，并且您熟悉宁静的api一样，

00:20:32.280 --> 00:20:36.600
考虑诸如系统中的受影响或路径之类的协议，也意味着什么

00:20:36.600 --> 00:20:40.250
您要做的就是为这些路径注册处理程序

00:20:40.250 --> 00:20:45.600
多流100就像路由器一样，因此最终决定

00:20:45.600 --> 00:20:52.200
我们的ABI将如何运作，以及我们将如何进行谈判，就像

00:20:52.200 --> 00:20:56.340
如果您尝试将数据发送到一个不存在的端点，Anna会争夺API

00:20:56.340 --> 00:21:00.510
那里是行不通的，如果它尝试了我们，而您将其追溯到

00:21:00.510 --> 00:21:03.110
你没想到，好吧，可能会遇到不好的时光

00:21:03.110 --> 00:21:07.850
所以就算您熟悉那种想法

00:21:07.850 --> 00:21:16.140
所以我们正在构建一个聊天应用程序，我们应该创建一个聊天协议，然后我们将

00:21:16.140 --> 00:21:21.060
提前打电话给那个嘴唇宝贝聊天100点要注意的事情，如果你是

00:21:21.060 --> 00:21:24.420
建立协议名称（如果您要加入公共网络）

00:21:24.420 --> 00:21:29.670
如果您只选择卓别林ello之类的东西，就可以描述一下，我什至让

00:21:29.670 --> 00:21:33.030
如果您要连接数百万或数十亿的

00:21:33.030 --> 00:21:36.630
节点那里可能会有一些冲突，因为您将尝试

00:21:36.630 --> 00:21:41.610
在某些时候与其他同伴进行谈判，因此您只需要进行描述即可

00:21:41.610 --> 00:21:49.429
就像您将对任何代码包或域名进行命名空间一样，因此第4章

00:21:49.429 --> 00:21:55.830
我也在这里帮助鬼，所以我们要做的就是至少

00:21:55.830 --> 00:22:00.150
仔细检查一下协议是什么，然后快速浏览一下，以便我们

00:22:00.150 --> 00:22:07.760
如果您要遵循的话，我会在这里提取一些代码以供使用

00:22:16.369 --> 00:22:25.830
好吧，所以，如果你在这里看裸体，我在聊天中，nodejs转到协议，所以

00:22:25.830 --> 00:22:30.239
聊天协议非常简单，我们已经建成了公园，

00:22:30.239 --> 00:22:40.950
好吧好吧，所以我们有我们的聊天协议流chat 100，然后这里是

00:22:40.950 --> 00:22:46.200
我们的处理程序非常基本，如果您浏览浏览器的代码，它将

00:22:46.200 --> 00:22:50.519
几乎是相同的，只是存在一些观点差异以及我们如何

00:22:50.519 --> 00:22:55.529
设置填充物是因为它是反应素还是打印来确定，所以在这里

00:22:55.529 --> 00:22:59.220
丰富在我们手中是华丽的，它需要太大的一部分需要两个

00:22:59.220 --> 00:23:04.200
参数之一是协议，现在我们根本不使用它，但这是什么

00:23:04.200 --> 00:23:08.609
可以让您做的事情实际上是像匹配函数之类的事情，例如

00:23:08.609 --> 00:23:14.340
在ipfs中，我们有1、1和100的位交换，实际上我们可以使用它

00:23:14.340 --> 00:23:20.879
协议信息以确定它是什么版本，然后按大小写进行操作

00:23:20.879 --> 00:23:26.190
进行特定的检查，以便我们可以运行一组不同的代码时是否有一个

00:23:26.190 --> 00:23:33.090
超过100，然后我们就采用离散形式哦，我们在这里，我们都在

00:23:33.090 --> 00:23:37.289
如果您不熟悉拉流，那基本上就是一个管道，所以

00:23:37.289 --> 00:23:41.460
我们正在获取数据流，并将所有这些数据通过管道传输到集合中，然后

00:23:41.460 --> 00:23:46.230
只是将其插入控制台，所以我们在浏览器中所做的就是

00:23:46.230 --> 00:23:51.269
将其设置在react组件上，所以这只是一个非常简单的事情，

00:23:51.269 --> 00:23:56.759
那么我们这里唯一的另一件事就是send方法，所以当我们拨号时

00:23:56.759 --> 00:24:02.129
我将以第二种非常粗糙的方式向您展示狗码，但是

00:24:02.129 --> 00:24:07.169
不会证明以后这么简单，只是接收消息并通过管道传递

00:24:07.169 --> 00:24:15.529
它就可以了，所以去看看那个代码

00:24:15.590 --> 00:24:23.580
让我们转到第五章，所以第五章拥有我们所有的解决方案代码，因此在这里

00:24:23.580 --> 00:24:30.270
我们要做的就是我们做口红PP和酒精，这将遵循我们的协议

00:24:30.270 --> 00:24:37.190
就是我们的处理函数，如果我们有多个支持，那么说我们有

00:24:37.190 --> 00:24:47.640
您可以进行在线聊天的另一种聊天协议p2p斜线聊天斜线缠绕在o上

00:24:47.640 --> 00:24:51.930
远距离处理程序做了检查我们将能够做的版本号

00:24:51.930 --> 00:25:03.510
然后我们正在做的是读取终端数据

00:25:03.510 --> 00:25:08.730
换行符，然后是您可能不知道的非常粗俗的事情

00:25:08.730 --> 00:25:12.080
想在现实世界中做

00:25:16.250 --> 00:25:28.140
协议，就像完全匹配一样，这就是您从协议中获得的

00:25:28.140 --> 00:25:35.370
这就是您可以在此处执行的操作，因为您可以执行移动高脚的操作-是的，

00:25:35.370 --> 00:25:40.800
记录一下您现在可以做的习惯，这比J的代码要具体

00:25:40.800 --> 00:25:44.850
但是会调用多个处理程序版本，因为每次您执行

00:25:44.850 --> 00:25:50.400
您调用句柄代码，它将接受该代码并将其添加到

00:25:50.400 --> 00:25:54.300
您的身份信息以及与他人进行身份握手时

00:25:54.300 --> 00:25:57.480
同伴，您将告诉您对所有协议的恐惧

00:25:57.480 --> 00:26:01.920
支持，包括版本更改以及让我们做的是

00:26:01.920 --> 00:26:05.850
做出更明智的决定，而不是盲目地打电话给您并检查

00:26:05.850 --> 00:26:10.050
协议，浪费那往返，他们只能说哦

00:26:10.050 --> 00:26:17.360
不支持一个，你仍然支持一个

00:26:18.519 --> 00:26:25.039
所以在这里，我们现在正在执行的原始代码是我们看的纯书

00:26:25.039 --> 00:26:29.950
然后将其称为纯风暴，可能会合并这些名称

00:26:29.950 --> 00:26:35.929
我们要做的就是获得所有码头，检查我们是否致力于码头，以及

00:26:35.929 --> 00:26:42.919
他们支持聊天协议，这是我们检查房子，然后我们拨打到

00:26:42.919 --> 00:26:47.509
他们并协商聊天协议，如果我们连接，我们会向他们发送该消息

00:26:47.509 --> 00:26:52.879
这是超级粗暴的权利，因为就像没关系，我们已经连接了40个

00:26:52.879 --> 00:26:57.200
我们在一个房间里确保我拨打了电话-见过你们中的一个并发送

00:26:57.200 --> 00:27:00.049
你这样的消息是痛苦的

00:27:00.049 --> 00:27:04.210
那么你如何使它变得更好

00:27:15.240 --> 00:27:21.640
因此，要使其变得更好的第一步实际上是找到Pierce而不是

00:27:21.640 --> 00:27:26.680
手动针对所有目标对象嘿，让我们看看所有这些交换地址簿，

00:27:26.680 --> 00:27:29.560
写下彼此的ID听起来很糟糕

00:27:29.560 --> 00:27:36.910
那么我们如何在这个非常庞大的网络上找到同龄人呢？

00:27:36.910 --> 00:27:41.860
这些，但让P成为构建您自己的对等发现塔的支持方式，因此，如果

00:27:41.860 --> 00:27:46.780
您正在玩弄蓝牙，NFC，收音机或其他任何可以玩的东西

00:27:46.780 --> 00:27:53.320
为此建立一个发现通道，只需将其插入PP中即可，因此前四个

00:27:53.320 --> 00:27:58.210
我们目前正在使用的将使用此工作坊bootstrap bootstrap是一个

00:27:58.210 --> 00:28:03.250
只是发现机制而已，并不是说嘿，您有一个清单

00:28:03.250 --> 00:28:09.030
我刚刚发现的那些邻居的地址，您可以拨打他们的电话

00:28:09.030 --> 00:28:16.420
但要使网络能够逐步将其变成8人制

00:28:16.420 --> 00:28:22.960
完全分布式，这是达到目标的一种不错的集中式方法

00:28:22.960 --> 00:28:29.470
至少在一个dns或多播dns中是本地网络发现，所以如果您认为

00:28:29.470 --> 00:28:34.230
关于打印机发现控制器网络或旧的Mac模块化应用程序

00:28:34.230 --> 00:28:39.670
在局域网中找到所有人都使用dns的人，所以最终会发生什么

00:28:39.670 --> 00:28:44.590
您将要连接到本地网络以使用Lupita

00:28:44.590 --> 00:28:49.090
 vlookup查找网络上的p2p服务，然后查找每个小V

00:28:49.090 --> 00:28:52.600
您注意会回覆您，您也会回覆

00:28:52.600 --> 00:28:56.470
查询的好处是，当您加入网络时，您也会

00:28:56.470 --> 00:29:01.480
向网络广播您的新身份，以便人们可以在以下情况下与您建立联系

00:29:01.480 --> 00:29:05.440
你看一下可视化，将会有一些人在运行这个

00:29:05.440 --> 00:29:10.270
现在我在网络上也找到了一些人，因为我

00:29:10.270 --> 00:29:18.190
没有运行GS和空巢箱，所以这些人也在运行VP

00:29:18.190 --> 00:29:24.010
因此，我们确实在其中看到了一些注释，这些注释是我们的聊天客户端的一部分，

00:29:24.010 --> 00:29:27.710
绿色音符，我相信这是不可能的

00:29:27.710 --> 00:29:38.809
图例和紫色字样是亚历克斯（Alex），因此，如果您这样做，或者碰巧

00:29:38.809 --> 00:29:43.309
跳到第8章，开始学习，您应该可以与Alice聊天

00:29:43.309 --> 00:29:51.440
如果您加入他们的想法或正在运行的想法，那么我们将在之后讨论

00:29:51.440 --> 00:29:55.549
这是因为这有点问题，但我们将专门讨论阅读内容

00:29:55.549 --> 00:30:00.230
然后步行组件，然后让Rhonda Mason运行两台新服务器，

00:30:00.230 --> 00:30:04.580
为此，我们使用的是WebRTC信令服务器

00:30:04.580 --> 00:30:08.419
服务器下的套接字不仅WebRTC信令

00:30:08.419 --> 00:30:12.559
服务器允许我们进行协商并获得直接拨号，但它也会告诉我们

00:30:12.559 --> 00:30:16.010
大约与之相关的所有其他时期，因此它也可以作为

00:30:16.010 --> 00:30:23.480
对等点发现机制很好，让我们谈谈DHT随机游走

00:30:23.480 --> 00:30:28.940
一旦加入类似的东西，这是一个非常有用的发现机制

00:30:28.940 --> 00:30:35.780
自举噪声，因此DHT随机游动的工作方式也在您的下方

00:30:35.780 --> 00:30:40.130
如果您不熟悉博士学位，将在DHT上进行查询

00:30:40.130 --> 00:30:47.210
分布式哈希表基本上只是一个很大的花哨的键值存储，所以我们该怎么做

00:30:47.210 --> 00:30:51.470
我们将要创建一个随机的纯ID，我们什么都不找

00:30:51.470 --> 00:30:55.340
具体来说，我们只是要创建一个随机ID，我们不想找到任何东西

00:30:55.340 --> 00:31:00.110
在网络上，我们只想查找网络上的其他对等方，因此我们创建

00:31:00.110 --> 00:31:05.030
一个随机的ID，为了简化起见，因为QM I，这些都是您要牢记的艺术

00:31:05.030 --> 00:31:10.100
我们只说随机，所以我们创建一个随机ID哦，布兰登，我们来看看

00:31:10.100 --> 00:31:13.760
对于那个同行，所以我们要做的第一件事是我们查看了所有

00:31:13.760 --> 00:31:17.630
我们知道他们中的任何一个布兰登都希望不是因为我们刚刚组成

00:31:17.630 --> 00:31:22.610
这个ID，我们碰到了那种碰撞，我们遇到了更大的问题，但我们不应该

00:31:22.610 --> 00:31:27.169
以后发生碰撞，所以我们要做的就是看一下我们认识的所有同龄人

00:31:27.169 --> 00:31:32.720
我们将在这里找到最接近的ID这是一个全新的名称，所以这是

00:31:32.720 --> 00:31:37.880
最终将成为DHT热，而我们要做的是探索二进制文件

00:31:37.880 --> 00:31:42.230
在那看看有什么大的区别，并且距离越近，位越小

00:31:42.230 --> 00:31:47.900
不同的是我们将要使用的那些同行，所以如果我们看看我们的小组

00:31:47.900 --> 00:31:53.090
在这六个人中，我们检查了五个同龄人，我们发现爱丽丝和鲍勃有

00:31:53.090 --> 00:31:58.309
最接近布兰登（Brandon）的ID，所以我们继续说好，我要查询鲍勃（Bob）

00:31:58.309 --> 00:32:03.380
鲍勃，你知道布兰登的办公室吗，我不知道布兰登，但我知道布伦达是谁

00:32:03.380 --> 00:32:08.240
与布兰登（Brandon）有更近的ID，所以这就是我们发现布伦达（Brenda）的方式，这就是

00:32:08.240 --> 00:32:12.950
ght随机游走的工作原理是，su随机游玩的技巧要大得多

00:32:12.950 --> 00:32:20.659
步行查询的评分可能会在100到200个同行之间，是的，所以我们

00:32:20.659 --> 00:32:25.159
会继续查询，所以我们找不到更近的人，所以这

00:32:25.159 --> 00:32:27.950
这就是为什么我们最终给这么多Pierce评分的原因，我们应该问问问一下

00:32:27.950 --> 00:32:34.880
并要求jst 80立即并行查询40个对等节点，因为

00:32:34.880 --> 00:32:38.780
最终，我们不会沿着一条道路走下去，而会沿着多条道路走下去，而我们做到了

00:32:38.780 --> 00:32:48.200
递归直到我们没有更好的结果，就像运输和

00:32:48.200 --> 00:32:54.140
如果您带了许多复用器，那么发现它们时，多路复用器发现的效果最佳

00:32:54.140 --> 00:32:59.480
战利品绑带你可能会在这里结束第一个像是的，我们知道

00:32:59.480 --> 00:33:04.280
这个不是超级有用的引导节点，让我们添加mdns和卑鄙我们

00:33:04.280 --> 00:33:08.240
获得本地发现，这就是我们现在知道将可以访问的所有内容

00:33:08.240 --> 00:33:12.320
到网络，然后集合服务器让我们做诸如交换之类的工作

00:33:12.320 --> 00:33:16.490
RPC信号表明我们可以变得自然，而实际上我们只能开始交谈

00:33:16.490 --> 00:33:21.650
直接面向人们，所以我们也试图现在就来到这里

00:33:21.650 --> 00:33:28.250
互联网在这里，因此第5章将向您展示如何设置该发现

00:33:28.250 --> 00:33:32.690
对我们所有人来说，这非常简单，基本上都是配置

00:33:32.690 --> 00:33:37.909
并添加几个模块（如果确实被卡在那里），您要看什么

00:33:37.909 --> 00:33:44.900
最后，我们可以遍历该代码，然后再次解决该问题

00:33:44.900 --> 00:33:48.350
将在第六章中，我们将看到

00:33:48.350 --> 00:33:55.020
因此，我们谈论的是超级总拨号所有人代码来砍掉他们，让我们不要

00:33:55.020 --> 00:33:57.630
那我们用完sub pub / sub怎么样

00:33:57.630 --> 00:34:04.460
像是用于聊天的一件好事，目前我们有两个pub子库

00:34:04.460 --> 00:34:12.710
有八卦子或洪水泛滥，所以，flotsam非常非常简单

00:34:12.710 --> 00:34:18.720
低效率的pub版本，所以我们要做的就是让每个知道谁的同行

00:34:18.720 --> 00:34:22.740
弹出这里，我们向他们发送一条消息，然后他们接受该消息，

00:34:22.740 --> 00:34:26.550
将其设置到他们知道将要反复进行的每个同伴上

00:34:26.550 --> 00:34:32.850
再一次，我们确实添加了缓存，因此我们不会不断地淹没网络，但是

00:34:32.850 --> 00:34:37.710
粗略计算，但效果很好，人们会明白这一点

00:34:37.710 --> 00:34:42.900
希望该消息不会多次出现，但确实会发生

00:34:42.900 --> 00:34:49.860
所以八卦子是这个的更好的版本八卦子做的是当我们

00:34:49.860 --> 00:34:54.780
通过pub sub Network进行连接，我们采用了一个对等点子集，所以也许有20个

00:34:54.780 --> 00:34:59.670
我们在房间里，我们可能会带五个同伴，我们会创建一个覆盖网络

00:34:59.670 --> 00:35:04.290
与那些在国家关系方面的酒吧同龄人发生的事情是，每当我们

00:35:04.290 --> 00:35:09.060
收到一条消息，我们仅将其发送给那些我们订阅这些对等方时出现的消息

00:35:09.060 --> 00:35:13.920
我们还告诉他们，我们正在将他们添加到我们的手下，所以

00:35:13.920 --> 00:35:19.200
他们也会向我们发送消息这种方法的问题是同行

00:35:19.200 --> 00:35:24.660
可能不会收到类似我们只是在广播某些节目的消息，这是

00:35:24.660 --> 00:35:29.220
这是八卦的来源，所以我们要做的是

00:35:29.220 --> 00:35:33.780
除了向我们的网格发送消息外，我们还会选择不在其中的随机对等体

00:35:33.780 --> 00:35:39.330
我们的地图会广播有关我们最近看到的消息的元数据，因此我们可能

00:35:39.330 --> 00:35:45.810
说嘿，我刚刚发送了这五个消息ID，他们会说，哦，我还没有看到

00:35:45.810 --> 00:35:49.290
其中两个给您这些消息，他们将从同伴那里得到消息

00:35:49.290 --> 00:35:53.370
然后他们将广播到他们的比赛，所以这就是我们克服的方式

00:35:53.370 --> 00:36:00.330
问题，因此效率更高，为什么要使用最新信息

00:36:00.330 --> 00:36:06.130
现在支持当前唯一的原因j / s和锈

00:36:06.130 --> 00:36:11.859
有实施正在进行中，希望我们能尽快得到，所以这是

00:36:11.859 --> 00:36:15.280
为什么您会使用Plus优势，为您所走过的所有乡亲

00:36:15.280 --> 00:36:20.770
是，您现在可以使用八卦了，它将使klutz退回去

00:36:20.770 --> 00:36:28.810
你们所有的同行都不是客户，所以当我们离开时，是的，所以第六章

00:36:28.810 --> 00:36:33.130
摆脱那种超级粗暴的杰克派恩代码会解决这个问题

00:36:33.130 --> 00:36:36.420
最后，我只想确保我们阅读了其余内容

00:36:36.420 --> 00:36:40.540
我们可以回顾一下过渡的样子，就像我们只是切换到

00:36:40.540 --> 00:36:48.420
晚上的酒吧，所以总的酒吧子将要介绍

00:36:48.420 --> 00:36:56.980
像protobuf消息之类的消息，所以我们正在酒吧里聊天，这很棒

00:36:56.980 --> 00:37:00.820
如果您不熟悉，我们实际上是在使用protobuf交换消息

00:37:00.820 --> 00:37:05.650
与它有关的是一个数据序列化反序列化库

00:37:05.650 --> 00:37:11.170
就像JSON或seaboard一样，您不必使用协议即可使用JSON

00:37:11.170 --> 00:37:16.630
或海滨，目前大多数lathela p2p协议当前都使用proto buck

00:37:16.630 --> 00:37:23.710
能让我们做的是将数据对象序列化后将它们发送为

00:37:23.710 --> 00:37:28.599
通过网络将我们的字节二进制化，然后从那里回到对象并

00:37:28.599 --> 00:37:31.710
这样的样子

00:37:31.800 --> 00:37:35.740
目前我们只是在发送第六章

00:37:35.740 --> 00:37:41.490
我们只是通过网络发送消息，而这并不是很好地利用

00:37:41.490 --> 00:37:46.290
就像一个协议，所以我们如何使它变得更复杂一点

00:37:46.290 --> 00:37:52.390
好吧，循环EP我们用两块钱来做，所以您可以在这里看到我们正在使用的

00:37:52.390 --> 00:37:56.950
在新代码的第七章中，J的代码也将有一个

00:37:56.950 --> 00:38:01.570
额外的请求类型，所以我们将请求类型添加到第一个

00:38:01.570 --> 00:38:05.260
看到一条发送消息，而这只是我们发送的基本消息数据

00:38:05.260 --> 00:38:09.110
这是我们创建聊天室消息时的数据，并且

00:38:09.110 --> 00:38:15.950
聊天的基本概念，我们也在此处对我们进行了更新，因此我们添加了

00:38:15.950 --> 00:38:21.290
如果您正在使用聊天功能，可以在第8章中进行操作/命名

00:38:21.290 --> 00:38:27.830
并重新命名自己，这是更改名称的一种非常好的方法

00:38:27.830 --> 00:38:32.330
因为如果以后有人加入发布/订阅，他们将不会获得您的名字

00:38:32.330 --> 00:38:38.300
更改此Alesis向您显示如何进行多种请求类型，以便

00:38:38.300 --> 00:38:43.310
我们将在此末尾浏览该代码，看看我们如何处理

00:38:43.310 --> 00:38:52.340
不同的情况，所以我们将在第7章中简要介绍一下

00:38:52.340 --> 00:39:02.300
通过该代码，但是很快我们将讨论您关于子网的信息，因此我们

00:39:02.300 --> 00:39:04.940
有我们想聊天的聊天协议

00:39:04.940 --> 00:39:09.710
说这个房间里有30或40个人，现在我们都想聊天时就回家

00:39:09.710 --> 00:39:15.950
如果我们加入公共网络，彼此之间将如何可靠地裂

00:39:15.950 --> 00:39:21.380
如果有数以百万计的人网络，我们将如何确保这20个

00:39:21.380 --> 00:39:25.880
我们彼此之间正在收到对方的信息吗，我们回到这个东西并菜单

00:39:25.880 --> 00:39:31.700
互相拨号还是我们只是使用弹出窗口并希望我们的聊天能够成功

00:39:31.700 --> 00:39:38.330
在整个网络中，它以及时的方式互相影响，可能两者都不是

00:39:38.330 --> 00:39:45.500
这样，我们除了可以找到DHT之外，还可以返回DHT

00:39:45.500 --> 00:39:49.910
对等点和存储对等点信息博士学位也存储概念提供者

00:39:49.910 --> 00:39:55.070
我们存储提供者记录的信息，因此不仅如此

00:39:55.070 --> 00:40:00.500
无论如何，但解决该子网问题的方法是，我们可以

00:40:00.500 --> 00:40:05.960
使用DHT这种类似的概念来随机游走以存储提供者记录

00:40:05.960 --> 00:40:12.980
因此，与其随机查询ID，我们可以做的就是聊天

00:40:12.980 --> 00:40:20.510
主题Limpy TV chat 100，我们可以将其转换为DHT键并进行查询

00:40:20.510 --> 00:40:25.680
找到与DHCP或DHCP最接近的对等点，所以我们向上随机进行

00:40:25.680 --> 00:40:31.440
走走不再是随机的，我们发现网络上最接近我们的20个对等点

00:40:31.440 --> 00:40:38.160
主题，然后我们告诉他们我们是该主题的提供者，因此当我们

00:40:38.160 --> 00:40:42.300
订阅我们可以广播，我们可以设置它，我们也可以查询以查找其他

00:40:42.300 --> 00:40:46.560
是该聊天主题提供者的人，因此我们可以将Cory移至

00:40:46.560 --> 00:40:50.490
网络发现该信息，现在我们可以彼此平铺，这给了我们

00:40:50.490 --> 00:40:56.490
要做的就是我们可以创建一个网状覆盖来聊天覆盖网络

00:40:56.490 --> 00:40:59.940
除了与更广泛的网络连接外，这将是

00:40:59.940 --> 00:41:03.450
分布式系统的重要组成部分，因为如果您盲目地连接到

00:41:03.450 --> 00:41:06.990
网络和广播信息，您可能将无法

00:41:06.990 --> 00:41:11.220
在分布式系统中可靠地交换您最终想要的信息

00:41:11.220 --> 00:41:16.860
网络，我们需要能够创建关注的领域或我关心的事物

00:41:16.860 --> 00:41:21.330
关于我想要这些信息，所以我们想创建覆盖网络，这是一个

00:41:21.330 --> 00:41:28.860
这样做的可能方法，这样我们就可以使我们的聊天主题注册退订

00:41:28.860 --> 00:41:34.410
并在订阅时查询，然后创建覆盖网络，没有任何代码

00:41:34.410 --> 00:41:41.730
目前在管理重叠广告的p2p中，但这是我们所要做的

00:41:41.730 --> 00:41:45.150
可能想看看，我认为我们正在深入探讨连接

00:41:45.150 --> 00:41:47.880
今天晚些时候的管理层，所以如果有人对此感兴趣

00:41:47.880 --> 00:41:56.550
快来加入，我们可以谈谈，所以在这里n我们有九个好

00:41:56.550 --> 00:42:02.640
我们大概有二十分钟，所以我们可以回过头来浏览一些代码

00:42:02.640 --> 00:42:10.830
任何人我都有任何问题，所以我了解这也适用于Cookie

00:42:10.830 --> 00:42:14.880
但是那些标准的IVF，我想它也能够运行这些东西

00:42:14.880 --> 00:42:20.859
像这样，是的，所以那里

00:42:20.859 --> 00:42:28.780
Brenden v5昨天在他的生活中谈到了获得类似

00:42:28.780 --> 00:42:34.690
该帖子可以在Jay中做到这一点，您只需访问BTB对象

00:42:34.690 --> 00:42:38.970
如果您像守护程序一样在其上运行

00:42:49.410 --> 00:43:09.280
是的，所以这些对我来说可能是IP防护我说的是我想要的主题

00:43:09.280 --> 00:43:17.890
只对这个主题感兴趣的不是它应该做的正确的事情，而是

00:43:17.890 --> 00:43:23.410
越来越多的人知道我注意到了这样的困难

00:43:23.410 --> 00:43:29.170
好在一天结束时，与DHT业务的任何合作意向

00:43:29.170 --> 00:43:39.250
你会像我们自己一样竖起大拇指，所以你不必全力以赴

00:43:39.250 --> 00:43:47.020
是的，使用HT的方法有时是必要的，但理想情况下

00:43:47.020 --> 00:43:51.160
我认为这是我们通常要添加到PDP中的内容

00:43:51.160 --> 00:43:55.180
因为不是每个人都会轻易闲聊他们需要做的事情

00:43:55.180 --> 00:43:59.020
因此，我们通常如何在Olivia上创建这些覆盖图，以便

00:43:59.020 --> 00:44:01.890
应用程序失败者

00:44:46.429 --> 00:45:09.869
是的，所以你有，所以你将无法像那里那样使用

00:45:09.869 --> 00:46:25.380
是的，所以这就是大多数地址的方式，让我们来做，在这里，我们已经

00:46:25.380 --> 00:46:30.929
从我们的同行那里注册，我们正在监听TCP，我们正在监听

00:46:30.929 --> 00:46:36.390
WebSockets，我们也在Web RTC启动服务器上监听，因此我们要

00:46:36.390 --> 00:46:40.859
将这些地址广播给我们的同龄人

00:46:40.859 --> 00:46:48.869
引导消息，今年我们有这一系列的广告，所以我们

00:46:48.869 --> 00:46:52.259
将这些地址宣传给所有同行，最终我们做什么

00:46:52.259 --> 00:46:57.209
是当我们使用p2p接收这些地址时，将通过它们并找到

00:46:57.209 --> 00:47:00.719
它会过滤出运输状态的重要性，然后

00:47:00.719 --> 00:47:03.779
将要拨这些电话，以便您自动获得，这就是为什么

00:47:03.779 --> 00:47:07.289
带来多次运输是很有价值的，因为即使您只是

00:47:07.289 --> 00:47:14.219
拨通他们W经历说好吧，这是TCP也许我不知道

00:47:14.219 --> 00:47:19.589
支持gzp，但我确实支持WebSocket，所以我将在网站上进行介绍

00:47:19.589 --> 00:47:23.749
我要先尝试一个，然后再尝试地址本身

00:47:23.749 --> 00:47:31.979
成功完成各种版本的j / s当前将在谷物中执行此操作，因为关闭

00:47:31.979 --> 00:47:38.369
现在打开连接拨号很痛苦，Jan的事情很痛苦，但是go会尽一切努力

00:47:38.369 --> 00:47:41.819
并行的地址，因此它将尝试拨号

00:47:41.819 --> 00:47:44.729
他们所有的罪恶地址都被使用了，让我称其为

00:47:44.729 --> 00:48:10.170
标头，所以如果我们去看看，让我们看看弹出窗口，那么当我们

00:48:10.170 --> 00:48:15.599
切换到弹出窗口，我们创建了一个基本的发布/订阅聊天主题我们的发布子

00:48:15.599 --> 00:48:19.680
聊天对象，当我们收到消息时我们进行了转换

00:48:19.680 --> 00:48:25.769
而不是现在给我发送协议，您已经设置了一个酒吧子聊天室，所以如果我们去

00:48:25.769 --> 00:48:32.880
看看我们新的公共子聊天类型，如果我们去的话，我们的动机就在这里

00:48:32.880 --> 00:48:42.059
向下发送，我们将在这里看到我们正在用我们的混乱对protobuf进行编码

00:48:42.059 --> 00:48:47.759
数据，然后我们将其与P一起发布在发布端，我们正在这样做

00:48:47.759 --> 00:48:55.289
向我们的聊天主题发送消息，就是我在任何地球上

00:48:55.289 --> 00:49:04.529
然后一定要进来，我们进入解码我们的请求，我们得到了请求

00:49:04.529 --> 00:49:08.999
类型，然后根据我们个人资料的请求类型，我们可以做一个基本的

00:49:08.999 --> 00:49:14.249
切换以弄清楚我们是否需要为此设置用户句柄

00:49:14.249 --> 00:49:20.759
人们或经历，并实际上发出该信息温和

00:49:20.759 --> 00:49:25.130
适应我们的反应视图或将其渲染出来

00:49:29.320 --> 00:49:35.329
所以我们将做为后续工作，因为其中有很多内容

00:49:35.329 --> 00:49:40.430
挤进75分钟，我们将整理每个视频

00:49:40.430 --> 00:49:44.060
本章，只是创建一个视频系列，所有的幻灯片都将是

00:49:44.060 --> 00:49:47.030
发布了很多演讲者，所以在幻灯片中可以找到

00:49:47.030 --> 00:49:51.230
一切都好，然后您可以查看评论，以便我们去

00:49:51.230 --> 00:49:54.589
通过并实际遍历代码，以便你们可以死

00:49:54.589 --> 00:49:57.920
那么您将获得更多动手操作，而不是在上下文之外

00:49:57.920 --> 00:50:03.099
随时进行聊天，我们将为您提供

00:50:06.160 --> 00:50:11.450
并且如果您有任何疑问或想要谈论任何事情或花费15

00:50:11.450 --> 00:50:15.170
分钟左右，否则我会让你有时间

00:50:15.170 --> 00:50:17.200
背部

00:50:22.080 --> 00:50:28.260
[掌声]

