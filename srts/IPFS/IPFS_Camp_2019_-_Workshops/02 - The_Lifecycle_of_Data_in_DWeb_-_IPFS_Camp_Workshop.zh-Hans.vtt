WEBVTT
Kind: captions
Language: zh-Hans

00:00:02.190 --> 00:00:05.259
[音乐]

00:00:21.680 --> 00:00:24.730
 [音乐]

00:01:18.320 --> 00:01:27.750
太好了，因此昨天有很多信息可用于此目的

00:01:27.750 --> 00:01:32.310
当然，您需要记住的是添加到ipfs中的文件存储为块

00:01:32.310 --> 00:01:38.790
在您的仓库中，所以我负责丑陋的第一个Web UI，我尝试使其外观

00:01:38.790 --> 00:01:42.150
每天解决问题的更好方法是

00:01:42.150 --> 00:01:46.770
让我们构建一个Web应用程序，以便当我承担本课程的任务时，我只想

00:01:46.770 --> 00:01:52.020
对添加文件并将其变成块的内容有了直观的了解

00:01:52.020 --> 00:01:56.729
我的仓库看起来像这样，这是一个简单的Web应用程序，只需将文件放到该应用程序上

00:01:56.729 --> 00:02:00.509
您可能在软木塞中看到了一个类似的人，或者说，这样一个人正在向您展示

00:02:00.509 --> 00:02:03.689
dag结构，此结构向您展示块存储中发生的情况

00:02:03.689 --> 00:02:11.069
所以这是一个几乎是空的ipfs块存储，那里有一些元数据

00:02:11.069 --> 00:02:14.800
这是引脚设置元数据，我们稍后将介绍

00:02:14.800 --> 00:02:24.370
如果我要在其上放置文件，那么我们在视觉上都在同一页面上，所以如果我

00:02:24.370 --> 00:02:30.690
是要放一张我们喜欢的猫图片的图片，你会注意到他也在这里，他的

00:02:30.690 --> 00:02:36.580
有一种联系，如果我丢下我的酷猫，我们稍后会再找他

00:02:36.580 --> 00:02:40.930
进入我的仓库中，它被添加为块状，您可以更改

00:02:40.930 --> 00:02:45.400
块的大小，这将影响该图像变成多少块，您可以看到

00:02:45.400 --> 00:02:49.600
有一些绿色或红色的含义，但很快

00:02:49.600 --> 00:02:54.670
是该文件的根CID，我们还有很多其他块

00:02:54.670 --> 00:02:57.970
稍后再讨论，我只想在同一页的书中找到

00:02:57.970 --> 00:03:08.350
一个回购协议，所以我们将讨论提供或您如何告诉IP Office网络我

00:03:08.350 --> 00:03:15.250
有这些方块，以及我们如何使用Godot Melea告诉同龄人哪些方块

00:03:15.250 --> 00:03:21.790
我们可以提供的，我们将涵盖得到，所以我自称得到，或者你怎么说

00:03:21.790 --> 00:03:27.670
我自称我想要我们要谈论的那些街区我们要谈论的想要的清单

00:03:27.670 --> 00:03:34.239
我们将谈论验证数据和位交换会话，我们将

00:03:34.239 --> 00:03:38.680
封面固定，这样您才能告诉我，我承认哪些块要保留在您的

00:03:38.680 --> 00:03:42.790
机器，这意味着他们将要讨论引脚类型和引脚组以及

00:03:42.790 --> 00:03:49.239
垃圾收集，我们也要掩盖我们所要掩盖的东西

00:03:49.239 --> 00:03:53.170
删除块，因为有时您只是不想要所有内容，因此如何删除

00:03:53.170 --> 00:03:57.579
块从您的机器，然后在未来的一些思考我们

00:03:57.579 --> 00:04:03.720
可能会共享一些我们想让公众知道的坏坏列表

00:04:03.720 --> 00:04:11.650
因此提供或您如何告诉我承认我有这些障碍，您如何告知

00:04:11.650 --> 00:04:16.450
您所拥有的网络首先应该现在就被理解，但是要

00:04:16.450 --> 00:04:21.580
确保我们在同一页面上，我们需要就如何命名事物达成一致

00:04:21.580 --> 00:04:28.070
ipfs每个块都有一个CID是数据的内容地址

00:04:28.070 --> 00:04:34.400
块的名称是从它包含每个唯一块具有的字节中派生的

00:04:34.400 --> 00:04:42.110
唯一的CID，因此通过这种方式，ID可以为我们提供分布式方案

00:04:42.110 --> 00:04:47.720
命名创建CID的步骤可允许多个用户就名称达成一致

00:04:47.720 --> 00:04:51.220
在不征求中央权威的情况下进行街区交易

00:04:51.220 --> 00:04:56.270
因此从未见过的同龄人可以拿出相同的名字来表示相同的名字

00:04:56.270 --> 00:05:00.230
无需告知或不必互相询问的大块数据，这就是

00:05:00.230 --> 00:05:05.600
非常有用，这意味着我们可以远离诸如内容寻址之类的URL，让我们

00:05:05.600 --> 00:05:10.370
将我们想要的东西与获得它的地方分开，以及是否可以删除显式的

00:05:10.370 --> 00:05:15.080
位置，我们可以使用该地址来验证获得的数据

00:05:15.080 --> 00:05:19.910
正是我们所期望的，这使我们能够从任何地方获取日期

00:05:19.910 --> 00:05:24.170
解锁像dicta的分布式共同托管之类的东西

00:05:24.170 --> 00:05:28.100
对我而言，我最喜欢想法节最激动人心的事情，就像能够说

00:05:28.100 --> 00:05:32.690
就像我关心这些数据一样，我要参与托管，这是一个

00:05:32.690 --> 00:05:38.810
互联网的有趣的根本改进，但仍然可以保留这一天

00:05:38.810 --> 00:05:43.220
某个地方，那么我们如何让网络知道我们所要包含的内容

00:05:43.220 --> 00:05:53.570
因此我们面临的挑战是如何在

00:05:53.570 --> 00:05:58.130
简而言之，这就是ipfs的工作方式，尤其是Lib p2p的味道

00:05:58.130 --> 00:06:02.180
该演示有一些轻微的变化，但我们无需担心

00:06:02.180 --> 00:06:07.580
对于本课程的核心后果，因此，如果C ID为我们提供了一个方案

00:06:07.580 --> 00:06:11.540
参与命名的Kadeem层正在提供一种分布式方案

00:06:11.540 --> 00:06:17.900
查找内容地址数据的发现，因此ademma算法定义了谁

00:06:17.900 --> 00:06:23.600
告诉和询问谁可以通过不断变化的网络在何处查找数据

00:06:23.600 --> 00:06:31.910
同行，因此ipfs用户可以使用emiliya来存储类似这样的记录

00:06:31.910 --> 00:06:38.449
对等体正在存储哪些块，因此在一个简单的集中式系统中，我们可以

00:06:38.449 --> 00:06:43.400
也许将它们存储为一张大桌子，这将使我们查找

00:06:43.400 --> 00:06:47.990
给定的CID告诉我所有提供它的对ID，但不会扩展

00:06:47.990 --> 00:06:53.559
让每一对都存储每个人都拥有的每个街区的信息

00:06:53.559 --> 00:06:59.960
艾米丽（Emily）可以教我们如何分配桌子吗​​？

00:06:59.960 --> 00:07:04.069
带有定义的同一页面，但是Emily是要放在哈希表中的菜，所以一个表

00:07:04.069 --> 00:07:10.120
其中的键是散列或在我们的情况下C ID被称为哈希表a

00:07:10.120 --> 00:07:14.270
分布式哈希表is或DHT为我们提供了一种将该表拆分为所有对象的方法

00:07:14.270 --> 00:07:21.560
同伴，因此心理形象是很多小桌子而不是一张大桌子，所以

00:07:21.560 --> 00:07:26.180
如果我们要

00:07:26.180 --> 00:07:31.639
拆分表，我们需要知道告诉哪些同伴和询问一个子集

00:07:31.639 --> 00:07:35.629
他们而不是所有人，并谴责利亚说，告诉同龄人

00:07:35.629 --> 00:07:40.999
与您所拥有的区块的CID最相似的对等ID

00:07:40.999 --> 00:07:44.539
可以提供它，这样您就不会他们不存储它，因为它们会存储一个

00:07:44.539 --> 00:07:52.249
记录说我可以提供此记录，以便您可以告诉Brian您可以存储

00:07:52.249 --> 00:07:58.789
这些显然是虚构的C ID，您可能会告诉Chandra您

00:07:58.789 --> 00:08:03.770
可以存储奶酪，这显然对任何人来说都是一种怪诞的简化

00:08:03.770 --> 00:08:07.430
谁研究了HTS并实施了它们，但这是有用的

00:08:07.430 --> 00:08:12.919
如果没有的话，要有一个心理模型，还要与来来去去的同伴打交道

00:08:12.919 --> 00:08:17.089
从网络上看，Kadima新算法建议您了解以下内容：

00:08:17.089 --> 00:08:21.919
默认情况下，我们告诉20，在ipfs中，我们正在考虑增加

00:08:21.919 --> 00:08:27.289
数字，因为DHT的规模最近急剧膨胀，因此

00:08:27.289 --> 00:08:31.399
有很多配置选项，但高级

00:08:31.399 --> 00:08:35.719
原则是您告诉模仿最接近于cid的同龄人

00:08:35.719 --> 00:08:41.389
如果内容在

00:08:41.389 --> 00:08:47.990
网络，则多个对等方将能够提供相同的块，因此您可能

00:08:47.990 --> 00:08:52.650
告诉q和钱德拉，您可以通过向他们发送此广告来提供um奶酪

00:08:52.650 --> 00:08:59.190
提供一条消息，然后另一对QM万亿也有该障碍，因此他们

00:08:59.190 --> 00:09:04.070
告诉QM Chandra我可以提供此区块，所以现在我们有多个同行

00:09:04.070 --> 00:09:10.470
告诉另一个人，他们可以提供它，所以这一个怪异的把戏

00:09:10.470 --> 00:09:16.470
各方知道告诉谁，以及询问谁在哪里找到提供商记录

00:09:16.470 --> 00:09:20.820
知道谁可以提供此服务而无需询问中央注册表，这是一个

00:09:20.820 --> 00:09:30.150
像是在未知的地方找到协议的机制，绝对是的，所以

00:09:30.150 --> 00:09:34.710
争议哈希表，它是缬氨酸的关键，其值可以是任意值，因此对于

00:09:34.710 --> 00:09:37.530
当您在我们的案例中告诉分布式哈希表有关提供程序的信息时，

00:09:37.530 --> 00:09:42.810
是P公路列表的键，但是我看到一个对等ID不能帮助您发现

00:09:42.810 --> 00:09:47.760
如何连接到他们，这是第一个映射，然后在实时p2p中还有一个

00:09:47.760 --> 00:09:52.680
拥有多个其他地址的对等商店，所以如果我知道的话

00:09:52.680 --> 00:09:56.070
同行ID，我可以去同行商店说哦，我需要告诉你有关

00:09:56.070 --> 00:10:02.520
如何与这个人建立联系，所以我也从这个事实中向您发送了多个

00:10:02.520 --> 00:10:07.380
请注意，这是一个很大的简化，例如对等ID与

00:10:07.380 --> 00:10:12.750
CID在数学上定义为字节之间的异或距离

00:10:12.750 --> 00:10:18.780
组成对等ID和组成CID的字节，我们不需要去

00:10:18.780 --> 00:10:21.540
现在太多了，希望您在一些

00:10:21.540 --> 00:10:25.680
海报发布会和其他一些课程，但这是一个有用的心理模型

00:10:25.680 --> 00:10:31.110
为了我们的目的而注意到它是一件好事，知道Kadena是很有用的

00:10:31.110 --> 00:10:38.670
是一种ipfs用户启用对等内容发现的机制，如果我

00:10:38.670 --> 00:10:45.270
去告诉网络上的其他人，我可以提供这个CID，然后

00:10:45.270 --> 00:10:50.370
现在状态已经超出了我的控制范围，就像福特告诉钱德拉（Chandra）我可以

00:10:50.370 --> 00:10:55.010
提供奶酪，但随后我关闭笔记本电脑，然后断开网络连接

00:10:55.010 --> 00:10:58.860
我没有办法告诉钱德拉我不能再提供了，所以

00:10:58.860 --> 00:11:02.670
Chandra现在拥有有关提供商的一些过时的信息，因此我们有了这个概念

00:11:02.670 --> 00:11:06.350
至少每12个小时必须暂停一次ID

00:11:06.350 --> 00:11:12.110
重新宣布您可以提供的ID，以便托管这些记录的人员

00:11:12.110 --> 00:11:16.970
这些提供者记录可以告诉您信息仍然是最新的，因此如果

00:11:16.970 --> 00:11:21.640
他们在12小时后没有收到您的回音，他们将清除该记录

00:11:23.860 --> 00:11:28.460
您还可以控制我们在快速浏览器中看到的哪些公告ID

00:11:28.460 --> 00:11:32.210
在一开始的可视化中，您的仓库中有很多锁

00:11:32.210 --> 00:11:36.470
钉住其中的一些钉住，您不必宣布每个区块

00:11:36.470 --> 00:11:39.470
拥有一种叫做提供者策略的东西，它可以让您进行更改

00:11:39.470 --> 00:11:44.930
您可以提供您的回购中的哪些阻止，因此所有选项都是默认选项，

00:11:44.930 --> 00:11:48.440
然后还有其他选择，例如路线和大头针，谢谢继续

00:11:48.440 --> 00:11:52.640
但是如果您想将其恢复为具体的内容，则可以看到这些内容

00:11:52.640 --> 00:11:56.690
如果您在自己的配置文件中有一个外观，就可以看看自己

00:11:56.690 --> 00:12:02.570
IP FS回购，然后在“收割者卖方”部分下查看一个时间间隔，因此

00:12:02.570 --> 00:12:06.110
这与我多久会修改一次我会多久宣布一次

00:12:06.110 --> 00:12:09.680
网络我仍然有这个东西，所以保持提供者记录为最新

00:12:09.680 --> 00:12:13.400
默认情况下，十二个小时是更常见的情况，因此没有充分的理由

00:12:13.400 --> 00:12:17.840
进行更改，默认情况下将策略设置为全部，您可以自定义

00:12:17.840 --> 00:12:22.130
就是说，只要宣布我固定的内容，我们就会进入

00:12:22.130 --> 00:12:27.440
稍后固定，这样一来我们便会更有意义，您也可以看到

00:12:27.440 --> 00:12:30.100
是的问题

00:12:39.080 --> 00:12:45.840
是的，如果您想要的话，您会想要的。

00:12:45.840 --> 00:12:58.410
会需要的，那还不存在，是的，是的，是的，那么完全正确

00:12:58.410 --> 00:13:01.560
因此，目前唯一可用策略中的策略相当简单

00:13:01.560 --> 00:13:05.820
仅在范围界定的范围内您会宣布，但没有理由

00:13:05.820 --> 00:13:09.960
为什么你不能有一个聪明的策略，就像请加密每个

00:13:09.960 --> 00:13:16.940
阻止您宣布或仅宣布我认为这些是公开的，仅宣布那些

00:13:48.440 --> 00:13:55.200
很酷的布拉德（Brad）的其他问题，以便看到实际应用

00:13:55.200 --> 00:14:01.770
理论上，您可以运行命令IP FS DHT find profs

00:14:01.770 --> 00:14:07.770
向其传递一个CID，它将输出可以提供该区块的对等ID列表

00:14:07.770 --> 00:14:13.680
所以在幕后发生的事情是您在最近的同龄人中寻找

00:14:13.680 --> 00:14:17.580
您知道的信息，因此您提供的CID包含以下内容的列表：

00:14:17.580 --> 00:14:21.420
连接的对等方，并且您的DHT实施知道的列表会出现，并且

00:14:21.420 --> 00:14:27.420
它会尝试找到它认为与cid最相似的那个并询问

00:14:27.420 --> 00:14:32.100
他们您知道附近的任何人吗？或者您有提供者的记录

00:14:32.100 --> 00:14:37.350
这个阻止这个cid，所以您要么得到回应，要么就说

00:14:37.350 --> 00:14:41.250
您将得到我可以提供的答复，或者告诉您谁可以提供

00:14:41.250 --> 00:14:46.140
否则您会得到一个答复，说我不知道​​谁可以提供，但是我

00:14:46.140 --> 00:14:52.080
确实知道这个其他提供者的另一个我认为他们的对等ID的对等

00:14:52.080 --> 00:14:56.400
比我的cid更类似于cid，因此您可以进行多跳

00:14:56.400 --> 00:15:01.950
寻找网络中最接近的对等方的旅程，理想情况下是

00:15:01.950 --> 00:15:06.930
工作，有人可以让您集中在同一套

00:15:06.930 --> 00:15:13.260
模仿在哪里查找提供者记录，因此该命令实际上不是

00:15:13.260 --> 00:15:19.530
获取区块，它只是在进行DHT步行以查找供应商的列表

00:15:19.530 --> 00:15:26.900
给定cid，这使我们再次获得IVFs运行ipfs get时会发生什么

00:15:26.900 --> 00:15:32.220
这就是您对BFS所说的，我想要这些块，所以我们刚刚了解了您

00:15:32.220 --> 00:15:37.190
发现哪些同行正在提供，但您如何实际获得数据

00:15:37.190 --> 00:15:43.110
它有点交换位，这是您如何获取数据的方式，所以这是带有

00:15:43.110 --> 00:15:49.740
Open Fest World中的Friends模块位交换有两个作业来请求阻止您

00:15:49.740 --> 00:15:55.170
从连接的对等方获取需求，并向需要它们的对等方发送您拥有的数据块

00:15:55.170 --> 00:16:00.149
如此重要的事情就像是吉打的实时p2p实现

00:16:00.149 --> 00:16:03.870
百万是与比特掉期分离的独立系统，这是交易的障碍，因此

00:16:03.870 --> 00:16:08.519
在学术上就像是同龄人发现，他有一些东西可以交换给你

00:16:08.519 --> 00:16:22.110
已连接的当前已连接的群集我可以与他们正确交换数据，所以我们已经

00:16:22.110 --> 00:16:25.260
大家坐下来听我说话，所以现在是时候一些

00:16:25.260 --> 00:16:28.110
跳一个小舞，将演示如何

00:16:28.110 --> 00:16:47.850
这是行之有效的，我需要两名志愿者真的非常感谢你

00:16:47.850 --> 00:16:59.700
我正在执行现在将要发生的事情Akshay将添加文件和猫的图片

00:16:59.700 --> 00:17:05.040
到他的ipfs仓库，这个先生们的盘子实际上会要求它

00:17:05.040 --> 00:17:10.110
您可以通过展开包装将此添加到您的章鱼回购中吗

00:17:10.110 --> 00:17:20.939
文件啊，这真是令人难以置信，所以很幸运，这只猫

00:17:20.939 --> 00:17:24.419
图片被分割成一个块，这对于

00:17:24.419 --> 00:17:28.650
本演示的目的，但您知道分块算法，我们可以设置块

00:17:28.650 --> 00:17:33.960
块大小很大，事实证明，当您添加它时非常好奇，但是

00:17:33.960 --> 00:17:39.870
哈希作为QM上限出现是的，这完全是巧合，所以您现在

00:17:39.870 --> 00:17:42.670
您可以在您的街区商店中找到街区

00:17:42.670 --> 00:17:49.380
这是一个非常激动人心的CID，你们很好，你们出现了

00:17:49.380 --> 00:18:02.500
已连接，您想要我的照片，您想要我的照片吗，可以看到吗

00:18:02.500 --> 00:18:07.270
这个小东西，这是他渴望的体现，这是一个

00:18:07.270 --> 00:18:13.350
这是一条毫无价值的信息，实际上我知道，因为

00:18:13.350 --> 00:18:19.930
我很小，但我们应该做的是，您应该把动作惊艳

00:18:19.930 --> 00:18:27.670
其实它在说什么，他想要一个好吗，你能把他们扔吗

00:18:27.670 --> 00:18:32.560
队长是的，现在显然你仍然可以找到营地帽

00:18:32.560 --> 00:18:51.070
因为计算机工作已经完成，所以我们只看到一个斑点被交易了

00:18:51.070 --> 00:19:03.250
几乎阻止了演示，几乎没有那么琐碎的细节，所以您收到了一个阻止

00:19:03.250 --> 00:19:08.530
从网络上获取，但没有提供CID，因为您愿意吗？

00:19:08.530 --> 00:19:11.880
相信互联网上的一个随机陌生人会告诉你这东西叫什么

00:19:11.880 --> 00:19:18.970
是的，但是您认为我们应该编写仅信任那些能够

00:19:18.970 --> 00:19:24.670
进来不说你从中得到的东西实际上是一个街区没有这个

00:19:24.670 --> 00:19:29.260
那里有一个大的旧CID，您会知道这里是对细节的关注

00:19:29.260 --> 00:19:36.150
在一张大卡片上，您实际上得到了很好的回卷

00:19:36.450 --> 00:19:40.810
因此，当您将自己的商品变成商品时，您的商品在商店中的CID非常酷

00:19:40.810 --> 00:19:46.330
它的副本，并发送它作为一点交换块消息您放在它上面的不是

00:19:46.330 --> 00:19:53.320
CID，但是可以用来构造CID的配方

00:19:53.320 --> 00:20:00.550
现在请注意，食谱也比CID小，所以如果我发送，则年龄

00:20:00.550 --> 00:20:04.510
您是CID，如果您不信任它，则不应该将其信任为B。为什么将其发送到

00:20:04.510 --> 00:20:13.780
所有这些，所以您要发送的是他们用配方做的，走吧，我是说

00:20:13.780 --> 00:20:17.530
您想要这个，我们可以假设，现在您抓住了它，您将要做些什么

00:20:17.530 --> 00:20:26.950
一个食谱和一个块，您可以使用包含多重哈希的食谱

00:20:26.950 --> 00:20:32.140
标头，告诉您要使用的哈希函数以及实际使用的哈希函数

00:20:32.140 --> 00:20:35.740
函数长度无关，我更喜欢眨眼，您确定知道这不是

00:20:35.740 --> 00:20:38.470
您得到的不是您要的，因为您表示CID

00:20:38.470 --> 00:20:43.130
包括已检查的哈希函数已被使用，很抱歉，但这是板块

00:20:43.130 --> 00:20:48.049
下次给你，是的，所以你要哈希输入的数据

00:20:48.049 --> 00:20:55.040
通过给出食谱来发现它不是你和猫，然后有

00:20:55.040 --> 00:20:59.960
您所做的最后一步是可以的，我已经独立验证了

00:20:59.960 --> 00:21:04.070
到达的数据我必须写CID我不信任您的城市没有违法行为

00:21:04.070 --> 00:21:08.809
刚收到一张支票，然后有一个是您有一个发送到的清单

00:21:08.809 --> 00:21:16.100
空中，此消息已发送给您，您已收到它，这意味着该消息已死，

00:21:16.100 --> 00:21:25.070
你的头，你刚孵出这本书，它说是Q，你能像我一样吗

00:21:25.070 --> 00:21:30.130
等待把我转过身的排队猫，然后把它粘在你的

00:21:31.870 --> 00:21:35.720
您应该没有想到的CID是否应该通过

00:21:35.720 --> 00:21:51.049
将其放在地板上，举例来说，您可以将Q和

00:21:51.049 --> 00:22:00.799
猫你们做什么，谢谢大家，所以我拿菜谱给我算了吧，走吧

00:22:00.799 --> 00:22:07.190
救援猫，我看着我的腰，我说是的，我是可爱的猫，然后这只猫进来了

00:22:07.190 --> 00:22:14.169
就像哦，我的上帝食谱，哦，该死的孩子，这很可爱

00:22:14.570 --> 00:22:17.780
所以索引一下哪一行实际上是如果您得到一个块

00:22:17.780 --> 00:22:22.190
您基本上已经收到了权利，现在不再出现在您的要购清单上

00:22:22.190 --> 00:22:28.300
这样人们就不能只是发送块并必须存储它们的地板

00:22:32.410 --> 00:23:00.170
如果我发出我想要的东西怎么办，但是在我遇到这种情况的情况下，它是QM狗

00:23:00.170 --> 00:23:05.980
扔掉我所有的清单，杂乱无章，我没有很快得到回应

00:23:15.740 --> 00:23:21.890
好吧，我了解QM锁骨，就像您知道谁可以提供

00:23:21.890 --> 00:23:28.880
和考斯比（Cosby）一样，但我不知道凯西（Kathy），她可能知道给凯西

00:23:28.880 --> 00:23:33.380
提供这个，她看到我像是确切得到了那个不是在这里

00:23:33.380 --> 00:23:45.070
对不起，西奥西奥有这个，然后西奥我连接到你，我向你发送我的需求清单

00:23:45.070 --> 00:23:52.760
然后你寄给我这本书，伙计，没关系，让我们可以想象发生这种情况了

00:23:52.760 --> 00:23:59.069
谢谢西奥在[掌声]的随机猫

00:23:59.429 --> 00:24:05.860
对不起，那是一点点的交换舞蹈，希望您有一点感觉

00:24:05.860 --> 00:24:33.999
更新鲜的随时问问题，是的，所以就位交换而言，

00:24:33.999 --> 00:24:37.690
永远都喜欢co DS，所以我们必须完美匹配，因此在这种情况下，

00:24:37.690 --> 00:24:40.990
奇怪的情况是，您发送的是CID，而有人

00:24:40.990 --> 00:24:46.929
给了您相同内容的不同哈希值版本，但在

00:24:46.929 --> 00:24:50.350
发生这种情况时，您只是节点唯一可以做的就是

00:24:50.350 --> 00:24:55.749
那是糟糕的数据，并将其作为拥有良好大脑的人丢弃，就像

00:24:55.749 --> 00:24:59.169
您可能已经发现潜在的优化，那就是

00:24:59.169 --> 00:25:02.980
同样的事情，但是对于节点来说，就像您要求C DX和

00:25:02.980 --> 00:25:07.259
我偶然告诉了你他们是一样的

00:25:16.390 --> 00:25:23.679
是的，是的，我没有对前缀进行太深的了解，但是我们可以

00:25:23.679 --> 00:25:28.000
看到很好，我可以看到，那里有CID v-0，有dag PB，这是

00:25:28.000 --> 00:25:35.110
多重编解码器，然后是多重哈希函数和哈希标签

00:25:35.110 --> 00:25:39.820
很好的问题是，信息已经存在，所以问题是

00:25:39.820 --> 00:25:48.090
CID自我描述了为什么我们需要发送配方而不是CID，所以

00:25:48.090 --> 00:25:52.450
本质上是因为您不应该信任CID所包含的

00:25:52.450 --> 00:25:57.790
消化哈希值，而配方则不这样，实际上CID是

00:25:57.790 --> 00:26:02.799
电线上再咬一口，然后食谱就可以了，接收者也应该

00:26:02.799 --> 00:26:15.280
永远不要相信别人的哈希函数输出，所以因为消息

00:26:15.280 --> 00:26:19.570
因此它不是请求响应，您没有发送任何会话，这只是

00:26:19.570 --> 00:26:23.260
消息传递，所以我已经发送了一条消息，说我想要这些东西，

00:26:23.260 --> 00:26:27.220
然后在以后的某个时刻，我将开始接收数据块，因此我不会

00:26:27.220 --> 00:26:31.179
他们没有连接，所以我只有一个配方就得到了一个数据块

00:26:31.179 --> 00:26:36.640
附加，那么我要做的第一件事就是使用这些参数来告诉我

00:26:36.640 --> 00:26:41.650
如何对这些数据进行哈希处理，以得到我不应该知道的CID

00:26:41.650 --> 00:26:46.000
您认为发送给我的CID完全相同，这就是ID

00:26:46.000 --> 00:26:55.340
希望与我想要的清单上的CID完全相同

00:26:55.340 --> 00:26:58.820
对，所以如果有斑点，当然是因为这是多种语言

00:26:58.820 --> 00:27:01.999
实现，如果斑点像位，则哪些消息包含CID

00:27:01.999 --> 00:27:06.710
它为开发人员留下了获得自满和自在的空间，好吧，我会

00:27:06.710 --> 00:27:11.899
当我开始JSI时，桁架就回过头来，好像有一个错误，那就是

00:27:11.899 --> 00:27:17.029
没有根据需求列表检查CID，所以99％的时间都很好

00:27:17.029 --> 00:27:21.019
您只会收到您要求的封锁，但恶意行为者可以

00:27:21.019 --> 00:27:24.559
开始只是向人们发送块，然后对它们进行哈希处理

00:27:24.559 --> 00:27:29.570
就像酷块一样，我将其存储起来，所以您在演示中看到了两个

00:27:29.570 --> 00:27:34.460
相同的块我已经存储了第一个，然后把我的脑袋

00:27:34.460 --> 00:27:38.389
将CID从我的需求列表中删除，因此当同一块出现时（以毫秒为单位）

00:27:38.389 --> 00:27:43.369
后来我想为什么它不是我的一个清单，而我也不必知道

00:27:43.369 --> 00:27:45.710
在那个时候，这不是我想要的，因为我刚刚收到了它

00:27:45.710 --> 00:27:49.990
该子系统担心它就像您您不在等待这个，所以

00:27:49.990 --> 00:28:14.179
掉在地上，所以很好的问题，例如我是否宣布了一堆

00:28:14.179 --> 00:28:17.629
的同龄人我想要一件东西，然后我得到它，同龄人对一些更高

00:28:17.629 --> 00:28:21.559
延迟错误仍然发送给我，或者我要求提供数百个See ID

00:28:21.559 --> 00:28:26.149
我开始得到它们，所以在位交换中有两个消息，一个是一个列表，

00:28:26.149 --> 00:28:32.240
另一个是数据，但要购清单消息中也有一个标志，如果

00:28:32.240 --> 00:28:36.139
您将其设置为true基本上就像是取消操作，因此您可以发送愿望清单或

00:28:36.139 --> 00:28:43.149
基本上我不想列出，所以是的

00:29:00.450 --> 00:29:21.490
发生什么事不是，这是一个棘手的问题，因为这是其中之一

00:29:21.490 --> 00:29:25.120
就像是很简单的事情，一旦您了解了这些

00:29:25.120 --> 00:29:29.020
您想要等待的原语不喜欢如果我具有相同的内容并且我已经

00:29:29.020 --> 00:29:32.710
使用了不同的哈希函数，但这对于ipfs来说是一个难题

00:29:32.710 --> 00:29:37.840
解决，因为因为我们必须要规范化每个哈希，否则我们将不得不

00:29:37.840 --> 00:29:41.080
做很多额外的工作，我们可以解决所有这些棘手的问题

00:29:41.080 --> 00:29:45.789
是的，但这更像是系统针对您所说的进行了优化

00:29:45.789 --> 00:29:50.860
一样，所以您说的是同一组哈希，并且如果人们有特定的

00:29:50.860 --> 00:29:54.130
更改它的原因有趣的是，有很多

00:29:54.130 --> 00:29:57.820
CID的灵活性为我们提供了极大的优势来升级

00:29:57.820 --> 00:30:01.539
未来，但这并不意味着如果我们进行升级，所有旧的东西

00:30:01.539 --> 00:30:06.250
仍然可以通过新的CID发现，这是一个问题，但是有一个

00:30:06.250 --> 00:30:09.490
一般假设，您必须有充分的理由开始

00:30:09.490 --> 00:30:13.450
弄乱哈希函数，您可能正在做某事

00:30:13.450 --> 00:30:17.830
某些特定于应用程序的应用程序，您在创建自己的小岛

00:30:17.830 --> 00:30:22.169
使用非标准哈希函数的数据

00:30:29.780 --> 00:30:35.970
是的，但是它是可行的，但是那会影响性能，因为我们会

00:30:35.970 --> 00:30:38.010
必须从本质上规范一切

00:30:38.010 --> 00:31:09.840
也许将它们哈希两次，所以请记住，这只是一条线

00:31:09.840 --> 00:31:12.390
旨在受很多人影响的协议，因此，如果我们

00:31:12.390 --> 00:31:15.419
要等一下，如果我要B一下，我去掉B，那将是

00:31:15.419 --> 00:31:18.720
削减它会比现在复杂得多数量级

00:31:18.720 --> 00:31:22.980
超级简单，只适合其他人

00:31:22.980 --> 00:31:33.960
当然，是的，是的，我目前在此方面有一个幻灯片，我们现在还没有

00:31:33.960 --> 00:31:43.350
防止漂白剂，但我们可以并且在您的帮助下，我们会但现在

00:31:43.350 --> 00:31:54.510
那里没有逻辑可以防止这种情况发生，并实现了这些位

00:31:54.510 --> 00:31:59.549
Ledger的存在，我们跟踪每对之间的发送和接收块，但我们

00:31:59.549 --> 00:32:07.470
除了统计数据外，请勿将其用于其他任何方面，让其他人

00:32:07.470 --> 00:32:12.360
回顾一下，我们看到了一个可爱的舞蹈，感谢我们的志愿者，演员和工作人员

00:32:12.360 --> 00:32:18.990
性能是需求列表，这是存储在内存中的主要订制列表

00:32:18.990 --> 00:32:23.840
每个节点存储其要获取的C ID列表的运行节点

00:32:23.840 --> 00:32:29.850
那么您会得到一个想要的列表消息，这是当前情况下的快照

00:32:29.850 --> 00:32:34.410
状态完全在内存列表中管理，因此该消息是快照

00:32:34.410 --> 00:32:38.580
此消息是快照，此消息是快照，

00:32:38.580 --> 00:32:43.350
此消息是什么，不确定您是否收到了它在内存中的表示形式

00:32:43.350 --> 00:32:47.400
发生变化，但快照会经过五个zap和网络，并通过以下方式收听您的声音

00:32:47.400 --> 00:32:53.040
连接的同伴，然后希望您收到一些阻止消息，以便

00:32:53.040 --> 00:32:59.370
阻止消息看起来不错阻止消息是包含一个消息的消息

00:32:59.370 --> 00:33:03.810
或更多数据块，每个数据块均以配方为前缀，用于计算

00:33:03.810 --> 00:33:28.110
他们的C ID，没有，因为它来了，我们一分钟就可以解决，所以

00:33:28.110 --> 00:33:30.500
快速地回顾一下验证开始，我认为我们已经涵盖了它

00:33:30.500 --> 00:33:36.300
确实很详细，但是您发送的是食谱，而您没有发送CID的食谱

00:33:36.300 --> 00:33:39.480
包括CID版本，多编解码器和多哈希，这些都是

00:33:39.480 --> 00:33:43.470
您需要计算CID的东西，如果您使用与CID相同的东西

00:33:43.470 --> 00:33:46.620
另一端的人，假设

00:33:46.620 --> 00:33:49.920
数据是正确的，所以先接收块

00:33:49.920 --> 00:33:55.050
您要做的是使用哈希函数对获得的日期进行哈希，然后加上前缀

00:33:55.050 --> 00:33:58.740
带有正确的编解码器和正确的版本CID的内容将与您

00:33:58.740 --> 00:34:02.190
想要列出是否一切正常的清单

00:34:02.190 --> 00:34:05.390
并且您已经收到或有人试图向您发送错误的数据

00:34:05.390 --> 00:34:11.060
您放下将数据放到地板上

00:34:13.770 --> 00:34:21.540
重要的是跨国二进制比较，我不知道我不知道

00:34:21.540 --> 00:34:28.770
知道是怎么回事，是的，不是字符串比较，而是

00:34:28.770 --> 00:34:32.520
字节数组格式，因此在实现中请参见ID表示

00:34:32.520 --> 00:34:36.800
像这个女儿的字节，然后将它们投影为字符串版本

00:34:36.800 --> 00:34:42.870
所以对于你的问题，我有一个root CID，我想要一个整个文件，而不仅仅是

00:34:42.870 --> 00:34:51.630
想要这样做，一般的流程是我想要这个CID并最终得到一个阻止

00:34:51.630 --> 00:34:55.260
当您验证它并将其存储在您的存储库中时，完成所有操作，然后您

00:34:55.260 --> 00:34:59.280
终于四处看看，你就像圣胡扯Ola这东西有

00:34:59.280 --> 00:35:05.190
里面有这么多的链接，这不是文件，就像一千个链接，所以

00:35:05.190 --> 00:35:08.400
然后你拿，所以有趣的是你把它寄出去我想和一个Co

00:35:08.400 --> 00:35:12.570
在上面，那么您现在就可以再大一点了，我想在这里加上一个

00:35:12.570 --> 00:35:15.840
一千个C ID，然后网络将把任何东西还给您

00:35:15.840 --> 00:35:22.830
它的子集可以（如果您说得到它的根CID），但是您基本上是在出售

00:35:22.830 --> 00:35:28.260
递归地获取，就像完全沿着树向下获取一样，因此一般流程为i1

00:35:28.260 --> 00:35:32.100
这个ID哦，谢谢图的另一层

00:35:32.100 --> 00:35:36.300
想要这些D ID，然后根据图形的深度重复您的操作。

00:35:36.300 --> 00:35:38.510
先生

00:35:43.450 --> 00:35:57.700
当您用位来写时，它的工作原理是什么，所以

00:35:57.700 --> 00:36:04.210
DHT是正确的，因此有两个工作中的子系统

00:36:04.210 --> 00:36:06.880
连接空间，所以我要做的第一件事就是问我的同伴，因为他们

00:36:06.880 --> 00:36:10.300
将成为最快的响应者，也许我已经联系了一个已经拥有

00:36:10.300 --> 00:36:15.310
这些数据，我可以发送一个任意大小的列表，这对你有很大的帮助

00:36:15.310 --> 00:36:20.320
明白了，那么，如果我不知道，也许有人可以用一些回应

00:36:20.320 --> 00:36:25.000
C ID，但也许其中一些我现在还没有得到，我会并行

00:36:25.000 --> 00:36:31.380
可以执行许多单独的DHT查询，所以我可以为每个CID进行DHT查询

00:36:33.630 --> 00:36:38.530
好吧，一旦你拿到了，你就主动发送一个，然后是的

00:36:38.530 --> 00:36:42.369
如果有新图片加入您的群组，您将定期重新发射该图片，如果

00:36:42.369 --> 00:36:45.640
你有一个打开的清单，你会把它发送给他们，因为有一个重要的

00:36:45.640 --> 00:36:51.220
例如这两个系统是否结合在一起，所以您最终告诉您的DHT是

00:36:51.220 --> 00:36:55.240
这是一组多加法器和一个对等ID，我知道这个人告诉我，

00:36:55.240 --> 00:37:00.010
他们有CID，您可能会在EHT收到的DHT级别上收到多个

00:37:00.010 --> 00:37:04.060
收到他们mmm，然后它做的第一件事就是支付lib p2p，我们刚刚

00:37:04.060 --> 00:37:08.310
发现另一个同伴将它们添加到您的群中，以便您将群分开

00:37:08.310 --> 00:37:12.130
你只是一群丹尼人，并且有一个活跃的清单

00:37:12.130 --> 00:37:16.000
还没有实现，所以您要做的第一件事就像嘿新朋友

00:37:16.000 --> 00:37:19.690
这些中的任何一个，当然也有这种轻微的大脑分离

00:37:19.690 --> 00:37:24.940
就像我们DHT告诉我们这个人有它一样，但是

00:37:24.940 --> 00:37:28.060
通过喜欢你喜欢的怪癖哦新的人连接我要发送给我

00:37:28.060 --> 00:37:31.780
要列出来的不像导演那样喜欢哦，然后去拿东西

00:37:31.780 --> 00:37:35.800
他们就像获得作为连接的对等发件人而获得的密钥一样

00:37:35.800 --> 00:37:40.540
一个人将你列为位，土地位是做什么工作的，然后因为

00:37:40.540 --> 00:37:44.319
它们现在已经成为您群中的一部分，您已经发出了第一个CID，您又回来了。

00:37:44.319 --> 00:37:48.010
阻止现在链接到数百个，但您仍然与那个

00:37:48.010 --> 00:37:52.960
给了你第一个，所以他会收到你的，让你更大的下一层

00:37:52.960 --> 00:37:57.560
图千CID的一个列表机会是，如果他们给了你

00:37:57.560 --> 00:38:01.810
他们可能拥有整棵树的根，因此很可能成为第一响应者

00:38:01.810 --> 00:38:18.740
与其他所有您不相信他们这样做

00:38:18.740 --> 00:38:24.800
目前不，他们可以，他们不放飞

00:38:24.800 --> 00:38:29.930
像是想要列表的广播一样开始的一些感觉

00:38:29.930 --> 00:38:34.579
唤起声音听起来有些垃圾，向所有人询问所有事情

00:38:34.579 --> 00:38:39.980
时间，所以有趣的是就像位交换一样，是线路上的定义

00:38:39.980 --> 00:38:44.780
协议的定义非常简单，只是广播要接收的列表看起来

00:38:44.780 --> 00:38:49.010
但这会冻结应用程序层，使其变得既智能又愚蠢

00:38:49.010 --> 00:38:53.329
关于它如何选择告诉哪些同龄人的要求，没有规定您必须

00:38:53.329 --> 00:38:57.230
帮助像您这样的每个同伴不必向每个人发送一份清单，

00:38:57.230 --> 00:39:01.579
一个简单的天真的实现，这正是我们一年前的样子

00:39:01.579 --> 00:39:06.470
现在我们有了一个叫做“比特交换会话”的东西，然后去了ipfs

00:39:06.470 --> 00:39:10.700
约西亚（Josiah）的背心仍在追赶，但是咬紧牙关只是一种方式

00:39:10.700 --> 00:39:14.450
应用程序层跟踪有关它曾经去过的对等状态的某些状态

00:39:14.450 --> 00:39:18.230
谈到哪些同行对先前的请求反应良好，因此

00:39:18.230 --> 00:39:24.890
它开始进行优化，因此在从对等方那里获得根CID的情况下

00:39:24.890 --> 00:39:28.700
表示掉位将针对该图的下一轮需求列表

00:39:28.700 --> 00:39:32.869
直接发送给反应良好的同伴，而不是发送给所有人

00:39:32.869 --> 00:39:37.369
但是如果对等体恰好只有根块而不是第二层

00:39:37.369 --> 00:39:40.790
由于某种原因，它最终会宣布另外两个同伴

00:39:40.790 --> 00:39:45.290
就像是非常有状态的，就像是尝试进行很多启发式操作一样

00:39:45.290 --> 00:39:49.940
所以就像等待几毫秒不不不响应开始

00:39:49.940 --> 00:39:53.599
开始将这些请求发送给更多的同and，更多的同and和更多的同s

00:39:53.599 --> 00:39:58.369
直到最终获得响应，它还会优化该列表，因此通过

00:39:58.369 --> 00:40:03.290
响应成功的对等节点，然后添加另一层优化

00:40:03.290 --> 00:40:09.100
我更喜欢那些反应迅速的同伴，所以

00:40:09.100 --> 00:40:16.000
试图使事情变得非常重要，并邀请所有人都喜欢

00:40:16.000 --> 00:40:20.470
您想让ipfs更快，因为您可能现在就可以告诉我们是否可以使位

00:40:20.470 --> 00:40:23.920
如果我们可以使位工作得更快，您将走得更聪明，从字面上看

00:40:23.920 --> 00:40:27.940
改善每个人对等网络的体验，例如

00:40:27.940 --> 00:40:33.970
汉娜（Hannah）负责这项工作，她得到了

00:40:33.970 --> 00:40:39.430
进行go bit swap工作，以便ipfs在github上进行斜杠go bit swap如果可以测试的话

00:40:39.430 --> 00:40:40.990
一些公开的公关会很棒

00:40:40.990 --> 00:40:46.090
如果您可以提出新的优化方案并进行一些解压缩，您会如何认为

00:40:46.090 --> 00:40:51.580
通过测试来改善事物会令人惊奇，人们总是会笑，但是随着

00:40:51.580 --> 00:40:57.550
测试这是一种耻辱，但是就像您想要帮助我们开展业务一样

00:40:57.550 --> 00:41:02.440
更快，这将是一个非常类似的高杠杆点，可以帮助您解决任何问题

00:41:02.440 --> 00:41:08.409
关于什么[音乐]

00:41:16.250 --> 00:41:21.530
有时需要减少的时间范围的膏药是吗

00:41:21.530 --> 00:41:26.890
即使不在这里，也可能没有想到

00:41:31.250 --> 00:41:38.490
我不知道我们一直在走，这很病态

00:41:38.490 --> 00:41:47.510
DHT的超时时间是如果存在的话，这意味着一个团队高得令人难以置信

00:41:51.890 --> 00:41:54.980
[音乐]

00:42:16.740 --> 00:42:19.099
这

00:42:19.710 --> 00:42:25.320
并且最多应为数字

00:42:29.160 --> 00:42:52.180
是的，但是像国家bhaiyaji这样的几个月，如果那发生的话

00:42:52.180 --> 00:43:03.000
灵魂保持稳定梨肯定会有所帮助

00:43:11.580 --> 00:43:18.390
然后是DHD中的其他人进行第二次会话

00:43:19.030 --> 00:43:35.550
小风你必须提供的客户

00:43:41.839 --> 00:43:45.369
我知道

00:43:47.010 --> 00:43:50.220
可能不会

00:44:24.930 --> 00:44:29.370
这是一个巨大的作弊和表现

00:44:29.700 --> 00:44:39.490
是的，让我们暂停一下，因为这是很好的聊天，并且会有时间

00:44:39.490 --> 00:44:51.490
最后，如果要进行位交换，那就是上下文列表，您可以发送给我们

00:44:51.490 --> 00:44:56.260
Co DS，您会得到回馈，您就像哦，我绝对想要所有

00:44:56.260 --> 00:45:00.610
如果只有我本可以告诉您我想要此CID，则此链接与

00:45:00.610 --> 00:45:04.240
它所链接到的所有内容都是您无法做的，只是您自己

00:45:04.240 --> 00:45:09.370
只是发送C ID并获取块返回图同步是实验性的，不是

00:45:09.370 --> 00:45:15.910
您今天可以在ipfs中真正启用的功能，但是您会听到人们的声音

00:45:15.910 --> 00:45:21.610
如果您收听ipfs IRC频道并参与其中，请谈论它

00:45:21.610 --> 00:45:25.960
值得简要介绍一下，Graphs Inc希望在哪些方面进行改进

00:45:25.960 --> 00:45:29.650
能够告诉您，所以当您发送1个列表而不是

00:45:29.650 --> 00:45:33.970
发送代码，您可以发送CID以及一些上下文，例如您可以告诉

00:45:33.970 --> 00:45:38.770
收件人，我需要此CID及其链接的所有内容，以便您可以通过我们

00:45:38.770 --> 00:45:44.680
基本上会打电话给IPL D选择器，就像我能获得CID星标一样

00:45:44.680 --> 00:45:50.140
就像从这里给我所有东西，这样遥控器就可以拥有更多的上下文

00:45:50.140 --> 00:45:54.490
就像好吧，我不会只给你你可能想要全部的障碍物

00:45:54.490 --> 00:46:00.130
他们中的一个，所以我要开始将所有这些都寄给你，但是如果

00:46:00.130 --> 00:46:03.150
但是，如果这种优化使您兴奋，那么可以画图

00:46:03.150 --> 00:46:11.460
想想是去的地方，让你的肌肉去钉住，钉住是怎么回事

00:46:11.460 --> 00:46:17.540
您告诉ipfs请保留这些阻止，以便引用您为什么要睡觉

00:46:17.540 --> 00:46:20.820
ipfs使您感觉好像每个块都是本地的

00:46:20.820 --> 00:46:24.720
没有命令说去从远程服务器检索此文件

00:46:24.720 --> 00:46:29.010
所以固定就是你要告诉我，我要一直保持给定的区块

00:46:29.010 --> 00:46:34.590
在本地，一开始我们就说过，当您添加文件时，文件存储为

00:46:34.590 --> 00:46:39.480
在您的仓库中添加块，但也值得注意的是，每个块都添加了所有

00:46:39.480 --> 00:46:45.990
来自其他Pitter的取款被缓存在您的仓库中，因此如果您有缓存

00:46:45.990 --> 00:46:49.500
那么您将需要对其进行管理，以便可以通过以下方式控制缓存大小

00:46:49.500 --> 00:46:53.970
只需在ipfs配置文件中设置最大最大大小限制，然后您就可以

00:46:53.970 --> 00:46:57.930
启用垃圾收集以确保我们的背心尽最大努力保持

00:46:57.930 --> 00:47:03.480
在最大大小限制之下的存储量，因此，如果您存储的块数超过了

00:47:03.480 --> 00:47:09.060
您的大小限制，然后GC进程将触发垃圾问题，并将其删除

00:47:09.060 --> 00:47:15.180
您本地存储库中所有未固定的区块，因此我们可以在网络上看到它的实际作用

00:47:15.180 --> 00:47:21.060
演示垃圾收集我的意思是这不是世界上最令人兴奋的事情，但

00:47:21.060 --> 00:47:27.810
所以我以前加了猫图片我得到了这些方块，我可以这样

00:47:27.810 --> 00:47:31.710
当前的意思是红色是根块，因此它被递归固定，我们将进入

00:47:31.710 --> 00:47:34.020
一分钟后，绿色的就间接地被钉住了

00:47:34.020 --> 00:47:37.380
因为红色的递归固定在那里

00:47:37.380 --> 00:47:42.810
而灰色的现在已取消固定，有趣的是这些灰色的

00:47:42.810 --> 00:47:47.730
您现在可以看到这些是元数据，它们与未固定的元数据并不完全相同

00:47:47.730 --> 00:47:51.420
块这些是引脚设置，这是此演示的一个怪癖，因为

00:47:51.420 --> 00:47:57.270
演示正在可视化本地ipfs refs的输出，就像每一个

00:47:57.270 --> 00:48:01.160
阻止您的回购中，包括我们没有真正谈论的秘密元数据

00:48:01.160 --> 00:48:06.300
它是引脚设置，它是如何跟踪固定的，也是输出

00:48:06.300 --> 00:48:12.630
ipfs固定LS告诉我们固定的每个块，因此我们可以取消固定

00:48:12.630 --> 00:48:14.820
是猫的照片，如果我们要去打开这一个

00:48:14.820 --> 00:48:18.180
如果我们要在网关上打开此CID，则会在网关上看到这个

00:48:18.180 --> 00:48:23.040
猫挑的，但这是关于固定的，所以这些东西都固定了，所以如果我跑步

00:48:23.040 --> 00:48:28.020
DC现在什么也没发生，因为它没有可以解开的固定块

00:48:28.020 --> 00:48:32.100
删除警告，例如灰色的或不固定的，但是它们是固定的，所以

00:48:32.100 --> 00:48:40.050
无法删除它们，但如果我们将所有东西都固定，现金的灰色就可以了，所以

00:48:40.050 --> 00:48:44.550
现在他们都在骑脚踏车并运行GC，这就是您可能要做的

00:48:44.550 --> 00:48:49.470
视觉模型，像一个别针的东西，我要放一放，然后就

00:48:49.470 --> 00:48:56.010
有点想念，让我们再次见到那只猫，所以那块仍然是大头针

00:48:56.010 --> 00:49:06.120
设置好，这样我们就可以看到更多像DC一样的块了

00:49:06.120 --> 00:49:11.270
许多可怕的想法从来没有做过你从未做过的事情

00:49:11.270 --> 00:49:16.110
好吧，我们稍后会再回头给他-谁能快速看到

00:49:16.110 --> 00:49:19.260
固定和取消固定，让我们来谈谈我们在那看到的红色

00:49:19.260 --> 00:49:23.520
上一张幻灯片和上一个Web演示都以递归方式固定，因此如果您运行

00:49:23.520 --> 00:49:41.130
ipfs pin，所以您大概可以猜测一下这意味着什么，因此它们

00:49:41.130 --> 00:49:46.380
递归固定红色是您所说的，请固定此块，所有

00:49:46.380 --> 00:49:50.820
它链接到的块以及它们链接到的所有块以及链接的所有块

00:49:50.820 --> 00:49:56.700
直到您用完字体大小以放置诸如此类的任何冒犯

00:49:56.700 --> 00:50:00.990
希望您对DAG的结构有一些心智模型，并且

00:50:00.990 --> 00:50:04.820
核心课程a中的图形，因此您可以获得像有向无环图一样的整体图

00:50:04.820 --> 00:50:10.610
所以这就是您递归固定任何给定文件的路由块

00:50:10.610 --> 00:50:15.960
固定整棵树，以便能够递归固定某些东西是有用的

00:50:15.960 --> 00:50:20.010
节省劳力的工作，因为这意味着您不必手动固定每个

00:50:20.010 --> 00:50:24.030
从您的角度来看，只有一个传递引用块

00:50:24.030 --> 00:50:27.590
一旦ID给我一个文件

00:50:27.660 --> 00:50:31.630
还值得注意的是，例如绿色的是间接固定的，所以它们是

00:50:31.630 --> 00:50:38.680
被引用也值得注意的是，ipfs将固定您添加的文件

00:50:38.680 --> 00:50:43.810
到您的仓库中，所以这就像我们假设您在乎自己想要的方式

00:50:43.810 --> 00:50:49.930
将您添加的文件保存在文件中，但是不会记录您从他人那里获得的文件

00:50:49.930 --> 00:50:59.260
因此它们被放入您的仓库中，并被缓存并且受到谴责

00:50:59.260 --> 00:51:04.180
差异，就像我添加的东西是固定的东西，我得到的不是固定的，但我

00:51:04.180 --> 00:51:10.060
可以选择固定它，为什么要为什么不将其缓存在固定块中

00:51:10.060 --> 00:51:14.100
您的回购源何必困扰

00:51:14.460 --> 00:51:20.320
我喜欢称呼它为互惠式共同托管，或者来自诸如此类的问题

00:51:20.320 --> 00:51:25.660
不要水be，所以如果您从网络中获得障碍，则将其存储在您的计算机中

00:51:25.660 --> 00:51:30.790
回购，这样您就可以成为提供者，但同时拥有两个

00:51:30.790 --> 00:51:34.180
级别的东西，例如洪流，例如，您已经下载了一些内容

00:51:34.180 --> 00:51:40.870
成为可以修改这些位的人，那么我们使用钉扎的方法是

00:51:40.870 --> 00:51:44.050
只是说一句好吧，这真的像是一种管理什么的机制

00:51:44.050 --> 00:51:48.310
垃圾收集器，什么也不做，您得到的东西让您想象您正在运行

00:51:48.310 --> 00:51:53.020
ipfs同伴，您正在访问许多网页，并且正在加载它们

00:51:53.020 --> 00:51:57.340
通过ipfs网络，您将成为这些网站的共同主持人，并且

00:51:57.340 --> 00:52:02.560
您知道ipfs在默认情况下会选择让您加入，这很有趣，

00:52:02.560 --> 00:52:08.080
我为这个选择感到鼓掌，我认为这很好，但最终您可以

00:52:08.080 --> 00:52:11.710
开始发现您喜欢访问所有Wikipedia，并且您已经

00:52:11.710 --> 00:52:15.670
也许不想发布所有Wikipedia，所以您可以触发

00:52:15.670 --> 00:52:20.950
手动进行垃圾收集，或者您可以设置最大大小并使其缓慢

00:52:20.950 --> 00:52:24.790
像清除您不想保留的方块，然后再清除

00:52:24.790 --> 00:52:30.250
钉扎是一种主动地说实际上我该死的爱Wikipedia的一种方式

00:52:30.250 --> 00:52:34.780
要固定它，我会得到一个更大的硬盘，我也会

00:52:34.780 --> 00:52:38.980
主动对智商巨星说不要垃圾收集维基百科，因为我在乎

00:52:38.980 --> 00:52:41.800
关于这一点，我要保留本地副本，

00:52:41.800 --> 00:52:57.520
将其提供给网络并完全成为另一个提供商，因此我们不

00:52:57.520 --> 00:53:01.300
告诉DHT上下文级别，我们只是告诉DHT我们正在提供东西

00:53:01.300 --> 00:53:05.650
这很有趣，因为很明显，如果所有人都启用了AGC，而您

00:53:05.650 --> 00:53:09.340
告诉HTV有关您刚发生在她身上的事情，可能会导致

00:53:09.340 --> 00:53:13.420
更多DHT流失可能是有趣的情况，意向有所改善

00:53:13.420 --> 00:53:15.580
在那里，但现在取决于，它也

00:53:15.580 --> 00:53:21.430
取决于您的提供商策略，因此默认情况下，您将提供您拥有的东西

00:53:21.430 --> 00:53:24.970
固定和您尚未去过的事物，但如果您知道自己在

00:53:24.970 --> 00:53:28.359
将会有一个非常非常旅途中的缓存，您实际上不需要的东西

00:53:28.359 --> 00:53:31.720
提供您可以将您的提供者策略限制为仅宣布的阻止您

00:53:31.720 --> 00:53:37.810
已固定，因此在ipfs land中固定这个词已成为重要的一点

00:53:37.810 --> 00:53:42.280
由于我的方式超载，所以现在这是一个有点令人困惑的术语

00:53:42.280 --> 00:53:45.609
关于块是本地存储还是远程存储，公开透明

00:53:45.609 --> 00:53:50.619
存储，所以如果您愿意的话，我可以使用pinning命令来表示我

00:53:50.619 --> 00:53:57.040
会拿到一份安德烈寄给他的东西的副本，或者我可以说我已经

00:53:57.040 --> 00:53:59.770
添加了此文件，我将其固定在本地，两种方式都一样

00:53:59.770 --> 00:54:06.970
这是本地操作，但有些人用它来指称，就像我将成为一个

00:54:06.970 --> 00:54:11.920
远程数据集的共同主机，由于存在固定，因此它也过载

00:54:11.920 --> 00:54:17.200
服务，这些人提供的API可让您向他们询问

00:54:17.200 --> 00:54:21.609
您能不能代表我在您的本地计算机上将其固定，但是

00:54:21.609 --> 00:54:25.780
我们的目的是您了解我的PFS固定是本地的，就像我固定到我的

00:54:25.780 --> 00:54:32.859
机器并帮助构架，了解这是适合您的销钉

00:54:32.859 --> 00:54:38.140
您看到了我一直指向的网络演示中的灰色块，就像元数据一样

00:54:38.140 --> 00:54:40.960
这些东西不会像钉住钉子一样消失，因为你所拥有的一切

00:54:40.960 --> 00:54:46.560
要做的是在此引脚组中添加see ID，这只是唯一C ID的列表

00:54:46.560 --> 00:54:52.770
你已经添加到你已经说我把这个销钉这个C

00:54:53.630 --> 00:54:58.010
 Hector有一个关于群集和IP的选修课程，该群集是

00:54:58.010 --> 00:55:02.720
在某个时候令人惊奇，您将像基础设施一样写作

00:55:02.720 --> 00:55:07.070
如果您要做的不只是个人实验，还可以使用IP FS的模式

00:55:07.070 --> 00:55:10.790
如果您要托管其他人的数据，则可能不想保留

00:55:10.790 --> 00:55:14.840
您必须拥有越来越大的硬盘驱动器和越来越大的服务器

00:55:14.840 --> 00:55:19.190
可能想横向扩展我自称的群集可以让您做到这一点

00:55:19.190 --> 00:55:23.540
让我们在集合中使用分片，将其分成多个服务器，最合理的是

00:55:23.540 --> 00:55:27.890
除非您设置复制因子，否则如果您的计算机中有10个10 ipfs节点

00:55:27.890 --> 00:55:31.940
群集，您可以说给我一个3的复制因子，然后您

00:55:31.940 --> 00:55:37.040
只需将文件添加到一个群集节点，然后在

00:55:37.040 --> 00:55:40.160
引擎盖会将这些方块散布在三台机器上，因此有三份副本

00:55:40.160 --> 00:55:44.690
至少跨越十个，然后它将开始达到负载均衡，他们将

00:55:44.690 --> 00:55:47.900
平衡数据存储，因此当您添加越来越多的文件时，

00:55:47.900 --> 00:55:51.350
随机移动块，以便总是有三份副本，但是

00:55:51.350 --> 00:55:55.580
每台机器存储的数据量大致相同，另一件事很酷

00:55:55.580 --> 00:56:00.500
关于集群，我可能会抢劫Hector告诉你，但是你可以

00:56:00.500 --> 00:56:05.480
做成一簇簇，这样超级酷，我要把她留在外面

00:56:05.480 --> 00:56:14.330
那里的房间太好了，几乎是一个浴室，是1.0，是的，那里有

00:56:14.330 --> 00:56:19.220
在ipfs团队内部有想法的人应该是丑陋的

00:56:19.220 --> 00:56:27.740
始终以更快的速度群集是好的，可以将主页拉伸删除或

00:56:27.740 --> 00:56:33.650
不想也不想这个块我不希望这个块没有删除是

00:56:33.650 --> 00:56:36.890
当地最重要的一点，我们都是彼得球员世界的朋友

00:56:36.890 --> 00:56:42.320
可能不会让您感到惊讶，您可以运行ipfs块RM CID和

00:56:42.320 --> 00:56:47.930
从您的仓库中删除它，但是您不能从其他人的仓库中删除块

00:56:47.930 --> 00:56:54.410
因为他们是具有代理人的个人，因为他们无法从中删除内容

00:56:54.410 --> 00:56:56.830
您的存储库，您无法从其存储库中删除内容

00:56:56.830 --> 00:57:00.430
而您会惊讶地发现有多少人来办公室打来电话，成为

00:57:00.430 --> 00:57:04.950
就像我该如何从ipfs中删除某些东西一样

00:57:04.950 --> 00:57:10.510
您是否曾经向老板发送过电子邮件，您不应该这样做吗？

00:57:10.510 --> 00:57:13.780
一旦您发送它就不见了，我的意思是我不像公司那样站着

00:57:13.780 --> 00:57:18.010
Microsoft Exchange服务器，但是一旦发送就消失了，就像带来

00:57:18.010 --> 00:57:22.869
阻止返回，因此，如果您将阻止添加到本地存储库中，则不会与之共享

00:57:22.869 --> 00:57:28.090
任何人，您将其删除，很有可能通常会消失

00:57:28.090 --> 00:57:32.380
其他人独立添加它，没有，没有，没有

00:57:32.380 --> 00:57:43.450
您需要注意的背景音乐，以便演讲者的下一行记录

00:57:43.450 --> 00:57:48.640
是ipfs和当前模型之间的区别是

00:57:48.640 --> 00:57:52.090
网站发布了一些违法的内容，您要求他们执行任务

00:57:52.090 --> 00:57:55.450
删除它，就无法知道是否有其他网站没有复制它

00:57:55.450 --> 00:58:01.210
镜像它只是不知道，并且在ipfs中至少可以得到一个主观的看法

00:58:01.210 --> 00:58:04.510
您可以看到并说DHD优良概率的网络

00:58:04.510 --> 00:58:08.260
有人还能得到这个吗？有人提供这个东西，我非常

00:58:08.260 --> 00:58:12.430
感到尴尬，您可以用它来构架您如何接近世界

00:58:12.430 --> 00:58:15.550
也许它已经消失了，您不能谈论它，但仍然在那里而您

00:58:15.550 --> 00:58:19.480
好像可能不得不放弃这个现在的狗屎

00:58:19.480 --> 00:58:22.390
但是，是的，这是一个非常有趣的差异，我认为

00:58:22.390 --> 00:58:29.580
这是ipfs office的一项改进，说实话很重要

00:58:29.580 --> 00:58:37.780
如果尝试在固定的cid上执行IP FS时钟RM，则UX会出错

00:58:37.780 --> 00:58:41.020
只是按照您目前的意思做，我自称会给您

00:58:41.020 --> 00:58:46.000
错误，它会说是可以取消固定，我不能删除它，因为它是

00:58:46.000 --> 00:58:51.070
固定，作为关心UX的人，我认为这只是我们必须要做的事情

00:58:51.070 --> 00:58:53.920
修复，我认为我们应该认为我理解你的意思

00:58:53.920 --> 00:58:59.500
在这种情况下，我会为您取消固定，然后将其删除，但很高兴知道

00:58:59.500 --> 00:59:04.330
现在，如果您要尝试删除某些内容，则可能必须运行ipfs pin

00:59:04.330 --> 00:59:09.540
 RM首先，您会看到该错误不要惊慌，可以将其删除

00:59:09.540 --> 00:59:15.190
我在网络演示中发现的就是不要删除您的密码集

00:59:15.190 --> 00:59:19.390
元数据，因为您的IP FS很快就变得非常不高兴ipfs块

00:59:19.390 --> 00:59:23.080
删除命令将执行您告诉它的所有操作

00:59:23.080 --> 00:59:27.640
所以那边有几个尖的边缘，因为我试图

00:59:27.640 --> 00:59:34.000
模拟TC，发生坏事，我删除了很多本地索引DBS

00:59:34.000 --> 00:59:41.109
该演示链接不重复，所以很多人谈论有感

00:59:41.109 --> 00:59:45.510
阻力以及我们设备中的这种东西正在努力使之成为可能

00:59:45.510 --> 00:59:50.470
但也值得注意的是，就像有时有些数据您无法

00:59:50.470 --> 00:59:54.220
由于法律原因进行复制，或出于道德原因而不想进行复制

00:59:54.220 --> 00:59:58.450
原因，因此在某些情况下您不想参加

00:59:58.450 --> 01:00:02.380
我相信某些方法可以复制某些块

01:00:02.380 --> 01:00:07.000
还有更多的支持，例如，有一个想法，我们可以允许个人

01:00:07.000 --> 01:00:12.849
组织国家/地区发布不存在的See ID列表

01:00:12.849 --> 01:00:17.740
不应被复制，如果您位于，则不应尝试托管的城市列表

01:00:17.740 --> 01:00:25.240
以这种方式代替当地法律信仰或社会规范

01:00:25.240 --> 01:00:29.650
是一种情况，说您尝试从英国访问YouTube，而您

01:00:29.650 --> 01:00:32.589
尝试查看一些具有类似限制或尚未发布的视频

01:00:32.589 --> 01:00:37.359
在英国，它只是说YouTube只是在猜测我在哪里

01:00:37.359 --> 01:00:41.980
根据您知道的合理估计来访问Internet

01:00:41.980 --> 01:00:46.900
我的访问IP地址，然后我经常看到各种视频，就像你一样

01:00:46.900 --> 01:00:53.740
无法看清这是什么荒谬的愚蠢法律，但更多

01:00:53.740 --> 01:00:59.290
重要的是，像每个人一样，应该有权决定哪种内容

01:00:59.290 --> 01:01:03.520
对他们来说是好是坏，我们想要获得的是您所处的功能

01:01:03.520 --> 01:01:06.520
没有被拒绝从您碰巧访问互联网的地方访问，但是

01:01:06.520 --> 01:01:12.520
基于更多的选择，例如选择订阅您所在的co DS列表

01:01:12.520 --> 01:01:16.270
选择说我不会这样做，而更多是基于知情同意

01:01:16.270 --> 01:01:20.190
而不是像我要照顾你那样集中

01:01:20.190 --> 01:01:23.910
看看这个，如果您对该主题感兴趣，我们将深入探讨

01:01:23.910 --> 01:01:29.609
今天晚些时候潜水，那里有很多挑战，就像想象我们

01:01:29.609 --> 01:01:32.339
说服一个民族国家开始发布他们看到的ID列表

01:01:32.339 --> 01:01:38.310
不想让他们的居民看那些名单可能会变得很长，或者如果

01:01:38.310 --> 01:01:43.050
你有个小孩，就像我想象的那样，人们开始发布调皮的东西

01:01:43.050 --> 01:01:47.460
可怕的ID列表，它们可能不应该以纯文本格式存储在

01:01:47.460 --> 01:01:50.550
任何人都可以像查看所有已打开的ID一样开始

01:01:50.550 --> 01:01:55.200
他们是因为，而不是不托管他们，而是像人一样给予

01:01:55.200 --> 01:01:58.470
像孩子一样，我很漂亮，就像是我还是个孩子的时候，

01:01:58.470 --> 01:02:02.220
找到一个淘气的城市清单我要做的第一件事就是不应用它，我会

01:02:02.220 --> 01:02:07.800
看看每个CID实习生，直到我生气为止，所以它受到了挑战，但是那很深

01:02:07.800 --> 01:02:11.160
潜水，这一直是d中数据的生命周期。

01:02:11.160 --> 01:02:13.400
时间

