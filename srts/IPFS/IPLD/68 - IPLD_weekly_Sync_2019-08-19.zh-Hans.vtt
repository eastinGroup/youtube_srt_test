WEBVTT
Kind: captions
Language: zh-Hans

00:00:16.930 --> 00:00:29.290
欢迎大家，这是IPL de每周同步会议，它是8月19日

00:00:29.290 --> 00:00:38.030
2019年，这就是每周我们只报告我们所做的事情，然后

00:00:38.030 --> 00:00:45.590
讨论任何未解决的问题，如果您想谈论是的，我马上开始

00:00:45.590 --> 00:00:53.510
从我一直在努力的东西开始，我从好消息开始，因为

00:00:53.510 --> 00:00:59.120
这个问题，您可以在Seaboard世界中注册某些标签，

00:00:59.120 --> 00:01:08.180
有人报名参加42，事实证明他们真的很不错

00:01:08.180 --> 00:01:13.550
人们，他们决定我们可以拥有这个标签，然后他们就搬到一些

00:01:13.550 --> 00:01:21.890
其他标签，所以海边的CD会占用40，目前我们

00:01:21.890 --> 00:01:28.670
使用，我们会在上面盖上官方印章，尤其是当我花时间的时候

00:01:28.670 --> 00:01:35.570
现在，我还初稿是因为他们需要一个规格，这是

00:01:35.570 --> 00:01:40.549
我正在做的事情，希望我能对我的计划做出反应，以完成此任务

00:01:40.549 --> 00:01:45.380
一周，因为我也将在下周参加会议，所以十周

00:01:45.380 --> 00:01:50.119
我不会的日子，我们会开会的，所以我希望本周能发布它

00:01:50.119 --> 00:01:57.320
所以，我们很高兴能继续下去，是的，此标签已在EI正式注册

00:01:57.320 --> 00:02:08.440
你知道的除了我是，我做了一点我给东西让他们

00:02:08.440 --> 00:02:15.590
我以为单身人士有问题，所以我基本上要做的是

00:02:15.590 --> 00:02:20.090
我做了这项工作，我觉得我需要全世界的iPhone，但是它变成了

00:02:20.090 --> 00:02:23.840
就像我不记得为什么我以为我会需要它，但无论如何我都做了工作

00:02:23.840 --> 00:02:34.590
和工作，所以他们很高兴，是的，是我的下一个名单

00:02:34.590 --> 00:02:45.299
埃里克（Eric）是极简主义者，所以我在灵魂上度过了漫长的黑暗下午茶，非常体贴

00:02:45.299 --> 00:02:51.340
比我想要的更沉思，甚至没有时间去弄清楚我们应该怎么做

00:02:51.340 --> 00:02:58.120
与地图排序有关，我认为这是我们已经知道的一个问题

00:02:58.120 --> 00:03:03.099
问题，到目前为止，我们在某种程度上都试图躲避它

00:03:03.099 --> 00:03:10.180
成功地表现得很好，我正在尝试解码逻辑，

00:03:10.180 --> 00:03:13.719
可以很好地工作，并且在我所生成的代码生成方面非常有效

00:03:13.719 --> 00:03:18.579
围绕架构进行工作，我喜欢我们接触的十个宝石

00:03:18.579 --> 00:03:28.180
这个地图订购的东西，它只是一个很大的毛茸茸的领域，所以我花了一个

00:03:28.180 --> 00:03:33.310
很多时间想出解决方案，我想到目前为止，我所拥有的

00:03:33.310 --> 00:03:38.799
提出的实际上是一堆在那儿引起矛盾的事实

00:03:38.799 --> 00:03:43.840
完全是任何一个单一的解决方案，我都感到很沮丧，并不是真的

00:03:43.840 --> 00:03:50.620
我想要的，但我想可能是进步，我们必须做些什么，因为

00:03:50.620 --> 00:03:56.729
我们在数据模型中有迭代器，无论它在哪里，它们都必须具有行为

00:03:56.729 --> 00:04:04.359
如果数据模型喜欢我们的存储，则某些编解码器具有订购意见

00:04:04.359 --> 00:04:08.439
记忆中有不同的排序意见，而不是自然而然的

00:04:08.439 --> 00:04:11.979
成本会出现在您必须对某些内容进行细微调整或重新整理的地方

00:04:11.979 --> 00:04:16.930
其他预定义的订单，不管有多少开销，这只是一个问题

00:04:16.930 --> 00:04:24.310
什么样的开销以及可以将其推向何处，是的，

00:04:24.310 --> 00:04:28.449
例如火腿之类的东西会有自己的订购意见

00:04:28.449 --> 00:04:32.050
这是基于它们内部的逻辑并试图违背规则

00:04:32.050 --> 00:04:38.830
在这些方面也将具有固有的性能成本，只是没有明显的

00:04:38.830 --> 00:04:42.240
灌篮，调和所有这些东西

00:04:42.240 --> 00:04:45.840
所以我还是想尝试一下，找出哪些事情

00:04:45.840 --> 00:04:50.460
甚至是代码中的界面设计问题与规范问题，以及

00:04:50.460 --> 00:04:56.160
规格问题应该落地，所以我认为这只是一次重大探索

00:04:56.160 --> 00:05:00.750
首先创建文档，然后我们将不得不经历几轮

00:05:00.750 --> 00:05:06.389
弄清楚它的哪一部分甚至走到了我到目前为止所拥有的什么想法

00:05:06.389 --> 00:05:11.009
这似乎简化了很多事情，只是确保订购

00:05:11.009 --> 00:05:17.669
意见大多与编解码器层保持联系，例如当我们使用卡座C时，

00:05:17.669 --> 00:05:23.160
我们关心与c1平台一致的缓存排序顺序

00:05:23.160 --> 00:05:26.280
但是如果您在这里使用另一个编解码器，那么我会有所不同，所以如果您

00:05:26.280 --> 00:05:30.470
有不同的规范顺序就可以了

00:05:30.470 --> 00:05:39.000
那可以回答一些问题，但不是所有问题都可以解决，所以我的意思是

00:05:39.000 --> 00:05:43.650
在实践中，您最终要处理一个枚举类型的

00:05:43.650 --> 00:05:47.580
至少您最终会在一些原始对象上处理一个内存迭代器

00:05:47.580 --> 00:05:51.659
被序列化的结构，所以我们甚至没有能力确定

00:05:51.659 --> 00:05:57.900
像法国这样的订购权，例如我知道的

00:05:57.900 --> 00:06:01.770
杰森（Jason）规范现在说，这些文件需要在utf-8中订购，就像当您

00:06:01.770 --> 00:06:06.419
对它们进行编码，因为它没有在相邻规范中定义，因此当然可以

00:06:06.419 --> 00:06:10.500
排序是否将它们放入Python对象中，就像每次反序列化一样

00:06:10.500 --> 00:06:14.159
他们现在处于新的随机顺序，因为在内部

00:06:14.159 --> 00:06:17.430
Python中的结构，它使用了某种类型的集合，并且在某种程度上

00:06:17.430 --> 00:06:25.110
而不是像是在做，是的，所以你在我的文件中做了这些笔记

00:06:25.110 --> 00:06:29.750
是的，但这是几种语言的一个非常实际的问题

00:06:29.750 --> 00:06:36.120
一些语言可以绘制地图并合理地内部实施

00:06:36.120 --> 00:06:40.199
高效的方式，而我们中的一些人就好像在那个右边运气不佳

00:06:40.199 --> 00:06:44.159
就像我认为Python可能是其中一种对我而言

00:06:44.159 --> 00:06:49.740
在JavaScript中非常cha恼

00:06:49.740 --> 00:06:55.500
保留顺序，但它基于插入顺序，因此有好处

00:06:55.500 --> 00:07:00.180
就像我们有一个要编码的命令一样，它将最终出现在

00:07:00.180 --> 00:07:04.560
反序列化的结构，这样很好，但是我们在编码时也需要

00:07:04.560 --> 00:07:10.050
如果您插入的是aria，则对它们进行排序，因为您知道utf-8字符排序，因此

00:07:10.050 --> 00:07:15.380
嗯，他们还是喜欢工作吗，我们还是可以的，但是没有下订单。

00:07:15.380 --> 00:07:21.000
像是Ruby的地图，不应该在那里整理地图

00:07:21.000 --> 00:07:27.150
这是不同的，就像我的意思是像你们一样，但是宝贝，您仍然

00:07:27.150 --> 00:07:33.630
当然需要在地图上有一个迭代器，但是是的，我喜欢这个命令

00:07:33.630 --> 00:07:36.389
确实很重要，所以更像是有人会过滤某物

00:07:36.389 --> 00:07:43.710
也许订购并不重要，是的，所以我认为老实说

00:07:43.710 --> 00:07:46.800
阻止收集实际上更容易，因为我们必须去写

00:07:46.800 --> 00:07:50.789
每一个的迭代器，所以我们可以指定行为一点我

00:07:50.789 --> 00:07:56.340
被称为问题部分的是我们在其中充分利用的编解码器层

00:07:56.340 --> 00:08:01.229
现有的语言水平假设喜欢融入其中

00:08:01.229 --> 00:08:05.580
编码器，然后它可能会给我们返回相同的语义数据，

00:08:05.580 --> 00:08:09.090
它甚至可能具有相同的代码ID，这是我们需要担心的

00:08:09.090 --> 00:08:11.099
是的，是的，有很多东西

00:08:11.099 --> 00:08:16.650
在那个领域是令人恐惧的，实际上是我们呈现给我们的界面设计

00:08:16.650 --> 00:08:21.509
其他人正在使用这些库，所以我正在查看这个，因为我已经有了这个

00:08:21.509 --> 00:08:26.669
如果我只有一个数据树，那么节点接口就在哪里

00:08:26.669 --> 00:08:32.610
阻止网，以便其中没有高级布局的东西，那么那将是

00:08:32.610 --> 00:08:36.659
序列化此地图，所以就像也许我们说好吧，一切都有

00:08:36.659 --> 00:08:41.849
规范顺序，然后将是某种排序顺序的地形，但

00:08:41.849 --> 00:08:47.160
那么如果我还有另一种由汉普特实现的事情，我正在暴露

00:08:47.160 --> 00:08:51.390
作为一个节点，我要求使用相同的迭代器方法，然后

00:08:51.390 --> 00:08:56.160
给我火腿装饰命令，那么我们该如何写关于

00:08:56.160 --> 00:09:00.279
这不会令用户惊讶，当他们使用这些不同的

00:09:00.279 --> 00:09:05.050
它们下面的各种事物变得一致但始终不同

00:09:05.050 --> 00:09:11.949
命令是的，这很棘手，但不希望不会成为

00:09:11.949 --> 00:09:21.970
像这三个命令的顺序不同还是基本上取决于编解码器，但这是

00:09:21.970 --> 00:09:26.499
例如，像JSON这样的问题，特别是对于JSON

00:09:26.499 --> 00:09:31.689
由于某种原因，未指定任何订单，可能是因为这样的原因

00:09:31.689 --> 00:09:36.550
位问题说，如果我们不指定格式，并且如果您想指定格式，该格式是什么

00:09:36.550 --> 00:09:41.079
已经订购了地图，那么您使用的是订购地图，而不是普通的地图，所以为什么您要

00:09:41.079 --> 00:09:47.050
需要在地图中排序，因为我们在乎哈希和方法

00:09:47.050 --> 00:09:52.480
语言是对数据进行编码和解码，您可能根本不愿意执行任何操作

00:09:52.480 --> 00:09:56.680
到一个对象，然后进行编码，解码，重新编码，然后结束

00:09:56.680 --> 00:10:01.990
用不同的哈希值访问，没有访问的要点是，任何代码

00:10:01.990 --> 00:10:05.740
是非法的，需要确保它们总是以相同的顺序结束

00:10:05.740 --> 00:10:10.269
但是如果你能做点什么都没关系，但是如果他是你的话

00:10:10.269 --> 00:10:15.550
编码，那么您需要确保它是相同的顺序，是的，就像一件事情一样

00:10:15.550 --> 00:10:19.269
我们必须在编码器和编解码器规范中处理的是

00:10:19.269 --> 00:10:26.670
不是，是的，但是就像我们不应该期望它在格式层中完成

00:10:26.670 --> 00:10:34.899
对不起，不，它在数据模型上，但是在编解码器上，是的，是的

00:10:34.899 --> 00:10:40.329
他们基本上是的，事实上我不认为我们甚至不需要我们不必

00:10:40.329 --> 00:10:44.050
在编解码器之间具有一致的排序，我们只需要进行排序即可

00:10:44.050 --> 00:10:47.910
在编解码器中，是的，他可以等等，因为

00:10:47.910 --> 00:10:53.740
立即同意那将是很好，那将是超级正确的，但是它也

00:10:53.740 --> 00:10:58.629
付出了沉重的代价，因为如果您按一个规范的顺序进行解析

00:10:58.629 --> 00:11:03.309
编解码器，比如说它使用了一些我不知道它有一些排序的顺序，但是

00:11:03.309 --> 00:11:08.589
就像这个编解码器一样，我们做出了怪异的选择

00:11:08.589 --> 00:11:12.399
存储一切，比方说数据模型具有该数据模型没有意见

00:11:12.399 --> 00:11:15.370
我们实现所有内容以保持准确的顺序，因此它

00:11:15.370 --> 00:11:19.450
保留一个，然后我们将其序列化到另一个编解码器中，该编解码器具有

00:11:19.450 --> 00:11:28.180
不同的排序顺序拍摄现在您必须进行排序您必须分配所有

00:11:28.180 --> 00:11:32.470
在一侧进行排序所需的额外内存是，但这是如果

00:11:32.470 --> 00:11:35.170
你从某人的海边偷走了，这总是发生

00:11:35.170 --> 00:11:39.460
就像西摩那样，是的，我们将不得不订婚

00:11:39.460 --> 00:11:44.380
因为他会指定一个特定的顺序，这是令人兴奋的事情

00:11:44.380 --> 00:11:49.300
如果您使用这样的方法会发生，例如使用Python安装它，然后在

00:11:49.300 --> 00:11:54.850
只有蟒蛇陷阱，然后将其存储在您或618中会发生什么，但是

00:11:54.850 --> 00:12:03.970
如果您通过简单功能更改订单，Seaboard可以提供

00:12:03.970 --> 00:12:15.130
是规格中指定的订单，所以您可以更改它，如果我们有的话

00:12:15.130 --> 00:12:19.089
有另一个编解码器，尽管顺序不同，这意味着当您

00:12:19.089 --> 00:12:21.750
在它们之间切换您将要进行排序

00:12:21.750 --> 00:12:27.160
曲柄，这意味着我们可以在数据模型中输入的任何可能的意见是

00:12:27.160 --> 00:12:32.940
对于某些正确的接口集是错误的，因此我们在此不发表意见

00:12:32.940 --> 00:12:40.290
好吧，这很可能是答案的一部分，但是我不知道这也很粗糙

00:12:40.290 --> 00:12:44.170
这里有不止一个关注的问题，我想我们就像一个

00:12:44.170 --> 00:12:48.520
仅列举哪些问题很重要的文档，因为我们已经

00:12:48.520 --> 00:12:52.270
现在从一个担忧中解脱出来，但这是其中的一件事

00:12:52.270 --> 00:12:55.030
原来让我在这里是一个非常不同的关注，只是在玩

00:12:55.030 --> 00:13:01.030
解析器的效率，就像我担心的另一件事一样，如果我们有

00:13:01.030 --> 00:13:04.180
模式中的结构定义，我在验证中解析内容

00:13:04.180 --> 00:13:08.890
与此相对，如果我正在获取此结构，则该结构具有一堆可选字段

00:13:08.890 --> 00:13:15.339
以预先知道的严格顺序，我可以为解析器和验证器编码

00:13:15.339 --> 00:13:20.260
这使用零额外的内存来完成其工作，因为它只是

00:13:20.260 --> 00:13:24.640
逐个字段地应用可选性约束，所以唯一的限制

00:13:24.640 --> 00:13:29.920
需求是一个整数，表示我已经启动了多少个字段，如果我

00:13:29.920 --> 00:13:35.320
必须以随机的顺序接受事物，这样会增加成本，不，只有一个

00:13:35.320 --> 00:13:38.740
像这样的一堆东西，以某种形式的地方出现

00:13:38.740 --> 00:13:47.170
没想到马上就可以了，是的，但是我想我猜到了我要说的重点

00:13:47.170 --> 00:13:50.800
试图做到的是，只要我们拥有不同的编解码器，

00:13:50.800 --> 00:13:58.330
不同的编解码器会有指定顺序的编解码器，我们没有

00:13:58.330 --> 00:14:02.350
有一个选择，所以基本上它很忙，它发生了，我们没有选择

00:14:02.350 --> 00:14:09.520
所以基本上是的，是的，所以是的，我们可以进行这项工作，唯一的

00:14:09.520 --> 00:14:16.180
解决方案，我想是如果您确实订购了从中缝制的布套，

00:14:16.180 --> 00:14:23.170
枢纽，因为就像我们在D的问题上一样，在沙发上

00:14:23.170 --> 00:14:27.250
天，因为像Erlang并没有地图，所以您要做的是

00:14:27.250 --> 00:14:32.590
对象数组，那么这个问题就很好了，突然之间他们的地图有一个

00:14:32.590 --> 00:14:36.520
这样的顺序在Erlang中具有固定顺序，而在国际象棋中则没有任何顺序，

00:14:36.520 --> 00:14:42.220
所有那些奇怪的事情，是的，因此无论如何，是的，但是我的意思是我

00:14:42.220 --> 00:14:48.010
我期待着看到我们表达人类，然后您就可以从那里走了

00:14:48.010 --> 00:14:52.660
是的，很可能结果是答案没有答案，我们

00:14:52.660 --> 00:14:57.400
做出一些在某些地方有些武断的选择

00:14:57.400 --> 00:15:01.030
因为没有办法避免选择，而在其他地方，我们有

00:15:01.030 --> 00:15:04.960
谨慎地避免做出任何选择，也许这将是我们所能做到的最好

00:15:04.960 --> 00:15:10.120
是的，是的，是的，我需要进行大量检查才能说服自己

00:15:10.120 --> 00:15:20.380
我觉得那真的很难，就是我想的

00:15:20.380 --> 00:15:24.280
您取回了指定位置的海滨，但他们是DF a

00:15:24.280 --> 00:15:30.670
我曾经用过的这个海湾的推荐，所以不是，不是

00:15:30.670 --> 00:15:36.600
在睡眠中进行硬编码，或者这就是每个人都在使用的其他编码，所以我不知道

00:15:36.600 --> 00:15:43.010
完全正确，但我不喜欢实际上没有进行排序

00:15:43.010 --> 00:15:50.630
评论家的一阶命令确实很烦人，但无论如何哦，但是

00:15:50.630 --> 00:15:53.870
但是在新版本的seaboard中，顺序发生了变化，只需要听

00:15:53.870 --> 00:16:00.290
信息是这样，托尼可以打电话给海边界吗？是旧版本，所以我只是

00:16:00.290 --> 00:16:05.330
基本上就这样了，所以是确保我们获得标签的人

00:16:05.330 --> 00:16:10.810
向我指出，有一个新版本或github我可以将其放入其中

00:16:10.810 --> 00:16:16.400
注意关于订购的内容很清楚，但它们做的方式略有不同

00:16:16.400 --> 00:16:23.600
是的，因此请记住这是即将进行的工作，是的，我可以付诸实践

00:16:23.600 --> 00:16:29.960
是的，我想说的最后一句话，基本上是这样，但是我们需要什么

00:16:29.960 --> 00:16:32.990
需要我们的游客，我们需要一些命令让所有同事确保

00:16:32.990 --> 00:16:37.420
哈希值总是相同的，所以我们需要一些好东西

00:16:37.420 --> 00:16:48.830
是的，好的，我会把它放在笔记中

00:16:48.830 --> 00:16:54.920
里克不，那是一个令人惊讶的大时间沉没，我试图推动一些教练进来

00:16:54.920 --> 00:17:09.290
同时好吧，然后下一个是杆，只是很开心

00:17:09.290 --> 00:17:18.339
想象埃里克因为坐在角落的心理循环而在精神上受阻

00:17:21.370 --> 00:17:28.400
好吧，所以我有一个罪恶感，那就是我花了很长的时间连体衣

00:17:28.400 --> 00:17:34.250
上周的现金比我本来应该的多，但这是我无法做到的兔子洞

00:17:34.250 --> 00:17:41.660
离开，所以我将其编写为JavaScript的繁忙缓存块解码器

00:17:41.660 --> 00:17:46.480
真的很有趣吗？我把它记为学习经历

00:17:46.480 --> 00:17:50.380
我学到了很多

00:17:51.210 --> 00:17:59.309
区块链块，我认为我采用了一种新的二进制解码技术

00:17:59.309 --> 00:18:07.200
在其他地方可能会有用，但是是的，我会收紧它并弄清楚如何

00:18:07.200 --> 00:18:13.950
提议将其与我剥离的简易现金东西集成在一起，我做了一个

00:18:13.950 --> 00:18:22.559
因为HAMP的规格，所以有了更多的习惯工作

00:18:22.559 --> 00:18:30.029
远处不是与我所实现的不完全同步

00:18:30.029 --> 00:18:35.429
完成测试有些麻烦，但是我需要在

00:18:35.429 --> 00:18:42.240
JavaScript端，然后确保go端相同但还不够

00:18:42.240 --> 00:18:50.899
进行有意义的工作，以报告任何值得注意的事情，而这就是我所拥有的全部

00:18:50.899 --> 00:19:01.260
迈克尔有事要举报吗？

00:19:01.260 --> 00:19:06.539
记得上周我实际上做了什么，所以我跟进了所有问题

00:19:06.539 --> 00:19:11.490
我们谈到要做的是，您知道要解决的问题这么大

00:19:11.490 --> 00:19:20.130
因此，有一些关于Jason Stack的东西，还有其他一些东西，我真的

00:19:20.130 --> 00:19:24.750
需要根据我上次的会议在okrs中重写路线图，

00:19:24.750 --> 00:19:28.880
从PAC会议中进行其他后续操作，并发送替代更新

00:19:28.880 --> 00:19:32.760
上周做了很多事情，但是我发现了一些公制的东西，

00:19:32.760 --> 00:19:37.919
一些，然后我病了几天，所以希望我能完成

00:19:37.919 --> 00:19:42.899
在第二天或第二天之内，我们应该感到高兴

00:19:42.899 --> 00:19:46.649
关于指标的一件很酷的事情是，我正在做的事情是，你知道你

00:19:46.649 --> 00:19:55.380
想要检查一下，所以github的动作非常棒，您可以粗略地做

00:19:55.380 --> 00:20:00.960
与他们一起做任何事情，这样您就可以开始行动，赢得新的问题

00:20:00.960 --> 00:20:04.520
拉请求，然后您可以在docker中运行任意代码

00:20:04.520 --> 00:20:09.510
任何语言的文件状文件，并且每个文件都会铸造一个新的github令牌

00:20:09.510 --> 00:20:12.539
时间，如果您想聊天以再次拥有，您可以使用该令牌

00:20:12.539 --> 00:20:18.690
当然起床了，所以我们现在将其用于收集他们的一些ipfs指标

00:20:18.690 --> 00:20:21.990
每天您还可以基本上完​​成cron任务，这样他们就可以运行

00:20:21.990 --> 00:20:25.919
关于cron语法的使用以及所有要按计划运行的内容

00:20:25.919 --> 00:20:30.360
时间，然后您可以检查收集到的数据是否存储在同一仓库中

00:20:30.360 --> 00:20:33.750
您可以生成人类可读的自述文件，例如人类可读的Markdown

00:20:33.750 --> 00:20:38.340
文件并将它们放在存储库中，这样它就变成了这种系统

00:20:38.340 --> 00:20:40.710
与来自回购中发生的不同事情的所有这些不同的钩子

00:20:40.710 --> 00:20:44.940
和回购类似状态机，然后它还集成了排序

00:20:44.940 --> 00:20:48.210
关于所有运行的所有信息，并执行所有操作

00:20:48.210 --> 00:20:52.559
默认情况下是打开的，因此对于诸如

00:20:52.559 --> 00:20:56.070
我们希望开始在项目周围进行任何形式的自动化，因此

00:20:56.070 --> 00:21:02.010
超级超级有用，继续前进，并检查一下是否适合您

00:21:02.010 --> 00:21:13.799
我所有的东西都很酷，我忘了在上面加上一些东西

00:21:13.799 --> 00:21:18.059
Seaboard规范的技术使每个人都可以得到您的反馈，

00:21:18.059 --> 00:21:24.320
尽快在本周内获得推动，是的，是的，五个

00:21:24.320 --> 00:21:32.580
过去的迭代，是的，除了那是，好吧，嗯，所以我是的

00:21:32.580 --> 00:21:36.840
下个礼拜还有什么我们想做的

00:21:36.840 --> 00:21:51.179
讨论任何项目，我刚刚看到的一件事，我们应该可以看一下IRC

00:21:51.179 --> 00:21:56.220
和IP LD有人在大声思考一些protobuf的东西，但我没有

00:21:56.220 --> 00:22:02.640
知道我是否对此有即时的好答案，我认为我们可能想要

00:22:02.640 --> 00:22:10.080
UM，我记得我们也进行了一些讨论，认为讨论不多

00:22:10.080 --> 00:22:14.669
protobuf用户，我们正在认真考虑对

00:22:14.669 --> 00:22:19.120
一些编解码器编号的含义是什么

00:22:19.120 --> 00:22:25.060
基本上就像是Unix FS v1样式解析，如果我们要做的话

00:22:25.060 --> 00:22:35.590
那些我们不应该深入研究protobuf编解码器的东西

00:22:35.590 --> 00:22:39.790
现在因为我没有时间和精力去做好，但是也许我们

00:22:39.790 --> 00:22:47.950
应该概述一下旧的AG protobuf像这样的样子

00:22:47.950 --> 00:22:51.370
关于不再同步的链接和内容的特别怪异的见解

00:22:51.370 --> 00:22:55.540
明天是IPA OT日，事情就在这里，mmm

00:22:55.540 --> 00:22:59.460
至少要为新的原型制作一个占位符

00:22:59.460 --> 00:23:06.970
因为可能是嗯，所以这个人在这件事上，所以他们

00:23:06.970 --> 00:23:13.870
说他们是在使用自己的便携式物品，而不是道格电视，所以也许

00:23:13.870 --> 00:23:19.780
这已经是他们说的我不知道我要

00:23:19.780 --> 00:23:25.090
是中间代表，是的，我不知道我是说这个东西把它们放起来

00:23:25.090 --> 00:23:33.640
快10倍，令我感到非常惊讶的是，事实并非如此

00:23:33.640 --> 00:23:38.500
这就是为什么我认为这可能是因为Sieber的要点是，您始终

00:23:38.500 --> 00:23:43.210
像你这样的小我不知道键是什么，程序办公室更重要

00:23:43.210 --> 00:23:49.690
喜欢结构，所以您当然可以喜欢简单的多余东西，但是也可以

00:23:49.690 --> 00:23:57.040
包含您不喜欢的其他格式，因此如果您使用例如

00:23:57.040 --> 00:24:11.260
就像Seabourn擦除一样快，我认为我们需要更多

00:24:11.260 --> 00:24:13.380
信息

00:24:15.720 --> 00:24:18.920
[音乐]

00:24:19.320 --> 00:24:23.070
很好，是的

00:24:23.670 --> 00:24:32.170
[音乐]没有其他

00:24:32.170 --> 00:24:39.160
很酷，然后我们穿得很快，所以我结束这次会议，谢谢大家

00:24:39.160 --> 00:24:50.490
参加直播并观看我们的1000人，再见，大家好

00:24:51.910 --> 00:24:55.320
顶流

