WEBVTT
Kind: captions
Language: zh-Hans

00:00:13.840 --> 00:00:17.199
欢迎大家参加本周的ipld同步会议

00:00:17.199 --> 00:00:23.039
2020年12月14日

00:00:23.039 --> 00:00:27.519
过去一周我们所做的事情，以及下周我们所做的事情，然后

00:00:27.519 --> 00:00:29.920
讨论可能存在的任何议程项目，并

00:00:29.920 --> 00:00:35.680
今天，我们甚至有非常伟大的议程项目

00:00:35.680 --> 00:00:41.200
我的更新再次不是那么令人兴奋，并且与ipd无关

00:00:41.200 --> 00:00:45.360
我仍然在商店中部分工作哈希

00:00:45.360 --> 00:00:49.039
像是存放长期地址的东西

00:00:49.039 --> 00:00:52.399
数据，基本上我只是在跑步

00:00:52.399 --> 00:00:55.680
基准，但是在更大的数据集上，因此

00:00:55.680 --> 00:00:58.559
这么长的数据说，所以我正在运行的数据集

00:00:58.559 --> 00:01:05.439
就像我刚开始时一样，大约有7000万把钥匙

00:01:05.439 --> 00:01:12.720
大约80 GB的数据，然后是77的巨大数据集

00:01:12.720 --> 00:01:17.200
大约有8亿个密钥的千兆字节，具体取决于存储库

00:01:17.200 --> 00:01:20.560
像我周末在lmdb上进行测试的示例

00:01:20.560 --> 00:01:26.320
插入um花了24个小时，所以我的存储空间很快就到了

00:01:26.320 --> 00:01:29.439
一个是八个小时，图片大概是五个半

00:01:29.439 --> 00:01:33.600
小时，尽管如果我确实用纯净的铁锈开采而不会经历鬼魂

00:01:33.600 --> 00:01:39.200
东西也大约是五个小时

00:01:39.200 --> 00:01:43.600
但是是的，只是为了获得一些想法，因为它真的

00:01:43.600 --> 00:01:46.320
有趣的是，例如测试时

00:01:46.320 --> 00:01:49.360
例如，使用8000万把钥匙来完成运行

00:01:49.360 --> 00:01:53.439
lmdb与badge非常相似，就像没有

00:01:53.439 --> 00:01:56.960
如此大的性能差异，但是如果您四处走动，

00:01:56.960 --> 00:02:00.960
 10倍的数据量完全改变了它们的性能

00:02:00.960 --> 00:02:05.040
是的，这取决于您数据存储的工作方式，但这有点像

00:02:05.040 --> 00:02:08.800
期望的，但是测量这些东西是很好的

00:02:08.800 --> 00:02:11.440
嗯，虽然我还是不确定

00:02:11.440 --> 00:02:15.680
ficon真正需要什么，以及是否需要像这样缩放或

00:02:15.680 --> 00:02:19.200
是的，我们需要弄清楚我们是否需要这样的东西，并且

00:02:19.200 --> 00:02:22.319
是的，但仍然很有趣，看它如何比较

00:02:22.319 --> 00:02:26.160
而且还没有完全优化，但是是的，我们会看到

00:02:26.160 --> 00:02:30.239
所以基本上我现在要做的就是清理并推入

00:02:30.239 --> 00:02:35.280
um生锈的模型系统，然后我有点喜欢完成它，因为

00:02:35.280 --> 00:02:39.840
然后基本上我的原型就完成了，然后是的，我们可以讨论移动

00:02:39.840 --> 00:02:43.360
前进与否，我将其付诸实践

00:02:43.360 --> 00:02:46.720
随便什么，但是我基本上认为我的工作完成了

00:02:46.720 --> 00:02:51.680
进一步的讨论，嗯，那是

00:02:51.680 --> 00:02:56.160
我所希望的一切都像本周一样，我真的很想要

00:02:56.160 --> 00:03:05.200
再做一些道歉的事情，所以我名单上的下一个是丹妮尔

00:03:05.200 --> 00:03:09.200
很酷，所以我度过了一个很慢的一周，但我确实继续

00:03:09.200 --> 00:03:12.720
为ipld prime使用重构

00:03:12.720 --> 00:03:16.480
在64个值中，所以基本思想是

00:03:16.480 --> 00:03:20.640
然后输入类型结束，您知道这是机器吗

00:03:20.640 --> 00:03:24.000
它是机器整数，因此如果是32位，则只能容纳

00:03:24.000 --> 00:03:26.640
32位整数，我想这不是一个好主意

00:03:26.640 --> 00:03:31.200
ipld，所以这里很明显的是

00:03:31.200 --> 00:03:34.720
嗯，几天前棒指出了作业

00:03:34.720 --> 00:03:38.480
我们实际上在几周前就想到了这一点，但是当您删除时我忘了

00:03:38.480 --> 00:03:42.640
这个问题对我来说有点愚蠢，但我有几个议程项目

00:03:42.640 --> 00:03:45.519
稍后，因为实际上还有许多其他使用整数的方法

00:03:45.519 --> 00:03:49.680
问题是那些也应该在64岁以下吗？我倾向于是，但是我

00:03:49.680 --> 00:03:53.680
想检查嗯，我也在继续帮助马丁

00:03:53.680 --> 00:03:57.040
快速评论，所以他想要的大多数小东西

00:03:57.040 --> 00:04:00.480
出门完成了，现在有一些更大的东西，我

00:04:00.480 --> 00:04:03.439
认为我必须先阅读，然后才能真正开始阅读规格

00:04:03.439 --> 00:04:07.360
做更多的评论，因为我不知道我在做什么

00:04:07.920 --> 00:04:14.560
而且我还注意到他的软件包qtls被go 116破坏了，

00:04:14.560 --> 00:04:19.120
软件包名为qtl esco 115，所以这并不奇怪

00:04:19.120 --> 00:04:22.240
但是有点像鸡脖子的问题，因为他说我要

00:04:22.240 --> 00:04:27.280
一旦Beta 1退出，而Beta 1延迟了2周，就可以使用核心116进行测试

00:04:27.280 --> 00:04:30.720
嗯，只有六周的时间才能发布最终版本

00:04:30.720 --> 00:04:34.479
由于假期的原因，这更像是三个星期

00:04:34.479 --> 00:04:39.520
所以我认为ipfs可以很好地运送um，一船16船，ipfs甚至可能都不行

00:04:39.520 --> 00:04:44.639
使用那个版本，我不知道我们会看到

00:04:44.639 --> 00:04:48.160
但是我确实认为应该对即将到来的go进行测试

00:04:48.160 --> 00:04:50.800
随着时间的流逝，我想现在是时候了

00:04:50.800 --> 00:04:53.680
大约是最终发行前的六个星期

00:04:53.680 --> 00:04:58.400
最后，我知道我的照明已经很长时间了

00:04:58.400 --> 00:05:01.600
时间，所以我得到了一些东西

00:05:04.240 --> 00:05:08.800
我什至可以让自己变得非常有光泽，但我不会那样做

00:05:08.800 --> 00:05:12.240
所以无论如何你现在实际上可以看到我，这很好

00:05:12.240 --> 00:05:15.120
这就是给我的

00:05:16.400 --> 00:05:21.880
谢谢，我在星期五晚上忘了一件东西，有点

00:05:21.880 --> 00:05:26.639
jscid功能发布

00:05:26.639 --> 00:05:30.720
狂热，所以我们我喜欢四个发行版或类似的东西

00:05:30.720 --> 00:05:35.039
大概五个小时之内，因为随机的东西坏了

00:05:35.039 --> 00:05:38.320
所以问题是有类型类型

00:05:38.320 --> 00:05:44.479
添加了脚本信息，我们在其中做了一些疯狂的事情

00:05:44.479 --> 00:05:47.840
javascript，这有点像简化的原因，为什么呢？

00:05:47.840 --> 00:05:51.759
不只是添加类型，还喜欢做一个小的更改

00:05:51.759 --> 00:05:55.120
然后那些小的变化破坏了东西，然后类型破坏了其他

00:05:55.120 --> 00:05:57.600
系统和打字稿中的类似内容

00:05:57.600 --> 00:06:01.919
实际上起泡了，就像是，基本上是这样的，问题是我

00:06:01.919 --> 00:06:06.400
甚至没有关于整个类型脚本的足够知识

00:06:06.400 --> 00:06:08.639
事情，我在依靠别人

00:06:08.639 --> 00:06:11.919
基本上告诉我，是的，那完全没问题，然后

00:06:11.919 --> 00:06:17.600
是的，事情破裂了，是的，嗯，这让我觉得我

00:06:17.600 --> 00:06:21.199
可能现在好像还可以，但是

00:06:21.199 --> 00:06:25.759
也许其他人应该维护知道这些事情的jscid，因为

00:06:25.759 --> 00:06:28.479
就像我真的不适应

00:06:28.479 --> 00:06:34.240
做所有这一切，是的，但是无论如何，现在我们有一个固定的

00:06:34.240 --> 00:06:36.639
基本上每个人举报的版本

00:06:36.639 --> 00:06:40.960
对于参与其中的每个人都有效，这是一个错误修复版本，因此每个人都应该

00:06:40.960 --> 00:06:43.600
升级，所以我们还没有升级

00:06:43.600 --> 00:06:48.639
5个小时应该是完全可以的，什么也没看到，但是是的，这很友善

00:06:48.639 --> 00:06:54.400
我们在那里做的事不是很好

00:06:54.400 --> 00:06:58.960
是的，希望我们将来能避免这种情况

00:06:58.960 --> 00:07:02.960
而且也可能在星期五晚上不这样做

00:07:02.960 --> 00:07:06.479
我列表上的下一个是eric

00:07:10.080 --> 00:07:14.560
嗯，让我们跟踪我们没有中止的列表

00:07:14.560 --> 00:07:19.360
嗯，所以在请原封不动中，我们已经标记并发货

00:07:19.360 --> 00:07:25.280
某个版本的发布，我们称其为0.6.0

00:07:25.280 --> 00:07:28.560
它以零开头，因为它将始终以零开头

00:07:28.560 --> 00:07:31.599
它以中间的6开头，因为这是下一个数字

00:07:31.599 --> 00:07:35.120
向上并以零点结束，因为转到mod

00:07:35.120 --> 00:07:39.360
不能只处理两个数字

00:07:39.440 --> 00:07:45.360
所以该版本的零版本是包含

00:07:45.360 --> 00:07:49.360
绝对没有任何人使用此库，您应该升级

00:07:49.360 --> 00:07:52.080
立即处理，因为它应该是微不足道的

00:07:52.080 --> 00:07:55.280
自此以来，有很多小功能和小错误修复

00:07:55.280 --> 00:08:01.440
v0.5.0是在仲夏，但是没有

00:08:01.440 --> 00:08:04.639
没有重大变化，因此应该很容易

00:08:04.639 --> 00:08:08.319
我们将尝试通过更多的更改来跟进

00:08:08.319 --> 00:08:12.000
丹尼尔（Daniel）谈论的是哪些重大变化，因此重点

00:08:12.000 --> 00:08:16.080
给您一个不错的检查点，然后下一步应该是

00:08:16.080 --> 00:08:21.199
小容易，所以我做了其他几件事

00:08:21.199 --> 00:08:24.960
这周内部发生了很多事情

00:08:24.960 --> 00:08:28.800
使用go ipld prime repo内部的代码生成现在正在使用标准化go

00:08:28.800 --> 00:08:31.599
生成用于复制daniel约定的标签，以便

00:08:31.599 --> 00:08:38.240
现在在操作上更合理了，我们确实合并了PR

00:08:38.240 --> 00:08:42.000
这是模式包的原型

00:08:42.000 --> 00:08:45.920
这样就可以提供类型信息和所有可提供支持的信息

00:08:45.920 --> 00:08:50.399
代码生成器中有一个新的原型

00:08:50.399 --> 00:08:55.120
使用我们合并在其中的可靠类型来处理数据

00:08:55.120 --> 00:08:59.760
它并没有完全替代您必须驱动的旧占位符类型

00:08:59.760 --> 00:09:03.839
以编程方式围绕着它，但是它正在移动

00:09:03.839 --> 00:09:06.240
方向

00:09:06.959 --> 00:09:10.240
我这周去了更多的协议实验室内部通讯

00:09:10.240 --> 00:09:14.800
事实证明我有很多话不说了

00:09:14.800 --> 00:09:20.160
还有一份文件，我一直在为我们可能要达到的目标做饭

00:09:20.160 --> 00:09:24.720
ipld in 2021 um，我想我在这里丢掉了那个链接

00:09:24.720 --> 00:09:28.480
一两个星期前还在那里，我正在慢慢地成长它，我

00:09:28.480 --> 00:09:33.600
没有添加更多的目标，没有范围蔓延

00:09:33.600 --> 00:09:36.800
但只是尝试通过诸如挑战之类的方式来解释其他一些事情

00:09:36.800 --> 00:09:42.000
在今年开始意识到更多的解释和背景故事

00:09:42.000 --> 00:09:44.560
关于为什么一堆目标开始谈论

00:09:44.560 --> 00:09:49.360
关于工具的东西工具的优点就像被

00:09:49.360 --> 00:09:53.040
像这样的可证明的教育互动体验的东西

00:09:53.040 --> 00:10:00.000
嗯，也许很无聊，也许不是，我不知道我写了一堆我写完了

00:10:00.000 --> 00:10:09.920
那是我的报告，谢谢，接下来是

00:10:10.160 --> 00:10:17.120
呃，彼得在这里是彼得，是的，是的，我是

00:10:17.120 --> 00:10:21.120
是的，我在这里，是的，所以实际上，呃，又是一个非常

00:10:21.120 --> 00:10:24.399
混乱的一周，几乎没有什么可显示的

00:10:24.399 --> 00:10:32.880
在我建立的东西，嗯，我在商店里更新

00:10:32.880 --> 00:10:36.000
我基本上试图把莲花碰到的地方放在一起

00:10:36.000 --> 00:10:41.680
完全相关的数据库，它最终会正确同步，

00:10:41.680 --> 00:10:44.839
工作对我来说还不够快

00:10:44.839 --> 00:10:48.720
称之为完成，并让您知道

00:10:48.720 --> 00:10:54.079
跑到新的一年赶上第一名第二名

00:10:54.079 --> 00:10:57.279
就像很麻烦的事情出现了，我想做

00:10:57.279 --> 00:10:59.680
确保我没有在某处犯错误

00:10:59.680 --> 00:11:05.200
但看起来我们实际上并不喜欢存储完整的链

00:11:05.200 --> 00:11:11.519
因为我的建造方式是我

00:11:12.320 --> 00:11:15.600
我分析每个得到的块

00:11:15.600 --> 00:11:21.120
放在商店里，我为所引用的任何CID都做占位符

00:11:21.120 --> 00:11:25.360
嗯，然后我希望c8s可以回填

00:11:25.360 --> 00:11:29.839
显然是对于像compies和逗号这样的东西

00:11:29.839 --> 00:11:38.160
和诸如此类的内容，您知道内联和一些类型的um

00:11:38.160 --> 00:11:46.240
他们称其为几种类型的机器人rossi id，

00:11:46.240 --> 00:11:52.800
永远不会出现，但我们有一些实际的电子人的东西被引用

00:11:52.800 --> 00:11:55.760
通过我有和我没有的消息

00:11:55.760 --> 00:12:00.079
他们的相关内容，还有

00:12:00.079 --> 00:12:02.240
从正规的学习会所我也不能

00:12:02.240 --> 00:12:05.920
找到此内容，所以我需要对整个内容进行传递

00:12:05.920 --> 00:12:07.920
确保我实际上是你知道的事情

00:12:07.920 --> 00:12:12.639
我自己不会摇摆，我想我会把这个交给

00:12:12.639 --> 00:12:17.120
像老鼠或某人做更多的分析，例如

00:12:17.120 --> 00:12:24.079
错过了嗯，但是，嗯，除了那是呃

00:12:24.079 --> 00:12:27.519
有趣的是，它仍然是一个庞大的海量数据库

00:12:27.519 --> 00:12:33.200
因为我另外存储了一堆

00:12:33.200 --> 00:12:36.639
有关博客本身的额外元数据，但是

00:12:36.639 --> 00:12:40.560
因为它是您很好地打包在里面的

00:12:40.560 --> 00:12:44.480
在标准无聊的东西中，基本上是Postgres

00:12:44.480 --> 00:12:49.760
我将能够拉动您的知识，通过网络将其拉动

00:12:49.760 --> 00:12:55.440
并能够让您知道只在本地使用它，呃

00:12:55.440 --> 00:12:58.880
请求查询按我预期的那样工作

00:12:58.880 --> 00:13:06.560
这样您就可以像是完全出口咖啡馆一样

00:13:06.560 --> 00:13:09.760
就像几分钟，我想他们需要的时间

00:13:09.760 --> 00:13:13.040
现在，对于我们实际上需要四个小时的大型汽车

00:13:13.040 --> 00:13:19.200
对于内在的大型汽车，是的，嗯，

00:13:19.200 --> 00:13:22.639
有趣，我知道你在等我们，这是

00:13:22.639 --> 00:13:29.040
就像几乎在那里，但不是，某些地方的代码在哪里

00:13:29.040 --> 00:13:32.480
指出你应该指出我正在进行的代码在哪里

00:13:32.480 --> 00:13:36.560
嗯是的，我可以推一下吗，但是我基本上

00:13:36.560 --> 00:13:39.839
就像我会推动它，但绝对不能保证它不会与

00:13:39.839 --> 00:13:43.760
任何人喜欢尝试理解的东西，因为像我

00:13:43.760 --> 00:13:45.760
会重新安排整个事情

00:13:45.760 --> 00:13:48.959
公平的是，对我来说，它将变得更加真实

00:13:48.959 --> 00:13:56.480
是的，绝对嗯，如果您想知道哪里的话，会丢失呃的提示。

00:13:56.480 --> 00:14:02.160
他们被引用从那不期望已经听起来

00:14:02.160 --> 00:14:05.199
非常有价值，喜欢这样的东西

00:14:05.199 --> 00:14:08.560
我会对追踪或提升感兴趣

00:14:08.560 --> 00:14:15.120
对我感到不安，我不完全确定这是

00:14:15.120 --> 00:14:18.959
一个真正的错误，或者只是我丢东西的东西

00:14:18.959 --> 00:14:24.000
嗯，因为这有点混乱，因为

00:14:24.000 --> 00:14:26.560
如果您能说得很好，则此消息正在引用它，而我不

00:14:26.560 --> 00:14:29.920
拥有它就足够了，我会花一个周期试图弄清楚

00:14:29.920 --> 00:14:32.639
如果像api链之爱和其他一些

00:14:32.639 --> 00:14:36.240
官方的莲花音符有它，如果没有，那就是为什么不

00:14:36.240 --> 00:14:38.720
让我们开始跟踪这种事情

00:14:38.720 --> 00:14:45.839
那我今天会为你争取一些

00:14:46.399 --> 00:14:50.959
好的，接下来是杆

00:14:53.920 --> 00:14:59.120
好吧，那我继续讲那个想法，因为我确实有续篇

00:14:59.120 --> 00:15:03.920
那一个嗯，所以我一直在那个地区工作

00:15:03.920 --> 00:15:06.320
但这是关于我一直在努力去

00:15:06.320 --> 00:15:09.920
分析的东西，我正在尝试用javascript和

00:15:09.920 --> 00:15:12.880
然后我知道人们会那样皱眉，但是

00:15:12.880 --> 00:15:17.279
在javascript中原型化东西要容易得多，而且更快

00:15:17.279 --> 00:15:20.320
这么快和嗯

00:15:20.399 --> 00:15:24.839
而且我也想用它来推动工具的发展

00:15:24.839 --> 00:15:30.800
嗯，但试图做到这一点的是规模问题

00:15:30.800 --> 00:15:34.800
彼得也遇到了什么，这真的很不错

00:15:34.800 --> 00:15:39.680
因为它暴露了无处不在的弱点和我们工具中的弱点

00:15:39.680 --> 00:15:42.880
我们思考这些东西的方式上的弱点

00:15:42.880 --> 00:15:45.440
嗯，那真的很好，那是

00:15:45.440 --> 00:15:50.240
像伏特加酒一样，到处刺激工作，都是一样的东西，所以

00:15:50.240 --> 00:15:52.639
这个规模问题真的很有趣

00:15:52.639 --> 00:15:59.519
嗯，并引起问题，我不能以足够快的速度摄取数据

00:15:59.519 --> 00:16:02.160
javascript这是不实际的，它是完全

00:16:02.160 --> 00:16:07.040
不切实际，我一直在努力找出原因

00:16:07.040 --> 00:16:10.720
很多是，而我最终从事的工作之一

00:16:10.720 --> 00:16:14.720
上周下旬回到了做更多的我的JavaScript CBO

00:16:14.720 --> 00:16:19.120
看看我是否可以的东西，因为当您进行遍历时，您

00:16:19.120 --> 00:16:22.399
只是倾向于想要数据的某个子集

00:16:22.399 --> 00:16:28.320
只是一个链接，嗯，看看是否有我可以改善的方法

00:16:28.320 --> 00:16:32.560
那只是低垂的水果和嗯之一

00:16:32.560 --> 00:16:37.120
浮出水面的是，就像我们知道我们的sibo解析一样

00:16:37.120 --> 00:16:41.920
图书馆不是最佳的

00:16:41.920 --> 00:16:48.800
但是我我的解析器我至少设法得到了一个

00:16:48.800 --> 00:16:54.480
速度提高了10倍，而基本解码速度却是

00:16:54.480 --> 00:16:59.600
就像编码是不同的，但是解码就像

00:16:59.600 --> 00:17:03.120
我什至不知道代码中没有发生什么奇怪的事情

00:17:03.120 --> 00:17:06.959
这就是说，我什至不知道你怎么这么慢

00:17:06.959 --> 00:17:10.400
但却以其他西摩图书馆为基准

00:17:10.400 --> 00:17:14.959
它声称更快，所以

00:17:15.120 --> 00:17:18.240
我想了解其中一些正在发生的事情，但是

00:17:18.240 --> 00:17:21.919
在此期间，我至少有一条真正去做的道路

00:17:21.919 --> 00:17:24.799
当然我有代码，如果我只想拉出链接，我可以做

00:17:24.799 --> 00:17:28.799
现在也是如此，所以我得到了这些慢慢落入适当位置的碎片

00:17:28.799 --> 00:17:32.240
这不是高优先级的工作，但正因为如此，它变得越来越重要

00:17:32.240 --> 00:17:34.880
缩放东西，所以这是我去过的东西之一

00:17:34.880 --> 00:17:39.120
尽管上周的大部分时间都花在了三个工作上，但还是在上周工作

00:17:39.120 --> 00:17:44.080
东西是AMT的文档

00:17:44.080 --> 00:17:47.120
我已经收到了我的要求

00:17:47.120 --> 00:17:52.400
在几个月前回购了代码，此后代码急剧发展，因此

00:17:52.400 --> 00:17:55.440
我已经重做了文档，现在已经准备好降落了

00:17:55.440 --> 00:17:58.400
一个甚至可能已经解决的小问题

00:17:58.400 --> 00:18:01.520
今天，但是嗯，这已经准备好降落了

00:18:01.520 --> 00:18:05.440
它是代码注释，它是算法描述

00:18:05.440 --> 00:18:08.559
然后在

00:18:08.559 --> 00:18:14.000
真正总结了doc.go um文件的文件，实际上是volker

00:18:14.000 --> 00:18:18.080
已经读过并说他通过阅读来理解算法

00:18:18.080 --> 00:18:20.640
我很高兴的那件事，因为那意味着

00:18:20.640 --> 00:18:25.600
我已经在那里完成了我的工作，尽管这很重要

00:18:25.600 --> 00:18:29.120
这样做的目的是为了使该算法

00:18:29.120 --> 00:18:32.640
不只是隐藏在真正晦涩的代码中

00:18:32.640 --> 00:18:38.160
没有注释的代码，实际上是多个人可以理解的代码

00:18:38.160 --> 00:18:41.440
它并有输入，所以，因为目前有

00:18:41.440 --> 00:18:46.000
三四个人摇晃它，所以这应该有助于

00:18:46.000 --> 00:18:49.360
我认为那应该在本周合并

00:18:49.360 --> 00:18:55.679
um go dag pb我把它绑起来完成了um all

00:18:55.679 --> 00:18:58.799
测试完成后，我对那个嗯真的很满意，

00:18:58.799 --> 00:19:05.679
现在以go codec dagpb um的形式存在于ipld.org中，并且

00:19:05.679 --> 00:19:12.240
感谢Martin和他的ci工作实际在32位上进行了测试，从而发现了32位错误

00:19:12.240 --> 00:19:15.280
位，所以这是和原因

00:19:15.280 --> 00:19:18.000
有趣的是，他们是因为跨语言而出现的

00:19:18.000 --> 00:19:21.840
测试我是我正在测试javascript

00:19:21.840 --> 00:19:26.720
整数限制uh在测试装置中，然后将它们放进去，这需要

00:19:26.720 --> 00:19:30.720
您知道您就像一个53位整数，

00:19:30.720 --> 00:19:34.400
嗯，超过32位，所以

00:19:34.400 --> 00:19:40.160
您知道将其截断为减一，所以最好将其整理掉，或者

00:19:40.160 --> 00:19:45.039
至少有一些方法可以解决这个问题

00:19:45.039 --> 00:19:51.120
最后，嗯，他们为原型学校的默克尔达格工作提供了一些帮助

00:19:51.120 --> 00:19:55.520
内容，所以看起来有点像关于ipld的介绍

00:19:55.520 --> 00:19:58.640
内容，嗯，这是一项非常令人印象深刻的工作

00:19:58.640 --> 00:20:03.120
嗯，作为入门材料，它与许多

00:20:03.120 --> 00:20:06.720
我们中一些人一直在做的演讲

00:20:06.720 --> 00:20:11.039
最近几个月介绍ipld的想法

00:20:11.039 --> 00:20:14.960
嗯，这样出来会很好，

00:20:14.960 --> 00:20:19.360
我认为它将与我们正在做的其他工作很好地吻合

00:20:19.360 --> 00:20:24.240
教育就是我

00:20:24.320 --> 00:20:27.840
谢谢下一个是

00:20:28.480 --> 00:20:36.000
好吧，嗯，过去一周或本周可能没有很多ipld内容，嗯

00:20:36.000 --> 00:20:39.200
但是发生了一系列事情，可能还有几件事

00:20:39.200 --> 00:20:43.440
值得一问，因为这里的人可能是知道答案的人

00:20:43.440 --> 00:20:46.400
嗯，我一直在想的一件事是当我

00:20:46.400 --> 00:20:51.200
通过graphql界面思考

00:20:51.200 --> 00:20:55.679
一个非常好的东西是架构和

00:20:55.679 --> 00:20:59.039
与该模式匹配的数据，可用作

00:20:59.039 --> 00:21:02.559
这是一个具体的例子，也可以作为测试

00:21:02.559 --> 00:21:07.200
我真正想要的是你知道的是

00:21:07.200 --> 00:21:10.320
像地图一样有一些工会

00:21:10.320 --> 00:21:15.679
你知道它锻炼清单，它锻炼我们所有的不同部分

00:21:15.679 --> 00:21:19.440
架构或其中的大多数，但至少我可以

00:21:19.440 --> 00:21:21.760
用它来生成graphql的东西是什么

00:21:21.760 --> 00:21:25.200
然后我可以对生成的东西进行测试

00:21:25.200 --> 00:21:28.799
正确，当我查看graphql中的所有测试时

00:21:28.799 --> 00:21:31.840
实现，然后他们就拥有了星际大战模式

00:21:31.840 --> 00:21:36.640
作为他们喜欢的例子，他们用它做一个真正的东西

00:21:36.640 --> 00:21:40.559
就像您可以查询哪些角色出现在哪些电影中一样的东西，等等

00:21:40.559 --> 00:21:43.120
他们让你知道一些例子，你知道很多

00:21:43.120 --> 00:21:45.679
甚至一对一地指挥关系

00:21:45.679 --> 00:21:52.000
一些字符类型的枚举，所以他们让您知道了广泛的

00:21:52.000 --> 00:21:55.679
足够，但仍然很小而具体，所以有你

00:21:55.679 --> 00:21:58.880
知道存储库中的一个小型数据库，

00:21:58.880 --> 00:22:02.080
允许独立完成的事情，例如了解如何在其中使用它

00:22:02.080 --> 00:22:04.799
各种情况，这些都是非常有价值的

00:22:04.799 --> 00:22:09.280
嗯，所以有一辆汽车和该汽车的模式定义

00:22:09.280 --> 00:22:13.440
那就是你知道鸡蛋的顺序，但又可以扩展到足以容纳一切

00:22:13.440 --> 00:22:16.640
似乎是我正在寻找但尚未找到的东西

00:22:16.640 --> 00:22:19.919
如果我们有一个或可以想到的话题，我们会

00:22:19.919 --> 00:22:23.440
您是否知道在某件东西上有一件合理的具体事情

00:22:23.440 --> 00:22:27.120
不太俗气，但看起来仍然很有趣

00:22:27.120 --> 00:22:32.000
这样一来，我们就可以直面一些事情，那将是一件很不错的事情。

00:22:32.000 --> 00:22:37.919
所以我没有想出一个我想直接提出的建议，但是你

00:22:37.919 --> 00:22:42.799
可以想像像是在那的天文物体

00:22:42.799 --> 00:22:47.760
符合我们的各种主题，大概是这样

00:22:47.760 --> 00:22:52.640
不要使用现代小说参考，我不想看到哈利·波特或哈利·波特

00:22:52.840 --> 00:22:58.960
战争jeez好的嗯

00:22:59.520 --> 00:23:02.960
我想知道的另一件事是我应该指出

00:23:02.960 --> 00:23:07.520
呃像区块链公司这样的另一个公司就像我们想存储我们的历史

00:23:07.520 --> 00:23:10.960
在ipfs上存档并使其正确可用

00:23:10.960 --> 00:23:14.559
现在我们拥有的是数百个演出档案的订单，

00:23:14.559 --> 00:23:18.960
每六个小时快照一次，我们如何存储这些和我

00:23:18.960 --> 00:23:22.400
我真的很想能够得到一个很好的答案，如果你

00:23:22.400 --> 00:23:25.679
使用模式从语义上理解它，您只需

00:23:25.679 --> 00:23:31.360
增量更新，并且每六个小时不存储另一个新的100 gig存档

00:23:31.360 --> 00:23:34.080
似乎更容易

00:23:35.280 --> 00:23:38.320
我知道我们拥有比特币，那就是将它们指向的正确方法

00:23:38.320 --> 00:23:43.919
是否有工具可以帮助他们观察自己的连锁店是否有新的街区，

00:23:43.919 --> 00:23:49.039
然后将存在的新块推送到固定的ipfs节点或其他东西中

00:23:49.039 --> 00:23:53.039
我们要做这个故事吗，我们不仅有档案馆

00:23:53.039 --> 00:23:57.279
这是我不知道的答案，是的，没有好的答案

00:23:57.279 --> 00:24:02.000
基本上，不，但不，有许多讨论正在进行，嗯

00:24:02.000 --> 00:24:06.880
实际上，您应该链接，应该循环添加到该讨论中

00:24:06.880 --> 00:24:10.640
呃他一直在，我一直把他拉进那些

00:24:10.640 --> 00:24:13.679
这些讨论对

00:24:13.679 --> 00:24:17.600
它真的了解ipfs对于这种用例的局限性

00:24:17.600 --> 00:24:23.120
还有一些替代模型来做，嗯，听起来像

00:24:23.120 --> 00:24:27.679
您在我们和ipfs um之间有重叠，至少至少在

00:24:27.679 --> 00:24:31.520
命中二已在Dietrich中循环播放，但我认为

00:24:31.520 --> 00:24:34.400
您可能正在休假，所以实际上可能不是合适的人

00:24:34.400 --> 00:24:37.760
肯定会再做一次，因为他真的很不错，但是他们

00:24:37.760 --> 00:24:42.000
除了您实际上拥有像ipld数据一样的所有要点是

00:24:42.000 --> 00:24:44.480
真的很好，绝对应该是这样

00:24:44.480 --> 00:24:47.679
我们可以讨论一下，以便您可以随意查看它们

00:24:47.679 --> 00:24:51.279
给我们，如果你想要我，是的，比特币

00:24:51.279 --> 00:24:54.320
东西是一个很好的例子，是的，这就是其中之一

00:24:54.320 --> 00:24:57.360
我需要整理一下，以便可以作为示例，因为它是

00:24:57.360 --> 00:25:00.400
规范没有完成，我只得到了JavaScript代码，而不是

00:25:00.400 --> 00:25:04.640
对很多人和嗯有帮助，但是是的，这种情况一直持续下去

00:25:04.640 --> 00:25:07.360
所以它又回到了我更高的之一

00:25:07.360 --> 00:25:12.840
要做的优先事项，但我很乐意至少与人们谈论这件事

00:25:12.840 --> 00:25:19.679
很棒的人会在离线状态下继续跟进，除了这个简短的问题

00:25:19.679 --> 00:25:23.919
在大局上，他们有一个新的

00:25:23.919 --> 00:25:29.840
怪异的自定义编解码器，或者它们是否对我们有些陌生

00:25:30.559 --> 00:25:39.039
我不知道这是模仿，还是另一个已知的区块链

00:25:41.520 --> 00:25:44.559
除了那个，嗯，把谈话放在一起

00:25:44.559 --> 00:25:51.120
试图确定ipfs的哪些衡量指标也可以协调

00:25:51.120 --> 00:25:53.360
有一个Resnet实验室想要一个网络

00:25:53.360 --> 00:25:58.000
天文台ipfs希望对这两个指标进行度量

00:25:58.000 --> 00:26:01.679
要求非常不同，但是他们决定以某种方式

00:26:01.679 --> 00:26:06.240
人们应该做所有的事情，但这不一定是成功的秘诀

00:26:06.240 --> 00:26:11.840
所以我们正在努力使那里的进展很酷

00:26:12.640 --> 00:26:16.559
谢谢，我没有它，我以为对不起，有一个想法，我有

00:26:16.559 --> 00:26:22.240
嗯，如果可以的话，请回到关于彼得发现的讨论

00:26:22.240 --> 00:26:25.679
缺少块，所以我一直在进行遍历

00:26:25.679 --> 00:26:30.880
标题进入状态UM，到目前为止，我认为

00:26:30.880 --> 00:26:35.600
嗯，到目前为止，我一直在往后走，并记录了硬币

00:26:35.600 --> 00:26:39.039
我只向彼得报告了一个街区，而我却错过了

00:26:39.039 --> 00:26:43.039
意识到，所以我没有看到像系统的

00:26:43.039 --> 00:26:50.480
到目前为止已经存储的块数据中有一个洞，是的，就是这样

00:26:50.480 --> 00:26:52.559
有一个棘手的部分，它不是系统性的

00:26:52.559 --> 00:26:58.720
就我而言，我认为

00:26:58.720 --> 00:27:03.200
大约一百万分之一，所以您不会发现

00:27:03.200 --> 00:27:06.880
哦，不，我是说我在做我在做我在做数百万

00:27:06.880 --> 00:27:10.080
但是你知道那里有数以百万计的人，但是

00:27:10.080 --> 00:27:13.760
当然不会像我不是那样深入链条

00:27:13.760 --> 00:27:19.520
确实如此，这实际上就像曾经引用过的每个块一样

00:27:19.520 --> 00:27:22.559
正在为此做一个占位符，所以

00:27:22.559 --> 00:27:25.600
我怎么能只是像你知道的那样进入

00:27:25.600 --> 00:27:29.760
我所有的东西都没有，因为内容是肯定的

00:27:29.760 --> 00:27:32.880
不同的桌子，我就像只是给我所有没有的东西

00:27:32.880 --> 00:27:35.600
有内容，他们喜欢保持增长

00:27:35.600 --> 00:27:42.080
随着时间的流逝，随着链条的发展，重点是

00:27:42.080 --> 00:27:45.840
像这样留在块中的垃圾

00:27:45.840 --> 00:27:49.039
之所以存储，是因为莲花的犯规应该是

00:27:49.039 --> 00:27:52.159
就像完整的东西一样，如果它正在存储某些东西，它也需要存储

00:27:52.159 --> 00:27:56.320
它的所有部分，即使这个东西最终没有被引用

00:27:56.320 --> 00:28:00.960
胜利的连锁店，它仍然不应该结束

00:28:00.960 --> 00:28:05.679
在大商店里喜欢

00:28:05.679 --> 00:28:10.000
事情不对劲，我在这一点上就像50％

00:28:10.000 --> 00:28:15.919
愿意为此归咎于我自己的代码，我需要更好地检测仪器，呃

00:28:15.919 --> 00:28:18.880
它的速度比现在快了一点，因为我仍然

00:28:18.880 --> 00:28:22.320
每个提示大约要花六秒钟，非常沉重

00:28:22.320 --> 00:28:26.159
缓存，这还不够，我需要将其降低到大约两到一秒

00:28:26.159 --> 00:28:31.679
然后，我可以让它滴下，嗯，另一件事是

00:28:31.679 --> 00:28:39.760
呃s3数据的问题是我认为the块

00:28:39.760 --> 00:28:43.600
商店只会给我一份清单

00:28:43.600 --> 00:28:48.240
我意识到这实际上不能很好地工作，所以您有一个静态

00:28:48.240 --> 00:28:53.440
您实际上无法从中取出所有单个块的块存储

00:28:53.440 --> 00:28:57.600
通过一个简单的清单，您实际上必须走链条，因为

00:28:57.600 --> 00:29:01.440
它与您一起工作知道给我这个特殊的钥匙

00:29:01.440 --> 00:29:04.480
然后给我这个特殊的钥匙，但是在给定的时候效果不佳

00:29:04.480 --> 00:29:07.679
我这个你的频道你知道我知道有几百万个键

00:29:07.679 --> 00:29:12.640
实际上并没有把所有东西都还给我，然后还有

00:29:12.640 --> 00:29:16.159
与每个人都遇到的延迟的问题，所以我可以依靠

00:29:16.159 --> 00:29:20.559
在sd上，嗯，是的，因为

00:29:20.559 --> 00:29:24.159
现在他们已经将其放置在ipld渠道中，并且有一个

00:29:24.159 --> 00:29:27.360
模式在那里，但基本上你

00:29:27.360 --> 00:29:32.960
从字面上可以写一个递归并加快您所使用的所有插头的速度

00:29:32.960 --> 00:29:39.919
想要与选择器本质上一起使用，因为不必知道如何

00:29:39.919 --> 00:29:44.640
当我存储它们时将其转移

00:29:44.640 --> 00:29:48.720
儿童预先准备好要花大量的空间

00:29:48.720 --> 00:29:58.799
但这值得我在政治上占有一席之地

00:29:58.799 --> 00:30:06.159
在gen项目上，第一个项目来自我，它是关于js多重编解码器的

00:30:06.159 --> 00:30:09.440
因此，它是在最近的讨论中出现的，例如

00:30:09.440 --> 00:30:15.120
昨天和前一天，这是星期五，大概是当我们

00:30:15.120 --> 00:30:21.520
打破了cid，也喜欢关于重组js的想法

00:30:21.520 --> 00:30:27.520
多编解码器等等，所以我们当然至少喜欢我认为的

00:30:27.520 --> 00:30:31.360
我们目前拥有的东西，就像仍然保留的遗留部分

00:30:31.360 --> 00:30:34.480
对于ipfs，但您确实应该使用新的东西

00:30:34.480 --> 00:30:37.919
所以我的任务可能主要是写关于当前情况的文章

00:30:37.919 --> 00:30:42.000
js多种格式的状态，可以说好吗

00:30:42.000 --> 00:30:46.880
就像人们使用那个一样，是的

00:30:46.880 --> 00:30:50.640
它应该可以工作，如果不起作用，则是一个错误，我们将对其进行修复，

00:30:50.640 --> 00:30:54.960
是的，我们仍然需要答案是

00:30:54.960 --> 00:31:00.880
它应该覆盖人们关心的大部分表面积

00:31:00.880 --> 00:31:08.159
嗯，只是因为ipfs不使用它，所以很多用例

00:31:08.159 --> 00:31:12.559
是有问题的，因为人们经常来ipld，并希望将其与

00:31:12.559 --> 00:31:15.360
ipfs或您知道在

00:31:15.360 --> 00:31:18.320
中和嗯，因为那是没有发生的

00:31:18.320 --> 00:31:20.480
有这种尴尬，但你可以看到

00:31:20.480 --> 00:31:23.760
嗯，因为我今天在谈论

00:31:23.760 --> 00:31:26.880
提出时间表以整合这项工作是

00:31:26.880 --> 00:31:31.279
所以我们今天也在ipfs中教过它

00:31:31.279 --> 00:31:38.240
def Meeting或其他所谓的um，所以基本上就像alex一样

00:31:38.240 --> 00:31:40.880
我们喜欢的信号可能确实是

00:31:40.880 --> 00:31:44.720
对于ipfs团队来说，应该在第一季度的成功中表现出色

00:31:44.720 --> 00:31:48.559
腾出空间来研究升级到js

00:31:48.559 --> 00:31:51.760
多种格式的东西，alex的想法就是做到这一点

00:31:51.760 --> 00:31:56.640
类似于我们对um所做的

00:31:56.640 --> 00:32:00.240
您有点喜欢的异步反射器从底部开始，所以

00:32:00.240 --> 00:32:04.000
在我们的情况下，它显然是ipld，所以基本上，我们从

00:32:04.000 --> 00:32:08.320
将编解码器翻转到使用新内容，然后

00:32:08.320 --> 00:32:14.000
希望找到一种缓慢上升的方法，这是我的下一个问题，就像我们

00:32:14.000 --> 00:32:17.679
就像我知道你写过的

00:32:17.679 --> 00:32:22.000
有些人也喜欢编解码器，所以我们已经有可以使用的编解码器了吗？

00:32:22.000 --> 00:32:27.360
 js多种格式的内容，是的，可能有一些漏洞，但是

00:32:27.360 --> 00:32:31.760
主要的完成了，我完成了dag pb，那是个大问题

00:32:31.760 --> 00:32:35.519
错过了一个，但是嗯，我们有所有的抄本，

00:32:35.519 --> 00:32:38.559
新工具的优点之一就是新工具

00:32:38.559 --> 00:32:42.399
链是那个依赖树真的很浅

00:32:42.399 --> 00:32:47.039
因此，当您拉动零件时，就不会得到这么大的重量

00:32:47.039 --> 00:32:51.679
一串东西，所以我可以想像到ipfs的迁移

00:32:51.679 --> 00:32:56.720
实际上可以采取一种您知道的分段方法，而他们没有

00:32:56.720 --> 00:32:59.120
担心他们会有两个堆栈

00:32:59.120 --> 00:33:03.440
充满了大量的依赖树，因为新的依赖树就足够了

00:33:03.440 --> 00:33:06.640
对于他们正在使用的位，然后他们可以以英寸为单位

00:33:06.640 --> 00:33:10.320
有一个与之相关的悬而未决的问题，那就是

00:33:10.320 --> 00:33:14.640
卡扎拉有哪个是他，因为他在看这个

00:33:14.640 --> 00:33:19.840
浪费的东西，他正在考虑当前方法的挑战

00:33:19.840 --> 00:33:24.320
我们一直在讨论当前的方法是正确的还是正确的

00:33:24.320 --> 00:33:27.519
我们是否应该朝着一点方向前进

00:33:27.519 --> 00:33:30.799
更像是ipld prime，我们甚至在团队中也存在分歧

00:33:30.799 --> 00:33:36.640
关于这个，但是那引起了um的问题

00:33:36.640 --> 00:33:40.000
是否可以安全地假设当前

00:33:40.000 --> 00:33:44.880
js多种格式的方法足够稳定，否则我们将会

00:33:44.880 --> 00:33:47.360
在六个月内用新东西替换它

00:33:47.360 --> 00:33:50.640
嗯，我认为我们没有答案

00:33:50.640 --> 00:33:58.240
因为在前进的方向上还没有达成足够的共识，

00:33:58.240 --> 00:34:04.159
我们当中有些人有足够的不确定性来表明

00:34:04.159 --> 00:34:10.720
答案可能不像嗯，可能与事实如此相关

00:34:10.720 --> 00:34:15.760
因为我的工作也像ipfs使用的js ipld一样，所以

00:34:15.760 --> 00:34:19.520
我记得我们目前的替代品是什么

00:34:19.520 --> 00:34:23.359
战士的积木式API，但现在是什么样子

00:34:23.359 --> 00:34:28.079
实际上是这样，我们目前有什么替代品

00:34:28.079 --> 00:34:31.359
js ipod目前正在做，基本上就像

00:34:31.359 --> 00:34:36.480
捆绑法典并拥有一些类似的api

00:34:36.480 --> 00:34:43.359
很好的问题，迈克尔将要去做吗，他要去哪里做js阻止，

00:34:43.359 --> 00:34:45.599
像这样的更新实际上是一个重点

00:34:45.599 --> 00:34:48.159
他和那里的api贡萨洛之间的分歧

00:34:48.159 --> 00:34:52.560
所以他有我认为他有一个分支

00:34:52.560 --> 00:34:56.480
他开始迁移到最新的多种格式，但他和加沙

00:34:56.480 --> 00:34:59.599
关于如何如何有不同的意见分歧

00:34:59.599 --> 00:35:04.160
这些碎片汇集在一起​​，我的方法只是

00:35:04.160 --> 00:35:07.440
推开它，说不，我只是要用基本的东西，而忘了那个

00:35:07.440 --> 00:35:11.040
好的，但我记得像我一样

00:35:11.040 --> 00:35:14.720
记得迈克尔，他说过戈萨拉的方法更好

00:35:14.720 --> 00:35:17.760
所以我认为他们无论如何都已经决定采用戈萨拉的方法

00:35:17.760 --> 00:35:20.400
我基本上是这样，所以我会和哥斯拉谈谈

00:35:20.400 --> 00:35:23.440
如果他知道替代品是什么，因为

00:35:23.440 --> 00:35:27.040
这有点像丢失的部分，因为

00:35:27.040 --> 00:35:30.400
理想情况下，当我们进行灵魂升级时

00:35:30.400 --> 00:35:34.400
嗯js ipfs团队会做的是

00:35:34.400 --> 00:35:39.680
只是和另一种js ipd交谈，然后其他所有事情都会

00:35:39.680 --> 00:35:44.720
就像理想中的iii之类的新闻，我很清楚

00:35:44.720 --> 00:35:49.920
这不会以这种方式起作用，但是从理论上讲，这就像

00:35:49.920 --> 00:35:53.520
是的，好的，是的，我认为实际上在js multi中已经足够了

00:35:53.520 --> 00:35:56.960
像是一棵树和一条路径的格式，并链接像这样的东西

00:35:56.960 --> 00:36:00.240
那里已经有一些实用的东西了

00:36:00.240 --> 00:36:03.839
所以我认为里面已经足够了，因为这只是关于如何

00:36:03.839 --> 00:36:08.000
您，因为它是基于所有这些编解码器和

00:36:08.000 --> 00:36:12.079
哈希是单独的实体，您可以单独使用它们

00:36:12.079 --> 00:36:15.520
然后是我们如何从那里站起来并拉动它们的概念

00:36:15.520 --> 00:36:18.240
一起成为我们互动的奇异事物

00:36:18.240 --> 00:36:21.440
那是一个悬而未决的问题

00:36:21.440 --> 00:36:25.839
那和三真的不相信他们有

00:36:25.839 --> 00:36:29.680
同意，是的，因为我是个好主意

00:36:29.680 --> 00:36:35.440
我什至都不确定，但是是的，看起来已经准备好了，实际上

00:36:35.440 --> 00:36:38.560
它实际上也是高性能的，就像我认为它比许多

00:36:38.560 --> 00:36:42.720
其他旧的开始堆栈以及我希望这就像旧的堆栈一样

00:36:42.720 --> 00:36:46.560
当然不是很擅长表现，就是这样

00:36:46.560 --> 00:36:49.760
就像你会说谁是...的维护者

00:36:49.760 --> 00:36:56.720
js多种编解码器多种编解码器或多种格式对不起

00:36:56.720 --> 00:37:03.680
作为强大的格式，对不起，嗯，我们是我们，是的，但是

00:37:03.680 --> 00:37:09.200
但是我所以我喜欢我可能会先进入，因为

00:37:09.200 --> 00:37:13.280
ii会说michael喜欢吗，你知道吗，但是michael并不倾向于

00:37:13.280 --> 00:37:16.400
担当着维护者的角色，但是我非常

00:37:16.400 --> 00:37:19.440
这就是我所知道的，因此就像是

00:37:19.440 --> 00:37:23.119
好的，是的，所以ii回答了请求请求，但是ii

00:37:23.119 --> 00:37:26.560
像gizala一样，我也有很多心得分享，所以我可能

00:37:26.560 --> 00:37:30.079
拉他很多东西，因为喜欢理想的喜欢

00:37:30.079 --> 00:37:32.720
这就像我的长期计划一样

00:37:32.720 --> 00:37:36.079
我有点像得到这样的机会，基本上这是我的

00:37:36.079 --> 00:37:39.920
希望对javascript之类的东西采取最后行动，显然我可以帮上忙

00:37:39.920 --> 00:37:42.880
从旧的东西过渡到新的东西，然后

00:37:42.880 --> 00:37:45.359
我有点像我或多或少

00:37:45.359 --> 00:37:48.839
正确的东西，所以基本上我要问喜欢

00:37:48.839 --> 00:37:52.079
是的，我会和谁说话，但我就像我完全很高兴做

00:37:52.079 --> 00:37:55.200
就像我很忙，如果我像第一一样做整个事情

00:37:55.200 --> 00:37:57.839
仅用四分之一的JavaScript工作对我来说就很好了

00:37:57.839 --> 00:38:01.200
喜欢进行这种过渡，因为确实需要做很多工作

00:38:01.200 --> 00:38:04.720
我很高兴喜欢，是的，帮助您

00:38:04.720 --> 00:38:08.000
所以是的意思

00:38:08.079 --> 00:38:11.520
在名称上标注ii负责

00:38:11.520 --> 00:38:14.720
所有的编解码器，哈希和其他东西，然后我只希望其他

00:38:14.720 --> 00:38:17.760
人们会因为拥有专业知识而跳进去，但是

00:38:17.760 --> 00:38:20.160
对于食品法典ii，我认为我正在接受

00:38:20.160 --> 00:38:26.000
对他们有多种格式的责任，是的，因为

00:38:26.000 --> 00:38:30.160
当我与js ipfs交谈时，我是的

00:38:30.160 --> 00:38:33.200
骗人选对的人，是的，很酷

00:38:33.200 --> 00:38:36.400
嗯，我认为那可以回答我所有的问题，

00:38:36.400 --> 00:38:41.200
嗯，是的，我大概和戈萨拉谈过了，然后

00:38:41.200 --> 00:38:44.400
是的，我们会弄清楚ipfs的重要之处在于

00:38:44.400 --> 00:38:51.359
dagpb现在可以处理纯数据模型，就像您所得到的一样，

00:38:51.359 --> 00:38:54.640
您给出数据的形状

00:38:54.640 --> 00:38:58.480
根据规范，我们为dagp定义的架构

00:38:58.480 --> 00:39:01.280
真的很好，因为现在它与其他编解码器匹配，只是

00:39:01.280 --> 00:39:04.400
这有点，但这意味着ipfs有

00:39:04.400 --> 00:39:09.920
承担起更多的责任，让um形成这些物体

00:39:09.920 --> 00:39:12.720
dagp编解码器中的一些帮助，但

00:39:12.720 --> 00:39:16.880
是的，是的，有点像js

00:39:16.880 --> 00:39:20.800
 ipf是不，反正它不仅仅是代码，是的，所以

00:39:20.800 --> 00:39:24.240
我当然可以在两者之间使用

00:39:24.240 --> 00:39:29.119
然后最好是js ffs和js ipod

00:39:29.119 --> 00:39:32.800
因为像js或多或少都是真的，所以我

00:39:32.800 --> 00:39:35.760
认为它会更少，所以甚至会不会

00:39:35.760 --> 00:39:42.880
确实是一个js ipld，希望它只是很少的粘合代码，是的，

00:39:42.880 --> 00:39:46.880
我认为至少从迈克尔的角度来看，这是目标的一部分，

00:39:46.880 --> 00:39:50.320
这个东西不应该达到这个奇异点，这不是我们的方式

00:39:50.320 --> 00:39:55.520
javascript，它也不是不是

00:39:55.520 --> 00:39:59.599
这也不是真的，我们应该对ipld end做些什么，因为

00:39:59.599 --> 00:40:01.440
就像这是整个事情一样，我们是

00:40:01.440 --> 00:40:05.440
产品团队与否，不，我不认为我们是这样，所以我们不要

00:40:05.440 --> 00:40:08.720
生产一个大的大产品，我的意思是与众不同

00:40:08.720 --> 00:40:13.119
与go的区别之一就是我们在go中这样做

00:40:13.119 --> 00:40:17.680
好的，很酷，嗯，谢谢，这很有帮助，是的，我会

00:40:17.680 --> 00:40:21.200
是的，看看我们在忙碌的地方做什么，所以我们应该

00:40:21.200 --> 00:40:25.280
当然也喜欢计划时间，例如js ipfs团队决定在

00:40:25.280 --> 00:40:29.839
q1我们也应该相应地安排时间来帮助他们

00:40:29.839 --> 00:40:33.680
做到这一点，因为像我们将是第一个

00:40:33.680 --> 00:40:39.680
做一些工作，我想是的，很酷，嗯，还有两个起源

00:40:39.680 --> 00:40:44.880
来自danielle so yeah的物品

00:40:46.000 --> 00:40:49.599
是的，我会简短地介绍一下，我认为我们都同意

00:40:49.599 --> 00:40:54.480
and和and被分配的分配端应在64

00:40:54.480 --> 00:40:58.720
因为再次在32位上使用end不是一个好主意，因为这限制了我们

00:40:58.720 --> 00:41:02.079
32位um，那么问题就来了

00:41:02.079 --> 00:41:04.560
还有更多使用的接口和方法

00:41:04.560 --> 00:41:08.480
结束而不是在64。并且它们通常旋转

00:41:08.480 --> 00:41:11.680
围绕事物的长度或事物的大小

00:41:11.680 --> 00:41:17.760
例如列表种类的长度或当您迭代某些内容时

00:41:17.760 --> 00:41:22.400
它给您的索引是结束或路径段，并按索引查找

00:41:22.400 --> 00:41:27.040
这也起作用，所以一方面我最初的想法是

00:41:27.040 --> 00:41:30.000
好吧，如果它们的列表是一般映射的，这些东西

00:41:30.000 --> 00:41:33.359
它们应该适合内存，所以int很好，因为有趣的是

00:41:33.359 --> 00:41:38.960
可以存储在内存中的东西，然后ipld的某些部分被设计为

00:41:38.960 --> 00:41:41.200
知道可以使用的数据结构

00:41:41.200 --> 00:41:44.640
可能太大而无法容纳在一台机器中，

00:41:44.640 --> 00:41:47.680
另一方面，您也有以下情况

00:41:47.680 --> 00:41:50.800
您取一个整数值，然后将其用作键

00:41:50.800 --> 00:41:54.880
或作为索引，如果我们做了一件事情，那么其中的一些代码

00:41:54.880 --> 00:41:58.720
在64中，但不是列表和长度，依此类推

00:41:58.720 --> 00:42:02.079
那么就会出现这种不匹配以及一些ipld主代码

00:42:02.079 --> 00:42:06.000
例如将不得不处理我认为不是很好的溢出

00:42:06.000 --> 00:42:08.800
想法，所以我倾向于认为一切

00:42:08.800 --> 00:42:13.680
即使在某些情况下（例如路径段没人）也应该在64

00:42:13.680 --> 00:42:19.839
任何想法都将它们用作n64哦，还有一点

00:42:19.839 --> 00:42:23.599
支持n64的所有这些方法，我认为是adls

00:42:23.599 --> 00:42:27.680
因为我可能想要一个列表adl，例如返回

00:42:27.680 --> 00:42:31.119
无限数量的元素我不认为这是个好主意，但是无论在何处

00:42:31.119 --> 00:42:35.200
大量元素，即使它们永远不存在

00:42:38.960 --> 00:42:42.880
昨天我在和马丁谈这件事，他同样感到沮丧

00:42:42.880 --> 00:42:46.079
但我觉得我在这里想念什么

00:42:46.079 --> 00:42:51.440
关于go及其使用int作为默认类型的决定

00:42:51.440 --> 00:42:58.160
嗯，好的，所以在这里，我们去吧，我唯一的理论

00:42:58.160 --> 00:43:00.960
我之所以会这么做，是因为如果

00:43:00.960 --> 00:43:04.319
您鼓励开发人员对整数类型保持灵活性，然后

00:43:04.319 --> 00:43:07.680
那么您将有机会制作更小，更高效的二进制文件

00:43:07.680 --> 00:43:10.240
向下编译时的32位平台

00:43:10.240 --> 00:43:13.359
因为如果每个人都只是使用64位ins，那么您可能最终会

00:43:13.359 --> 00:43:17.280
在32位平台上使用笨拙的二进制文件

00:43:17.280 --> 00:43:21.760
嗯，所以鼓励中间的软空间

00:43:21.760 --> 00:43:26.319
然后您就可以进行优化

00:43:26.319 --> 00:43:29.520
那是我想出的唯一一件事

00:43:29.520 --> 00:43:36.560
老实说，您应该只在默认情况下使用64，我认为这是海洋遗产

00:43:36.560 --> 00:43:40.000
通过所有的作者基本上

00:43:40.000 --> 00:43:44.240
还有水獭，那是你的结局，你知道这是

00:43:44.240 --> 00:43:47.839
您的基本目标和目标，基本上可以通过

00:43:47.839 --> 00:43:52.240
从数组的长度和

00:43:52.240 --> 00:43:56.160
呃，你知道，但是基本上是基本类型和基本类型的长度

00:43:56.160 --> 00:44:00.000
显然是在您的计算机本机大小中表示的

00:44:00.000 --> 00:44:04.240
同样从那里开始，就像在32位盒子上一样，

00:44:04.240 --> 00:44:09.040
具有超过32位元素的数组

00:44:09.040 --> 00:44:12.000
在扫描中，因为它将彻底检查其

00:44:12.000 --> 00:44:15.280
长度就是这样

00:44:16.960 --> 00:44:20.400
是的，这可能会切线，但是其中一个提案

00:44:20.400 --> 00:44:24.480
go的创造者说，让我们交换

00:44:24.480 --> 00:44:28.960
是任意大小，并且据说编译器可能足够聪明

00:44:28.960 --> 00:44:33.200
因此，如果您使用局部结束变量，并且cobala可以看到它适合

00:44:33.200 --> 00:44:36.400
例如64位，那么它就不必花大钱了

00:44:36.400 --> 00:44:40.640
它会自动使用一个小端，然后在代码中

00:44:40.640 --> 00:44:43.440
不知道它实际上是否会根据是否检测到分支

00:44:43.440 --> 00:44:46.079
溢出，但我认为他们不会这样做

00:44:46.079 --> 00:44:49.200
因为它会破坏太多现有代码

00:44:49.200 --> 00:44:52.240
是的，我对此感到非常兴奋，我认为他们像这样关闭了它

00:44:52.240 --> 00:44:55.920
两周前就像最近

00:44:58.480 --> 00:45:03.040
无论如何，从我的角度来看，我的总结是我看不出原因

00:45:03.040 --> 00:45:07.599
在这些地方不要在64位代码

00:45:07.599 --> 00:45:10.720
索引有点难以证明，但这就像

00:45:10.720 --> 00:45:14.640
在我看来，这似乎是int

00:45:14.640 --> 00:45:23.359
有缺陷，所以只要避免它是的，我也不能继续前进

00:45:23.359 --> 00:45:26.880
我要说的是，如果我们不确定，我什至会争论说默认情况下，我们

00:45:26.880 --> 00:45:31.599
应该只选择一个特定的大小，而不是依赖于机器

00:45:31.599 --> 00:45:34.400
仅仅因为ipld应该是可移植的

00:45:34.400 --> 00:45:38.160
所以我也同意我们应该改变它

00:45:38.160 --> 00:45:44.720
我关于规格的最早问题之一就是为什么该数据模型只是说完了

00:45:44.720 --> 00:45:48.960
没有您知道的尺寸规格，我讨厌没有规格的提示

00:45:48.960 --> 00:45:52.560
太可怕了，是的，如果有的话我们可以放一个

00:45:52.560 --> 00:45:57.359
64位的限定符，让我们开始吧

00:45:58.480 --> 00:46:02.800
在意大利，它被指定基本上是很大的

00:46:02.800 --> 00:46:05.520
无限

00:46:06.160 --> 00:46:11.280
除了超过50个53位，您会有点尴尬

00:46:12.880 --> 00:46:16.480
是的，对于某些无限制的值，它是无限制的

00:46:16.480 --> 00:46:23.200
是的，无限的世界，这是无限的

00:46:24.319 --> 00:46:27.440
嗯，我想我想我们都同意所有方法

00:46:27.440 --> 00:46:32.160
使用和含义是某种大小或某种索引或某种

00:46:32.160 --> 00:46:35.440
段或类似的内容，它们都应该在64中。

00:46:35.440 --> 00:46:39.280
然后另一个项目就是您知道我正在尝试使所有这些自动化

00:46:39.280 --> 00:46:42.480
进行尽可能多的更改，以便下游必须手动进行

00:46:42.480 --> 00:46:46.160
修复大量代码并修复功能类型的功能签名

00:46:46.160 --> 00:46:49.760
很好，很容易修复使用这些代码的代码

00:46:49.760 --> 00:46:54.079
最初我以为我可以将代码修复为已知的功能

00:46:54.079 --> 00:46:57.440
插入正确的类型转换，依此类推，但后来我

00:46:57.440 --> 00:47:00.880
意识到我做不到，因为我可能会介绍

00:47:00.880 --> 00:47:04.560
可能用户不想​​要的um溢出处理，或者

00:47:04.560 --> 00:47:09.040
还没有意识到，所以我认为对于所有这些下游变化应该

00:47:09.040 --> 00:47:12.319
仔细调整代码，问题是我们可以吗？

00:47:12.319 --> 00:47:15.599
我认为我们是因为我认为大多数变化

00:47:15.599 --> 00:47:20.000
应该是相当琐碎的，但我想它确实提出了一个问题，

00:47:20.000 --> 00:47:22.800
许多下游企业可能需要多加思考

00:47:22.800 --> 00:47:25.839
溢出等等

00:47:29.839 --> 00:47:33.440
是的，我想我们只是必须要做些

00:47:33.440 --> 00:47:38.960
周末娱乐时间项目，我决定从事一项工作，尝试写一部

00:47:38.960 --> 00:47:43.359
混合整数大小的程序，然后去看看如何

00:47:43.359 --> 00:47:46.400
我非常讨厌我的生活，结果却是我讨厌我的生活

00:47:46.400 --> 00:47:48.880
相当多

00:47:49.839 --> 00:47:54.800
而这些地方正是我讨厌我的生活的确切地方

00:47:54.800 --> 00:48:00.319
你是不是会以为你会得到

00:48:00.319 --> 00:48:03.200
某种技巧，您将可以预期在哪里

00:48:03.200 --> 00:48:07.839
你将需要这些演员，我只是

00:48:08.160 --> 00:48:11.839
进入项目两个小时，我没有职能机构五个小时

00:48:11.839 --> 00:48:15.040
该项目进入项目20小时后，我没有任何功能上的期望

00:48:15.040 --> 00:48:17.680
我仍然没有任何功能上的期望，

00:48:17.680 --> 00:48:21.760
偶尔我会想让我们尝试改变这个东西，这不是

00:48:21.760 --> 00:48:27.040
让我们回到正常状态，然后再进行级联

00:48:28.000 --> 00:48:31.280
我认为我们可以做到的自动化程度是

00:48:31.280 --> 00:48:35.839
有限，我们应该承认并继续前进

00:48:41.040 --> 00:48:49.680
好吧，所以不，这不是好事，这不是好事，这不是好事

00:48:49.680 --> 00:48:52.880
任何其他项目，顺便感谢您

00:48:52.880 --> 00:48:59.410
完美记笔记的人

00:48:59.410 --> 00:49:04.000
[音乐]是的，约翰尼，是的，所以我吃了一些

00:49:04.000 --> 00:49:07.359
做规范的进展，所以我把它

00:49:07.359 --> 00:49:11.760
进入聊天，所以嗯，目前仍在草稿中，

00:49:11.760 --> 00:49:15.440
 dag cbor在里面，我得到一些回推

00:49:15.440 --> 00:49:19.760
现在从W3C讲得不错

00:49:19.760 --> 00:49:24.079
ipld还不像一个正式的规范，所以我们不能

00:49:24.079 --> 00:49:28.240
规范地指向它，所以，如果你们看看它，我将不胜感激

00:49:28.240 --> 00:49:32.160
对于大多数人来说，这是一项艰巨的工作

00:49:32.160 --> 00:49:34.880
介于两者之间的抽象数据类型模型

00:49:34.880 --> 00:49:37.920
包括json杰森ld在内的不同格式

00:49:37.920 --> 00:49:43.119
yaml和cbore和um，所以我写了整个seabor部分

00:49:43.119 --> 00:49:47.599
包括dag seabor，我显然非常投入其中，并且大部分是

00:49:47.599 --> 00:49:49.920
只是将其限制为

00:49:49.920 --> 00:49:52.960
海边，但唯一使用标签的标签是

00:49:52.960 --> 00:49:57.040
是42。karsten确实找了我，实际上他很有帮助

00:49:57.040 --> 00:50:00.160
他实际上不会加入工作组，可能是因为他说了算了

00:50:00.160 --> 00:50:03.280
w3c就像是为什么要这么做那样

00:50:03.280 --> 00:50:07.119
像胡安（Juan）在两年前警告我，但是

00:50:07.119 --> 00:50:10.800
它正在取得一些进展，我明天要开会，有很大的反对意见

00:50:10.800 --> 00:50:15.760
关于dag cbor，因为就像您如何桥接不同

00:50:15.760 --> 00:50:22.160
表示很容易，但是dag jason呢？

00:50:22.160 --> 00:50:26.480
以及如何实际采用标签42中的表示形式并表示

00:50:26.480 --> 00:50:30.800
在json中，所以格式不同

00:50:30.800 --> 00:50:35.520
有这样的事情吗，核心注册中心吗，我也参与了

00:50:35.520 --> 00:50:40.079
编写了所有的cddl以验证我们的dod文档

00:50:40.079 --> 00:50:42.880
和文档的不同小节都在cddl中

00:50:42.880 --> 00:50:48.079
在sibor和json um seymour是json的超集的情况下工作正常

00:50:48.079 --> 00:50:56.160
嗯，但我需要一些帮助，以对抗w3c

00:50:56.160 --> 00:50:59.520
明天我的论点主要是

00:50:59.520 --> 00:51:03.599
规范说明了数据模型，又是什么

00:51:03.599 --> 00:51:07.280
在左侧，您无法限制的属性

00:51:07.280 --> 00:51:08.800
人们将要投入的

00:51:08.800 --> 00:51:12.960
右边的那个um的值，所以如果我们实际上有一个好的数据模型

00:51:12.960 --> 00:51:17.440
和标签42代表dag c-bor

00:51:17.440 --> 00:51:20.880
我可以进入注册表，如果我注册了

00:51:20.880 --> 00:51:25.839
斜线的路径与json之间的等价关系

00:51:25.839 --> 00:51:32.640
cbore和jason以一种无损的方式呃，那么我想我有一些

00:51:32.640 --> 00:51:37.440
国防部，我想知道像少数几个

00:51:37.440 --> 00:51:42.000
不好意思，我们确实为道格·杰森（Doug jason）定义了它

00:51:42.000 --> 00:51:45.520
我们上周或前一周做到了

00:51:45.520 --> 00:51:48.559
我们花了一些时间来澄清一些未解决的问题

00:51:48.559 --> 00:51:52.720
特别是字节的东西，还没有

00:51:52.720 --> 00:51:55.040
完全组成了我们的堆栈jason规范

00:51:55.040 --> 00:51:58.480
但我不知道你想推多远，但你可以

00:51:58.480 --> 00:52:02.380
它确实干净地转换为dag jason并再次返回

00:52:02.380 --> 00:52:06.160
[音乐]如此，但那确实意味着

00:52:06.160 --> 00:52:09.280
你必须在那里写一整天的杰森节以及

00:52:09.280 --> 00:52:14.960
是他们在乎的是

00:52:16.079 --> 00:52:18.960
真是太神奇了，因为呃，谁是sporney的那个人

00:52:18.960 --> 00:52:23.680
给了我最大的压力

00:52:23.680 --> 00:52:27.760
嗯，签约他实际上是帮他写了

00:52:27.760 --> 00:52:34.480
多哈希和多用于多哈希的至少um规范

00:52:34.480 --> 00:52:39.520
ieee，但他是最大的人

00:52:39.520 --> 00:52:46.880
在cids上，这是谁的惊喜manu

00:52:47.760 --> 00:52:54.640
为此规范编写了适用于多Uh编解码器的ietf

00:52:55.680 --> 00:52:59.920
嗯，对不起，我正在使用多种格式的多种编解码器

00:52:59.920 --> 00:53:04.880
多哈希多加法器也许是

00:53:04.880 --> 00:53:07.680
因为在多功

00:53:07.680 --> 00:53:13.280
多编解码器和多哈希，但这可能是詹姆斯·斯内尔（James Snell），他可能

00:53:13.280 --> 00:53:16.400
可能也撞到了那个区域，但是他

00:53:16.400 --> 00:53:20.960
是的，那不是去年

00:53:22.800 --> 00:53:26.640
所以大概是p日期，是主题标签，也是他混蛋了吗

00:53:26.640 --> 00:53:29.920
实际上，他们称其为哈希链接，所以在这里

00:53:29.920 --> 00:53:34.079
这是我想知道的

00:53:34.079 --> 00:53:38.559
这就是为什么你应该与这个孵化互动

00:53:38.559 --> 00:53:45.040
哦，天哪，我们之前谈到的一件事

00:53:45.040 --> 00:53:49.280
与迈克尔一起真的很喜欢获得ipld规范的路线图。

00:53:49.280 --> 00:53:53.280
像iatf一样发表，我知道这是

00:53:53.280 --> 00:53:58.400
嗯，就像明年第一季度一样，但这确实帮助了我

00:53:58.400 --> 00:54:03.760
提出相反的论点，是的，这是一个新兴的规范

00:54:03.760 --> 00:54:07.040
我们正在定义数据模型以实现与

00:54:07.040 --> 00:54:10.319
其他做了规格，这是一个dag seabord

00:54:10.319 --> 00:54:15.520
因为它的结构和价值实际上是

00:54:15.520 --> 00:54:18.079
冲了出去

00:54:22.160 --> 00:54:28.319
所以这我觉得这对我们来说有点矛盾，因为我们

00:54:28.319 --> 00:54:33.200
明确地不想成为ipld的itif

00:54:33.200 --> 00:54:36.400
我们不想做ietf为ipld做的事情

00:54:36.400 --> 00:54:40.880
嗯，我们不想花时间无休止地骑自行车

00:54:40.880 --> 00:54:45.359
较小的细节，但我们也想提供功能

00:54:45.359 --> 00:54:48.799
人们可以实际使用的规格

00:54:48.799 --> 00:54:53.119
所以发现中间点很棘手

00:54:53.119 --> 00:54:59.760
嗯，但是已经陷入这样的事情

00:54:59.839 --> 00:55:03.440
如果我们走得太深，你可能会用力，因为

00:55:03.440 --> 00:55:07.280
我们没有完整的Sea规格，所以我们不会使用它

00:55:07.280 --> 00:55:10.720
好吧，我们要去为daxibor做一个完整的规格

00:55:10.720 --> 00:55:14.880
他们会不会很高兴，因为这就是重点

00:55:14.880 --> 00:55:16.880
那就是为什么我们

00:55:16.880 --> 00:55:21.040
尚未为ietf完成此操作，因为我们不想执行此操作

00:55:21.040 --> 00:55:25.119
那年，所以我不知道我

00:55:25.119 --> 00:55:29.520
我不知道该如何解决这个问题，因为我们投入的时间越多

00:55:29.520 --> 00:55:34.319
我们将ipld转换为atf分支的次数越多

00:55:34.319 --> 00:55:37.760
而且我不认为我们任何人都想要那样

00:55:41.280 --> 00:55:45.040
但是如果有实际的事情，我们可以做澄清，比如

00:55:45.040 --> 00:55:47.280
如果有关于以下内容的具体反馈，则为真实

00:55:47.280 --> 00:55:51.760
这是未定义的，或者这是不清楚的

00:55:51.760 --> 00:55:54.799
那么这可能就是我们应该提供建议并实际执行的反馈

00:55:54.799 --> 00:55:59.280
关于它在哪里有意义并能够

00:55:59.280 --> 00:56:05.119
看看如果不合理的话，那太过分了

00:56:05.119 --> 00:56:07.920
那么我们需要弄清楚这是什么意思，这是不合理的，但是如果有的话

00:56:07.920 --> 00:56:11.200
如果有约翰尼，如果你有具体的话

00:56:11.200 --> 00:56:14.000
然后反馈我们需要在规范上做些什么

00:56:14.000 --> 00:56:19.599
我们应该看看我我也可以喜欢

00:56:19.599 --> 00:56:22.720
肖妮的问题，最近是的

00:56:22.720 --> 00:56:26.960
其他标准以便采用ipld或其中的一部分

00:56:26.960 --> 00:56:31.040
就像它需要成为规范规范那样，所以我有点参与其中

00:56:31.040 --> 00:56:34.079
在ogc中，有点像我不知道

00:56:34.079 --> 00:56:39.200
w3c的地理标准um，那将是相同的问题，所以如果我

00:56:39.200 --> 00:56:42.960
想说服某人在那里他们会说要去哪里号码

00:56:42.960 --> 00:56:46.799
花，如果你没有像这样的人

00:56:46.799 --> 00:56:51.200
您没有机会得到它，所以您可以完全看到这一点，但是

00:56:51.200 --> 00:56:54.319
是啊

00:56:55.520 --> 00:56:58.559
但我也同意这个世界，我们显然至少像我一样

00:56:58.559 --> 00:57:01.839
说我们显然离它很远

00:57:01.839 --> 00:57:05.520
到这一点，还有诸如谁得到的问题

00:57:05.520 --> 00:57:10.960
这是对的，所以我认为最

00:57:10.960 --> 00:57:14.319
现在的辩护是，嘿，基本上，我们正在整个

00:57:14.319 --> 00:57:16.559
做过的工作组的目的是数据建模

00:57:16.559 --> 00:57:21.760
和um现在明确指出标签42和dag cybor

00:57:21.760 --> 00:57:28.319
嗯，这是您的工作方式，但是工作组的工作不是

00:57:28.319 --> 00:57:35.760
关于右边的值，这是其他规格

00:57:38.839 --> 00:57:43.040
dbd [音乐]

00:57:43.040 --> 00:57:45.359
好的

00:57:48.160 --> 00:57:55.839
好的，还有其他吗

00:58:00.000 --> 00:58:05.119
是的，所以如果没有别的，那么，谢谢大家的参与，

00:58:05.119 --> 00:58:09.359
嗯，我也放上笔记，就像我将要离开

00:58:09.359 --> 00:58:14.799
三个星期，然后是星期一，所以接下来的几次见面都不会见到我

00:58:14.799 --> 00:58:18.000
所以其他人可能会这样做

00:58:18.000 --> 00:58:23.520
下周见面，嗯，是的，明年见。

00:58:23.520 --> 00:58:26.799
也许下周有人

