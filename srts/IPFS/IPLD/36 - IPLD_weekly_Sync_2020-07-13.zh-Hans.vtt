WEBVTT
Kind: captions
Language: zh-Hans

00:00:12.830 --> 00:00:22.350
欢迎大家参加本周的IPL秋千会议将于2020年9:30结束

00:00:22.350 --> 00:00:27.029
为了减轻压力，我们回顾了过去一周中所做的事情，

00:00:27.029 --> 00:00:35.309
然后讨论我们今天可能拥有的任何匿名者以及我们不认识的每个人都在谈论

00:00:35.309 --> 00:00:42.300
关于哦，还有一个我要说的很棒，是的，然后

00:00:42.300 --> 00:00:50.760
我们会看到的，嗯，是的，我很快就从我自己开始，因为那不是

00:00:50.760 --> 00:00:56.969
有很多话要说，因为我刚从地点回来，只是赶上了

00:00:56.969 --> 00:01:03.470
关于事情，我开始讨论限制大小的问题

00:01:03.470 --> 00:01:08.430
身份多重哈希，这也是他将要讨论的讨论主题之一

00:01:08.430 --> 00:01:14.640
关于更新之后，下周我真的打算回来

00:01:14.640 --> 00:01:20.820
到我的东西在groovy中一些rust multi格式重构主要是rust multi

00:01:20.820 --> 00:01:25.770
哈希值，因为当我尝试将20个交易为或时，我遇到了限制

00:01:25.770 --> 00:01:31.619
调查了Farrakhan如何使用IPL D，因此使用了多种格式，

00:01:31.619 --> 00:01:37.590
一些限制，需要重新设计，这很有趣，因为

00:01:37.590 --> 00:01:42.450
我也是另一个国家，我们进行了重构，所以类似

00:01:42.450 --> 00:01:47.040
我猜我们俩都同意需要发生一些事情，是的，对此还有更多

00:01:47.040 --> 00:01:57.450
下周是的，所以我名单上的下一个是Peter yeah-也很短，实际上没有

00:01:57.450 --> 00:02:04.040
变得太高了，实际上这周所有平等工作都没有进行

00:02:04.040 --> 00:02:12.500
确保使用Lotus的真正高级方法能够正常工作，并且

00:02:12.500 --> 00:02:18.620
终于在那里取得了一些进展，我今天花了很多时间让埃里克（Eric）生气

00:02:18.620 --> 00:02:27.530
成功就在这里，但我实际上忘记了我曾做过很多工作

00:02:27.530 --> 00:02:31.340
关于FICO和其他东西，但可能对其他人也很有趣，所以我做了很多工作

00:02:31.340 --> 00:02:36.410
将规格从蛋头变成正式规格

00:02:36.410 --> 00:02:44.780
仓库，有趣的是，他们中很多人都采用数学代码，所以在

00:02:44.780 --> 00:02:48.800
如果您有这样的文档，并且想了解我们现在拥有的规范

00:02:48.800 --> 00:02:53.810
连接在一起的所有东西都由谁去做，这些事情好像不是

00:02:53.810 --> 00:02:59.840
琐碎的，是的，是的，伙计，我可能会对其他类似规范的工作有用

00:02:59.840 --> 00:03:07.220
如果您要进行大量休假数学相关的规范工作，是的，我只是想要

00:03:07.220 --> 00:03:16.459
我名单上的下一个是mm Eric，他在复制粘贴上的速度非常快

00:03:16.459 --> 00:03:24.320
打字我不太清楚复制和粘贴，所以我有一大堆文字

00:03:24.320 --> 00:03:31.580
因为我有很多事情，所以从

00:03:31.580 --> 00:03:35.420
较小的东西，然后与启用的东西一起工作

00:03:35.420 --> 00:03:42.470
Cochin现在支持，是的，哇哇Cochin现在已经支持工会了

00:03:42.470 --> 00:03:48.200
只是关键的工会代表，但拥有其中一个就足以证明

00:03:48.200 --> 00:03:54.440
排除了核心概念，所以这是一个重要的里程碑，因为工会

00:03:54.440 --> 00:04:00.549
是我们尚未以任何方式实现的最后一种递归类型

00:04:00.549 --> 00:04:06.950
与它完全相关的IP LD模式，因此现在在Cochin中实现了

00:04:06.950 --> 00:04:13.940
并没有粉碎任何抽象的石头，这是理智的基本门槛，但是它

00:04:13.940 --> 00:04:18.890
意味着现在我们已经完成了所有递归类型削减，

00:04:18.890 --> 00:04:23.210
未知未知物可能躲藏起来的最后一个洞的跳跃

00:04:23.210 --> 00:04:26.210
我们当中有些人只是连接在一起，那不是

00:04:26.210 --> 00:04:33.500
呼呼，所以像是，信心增强了，那里有一个拉取请求

00:04:33.500 --> 00:04:37.300
我讨论了这个问题，以及将要与纹理链接的更多长度

00:04:37.300 --> 00:04:42.530
其中包含的一些有趣的东西是用户选择的两个

00:04:42.530 --> 00:04:46.280
我生成的代码中有不同的内部内存布局策略

00:04:46.280 --> 00:04:50.840
叫他们躺在床上都与界面相对，这是她会做的一个参数

00:04:50.840 --> 00:04:55.460
不要在模式本身中设置，因为它完全是特定的，但是您

00:04:55.460 --> 00:05:00.229
在代码生成工具的一些辅助配置中说过，这是

00:05:00.229 --> 00:05:03.979
仍然仅在您将其作为库调用时可用，并添加到

00:05:03.979 --> 00:05:09.740
配置CLI或该房间的任何东西，但存在可能性，并且这两个

00:05:09.740 --> 00:05:13.849
内部存储器布局的不同选项基本上可以让您决定

00:05:13.849 --> 00:05:18.169
您想要在代码中获得的某种性能特征，因此，如果使用嵌入

00:05:18.169 --> 00:05:23.060
基于策略，您可以获得最快的运行时性能，因为

00:05:23.060 --> 00:05:27.319
如果您使用其他基于

00:05:27.319 --> 00:05:32.030
接口和指针更多，因此驻留内存更小

00:05:32.030 --> 00:05:38.720
消费，但是进行分配可能会有更高的成本，所以这是两个

00:05:38.720 --> 00:05:41.240
您有时会想做的一百个折衷

00:05:41.240 --> 00:05:50.240
因此，还要回顾一些关于架构如何使用的更常见的知识

00:05:50.240 --> 00:05:54.560
工作，但特别是在工会的背景下，还有两件事

00:05:54.560 --> 00:05:58.669
令人信服的是，您具有联合的级别语义的类型，那么您就有了

00:05:58.669 --> 00:06:07.250
关键表示行为的并集以及它们将要使用的语义类型

00:06:07.250 --> 00:06:11.840
当我询问数据模型语义时，询问它们时就像地图一样

00:06:11.840 --> 00:06:17.930
键将始终是类型名称，而值将是

00:06:17.930 --> 00:06:19.550
您正在执行关键联合表示

00:06:19.550 --> 00:06:24.550
在这种情况下，它也会像地图一样充当类型表示形式和

00:06:24.550 --> 00:06:30.530
表示形式表示形式与正字法差不多

00:06:30.530 --> 00:06:35.029
而是用户指定其他表示形式的字符串将是

00:06:35.029 --> 00:06:43.120
更加分歧好了，所以完成了工会，关于启用的真正酷的事情是

00:06:43.120 --> 00:06:50.860
goko gem现在可以生成与模式架构的ast匹配的代码

00:06:50.860 --> 00:07:00.590
所以发布到目前为止，这是一件令人兴奋的事情，到目前为止，我有一堆

00:07:00.590 --> 00:07:08.810
转到代码中的占位符类型代表类型信息和所有代码

00:07:08.810 --> 00:07:12.290
跑是基于这些，所以这只是非常非常好玩的不同

00:07:12.290 --> 00:07:15.440
在不久的将来自举的目的，我将能够接受

00:07:15.440 --> 00:07:20.780
代码运行输出并将其用于此，这将为我们带来帮助

00:07:20.780 --> 00:07:27.320
突然我们就能解析我将任意模式的文档剥离了

00:07:27.320 --> 00:07:31.910
在代码产生的内存结构中将非常容易地将其转换为

00:07:31.910 --> 00:07:35.240
gem，我将不必为此编写任何新的编解码器

00:07:35.240 --> 00:07:39.140
他们应该只是插在一起，然后我就可以关闭代码了

00:07:39.140 --> 00:07:43.880
这样就应该刮掉大量的工作，以使它

00:07:43.880 --> 00:07:50.180
一个实际的，易于重用的CLI修复工具，非常令人兴奋，它只是

00:07:50.180 --> 00:07:56.480
就像一条巨大的隧道，在其中有一点点滴滴，我确实改变了一些

00:07:56.480 --> 00:08:00.260
对于当前模式架构，联合会更简单一些，其中一些会

00:08:00.260 --> 00:08:03.890
可能将PRS转换回架构架构，其中有些过于应得

00:08:03.890 --> 00:08:06.970
在代码生成器上进行更多工作以支持详细功能

00:08:06.970 --> 00:08:15.770
但从广义上讲，它根据生成的代码行来计算输出大小

00:08:15.770 --> 00:08:23.390
很大，结果竟然超过了我未曾尝试的兆字节

00:08:23.390 --> 00:08:26.630
最小化或优化它，所以可能有很多事情要做

00:08:26.630 --> 00:08:33.169
一些可能是老师优先考虑的动作会看到

00:08:33.169 --> 00:08:37.490
生成的代码提供了很多功能，所以我不确定到底有多低

00:08:37.490 --> 00:08:41.479
这个数字一定可以，但我希望比目前的数字低

00:08:41.479 --> 00:08:49.400
基线应该有很大的移动空间，是的，所以存在不良的演示

00:08:49.400 --> 00:08:54.250
非常粗糙的镜头，但却是一个巨大的里程碑

00:08:54.580 --> 00:09:01.340
在此之后，我将放弃它，因为它不在文档中

00:09:01.340 --> 00:09:05.240
放弃它，但是就像我在想放下编码键盘一样

00:09:05.240 --> 00:09:10.490
一段时间，并认真进行文档冲刺，因为我们得到了反馈

00:09:10.490 --> 00:09:15.830
在团队内部和外部，我们都缺少一些基本知识

00:09:15.830 --> 00:09:20.360
文档和我们的可发现性是一个挑战

00:09:20.360 --> 00:09:24.440
有关如何将它们组合在一起的很多信息是

00:09:24.440 --> 00:09:29.420
仍然不容易从我们的书面文档中发现，这需要

00:09:29.420 --> 00:09:32.360
改善，所以我可能会花很多时间在那儿，而不是花在代码上

00:09:32.360 --> 00:09:44.030
在不久的将来，芬兰人会很快提出一个问题，即一兆字节的源

00:09:44.030 --> 00:09:51.200
反映在编译时间或只是早餐，我没有

00:09:51.200 --> 00:10:01.190
我不是说基准测试让我敏锐地让你像C一样等待

00:10:01.190 --> 00:10:09.100
程序模型，或者您知道我无法想象它有那么糟糕

00:10:09.100 --> 00:10:15.500
没有Lipsy这不是那么糟糕，不，我不认为编译所有这些都需要

00:10:15.500 --> 00:10:37.220
超过一秒钟还可以，所以我们做得还可以，我的评论非常好

00:10:37.220 --> 00:10:43.340
您知道我们已经在其中提供的反馈很重要，并且

00:10:43.340 --> 00:10:47.120
那么我们会做更多的事情，但是基本上可以像迭代的那样得到它，

00:10:47.120 --> 00:10:51.080
比这更重要，所以就像实际上丢下其他东西一样

00:10:51.080 --> 00:10:55.910
并使这些牙齿侵蚀，而不仅仅是像我们可能的那样停靠

00:10:55.910 --> 00:11:00.380
一直以为你以前有过，但是像真实的一样，像教程一样

00:11:00.380 --> 00:11:04.130
内容工作甚至可能是博客文章或视频，或者像我们可以做的任何事情

00:11:04.130 --> 00:11:07.620
尝试填补这之间的知识差距

00:11:07.620 --> 00:11:10.620
上层是他们需要去哪里去思考去中心化数据

00:11:10.620 --> 00:11:18.960
结构，因此在星期五进行了网站概述

00:11:18.960 --> 00:11:26.040
就像初学者一样，现在有一个文档的仓库，仓库就像你一样

00:11:26.040 --> 00:11:30.180
在其中运行View Press，然后您将最终获得一个View Press网站

00:11:30.180 --> 00:11:33.690
自动化和真实的网站，它将取代目前唯一的网站

00:11:33.690 --> 00:11:38.100
网站，因此我们将获得有关该项目以及如何进行操作的所有资源

00:11:38.100 --> 00:11:42.900
通过一条路，甚至想走一条路，就可以在一处学习各种东西

00:11:42.900 --> 00:11:46.650
我们拥有的架构文档，因为架构

00:11:46.650 --> 00:11:50.940
文档非常像以用户为中心，不是真正的规范文档

00:11:50.940 --> 00:11:54.390
不再了，规格回购你仍会知道吗

00:11:54.390 --> 00:12:00.600
拥有所有不是将它分开的东西接下来是什么

00:12:00.600 --> 00:12:10.740
Doc没事，然后在我的时间里，在管理和做事之后

00:12:10.740 --> 00:12:14.339
我需要做的其他所有事情

00:12:14.339 --> 00:12:22.250
默克尔以此来对待，所以我一直在更深入地研究ESM，

00:12:22.250 --> 00:12:28.440
围绕它的工具开始意识到BSN的世界与众不同

00:12:28.440 --> 00:12:34.010
足够，但您实际上并不想要我们一直在使用的一些东西

00:12:34.010 --> 00:12:37.260
开始发现某些工具确实非常好

00:12:37.260 --> 00:12:43.620
与喜欢维护受欢迎的编译器的人进行对话

00:12:43.620 --> 00:12:49.860
在皮卡雪地靴上，我和弗雷德谈过

00:12:49.860 --> 00:12:55.650
确实喜欢no Deus，我把所有本地东西都塞满了，并获得了工具

00:12:55.650 --> 00:13:01.160
这一点实际上很不错，我可以看到如何写

00:13:01.160 --> 00:13:05.850
不可知模块现在就像不需要编译器就可以正常工作的模块一样

00:13:05.850 --> 00:13:09.050
在浏览器中结束不，那就像是我现在可以写的真实的东西

00:13:09.050 --> 00:13:15.000
但是我无法测试它，这很重要，例如我的工作流程

00:13:15.000 --> 00:13:21.240
需要测试和覆盖，因此需要进行如何测试的工作，

00:13:21.240 --> 00:13:29.310
非常有趣，这让我意识到新的模块系统有多好

00:13:29.310 --> 00:13:32.459
如果您正在构建任何工具，则将其与旧工具进行比较

00:13:32.459 --> 00:13:37.649
围绕具有导入语法的东西创建任何类型的平台

00:13:37.649 --> 00:13:42.209
直接映射到文件，而不是复杂且可能易变的文件

00:13:42.209 --> 00:13:48.750
分辨率算法，这是一个很大的变化，它非常好，是的，我

00:13:48.750 --> 00:13:52.290
开始从事测试工作，我意识到我可能会抛出

00:13:52.290 --> 00:13:55.170
恐龙在那里，我们可以轻松地在恐龙上工作

00:13:55.170 --> 00:14:01.500
实际上，所以我与Ryan Dahl进行了交谈，并弄清了

00:14:01.500 --> 00:14:04.980
将需要去，该项目的方向是什么，以确保它是

00:14:04.980 --> 00:14:11.520
就像会对齐，然后顺利进行，是的，这看起来都很不错，这是

00:14:11.520 --> 00:14:16.110
虽然大部分时间像晚上和周末，但它看起来

00:14:16.110 --> 00:14:21.029
很好，未来的世界会比现在的世界好很多

00:14:21.029 --> 00:14:26.040
就JavaScript而言，过去的世界将会变得更加简单

00:14:26.040 --> 00:14:29.490
认为最后意识到这一点的人可能是与我在一起的人

00:14:29.490 --> 00:14:34.260
像节点人这样的背景，因为如果你是对的，只要你写节点和

00:14:34.260 --> 00:14:36.510
您不使用浏览器，您已经不使用编译器

00:14:36.510 --> 00:14:40.050
不处理这些大型工具链，但是当您必须

00:14:40.050 --> 00:14:42.600
在浏览器和您需要呈现的工具链中运行某些内容

00:14:42.600 --> 00:14:47.610
如果您只能处理SM，而您却遇到了一个与众不同的世界

00:14:47.610 --> 00:14:51.570
可以让这些像不可知模块一样处理很多我们不得不处理的废话

00:14:51.570 --> 00:14:56.310
就像从缓冲中解脱出来，就像你知道如何应对

00:14:56.310 --> 00:15:00.750
所有这些类似的依赖项，然后引入所有这些polyfills，例如

00:15:00.750 --> 00:15:03.120
可以到达的一点点哦，这实际上会很不错

00:15:03.120 --> 00:15:08.070
新系统，无论如何，让我们记住谁是下一个

00:15:08.070 --> 00:15:16.440
Chris是的，大家好，所以上周主要是在生锈的情况下工作

00:15:16.440 --> 00:15:22.500
compy产生，好消息是最新的，所以

00:15:22.500 --> 00:15:27.060
很多清理工作以及诸如此类的事情，而且实际上花费了很多时间

00:15:27.060 --> 00:15:33.540
AWS能够正常工作，其中有很多问题

00:15:33.540 --> 00:15:37.139
一种有趣的数据，因为您听说过这一点，但是有一部分

00:15:37.139 --> 00:15:45.449
锈文件硬币项目的一部分使用OpenCL，显然它很友好

00:15:45.449 --> 00:15:48.959
使用我从未听说过的称为futhark的语言

00:15:48.959 --> 00:15:54.089
据说比直接编写OpenCL更好，所以有这个

00:15:54.089 --> 00:15:59.579
名为Gen foo的编译器，它将采用这种futhark语言并生成C

00:15:59.579 --> 00:16:05.279
代码并将其链接到rust文件硬币库中，结果证明

00:16:05.279 --> 00:16:11.009
生成C代码的代码无法与此旧版Linux一起编译

00:16:11.009 --> 00:16:16.350
这是构建自定义运行时Tobias领域所需要的，因此，如果您正在执行此操作

00:16:16.350 --> 00:16:22.589
锈和lambda，您必须遵循其Linux映像，这就像我没有

00:16:22.589 --> 00:16:27.029
知道sendo s6，所以对于旧版本的编译器来说，这真的很旧。

00:16:27.029 --> 00:16:38.550
 Spencer，所以计算机太糟糕了，是的，这不是那些计算机

00:16:38.550 --> 00:16:48.959
是的，云，是的，我知道你在这方面陷入了许多错误的死胡同

00:16:48.959 --> 00:16:51.920
过程，但实际上我的意思是，好消息是，我认为有一个

00:16:51.920 --> 00:16:56.850
现在，它具有可重现的账单路径，这样很好，然后在错误修复后

00:16:56.850 --> 00:17:03.449
或迈克·迈克（Mayock）陷入困境，陷入如何进入foo时代

00:17:03.449 --> 00:17:09.650
海王星特里顿（Neptune Triton），这意味着先更新一个微笑硬币，然后更新为文件皮特

00:17:09.650 --> 00:17:14.159
生成东西，所以您可能要花几周的时间才能知道

00:17:14.159 --> 00:17:20.669
更新，将是干净的，但这是冒险，然后是年轻的好

00:17:20.669 --> 00:17:24.990
新闻已经完成，第一个Dumbo的数据端口下降了18 TB

00:17:24.990 --> 00:17:29.250
太酷了，我不必进行验证，所以实际上我现在正在研究，但是

00:17:29.250 --> 00:17:34.470
快速验证将采用原始文件的团队，并确保我可以

00:17:34.470 --> 00:17:40.940
获得100％兼容性的汽车文件提取量，所以现在不这样做

00:17:40.940 --> 00:17:45.480
你也是在一个可以的地方

00:17:45.480 --> 00:17:55.410
实际上就像给定的数据一样运行，您可以获取副本是的，所以

00:17:55.410 --> 00:18:01.770
repo有一个命令行实用程序，它将为您带来竞争，我的意思是

00:18:01.770 --> 00:18:05.940
它使用内存存储，因此您只能遵循一定的大小，否则

00:18:05.940 --> 00:18:09.900
他们只会耗尽内存，是的，然后又陷入了

00:18:09.900 --> 00:18:13.380
滥用lambda，所以您就像并行处理数千个文件一样

00:18:13.380 --> 00:18:19.590
只是在嘿，我要问的更多，就像我本来就不想做的那样

00:18:19.590 --> 00:18:22.980
确保如果您使用的是我们已经拥有的相同的产品

00:18:22.980 --> 00:18:25.770
我们现在正在测试，这是您进行所有升级的地方

00:18:25.770 --> 00:18:28.740
实际上要到达同一件事，所以我们就像一个小

00:18:28.740 --> 00:18:33.300
我们使用的文件将从以下文件中获取数据：

00:18:33.300 --> 00:18:39.960
其他人使用哪个或完全使用它们，以便我们改变您

00:18:39.960 --> 00:18:44.360
知道你不坐下来，看看我们能不能再和那只小猫很好地到达那里

00:18:44.360 --> 00:18:48.870
这有一个小型汽车文件的comp II，请确保您现在可以看到

00:18:48.870 --> 00:18:55.740
您知道，汽车档案的组装方式与您相同

00:18:55.740 --> 00:19:00.180
东西，哦，我明白了，是的，我是说，如果你能给我消息来源

00:19:00.180 --> 00:19:04.170
输出的汽车文件中的文件，然后我可以将其作为待办事项清单进行检查

00:19:04.170 --> 00:19:09.450
确保那里所有的人都在那里谢谢你，你可能会遇到一些奇怪的事情

00:19:09.450 --> 00:19:18.120
订购问题这是很难用这个工具链来生产同一辆车的

00:19:18.120 --> 00:19:22.110
两次提交文件，因为它分配将东西放入汽车的方式

00:19:22.110 --> 00:19:28.470
来自dynamo或类似服务器稳定文件的文件，但是就像您只是

00:19:28.470 --> 00:19:33.240
想要检查compy是否没有改变，那真的很容易，我们可以

00:19:33.240 --> 00:19:35.640
真的像现在这样，这家新公司就是我们可以去

00:19:35.640 --> 00:19:41.190
在桌子上找东西，然后挑选一些，然后运行它们，然后走

00:19:41.190 --> 00:19:45.300
就像哦，嘿，看起来一样，因为我们过去曾经担心过

00:19:45.300 --> 00:19:51.210
所以是的，我的理由以为您的来源或

00:19:51.210 --> 00:19:56.879
如果不是这样，墨水也很稳定，如果我愿意，就忘了我说的话

00:19:56.879 --> 00:20:01.049
看看是否也是，我的意思是，这是我不会投资于该工具的多少，但是

00:20:01.049 --> 00:20:06.330
至少可以复制一个，至少可以复制一个

00:20:06.330 --> 00:20:09.389
他们中的现在是因为现在是任意的，我想你知道

00:20:09.389 --> 00:20:14.970
是的，我们可以使它变得完美，我们可以使其更好，但是，是的，所以我们不想

00:20:14.970 --> 00:20:19.559
依靠发电机索引，这意味着我们只是可以进行分配

00:20:19.559 --> 00:20:24.359
要创建汽车文件，您只需遍历dynamo主键索引即可

00:20:24.359 --> 00:20:29.100
不能以可靠的方式进行排序，如果您不这样做的话，它是一致的

00:20:29.100 --> 00:20:32.879
更改它，但是当您更改发电机表时，订购将随之移动

00:20:32.879 --> 00:20:36.629
围绕着你，所以很难保证你会得到同样的东西

00:20:36.629 --> 00:20:41.580
如果您告诉它去并获得它们一件事的话，文件将以相同的顺序排列

00:20:41.580 --> 00:20:49.919
可能要等一秒钟，也许它实际上会工作，我想你可能

00:20:49.919 --> 00:20:56.909
在第二阶段中，您实际上将那个lambda传递给了文件列表，我认为

00:20:56.909 --> 00:21:03.359
我认为是这样做的，不是吗，是的，我认为是这样

00:21:03.359 --> 00:21:11.460
我认为这样做是为了让它在晚上mmm瘫痪，

00:21:11.460 --> 00:21:18.989
虽然锁水桶，所以那些可能不会进来，所以我不是

00:21:18.989 --> 00:21:22.980
我不是百分百确定我们能喜欢那些不一定

00:21:22.980 --> 00:21:28.230
确定性的，它必须完全是我所需要的

00:21:28.230 --> 00:21:33.960
不知道容易检查，所以不-您知道，但实际上如果您有

00:21:33.960 --> 00:21:38.999
知道，P.Russophile P挑战之一就是

00:21:38.999 --> 00:21:42.690
产生的是根本没有测试，所以很难知道

00:21:42.690 --> 00:21:47.460
那里确实在工作，所以我做了单元测试，所以我实际上可以在将来进行更改

00:21:47.460 --> 00:21:51.659
进来，我们可以确定它运行正常，但是如果您有一组文件并且

00:21:51.659 --> 00:21:56.399
Comm实际上具有用于汽车文件测试用例的数据文件

00:21:56.399 --> 00:22:01.019
或compy让我知道，我会将它们添加到我的测试套件中，这样会更好

00:22:01.019 --> 00:22:04.080
我无能为力，我将流放，我认为值得

00:22:04.080 --> 00:22:08.580
找到一种方法来确定是否可以确定性，可能需要更大一些

00:22:08.580 --> 00:22:13.110
改变，但我认为如果能做到这一点将是一件好事

00:22:13.110 --> 00:22:18.029
现在我的烟雾测试基本上是检查汽车文件的两种组合

00:22:18.029 --> 00:22:22.049
可以生产了，现在有三个输入文件，但是基本上可以生产

00:22:22.049 --> 00:22:25.340
现在一两个组合

00:22:26.710 --> 00:22:33.320
我只是对futhark东西的简要说明，我认为它可能会进入

00:22:33.320 --> 00:22:38.390
这周，我想起了好色的证明，所以我应该很快触发一下，因为

00:22:38.390 --> 00:22:42.080
本周不会发布足够的玻璃样张，我认为这是

00:22:42.080 --> 00:22:45.380
如果我从今天早些时候的一次会议中正确回忆起，它应该成为其中的一部分

00:22:45.380 --> 00:22:55.220
但是至少应该很快就会很酷，否则我想我们会通过，所以现在我们

00:22:55.220 --> 00:23:05.799
来到我们，我们来到爱琴海群岛，是的，我最喜欢的物品是

00:23:05.799 --> 00:23:13.669
所以我打开了一个关于多重哈希和身份哈希的问题，我认为这是

00:23:13.669 --> 00:23:28.520
就像那些问题之一，我刚刚打开，没有人做出任何决定，所以我只是

00:23:28.520 --> 00:23:34.580
就像我的主要观点是，我认为主要分歧至少对我而言

00:23:34.580 --> 00:23:42.169
是在我和迈克尔之间，不是，应该有一些尺寸限制，例如我是否

00:23:42.169 --> 00:23:45.230
不要不同意应该有大小限制，但不应有大小限制

00:23:45.230 --> 00:23:50.299
规格中的柠檬，这样任何人只要采取

00:23:50.299 --> 00:23:55.160
实施即使基于任何约束，但有人必须编写它

00:23:55.160 --> 00:24:01.490
人们读它的地方，我的意思是说，不，不，我很高兴接受

00:24:01.490 --> 00:24:06.140
无论当前的建议是关于大小限制的建议，还是

00:24:06.140 --> 00:24:09.740
将其作为规范推荐给我，我认为这还不错

00:24:09.740 --> 00:24:13.040
它应该像我们期望的硬限制一样

00:24:13.040 --> 00:24:22.910
实施将需要一个小时的简历，我应该知道

00:24:22.910 --> 00:24:28.309
小于等于小于等于小于等于小于等于

00:24:28.309 --> 00:24:31.820
将这些内容保持在此之下可能是个好主意，因为那是它的本质

00:24:31.820 --> 00:24:35.419
应该说，我的意思是，比起限制，我们比限制要多

00:24:35.419 --> 00:24:39.880
像没有这样的限制

00:24:39.880 --> 00:24:44.500
我们已经告诉人们将其保持在1兆字节，所以他们做到了

00:24:44.500 --> 00:24:50.230
位交换的限制为2兆瓦，但您知道大多数生态系统

00:24:50.230 --> 00:24:53.980
安全是一兆瓦否，但我认为对于这些问题，我真的认为

00:24:53.980 --> 00:25:04.120
应该放心，因为我们一直在不加现金的情况下继续混合使用

00:25:04.120 --> 00:25:12.220
与CI D的长度有关，因为您可以拥有Blake-Blake 3

00:25:12.220 --> 00:25:17.440
卡里克的东西，他们都可以输出千兆字节的数据作为哈希，这就是

00:25:17.440 --> 00:25:23.620
您可以要求，所以我想我们应该做的是说

00:25:23.620 --> 00:25:27.460
这个数字，您必须始终先了解自己的CI D的长度

00:25:27.460 --> 00:25:31.809
喜欢阅读其余内容，因为您必须查看AE语言，

00:25:31.809 --> 00:25:38.230
实现必须至少支持，我想我们需要把事实抛在脑后

00:25:38.230 --> 00:25:42.750
还需要支持64字节的CID有效负载

00:25:42.750 --> 00:25:48.669
毫米-毫米，这就是我们要保留的地方，因为否则您基本上必须

00:25:48.669 --> 00:25:56.760
说你不能使用，就像你不能使用一样，你知道四千字节抖动256

00:25:57.000 --> 00:26:01.330
是的，我的意思是说我应该保证在那里应该没事

00:26:01.330 --> 00:26:08.049
如果我们在谈论CID限制建议，请支持，请参见叶子长度X的ID

00:26:08.049 --> 00:26:11.919
专门针对身份多重哈希的限制，我认为它甚至不应该是

00:26:11.919 --> 00:26:15.549
在“应该”类别中应该只是您知道这就是我们在说的

00:26:15.549 --> 00:26:22.120
但是正确，但仅适用于工人实施的地点

00:26:22.120 --> 00:26:25.390
需要提前分配一个缓冲区，这是否

00:26:25.390 --> 00:26:32.080
这是一个哈希或身份，它只是带有有效载荷的可见广告

00:26:32.080 --> 00:26:36.970
但我想像是的，但是再一次，这就像我不喜欢你在你的说话中说的那样

00:26:36.970 --> 00:26:44.620
您仅支持的实现方式，比如说瘟疫3最高可达1k

00:26:44.620 --> 00:26:49.450
让我们完全找到它，没人会听到像是的

00:26:49.450 --> 00:26:52.780
因此，我想说的基本上是这样

00:26:52.780 --> 00:26:59.170
所以或多或少我的意思是你写了一个新的rust ma TL对不起，一个新的mod

00:26:59.170 --> 00:27:04.390
记录您是作者的任何语言，然后决定大小

00:27:04.390 --> 00:27:10.570
我要进行识别，然后我认为应该有一个答案

00:27:10.570 --> 00:27:14.830
某个地方你不会做一些随机数，因为那样的话你就不会

00:27:14.830 --> 00:27:19.630
可与其他实现互操作，所以我想任何杂凑都是

00:27:19.630 --> 00:27:24.810
会让你陷入困境，就像那样，就是那样的事实，就像我一样

00:27:24.810 --> 00:27:31.870
不知道像我想的那样当你随机做大身分多

00:27:31.870 --> 00:27:38.100
当它们散开或像它可能改变时，您真的不会感到惊讶

00:27:38.100 --> 00:27:43.660
不同的是，在这个问题上，我们基本上有一个

00:27:43.660 --> 00:27:49.270
身份与我们所说的情况相同，是的，您认为与

00:27:49.270 --> 00:27:54.490
大量的数据，我们有案例，所以我只关心案例

00:27:54.490 --> 00:28:01.390
如果我的头发比我的原始数据长，为什么我不应该套期保值呢？

00:28:01.390 --> 00:28:06.970
完全数据，我认为这是我想要多用锈蚀的用例

00:28:06.970 --> 00:28:12.130
哈希识别发酵，所以我没有用例，我把随机

00:28:12.130 --> 00:28:19.960
光盘中的数据，原因是我不认为我会更好

00:28:19.960 --> 00:28:27.070
会建议无论如何都只是对数据进行哈希处理以占用额外的空间，例如

00:28:27.070 --> 00:28:30.340
我不认为您是跨国模仿者，也看不到任何人

00:28:30.340 --> 00:28:34.750
实现应该像自动执行身份验证

00:28:34.750 --> 00:28:40.600
特定大小下的哈希值，因为像不一样，它们不是

00:28:40.600 --> 00:28:45.880
立即，但您有办法说出身份哈希，我想，但是如果您

00:28:45.880 --> 00:28:49.780
有办法说出自己的身份，她将如何通过孵化，但是你只是

00:28:49.780 --> 00:28:52.930
传递二进制文件以粘贴在那里，就像其他任何多哈希一样

00:28:52.930 --> 00:28:58.860
就像多重哈希一样，就像一堆二进制哈希一样

00:28:58.860 --> 00:29:04.450
表是最张量有限的我同意像打三张这样的例子

00:29:04.450 --> 00:29:09.060
你不喜欢，但就像他们通常喜欢潮流

00:29:09.060 --> 00:29:13.770
目前怀疑，所以即使你是的，例如你确实使用布雷克来

00:29:13.770 --> 00:29:22.290
今天不仅使用Blake削减256还是Peter提出了一些建议

00:29:22.290 --> 00:29:26.780
像几个星期前一样，但是像我们应该在跨国公司中

00:29:26.780 --> 00:29:30.480
当您具有散列函数并且您知道它永远都不应超过

00:29:30.480 --> 00:29:34.730
您应该在其中设置特定的大小限制以保护自己

00:29:34.730 --> 00:29:40.320
如果需要的话，可以像默认限制那样在其中实现

00:29:40.320 --> 00:29:45.060
在任何多重哈希中的大小，是的，我认为

00:29:45.060 --> 00:29:49.050
设定你认为合适的一切，就像我的意思是我可以和Stephens一起去

00:29:49.050 --> 00:29:54.240
问题的建议，我的意思是其他任何事情都可以

00:29:54.240 --> 00:29:56.940
你会生气的人，你会挤掉一些用例

00:29:56.940 --> 00:30:01.350
但是就像有限制可能比限制更重要

00:30:01.350 --> 00:30:04.050
排除该用例，如果限制比使用更重要

00:30:04.050 --> 00:30:08.850
大量的用例，然后接受它，但这只是决定

00:30:08.850 --> 00:30:19.080
因实施方式而异，所以我不同意不喜欢我，所以如果让我们说

00:30:19.080 --> 00:30:22.650
可以说，很明显，处于该威胁中的某人有一个

00:30:22.650 --> 00:30:25.830
实施，他们的需求与每个人的需求截然不同

00:30:25.830 --> 00:30:30.870
否则，就像他们的实现决定将这个限制做得更大一样

00:30:30.870 --> 00:30:34.620
比任何人都认为这是合理的，我对此感到满意

00:30:34.620 --> 00:30:37.440
他们可以做到那样，就像他们没有把我们带回来

00:30:37.440 --> 00:30:42.180
是的，但是如果他们愿意的话，他们甚至可以做，但是我认为他们就像是超级用户

00:30:42.180 --> 00:30:46.770
所以如果他们愿意的话，他们甚至可以因为因为如果他们愿意

00:30:46.770 --> 00:30:52.320
这样做完全可以，但是对于我来说，如果我是多重对冲的图书馆实施者，

00:30:52.320 --> 00:30:56.520
我应该做的是，一切都很好，并且可以正常运行

00:30:56.520 --> 00:31:01.830
它能与锈一起使用的情况更糟，使用JavaScript会更糟吗？

00:31:01.830 --> 00:31:06.090
到目前为止，您无法像这样完成一个完整的多缓存实现

00:31:06.090 --> 00:31:11.940
只是不能像我们只是添加了Falcone pls的东西

00:31:11.940 --> 00:31:16.910
实现，就像你要拉什么一样，有证据证明我

00:31:16.910 --> 00:31:23.770
不知道是我认为身份哈希是

00:31:23.770 --> 00:31:28.940
在我的数据比哈希值短的情况下有用

00:31:28.940 --> 00:31:34.610
认为这是一个有用的用例，如果我保留此未用例以及所有情况

00:31:34.610 --> 00:31:39.710
DOS FTP中两种不同的事物之一，例如一种在您的实现中

00:31:39.710 --> 00:31:44.120
需要提前分配一个缓冲区，另一件事是你不喜欢

00:31:44.120 --> 00:31:50.080
我没怎么抓到你，哪个问题现在正在解决哦

00:31:50.530 --> 00:32:00.430
这是没有人想解决的同一时间

00:32:00.940 --> 00:32:07.400
好一个暗示另一个，因为我在乎他们，所以我不喜欢这样

00:32:07.400 --> 00:32:16.360
我在这里做了这么多的人使用期间，我们都同意有

00:32:17.610 --> 00:32:21.720
[笑声]

00:32:21.850 --> 00:32:30.760
好的，是的，我在乎我这样的情况

00:32:30.790 --> 00:32:37.880
所以对我来说，唯一有效的情况对我来说，唯一有效的情况是多重身份

00:32:37.880 --> 00:32:42.050
散列是数据短于我要使用的散列的情况，

00:32:42.050 --> 00:32:49.700
这使得它很短，并且它也很短，我想我们应该把

00:32:49.700 --> 00:32:55.550
短限制，如果您想做一些事情，那么身份哈希上的内容是什么

00:32:55.550 --> 00:33:00.080
像放未来之类的疯狂的东西，而不仅仅是创建自己的编解码器，

00:33:00.080 --> 00:33:04.940
好的伴侣就这样做了，但您却要求像客观的技术人员一样

00:33:04.940 --> 00:33:10.520
您已经作为意见表达的标准，就像您的意见一样

00:33:10.520 --> 00:33:14.750
是多重哈希唯一有效的用例，而不是任何多重发生

00:33:14.750 --> 00:33:18.290
它比哈希函数小，所以您的意见就是

00:33:18.290 --> 00:33:23.000
允许，就像你不能拥有他们想要的东西一样奇怪，有用的是，这就是他们

00:33:23.000 --> 00:33:27.860
被介绍，因为我认为是的，如果您是您的意见，那是您的意见

00:33:27.860 --> 00:33:32.150
然后限制当前最大的哈希函数

00:33:32.150 --> 00:33:36.200
如果是，那是您的意见，并且喜欢让

00:33:36.200 --> 00:33:42.400
这种观点延伸了真实的身份电影，但这是否意味着其他所有人

00:33:43.210 --> 00:33:50.300
对此有合理保护的关系，此外，如果明天

00:33:50.300 --> 00:33:55.310
有人写了一些超级有趣的东西，占用了16 KB

00:33:55.310 --> 00:33:59.980
身份发生了，您真的想支持他们

00:34:04.190 --> 00:34:08.990
很有可能是有人在外面有人在外面

00:34:08.990 --> 00:34:12.890
观看观看YouTube直播，并与我联系，啊，我知道我在说什么

00:34:12.890 --> 00:34:22.490
要做16K的缓存，关键是如果没有

00:34:22.490 --> 00:34:27.110
他们将能够建造自己的东西，证明它实际上可能最终被

00:34:27.110 --> 00:34:31.250
有用，然后对您来说就可以支持它，因为您可以这样做

00:34:31.250 --> 00:34:35.860
某种意义上讲，那么您要做的就是在您的内部切换一点

00:34:35.860 --> 00:34:38.990
您的图书馆中的应用程序，世界不会中断

00:34:38.990 --> 00:34:45.100
而您现在建议的是，我们提供了一些

00:34:45.100 --> 00:34:49.130
无限制的好或坏原因都没关系，然后我们说

00:34:49.130 --> 00:34:52.340
像AHA这样的东西，我们说过您可以像了解

00:34:52.340 --> 00:34:55.220
永久性武器或其他方式（包括通过这种方式加密）

00:34:55.220 --> 00:35:02.030
如果我们要从你那里拿走这东西，说实话这不是一件很酷的事情

00:35:02.030 --> 00:35:07.730
就像我对讽刺创意中的身份多重哈希有保留和担忧

00:35:07.730 --> 00:35:11.090
。 。就像他们打破了概念

00:35:11.090 --> 00:35:16.640
密钥的表示形式，就像现在有一些图书馆，包括

00:35:16.640 --> 00:35:20.960
完全无效的javascript锁定api不会像无法传递那样对其进行解码

00:35:20.960 --> 00:35:23.870
将其转移到存储层，因为它不是存储密钥，并且您无法获得

00:35:23.870 --> 00:35:27.410
块以对其进行解码，因为它不带有与之关联的数据

00:35:27.410 --> 00:35:32.330
因为它只是一个密钥，例如我们不支持仅密钥的存储和密钥

00:35:32.330 --> 00:35:36.200
现在只是块，这不是一个概念，它真的会开始

00:35:36.200 --> 00:35:40.310
分解模型，就像您担心的那样，就像从字面上知道的那样

00:35:40.310 --> 00:35:44.600
身份多重哈希的这种限制又导致不兼容的情况如何？

00:35:44.600 --> 00:35:48.440
我的意思是，身份多重哈希现在已经

00:35:48.440 --> 00:35:53.960
完全破坏任何大小的东西，并且不被任何大小的人普遍支持

00:35:53.960 --> 00:36:00.590
就像好吧，随便你想要什么，所以间距是如此特别

00:36:00.590 --> 00:36:07.370
解决方案只是不执行我不是很好，我的意思是像在您

00:36:07.370 --> 00:36:11.210
跨国模仿，你一定要把它放在那里，就像在

00:36:11.210 --> 00:36:16.280
如果您有一个，如果您拥有一个可以作为CID的属性，则阻止

00:36:16.280 --> 00:36:20.600
CID CID出现在CID实例中，并且其中没有任何多哈希

00:36:20.600 --> 00:36:23.480
就像您想将其解码为真实的块数据一样

00:36:23.480 --> 00:36:26.960
遇到一个问题，当您遍历该问题时，您将遇到一个问题

00:36:26.960 --> 00:36:30.320
CID您不会遇到代表CID的问题，因此就像

00:36:30.320 --> 00:36:32.900
打破你正在谈论的事情之前，所以

00:36:32.900 --> 00:36:37.790
稍有不同，但是已经涉及了很多问题

00:36:37.790 --> 00:36:41.060
就像这不像是最重要的事情，这是值得担心的事情

00:36:41.060 --> 00:36:47.740
关于，因为如果您这样做的话，您就像已经经常在疯狂的骇客之地

00:36:48.070 --> 00:36:52.610
实际上从来不明白为什么要在商店的商店中支持他们如此困难

00:36:52.610 --> 00:36:58.550
在博客存储层上，因为我们要做的就像我们说哦，您想要一个

00:36:58.550 --> 00:37:03.620
用此键阻止，这是您的数据而无需进行任何查找，因此，因为

00:37:03.620 --> 00:37:07.790
因为块存储返回的是对您的数据的阻塞，所以它们不只是返回

00:37:07.790 --> 00:37:12.740
数据，以便您可以返回数据，但随后又如何表示

00:37:12.740 --> 00:37:16.820
这是一个块是代表性的密钥和二进制对的东西

00:37:16.820 --> 00:37:22.310
数据，所以当您只有钥匙且没有二进制文件时就拥有它

00:37:22.310 --> 00:37:26.630
只是从密钥派生而来的数据，它实际上是破坏密钥的

00:37:26.630 --> 00:37:30.980
当我去的时候我就这样代表自己

00:37:30.980 --> 00:37:34.430
块存储中的密钥，它尝试在存储中查找密钥，并且

00:37:34.430 --> 00:37:39.010
没有它，因为它实际上不是键，它也是值

00:37:39.010 --> 00:37:44.450
好的和抽象接口的男孩PFS位于每个块的顶部

00:37:44.450 --> 00:37:48.560
存储它似乎并不随便问块，所以它只是说，哦，那是什么

00:37:48.560 --> 00:37:52.040
您想要它在那里，它只是在运行中创建它，是的，它增加了内存的权重

00:37:52.040 --> 00:37:58.780
但是，对这样的产品有效的就是这就是为什么要做这项工作的原因

00:38:00.200 --> 00:38:02.990
但是但是是的，但是就像当您拥有这些库的概念层时

00:38:02.990 --> 00:38:06.349
层和生态系统，这是您担心的兼容性层

00:38:06.349 --> 00:38:10.010
关于您基本上是在要求每个块存储区也要实现此功能

00:38:10.010 --> 00:38:16.099
和您的块抽象来思考这件事，那不是

00:38:16.099 --> 00:38:21.380
不是吗，就像有些事情你不能那样做

00:38:21.380 --> 00:38:25.339
在键和值之间存在逻辑上的分离是有原因的

00:38:25.339 --> 00:38:30.710
并且不要破坏我不认为这是代表性的IRA

00:38:30.710 --> 00:38:34.940
合理地期望突变再次发作基本上是黄金的答案

00:38:34.940 --> 00:38:40.609
就像每个商店都真正理解了这一点，并且我幻像了数据

00:38:40.609 --> 00:38:44.839
是的，我想我能明白为什么你会说你不想散布这个东西

00:38:44.839 --> 00:38:51.109
在这里，是的，我的意思是说就像某些东西可以在ipfs中工作，而在ipfs中可能无法工作

00:38:51.109 --> 00:38:53.930
所有关闭您的实现实际上都是正确的，但事实并非如此

00:38:53.930 --> 00:38:57.470
意味着要么打破了这种局面，就意味着像他们实施了

00:38:57.470 --> 00:39:06.290
处理得更好，所以我们实际上可以说，我会

00:39:06.290 --> 00:39:11.780
很高兴地说，您知道在多编解码器表中，我们有一堆

00:39:11.780 --> 00:39:15.349
要成为你所需要的东西，就像你必须知道的那样

00:39:15.349 --> 00:39:21.049
实现书写和识别的功能可能不在此范围内

00:39:21.049 --> 00:39:27.020
您知道此文件的最小集是的，是的，我想我们已经拥有了

00:39:27.020 --> 00:39:34.520
其中一些在编解码器表中，但我认为值得一提

00:39:34.520 --> 00:39:41.329
我无法孵化不是专门针对C ID的问题，而不是

00:39:41.329 --> 00:39:49.430
多哈希本身就可以，没有任何多哈希就可以了

00:39:49.430 --> 00:39:54.799
由于您不只是一个地址，所以ID变得非常有问题

00:39:54.799 --> 00:40:00.020
而且您是与地址关联的编解码器，因此需要

00:40:00.020 --> 00:40:04.369
是将这个键值转化为某种东西的一种方法，而这变成了真正的

00:40:04.369 --> 00:40:14.270
复杂好吧，所以我想我想我相信身份哈希

00:40:14.270 --> 00:40:20.630
这不是一个好主意，我只会删除我们的一项补充，但我仍然

00:40:20.630 --> 00:40:24.650
想，我也很高兴没有衬衫，但我认为穿上衣服很有意义

00:40:24.650 --> 00:40:29.599
有些人喜欢一些关于某些尺寸的注释，如果有人实施并且只是想

00:40:29.599 --> 00:40:35.030
有一些数字，你可以只使用这个数字，我认为这是有道理的

00:40:35.030 --> 00:40:39.049
无论它住在哪里，我们都可以在警告旁边紧跟着该警告，

00:40:39.049 --> 00:40:45.230
说您可能根本不应该对使用RFC的一行感到满意

00:40:45.230 --> 00:40:54.680
caps-lock实施者可能想要执行大约69的限制

00:40:54.680 --> 00:41:02.599
绝对不会咬超过71口，是的，这差不多

00:41:02.599 --> 00:41:12.079
我在乎，如果您要走的那么远，并设置一个限制，

00:41:12.079 --> 00:41:16.819
这不会使它成为四个相同的栓子，只是因为它有点笨

00:41:16.819 --> 00:41:24.680
限制您的一般CIT长度，以便您可以进行一般性的场合

00:41:24.680 --> 00:41:35.540
例如，您现在不支持它的故事

00:41:35.540 --> 00:41:40.430
有点复杂，因为我们对不同的条有不同的大小，是的

00:41:40.430 --> 00:41:46.150
哦，是的，我不知道你为什么这么认为

00:41:46.270 --> 00:41:54.079
但关键是我们可以像父母一样咬不超过九口

00:41:54.079 --> 00:41:57.290
这是我们在各处定义的其他内容，所以我们要说九

00:41:57.290 --> 00:42:01.640
在这里咬9个字节，外加512位，这是您可以达到的最大值

00:42:01.640 --> 00:42:08.240
好说这是烤肉中要出现的东西

00:42:08.240 --> 00:42:14.660
像我们真正关心和坚决执行这样的实现，所以我们在

00:42:14.660 --> 00:42:18.980
所以为什么为什么要在学习中写下来，所以原因就在你的屁股上

00:42:18.980 --> 00:42:25.260
可以编写，就像您可以为所有

00:42:25.260 --> 00:42:30.960
位置围栏也很傲慢，你可以骑一个不做任何事情的围栏

00:42:30.960 --> 00:42:39.560
有时，如果有一个下限，这就是重点

00:42:39.560 --> 00:42:44.610
使这样的信息成为可能，如果您需要的话，您基本上就很奇怪

00:42:44.610 --> 00:42:48.870
在这种情况下，特殊情况下，它实际上是一个完全不同的数据结构

00:42:48.870 --> 00:42:55.890
需要简单的位置等等，这就是为什么我提出来，但是我同意

00:42:55.890 --> 00:43:00.540
与彼得实际上，是的，就像我们打过三场比赛一样，

00:43:00.540 --> 00:43:06.870
无论它有多大，我们也许应该在多重哈希上放一个May

00:43:06.870 --> 00:43:13.350
说我不知道​​像什么样的卷曲散列，就像我认为1k可能很好

00:43:13.350 --> 00:43:16.530
现在已经足够了，我也许我们可能会在十分钟之内重新审视它

00:43:16.530 --> 00:43:22.470
年，然后我们说2 KS或其他，但我通常会像快取一样闪烁

00:43:22.470 --> 00:43:27.180
通常你不需要像我想的那样，就像我从未在野外见过的那样

00:43:27.180 --> 00:43:34.500
飞艇比512爆炸更大，所以如果我们是的，就像我们很旺旺一样

00:43:34.500 --> 00:43:44.720
只是不要做出预测，我不是在谈论后量子事物

00:43:44.720 --> 00:43:51.810
当那件事发生时，你会做什么？

00:43:51.810 --> 00:44:03.300
失败失败怎么喜欢你甚至都不去尝试失败。

00:44:03.300 --> 00:44:10.290
它正好在您尝试阅读时准确地发现它，就像被任何人咬一样

00:44:10.290 --> 00:44:19.230
基本上在锈蚀中，我们就像一个多树篱对象C和E字节，所以可以

00:44:19.230 --> 00:44:23.520
您是从它的驱动器还是从其他驱动器驱动它，但是假设您得到了

00:44:23.520 --> 00:44:27.990
从购买它，所以得到一些白色的东西，把它放进去，怎么说

00:44:27.990 --> 00:44:34.670
哦，让它作为多重哈希传递，如果它太大，那就说得好

00:44:34.670 --> 00:44:39.220
太长了，这也是任何东西的摘要

00:44:39.220 --> 00:44:43.130
所以你不能退回到另一个有堆的方法

00:44:43.130 --> 00:44:46.340
分配，当它超过更好的大小时，您实际上知道我猜是的，我

00:44:46.340 --> 00:44:51.680
表示您可以，但我不会实施，因为我喜欢您

00:44:51.680 --> 00:44:56.660
理论上需要它，但谁需要它，当然当然可以

00:44:56.660 --> 00:45:02.110
确实喜欢镜头中的部分哦，我使用其他邀请是因为

00:45:02.110 --> 00:45:06.290
目前我们甚至这样做，所以目前我们甚至有一些优化告诉我

00:45:06.290 --> 00:45:10.340
这是超级阿奇，但你只能这样做，但问题是

00:45:10.340 --> 00:45:15.140
应该实施它，因为实际上没有人需要它，就像您不需要

00:45:15.140 --> 00:45:23.510
需要一个我不需要16兆字节（像三个哈希），我只是说了福克，我只是想

00:45:23.510 --> 00:45:29.030
制作开放版，我将使限制更接近实际情况

00:45:29.030 --> 00:45:33.890
人们正在做512，然后等待有人超过它，

00:45:33.890 --> 00:45:36.650
然后，当有人登录博客时，我们看到他们的用例是什么，因为

00:45:36.650 --> 00:45:39.920
喜欢我想出这种语言并想出的问题

00:45:39.920 --> 00:45:43.580
一个极限，然后加入规格，就像我们看到极限的地方

00:45:43.580 --> 00:45:48.230
实际实施和执行它比胸部小得多，就像

00:45:48.230 --> 00:45:53.450
ipfs现在对此进行了限制，以便他们可以使用see idea和subdomains等

00:45:53.450 --> 00:45:58.370
它比我们现在谈论的要小得多

00:45:58.370 --> 00:46:04.070
您需要保持这些尺寸很小，是的，我只是不应该那么

00:46:04.070 --> 00:46:09.380
然后也许像一个完全不同的想法，并像我们所做的那样做类似的事情

00:46:09.380 --> 00:46:16.670
我科迪，我们为多哈希算法的实现者添加了一个部分

00:46:16.670 --> 00:46:21.530
例如，这是一种很好的做法，或者像许多或某些

00:46:21.530 --> 00:46:27.410
冥想限制了散列的总大小

00:46:27.410 --> 00:46:32.480
实现更容易，更快或更方便，例如

00:46:32.480 --> 00:46:37.460
可能是最大的具有安全支持，这是最大限制的限制

00:46:37.460 --> 00:46:40.370
对于所有这些，感觉就像它可以练习我们称之为的任何东西，

00:46:40.370 --> 00:46:47.090
因此，与其说不建议人们应该做些什么，不如说我们应该做的只是

00:46:47.090 --> 00:46:50.420
记录不同的实现正在执行的操作

00:46:50.420 --> 00:46:54.440
实施限制，我们只是记录他们所做的事情，以及他们这样做的原因以及人们

00:46:54.440 --> 00:46:58.099
可以决定那是他们想要做的，但我仍然不认为我们

00:46:58.099 --> 00:47:02.960
在这一点上甚至应该建议，因为我有充分的理由

00:47:02.960 --> 00:47:08.420
那是什么时候，就像我的意思是

00:47:08.420 --> 00:47:12.859
理想情况下，我们要使用的文档更像是嘿，这是其他内容

00:47:12.859 --> 00:47:16.339
文件说，嘿，这是其他可能是新英格兰的农具

00:47:16.339 --> 00:47:21.260
想说的看起来像是我觉得很早，这是一个很高的标准

00:47:21.260 --> 00:47:25.880
实施字幕格式，所以我想这些东西是，如果您愿意

00:47:25.880 --> 00:47:29.720
从头开始，您没有所有的上下文，这很难

00:47:29.720 --> 00:47:34.400
真的，是的，我知道从哪里开始犯很多错误，然后扇出来

00:47:34.400 --> 00:47:39.079
哦，灰，哦，我本可以使用该限制，但您从未有过这个主意，因为

00:47:39.079 --> 00:47:43.880
美国，所以我想是的，有些人在说话好吧，所以我很好，因为它不像

00:47:43.880 --> 00:47:50.650
在规范中，但就像一些准则或您所说的那样，是的

00:47:50.650 --> 00:47:54.200
好的，根据这些数字，他们

00:47:54.200 --> 00:47:57.440
只需进行聊天，我们就可以与您聊天，说您需要支持

00:47:57.440 --> 00:48:05.500
要知道，这是一个非常有执行力的方法，无论从那里开始

00:48:05.500 --> 00:48:12.200
是的，好吧，这只是为了结束这一点，就像我也有一篇帖子一样

00:48:12.200 --> 00:48:18.259
关于这个身份哈希问题，基本上我们讨论过的是，我们不会

00:48:18.259 --> 00:48:25.180
硬限制，但说我们发布了一些其他文档，例如

00:48:25.180 --> 00:48:30.200
国家正在以这种方式进行记录，我们记录了可以记录IP fs1的情况。

00:48:30.200 --> 00:48:33.859
会有一个记录并链接到正确事物的好地方哦

00:48:33.859 --> 00:48:37.279
因为也喜欢一些类似的文件，如果对我来说，这就是为什么他们有一个限制

00:48:37.279 --> 00:48:41.599
基本上是一个子域，所以如果您有一个子域就很有意义

00:48:41.599 --> 00:48:52.759
好吧，是的，用一个较短的头好吧，是的，明天就这个问题好吧，好吧，嗯

00:48:52.759 --> 00:48:59.569
所以是的，彼得，我想就像我同意的那样，我们应该更改此BL以使其具有

00:48:59.569 --> 00:49:03.950
联盟在那个领域，但你想得到一些统一我

00:49:03.950 --> 00:49:06.650
考虑一下一些早期的东西，所以让我们想一想

00:49:06.650 --> 00:49:11.900
是的，虽然我们没时间了，所以你知道谁想跳出

00:49:11.900 --> 00:49:24.530
脊椎基本上我喜欢我会困扰你的整个概念

00:49:24.530 --> 00:49:29.870
有奇怪大小的块不要这样做，因为就像在我的特殊情况下一样

00:49:29.870 --> 00:49:37.550
我实际上拥有的是一个已经以这种方式写入的文件

00:49:37.550 --> 00:49:44.450
该组块的数量非常低，总共高达64 KB，因此

00:49:44.450 --> 00:49:48.800
可能有一个轨道可能有多个轨道，然后这三个轨道就可以

00:49:48.800 --> 00:49:55.630
有这个我不应该去字节或三个字节，你可以拥有这些片段

00:49:55.630 --> 00:50:03.740
在每个64到64 K的块之间放入，然后最终得到一个

00:50:03.740 --> 00:50:09.620
流媒体的方式，您可以最终得到原始的黄油和

00:50:09.620 --> 00:50:16.760
零压缩索引计划的压缩数据，因此我可以使用此子

00:50:16.760 --> 00:50:22.760
作为gzip的一部分作为get的一部分作为zip的一部分流

00:50:22.760 --> 00:50:29.060
返回文件，因此我需要能够代表这两个流，而不仅仅是

00:50:29.060 --> 00:50:34.430
没有做到这一点，到目前为止，我的理解是您如何灵活地做到这一点

00:50:34.430 --> 00:50:41.000
布局就像您需要在每两个左右都有一个巨大的支持盒

00:50:41.000 --> 00:50:50.690
字节，不能是哦，不，不，首先，所以每个链接都是两个

00:50:50.690 --> 00:50:55.850
字节可以是一个rob锁，所以这些都可以是链接在其中的原始块

00:50:55.850 --> 00:51:02.930
它们不必像原始链接一样有效地封装在stibor中

00:51:02.930 --> 00:51:09.620
现在如果要将每个字节内联到数据结构中，则为字节静态

00:51:09.620 --> 00:51:12.640
你只用一个联盟，这样你就可以使用

00:51:12.640 --> 00:51:20.050
Seaborg字节在每个位置，而不是指向行块的链接

00:51:20.210 --> 00:51:24.710
哦，就像实际的公民权利一样，所以它会更短，是的，然后

00:51:24.710 --> 00:51:29.380
身份，从字面上看，您会像下一件事是对的

00:51:29.380 --> 00:51:37.970
但是是的，但是我可以看看它实际上可以通过它链接吗

00:51:37.970 --> 00:51:43.700
链接其中的字节，您可以将其放在同一数组中，是的，您可以

00:51:43.700 --> 00:51:46.369
在海滨混合数组中的类型就好了

00:51:46.369 --> 00:51:51.020
您可以混合类型，只要设置值即可

00:51:51.020 --> 00:51:55.550
作为工会，所以我们需要做的是更新FBL，因为现在

00:51:55.550 --> 00:52:02.300
它说必须与金红石结构有关，但我们可以改变

00:52:02.300 --> 00:52:08.150
因此，它是一个联合，您喜欢的链接就像一种用于链接和

00:52:08.150 --> 00:52:13.460
然后是的，可能是内联字节或不行，然后我的另一件事是

00:52:13.460 --> 00:52:19.460
我们一直在谈论架构，就好像无论何时您做什么

00:52:19.460 --> 00:52:23.960
就像有一个流在本质上给我们一个模式

00:52:23.960 --> 00:52:32.050
几乎就像这里没有XML一样，您知道没有DTD或被搞砸了，

00:52:32.050 --> 00:52:37.790
就像我的用例一样，它需要以人们现在工作的方式工作

00:52:37.790 --> 00:52:41.210
就不是结构而言，而是从本质上讲，这实际上是

00:52:41.210 --> 00:52:43.760
这是一种测试权，无论您如何坚持这些东西

00:52:43.760 --> 00:52:50.720
在一起，它将为您提供流回体验，没有清晰的故事该怎么办

00:52:50.720 --> 00:52:55.760
我从FPL中学到了Web Gateway将要完成的实际工作

00:52:55.760 --> 00:52:59.750
最终明白，这似乎根本没有出现在路线图上，那是

00:52:59.750 --> 00:53:07.970
令人困惑的是，对于Web Gateway来说，这是一个SPL哦，所以您的意思是喜欢

00:53:07.970 --> 00:53:12.619
实际的文件结构完全正确，是的，是的，我不在乎，我不在乎

00:53:12.619 --> 00:53:15.770
关于文件和竖起大拇指，就像检测到它的名字一样，我只是关心上演

00:53:15.770 --> 00:53:20.990
我该如何表示这个东西，是的，所以SPL是数据流

00:53:20.990 --> 00:53:26.750
元数据是所有UNIX，而UNIX是关于元数据字节部分的元数据

00:53:26.750 --> 00:53:33.109
文件，这将是一个妖怪，而FBL应该能够代表您所使用的任何布局

00:53:33.109 --> 00:53:37.940
曾经想尖叫的二进制数据包括

00:53:37.940 --> 00:53:43.790
就像我一直想看到这个想法或最终糟糕的64 K一样，然后我

00:53:43.790 --> 00:53:48.980
有两口，我还有另一个C，不是，是的，学校，不是

00:53:48.980 --> 00:53:56.300
逃脱，所以II确实从该规范的早期版本中削减了一点

00:53:56.300 --> 00:54:02.090
在那里，我削减了它，因为当我实施时，我无法确定

00:54:02.090 --> 00:54:09.380
找出一种实际使用该功能的好方法，因为我一直在

00:54:09.380 --> 00:54:17.120
数据作为流，然后是否要决定是否内联字节

00:54:17.120 --> 00:54:23.930
或将其散列为胸罩块，您还必须构建布局

00:54:23.930 --> 00:54:28.130
同时因为那是你唯一的方式

00:54:28.130 --> 00:54:32.750
在您超过最大块数之前会知道您将有多少空间

00:54:32.750 --> 00:54:37.130
规模越大，我从事的工作越多，我在那儿像父亲一样意识到的越多

00:54:37.130 --> 00:54:41.510
并没有真正起作用，您需要做的就是遍历整个分块过程

00:54:41.510 --> 00:54:45.410
所有长度和链接，然后创建布局，因为您有办法

00:54:45.410 --> 00:54:51.260
更好的信息可以在那时进行整个布局，但是如果您有的话

00:54:51.260 --> 00:54:54.710
东西很小，但就像两口，它们遍布

00:54:54.710 --> 00:54:56.900
放置你可以将它们保存在内存中

00:54:56.900 --> 00:55:00.260
很好，您根本就不会在乎您

00:55:00.260 --> 00:55:09.830
紧紧抓住他们，这样我就可以看到它也很松弛，我提出了

00:55:09.830 --> 00:55:15.770
例如实际上您要支持的大多数压缩格式的四个视频

00:55:15.770 --> 00:55:19.100
寻找您具有的页眉或页脚，您需要先阅读才能做

00:55:19.100 --> 00:55:24.230
什么都可以，为什么您不将数据内联到数据结构中呢？

00:55:24.230 --> 00:55:29.330
是的，这就是所有这些用例，我们应该捕获FBL，

00:55:29.330 --> 00:55:34.760
我们应该去，他们可以做到这一点，很酷，我只想连接

00:55:34.760 --> 00:55:39.020
误解，你不能流块，他们可以得到的就是他们

00:55:39.020 --> 00:55:45.170
就像那是第一个增加的，因为是的，我读到的是

00:55:45.170 --> 00:55:51.430
您的两个最大块中，您总是在那里有足够的空间来

00:55:51.430 --> 00:55:56.230
弄清楚小饰品的位置，以便您可以同时蒸和喝水

00:55:56.230 --> 00:55:58.780
不，不是我不能在工作的同时开卡车

00:55:58.780 --> 00:56:06.880
我不知道的是，在构建布局树的同时

00:56:06.880 --> 00:56:11.230
因为我不知道长度，不知道如何来了大块

00:56:11.230 --> 00:56:15.700
许多树干将成为其中的一部分，所以我的分支因子是多少

00:56:15.700 --> 00:56:19.690
数据结构的根是为了平衡，叶子有多大

00:56:19.690 --> 00:56:23.859
布局我无法弄清楚，就像我不知道长度，我

00:56:23.859 --> 00:56:27.940
不知道我要去多少个行李箱

00:56:27.940 --> 00:56:33.369
像流算法来找出布局，所以我所做的就是

00:56:33.369 --> 00:56:36.970
说好的，这是我的所有链接，一次我知道我可以创建的所有块

00:56:36.970 --> 00:56:40.119
所有的中间节点通过布局，这不是一个很大的数量

00:56:40.119 --> 00:56:44.070
内存中的空间就像一堆舱口，然后甚至是一种材料

00:56:44.070 --> 00:56:51.730
实际上是3co和ipfs称之为平衡的东西，它们都可以工作

00:56:51.730 --> 00:56:57.460
流媒体时尚，您不需要先了解任何东西，我的意思是您可以

00:56:57.460 --> 00:57:09.550
做到这一点，我只是找不到一种可以高效地做到这一点的方法，就像您始终喜欢它一样

00:57:09.550 --> 00:57:15.640
是不是更像是我只想最大化信念长度，

00:57:15.640 --> 00:57:19.119
就像我想弄清楚之间的正确平衡是什么

00:57:19.119 --> 00:57:23.200
深度或中间节点过多，链接可能是什么，您可以

00:57:23.200 --> 00:57:29.170
如果您知道正确的节点数，则始终可以设计出更好的算法

00:57:29.170 --> 00:57:37.180
你知道数字哦，是的，因为那一直是

00:57:37.180 --> 00:57:42.810
链表是的，是的，你可以做的是，我做的第一个是平衡的，所以

00:57:42.810 --> 00:57:47.440
是的，很难做到基尔平衡，这就是为什么我说原因

00:57:47.440 --> 00:57:52.660
平衡就好比那不是平衡就好，是的，我的是

00:57:52.660 --> 00:57:56.250
真正平衡，因为我

00:58:02.080 --> 00:58:06.850
我将二进制数据流式传输出来，只是保留了所有链接的列表

00:58:06.850 --> 00:58:13.720
然后我只提供链接，然后吐出版面，好酷

00:58:13.720 --> 00:58:16.420
在我们正在处理的另一件事上可以做任何其他事情

00:58:16.420 --> 00:58:21.780
随着时间的流逝，这真的很好，我真的很想拖我们过去

00:58:21.780 --> 00:58:26.830
讨论原因以及与所有这些的最高层次的愿景的联系

00:58:26.830 --> 00:58:29.830
我们刚刚讨论的内容，因为我在想听这场对话

00:58:29.830 --> 00:58:33.760
作为一个与对话中的每个人都不完全同步的人，我

00:58:33.760 --> 00:58:51.040
认为他们与我们在IP OD中的工作有关，也是我们最高水平的愿景之一

00:58:51.040 --> 00:58:54.880
几年前，当我们开始研究事物并对其进行改造时，

00:58:54.880 --> 00:58:59.380
制作了我们所有新一代的库，我们注意到

00:58:59.380 --> 00:59:05.710
人们一直在ipfs和dag PB中使用所有这些东西，以及那些大图

00:59:05.710 --> 00:59:12.760
人们一直希望它显示在dag PB中的目录中

00:59:12.760 --> 00:59:18.160
但是我们想要带有任意键的大地图，而另一件事是我们

00:59:18.160 --> 00:59:24.280
想要大字节，我们称之为那些文件，而糖尿病有一个完全专门的

00:59:24.280 --> 00:59:30.520
一口气做到了这一点，当我们做

00:59:30.520 --> 00:59:36.210
IP LD我们希望使所有这些事情变得通用，并且与编解码器无关，并且

00:59:36.210 --> 00:59:42.940
我们已经扩展了角度以涵盖这两个方面，我们在大地图上添加了大

00:59:42.940 --> 00:59:48.820
列表，即使在dag PD和大范围的字节中实际上并不存在

00:59:48.820 --> 00:59:52.510
我们希望将所有这些都包含在某种连贯的策略中，

00:59:52.510 --> 00:59:59.350
可以讨论尽可能不透明的图表，这就是全部

00:59:59.350 --> 01:00:05.950
这些东西是关于我们已经尝试总结了从头开始的概念

01:00:05.950 --> 01:00:09.820
我们称其为高级日布局，有时也简称为TLS

01:00:09.820 --> 01:00:14.770
因为我们得出的结论是，分片通常需要逻辑，因此可能

01:00:14.770 --> 01:00:20.680
需要代码可能有点吓人，所以一个概念

01:00:20.680 --> 01:00:24.430
的ADL涉及某种插件结构，通过它可以提供

01:00:24.430 --> 01:00:29.349
代码，还为我们提供了一种在将来不做任何事情的情况下进行扩展的方法

01:00:29.349 --> 01:00:32.619
现在只要我们获得一些中央接口，说明性就太强了

01:00:32.619 --> 01:00:39.609
这个正确，所以我们希望映射，列表和字节的接口很大

01:00:39.609 --> 01:00:43.329
FBL的缩写，我们已经提到了数十次了，哦，不管怎么说

01:00:43.329 --> 01:00:49.630
命名完整的东西，但它代表灵活的字节布局和灵活的字节

01:00:49.630 --> 01:00:53.920
布局是Michael制定的规范的名称，属于高级状态

01:00:53.920 --> 01:01:00.700
大字节问题的布局特定方式只是我们可以做到的其中一种

01:01:00.700 --> 01:01:04.839
让他们更多，我们认为这是一件特别合理的事情，

01:01:04.839 --> 01:01:09.520
我们将尝试使其尽可能可用，但它也不像

01:01:09.520 --> 01:01:14.680
受到神的祝福，这将是我们非常想做的事情

01:01:14.680 --> 01:01:22.630
好吧，但这不是神奇的，所以当您问我们如何处理事情时

01:01:22.630 --> 01:01:28.329
我想在网关上进行渲染，因为我们应该

01:01:28.329 --> 01:01:33.579
确保我们已经在这基础上有了希望的理解，所以现在

01:01:33.579 --> 01:01:39.309
当文件在网关上呈现并且是来自dag PB和dag peepees的文件时

01:01:39.309 --> 01:01:45.250
完全专业地了解大叮咬和它所依赖的所有爵士乐

01:01:45.250 --> 01:01:50.049
在很多超级专业的东西上，这些东西在dag baby中很难编码，这是

01:01:50.049 --> 01:01:53.380
需要强调的是重要的，因为我们没有将那些超级产品中的一半

01:01:53.380 --> 01:02:00.940
在将来，当我们通过以下方式来处理大字节的概念时，

01:02:00.940 --> 01:02:06.369
高级数据布局，需要一个代码插件，希望它是

01:02:06.369 --> 01:02:10.299
通常会很小，但有一个东西有点

01:02:10.299 --> 01:02:17.140
一点胶水代码，我们已经确定，但是可能会被覆盖，所以

01:02:17.140 --> 01:02:22.240
有理由警告您，当您谈论某些公共服务时，例如

01:02:22.240 --> 01:02:28.319
网关可能会包含一个已知的管道系统的白名单

01:02:28.319 --> 01:02:31.390
那将允许您使用，因为它是

01:02:31.390 --> 01:02:35.830
运行代码，让人们在您的基础架构上运行未知代码

01:02:35.830 --> 01:02:41.800
您的预算就像不是您喜欢做的事情，这是其中一种方式

01:02:41.800 --> 01:02:46.930
灵活的字节布局可能确实很幸运，因为我们可能会知道

01:02:46.930 --> 01:02:50.500
网关基础架构上的内容是什么，我们可能会

01:02:50.500 --> 01:02:59.710
实际上使一个湖明确允许该插件正常运行，但是

01:02:59.710 --> 01:03:04.180
这个人可能会拥有如此幸福的祝福，也是其中重要的一环

01:03:04.180 --> 01:03:09.490
关于这一点的事情是，存在大量潜在的布局

01:03:09.490 --> 01:03:14.140
算法，并且有大量潜在的分块器，这些是

01:03:14.140 --> 01:03:19.660
我认为，不断扩大和支持所有人将是令人望而却步的。

01:03:19.660 --> 01:03:27.580
 fbl的目标是允许您以任何布局实现任何分块

01:03:27.580 --> 01:03:34.270
关心一个通用的数据结构，以使它的读取相同

01:03:34.270 --> 01:03:38.410
无论您决定如何布置它，还是他决定在哪里放置碎屑或什么

01:03:38.410 --> 01:03:42.250
不应依赖于此的分块器，因此我们可以将更多的分块器移入

01:03:42.250 --> 01:03:45.580
未来，我们可以在将来转移更多的布局，而无需更新

01:03:45.580 --> 01:03:49.540
地球上的每个节点都知道如何阅读该东西，而您就是

01:03:49.540 --> 01:03:53.740
网关已经知道如何阅读它，并且公平地说，这是我们拥有的

01:03:53.740 --> 01:03:57.430
今天有了甲板电视，无论您如何安排东西，都可以

01:03:57.430 --> 01:04:01.180
您如何内联这样的东西实际上已经符合了Carracticus的要求

01:04:01.180 --> 01:04:05.800
线与您之间出现，您知道NCATS和运行当然会呈现

01:04:05.800 --> 01:04:13.660
不管您如何安排，如果FBL实际上允许这样做，那么这件事都是一样的

01:04:13.660 --> 01:04:17.890
问题解决了，你知道的，我只需要弄清楚如何去

01:04:17.890 --> 01:04:23.470
可以说实际上是在网上进行FBO，因为那还不是那年，但是

01:04:23.470 --> 01:04:31.540
是的，电线上的FBO和井线之间有一点缝隙

01:04:31.540 --> 01:04:37.240
和FBL正确，因为FBO描述在拓扑上适用

01:04:37.240 --> 01:04:42.190
到数据模型树结构，您可以选择任何编解码器

01:04:42.190 --> 01:04:44.520
死去的婴儿是有可能的，因为

01:04:44.520 --> 01:04:50.490
所有的黑客都在甲板PD编解码器中，因此灵活的字节输出方式可以

01:04:50.490 --> 01:04:56.430
实际在seaboard上工作，或者我的意思是在JSON上使用它，

01:04:56.430 --> 01:04:59.609
有点有趣，因为那样您将获得base64，但您可以做到这一点

01:04:59.609 --> 01:05:03.510
绝对将接口组合在一起会很有趣，但是它们

01:05:03.510 --> 01:05:12.300
撰写是的，如果您愿意，绝对不要执行任何内联二进制文件

01:05:12.300 --> 01:05:20.640
需要像它不是一种怪异的文档

01:05:20.640 --> 01:05:24.750
可以使用多个不同的编解码器，但您不想专门使用它们

01:05:24.750 --> 01:05:40.619
因为它，你知道它会使混合树在技术上也很奇怪

01:05:40.619 --> 01:05:45.150
编解码器是最大的，因为它们很多是原始的，但不仅是

01:05:45.150 --> 01:05:51.270
例如，可能想喜欢岩石中的所有东西都是独一无二的

01:05:51.270 --> 01:05:54.690
成功使用一个目录，您可能需要创建一个通用的两个目录

01:05:54.690 --> 01:06:01.950
链接到数据的东西，实际上并没有演示中的所有东西都停滞了

01:06:01.950 --> 01:06:08.630
PB文件的路由将所有文件链接在一起，并标记了海滨

01:06:08.630 --> 01:06:14.790
好吧，但是那个婴儿的成千上万是的，所以如果你想链接一些

01:06:14.790 --> 01:06:20.460
将这些文件转换为另一种结构，您所拥有的就是这样

01:06:20.460 --> 01:06:25.170
这是一个要询问的UNIX FST，因为您实际上是在链接文件

01:06:25.170 --> 01:06:32.210
而不是二进制文件，因此在像UNIX这样的级别上必须是-我们只需要一个并集

01:06:32.420 --> 01:06:40.170
那里有一些疯狂的话题，尽管如此，因为

01:06:40.170 --> 01:06:46.140
SB 1代码的UNIX版本作为db PB hacks存在，并且它并不真正尊重

01:06:46.140 --> 01:06:51.630
有点像过渡，但是像什么日期电视并不是真正的编解码器

01:06:51.630 --> 01:06:55.470
现在我们对他们的思考方式有很多类似的应用

01:06:55.470 --> 01:07:01.279
其中的特定内容只是在谈论

01:07:01.279 --> 01:07:08.099
重新解释dag TB，以便从编解码器中吐出的内容实际上匹配

01:07:08.099 --> 01:07:14.249
新的国家/地区使用此v2模式，这样他们就不必写了吗

01:07:14.249 --> 01:07:18.119
不必维护两个实现，这是一个，这是一个

01:07:18.119 --> 01:07:22.709
斯蒂芬有想法，没有人真正跟进，但这是

01:07:22.709 --> 01:07:31.799
就像在以太啊，无论如何，我们将这个英国冠军的这一部分放在是

01:07:31.799 --> 01:07:35.719
这其中之一，这是多编解码器的事情之一，因为您将拥有一个

01:07:35.719 --> 01:07:44.670
链接到PV盒的seaboard盒是的，我想我在C中会有一个目录，

01:07:44.670 --> 01:07:52.349
唯一的大学-链接到旧p1文件的目录，是的，我想

01:07:52.349 --> 01:07:58.259
具有异质的混合结构，具有野生的泥浆

01:07:58.259 --> 01:08:12.890
UNIX FS可能是dag PB，而SV的UNIX-是一个完整的问题，是的，像我一样

01:08:12.890 --> 01:08:17.369
进入那里似乎迁移了哈希及其存储库，并查看了一些

01:08:17.369 --> 01:08:20.880
那里讨论的有关如何逐步执行此操作的问题

01:08:20.880 --> 01:08:25.889
这不是一个好主意，可能会认为自己已经被警告并在其中做出选择

01:08:25.889 --> 01:08:30.210
根据这些信息，这是我个人的看法，您知道我不是

01:08:30.210 --> 01:08:34.799
建议我们是否继续赢得胜利，就像没人会期望获得unix

01:08:34.799 --> 01:08:39.989
如果我们希望能够包含-这样的东西很棒，但是

01:08:39.989 --> 01:08:42.630
也没有人会在Boudreau上录制

01:08:42.630 --> 01:08:49.799
永远是UNIX，每个人都是我的意思，如果您需要在那里

01:08:49.799 --> 01:08:53.849
确实没有太多的数据可以挖掘其中的大部分原始数据

01:08:53.849 --> 01:08:57.690
正确的是，大多数数据是Rob数据块，就像创建一样

01:08:57.690 --> 01:09:04.170
在顶部重建结构或实际上相对容易实现，我的意思是我们

01:09:04.170 --> 01:09:07.319
需要进行更大范围的讨论，我们可能应该开始

01:09:07.319 --> 01:09:10.480
关于最佳竞争方式的话题

01:09:10.480 --> 01:09:16.270
从v2到v1，如果我们要创建一个工会，就像该工会的外观一样

01:09:16.270 --> 01:09:23.109
例如，我认为这里的倾向是依靠编解码器

01:09:23.109 --> 01:09:26.500
作为标识符，如果是这种情况，那么我们实际上没有办法

01:09:26.500 --> 01:09:31.710
表示现在在架构中，架构真的假设您是

01:09:31.710 --> 01:09:37.930
基本上与编解码器无关，因此就像缺少区域或

01:09:37.930 --> 01:09:41.470
就像我们不应该使用我们实际上应该在其中使用的东西

01:09:41.470 --> 01:09:45.370
Universe p1数据结构告诉我们是否为新数据，然后

01:09:45.370 --> 01:09:57.880
在那建立联盟，是的，对不起，福克，我们还有四个

01:09:57.880 --> 01:10:00.360
还剩分钟

01:10:03.100 --> 01:10:06.149
[音乐]

