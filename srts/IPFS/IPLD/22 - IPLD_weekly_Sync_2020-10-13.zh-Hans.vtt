WEBVTT
Kind: captions
Language: zh-Hans

00:00:13.040 --> 00:00:18.840
欢迎大家参加本周的ipld同步会议，即10月12日

00:00:18.840 --> 00:00:25.039
2020年，因为每周我们都会讨论

00:00:25.039 --> 00:00:29.920
我们在过去的一周中一直在工作，下周将继续工作，然后

00:00:29.920 --> 00:00:34.640
讨论我们可能有的任何未清项目

00:00:34.640 --> 00:00:41.520
嗯，我从我自己开始，所以嗯，所以我花了一些时间

00:00:41.520 --> 00:00:45.280
在wasm东西上不要太多，只是为了解释它

00:00:45.280 --> 00:00:47.680
因为我几乎每个星期都这么说，但是没有

00:00:47.680 --> 00:00:54.000
解释一下这是怎么回事，所以想法是

00:00:54.000 --> 00:01:02.320
只读编解码器编译为wasm um，想法是um

00:01:02.320 --> 00:01:06.320
为了能够遍历id结构，您当然需要知道

00:01:06.320 --> 00:01:08.720
编解码器，因此即使您只想例如

00:01:08.720 --> 00:01:12.080
同步您要浏览的所有内容并浏览链接的块

00:01:12.080 --> 00:01:15.200
然后转到下一个区块，依此类推，但要执行此操作，您需要

00:01:15.200 --> 00:01:18.400
了解编码，并希望会有成千上万的

00:01:18.400 --> 00:01:22.960
不同的编解码器，例如大量编解码器，但您必须了解它们

00:01:22.960 --> 00:01:27.840
这个想法是，如果您至少创建一个只读编解码器并进行编译

00:01:27.840 --> 00:01:31.439
这是不支持的实现

00:01:31.439 --> 00:01:37.200
它本来可以只使用wasm运行时

00:01:37.200 --> 00:01:41.360
并使用该实现至少能够遍历某些东西

00:01:41.360 --> 00:01:44.720
嗯，所以就好像它可以被看作是一个

00:01:44.720 --> 00:01:50.240
垫脚石，如果您想让您的遍历工作正常，但是您

00:01:50.240 --> 00:01:52.960
想要稍后在本地实施

00:01:52.960 --> 00:01:57.920
有一块垫脚石，您只用了很棒的东西

00:01:57.920 --> 00:02:00.719
喜欢复合，但希望不是真的

00:02:00.719 --> 00:02:03.840
希望在任何地方都可以在某个地点使用，您可以在自己的

00:02:03.840 --> 00:02:08.399
编程语言um，这与外观相结合

00:02:08.399 --> 00:02:12.720
进来的东西，嗯

00:02:12.720 --> 00:02:18.560
您想在wasm世界中最有前途的事情之一

00:02:18.560 --> 00:02:22.800
从宿主语言中的一种对um类型进行洗牌

00:02:22.800 --> 00:02:26.959
进入大多数运行时的是接口类型，它们

00:02:26.959 --> 00:02:30.239
始终更改规格，并且没有

00:02:30.239 --> 00:02:34.720
实施um，所以标头实施是谁

00:02:34.720 --> 00:02:37.440
更改规格什么是接口规格

00:02:37.440 --> 00:02:42.080
是的，创新的类型是，那么乡村，或者那不是

00:02:42.080 --> 00:02:46.400
很棒的东西，是生锈的东西，是肮脏的东西，所以它是一个

00:02:46.400 --> 00:02:51.599
关于如何与他人互动交流的很棒的事情

00:02:51.599 --> 00:02:54.959
宿主语言和

00:02:54.959 --> 00:03:00.879
wasm运行时本身是um，所以您可以像公开

00:03:00.879 --> 00:03:04.720
更高级别的字符串以及诸如此类的东西

00:03:04.720 --> 00:03:08.000
超级复杂，它是最近才推出的，所以有一个电源引脚可以使它

00:03:08.000 --> 00:03:12.080
更简单，也基于其他出色的功能

00:03:12.080 --> 00:03:16.800
提案，所以这真的很困难，所以

00:03:16.800 --> 00:03:18.879
就像它基于其他三个建议

00:03:18.879 --> 00:03:22.879
还没有实现，所以还有很长的路要走

00:03:22.879 --> 00:03:25.920
嗯，所以我们等不及这么久了

00:03:25.920 --> 00:03:29.920
所以这个想法是只用um yeah

00:03:29.920 --> 00:03:36.959
运输，例如当前没有买什么

00:03:36.959 --> 00:03:43.200
gem正在使用，这是用于从wasm到创建绑定的工具

00:03:43.200 --> 00:03:47.519
javascript他们只是将它与序列化交换

00:03:47.519 --> 00:03:50.480
json，如果您有明显的对象

00:03:50.480 --> 00:03:53.760
不是一个好主意，或者它很容易出错，

00:03:53.760 --> 00:03:57.519
速度很快等等，所以我们可能会使用其他东西，

00:03:57.519 --> 00:04:01.120
然后迈克尔也制作了简单的dag原型

00:04:01.120 --> 00:04:06.159
嗯，我可惜今天没有时间适当地做到这一点，但是我

00:04:06.159 --> 00:04:10.400
不想等到下周，所以eric实际上长大了

00:04:10.400 --> 00:04:14.799
当我与他交谈时，这与

00:04:14.799 --> 00:04:20.320
来自seaborn，然后我想哦，是的，它实际上非常相似，而且

00:04:20.320 --> 00:04:23.440
我提议的更改，所以我所做的就是，我想要拥有它

00:04:23.440 --> 00:04:28.000
今天完成，但我没有至少编码编码器，所以我

00:04:28.000 --> 00:04:33.280
用了迈克尔的代码，只是做简单的dag

00:04:33.280 --> 00:04:38.320
使用sieber而不是简单的dag并惊讶地使代码变得均匀

00:04:38.320 --> 00:04:40.560
较少的

00:04:40.720 --> 00:04:46.320
是的，所以我还没有编码器，但就像是一个真正的div一样

00:04:46.320 --> 00:04:49.840
五行，而不是简单，它吐出c

00:04:49.840 --> 00:04:52.960
董事会，所以我正在为此做一个证明

00:04:52.960 --> 00:04:57.520
表明您是否真的使用严格的c栏之类的概念

00:04:57.520 --> 00:05:02.400
x zebor以非常严格的方式实现，非常容易实现

00:05:02.400 --> 00:05:06.080
这与杆对他的所作所为有关

00:05:06.080 --> 00:05:12.880
使甲板上的海面变得更加严格，所以如果您有这种严格的条件，是的

00:05:12.880 --> 00:05:16.960
非常简单，尽管仍然存在差异

00:05:16.960 --> 00:05:19.520
像收藏品和东西的长度一样的海港

00:05:19.520 --> 00:05:23.199
这样根本就不存在，甚至更简单，所以您有

00:05:23.199 --> 00:05:26.240
因此您的代码更少，因为您不需要差异，因为

00:05:26.240 --> 00:05:30.080
Seaboard会做自己的平衡类型，所以它真的很像

00:05:30.080 --> 00:05:33.360
无论如何，我会完成更多的代码

00:05:33.360 --> 00:05:38.560
现在实施，不像我要完成

00:05:38.560 --> 00:05:42.080
基本上就是要看到像

00:05:42.080 --> 00:05:46.960
差异，就像是的，就像我说的那样

00:05:46.960 --> 00:05:50.320
希望我今天有，但我没有完成

00:05:50.320 --> 00:05:53.039
但是，是的，这很有趣，我们会看到

00:05:53.039 --> 00:05:57.199
可以用它作为呃进一步的讨论

00:05:57.199 --> 00:06:01.120
但我认为要做的是我可能会使用

00:06:01.120 --> 00:06:04.880
这种更严格的dex键盘是wasm的基础

00:06:04.880 --> 00:06:10.800
交换格式，但我们会看到um，我也将做的是因为我

00:06:10.800 --> 00:06:15.280
甚至今天在ipfs聊天室问到了什么

00:06:15.280 --> 00:06:18.400
处理rust marty hash和release等

00:06:18.400 --> 00:06:22.000
所以我真的想把防锈材料放出来

00:06:22.000 --> 00:06:27.360
嗯，我将为cd p2p和live ipod制作prs，只是为了确保它

00:06:27.360 --> 00:06:31.280
可行，如果可行，我会发布

00:06:31.280 --> 00:06:35.520
然后更新prs，令我惊讶的是

00:06:35.520 --> 00:06:41.600
um li p2p只是在单身时使用multihedge

00:06:41.600 --> 00:06:44.080
大约半年前的地方，现在他们使用

00:06:44.080 --> 00:06:47.280
它有多个地方，所以工作量比我想象的还要多

00:06:47.280 --> 00:06:50.720
但还是可以，它应该是直截了当的

00:06:50.720 --> 00:06:54.400
我希望这个星期能完成

00:06:54.800 --> 00:07:04.160
是的，我接下来要列出的就是丹妮尔

00:07:07.199 --> 00:07:10.639
不，你听不到他

00:07:11.520 --> 00:07:15.039
只是仔细检查哦，不，你真的很安静，你真的很安静，你越来越

00:07:15.039 --> 00:07:17.520
像是被遥远的麦克风拾起的

00:07:17.520 --> 00:07:22.800
东西好多了现在不

00:07:24.880 --> 00:07:28.479
好吧，我待会儿再走，但是对不起，哦，你去那里，你去

00:07:28.479 --> 00:07:33.120
刚出来交换是的，我什么都没做，是的，那是

00:07:33.120 --> 00:07:36.160
完美的乐趣

00:07:36.319 --> 00:07:40.240
您被黑客入侵，请退后一步，它是蓝牙

00:07:40.240 --> 00:07:43.120
您正在获取linux，这就是正在发生的事情

00:07:43.120 --> 00:07:46.800
发生在您运行时，我实际上将音量调高了一点

00:07:46.800 --> 00:07:51.280
一点，然后无论如何都回落，如果可以的话我会抱歉

00:07:51.280 --> 00:07:59.280
嗯，所以我又开始使用um手adl，我得到了这个名字

00:07:59.280 --> 00:08:01.680
注释中的错误，但我会解决此问题

00:08:01.680 --> 00:08:04.560
从本质上讲，它现在已经可以工作了，但是还有很多工作要做

00:08:04.560 --> 00:08:08.240
它基本上只支持以字节为值的基础知识，所以我将

00:08:08.240 --> 00:08:11.759
我正在修复一些我也跟eric谈过的问题

00:08:11.759 --> 00:08:15.440
我们如何稍微扩展节点api以支持删除条目

00:08:15.440 --> 00:08:18.240
因为基本节点接口实际上只是

00:08:18.240 --> 00:08:20.960
关于阅读诸如您知道按字符串查找等内容的内容

00:08:20.960 --> 00:08:26.000
明天还会有一个电话，通话时间为24小时20分钟

00:08:26.000 --> 00:08:30.319
嗯，我们一直在谈论火腿规格的一些变化

00:08:30.319 --> 00:08:33.039
虽然我认为其中之一已经合并

00:08:33.039 --> 00:08:36.880
将哈希算法从字符串更改为整数

00:08:36.880 --> 00:08:39.440
但是我们还有很多其他话题，但实际上并没有

00:08:39.440 --> 00:08:42.399
希望在通话中做到这一点，我们实际上可以

00:08:42.399 --> 00:08:48.320
文件问题并将其完成，然后我真的很想得到

00:08:48.320 --> 00:08:53.279
进行顺从性测试，这样我就可以重复使用

00:08:53.279 --> 00:08:56.480
用杆代替从javascript复制粘贴测试

00:08:56.480 --> 00:09:00.080
嗯，我只是在我们两个之间重做工作而不必开始

00:09:00.080 --> 00:09:03.600
立即但我想我可以尽快提供帮助

00:09:03.600 --> 00:09:09.839
更好的长期发展，是的，差不多了

00:09:10.720 --> 00:09:16.320
谢谢，下一个是迈克尔

00:09:19.200 --> 00:09:23.839
给我一点时间以某种方式查找丢失的文档

00:09:23.839 --> 00:09:28.720
好吧，让我继续前进，我要回到我该死的东西上

00:09:28.720 --> 00:09:33.839
我知道了，我知道了，好吧，嗯，我

00:09:33.839 --> 00:09:37.040
我完成了多格式块界面

00:09:37.040 --> 00:09:40.080
嗯，所以我们一直在谈论移动

00:09:40.080 --> 00:09:43.839
ipld块接口持续了一段时间

00:09:43.839 --> 00:09:47.120
在与gozala的很多对话中，我们意识到我们可以将其配对

00:09:47.120 --> 00:09:52.080
缩小到足够小以至于实际上可能是其中的基本类型

00:09:52.080 --> 00:09:54.880
多种格式，而不是更高层次的东西

00:09:54.880 --> 00:09:57.440
需要是一个编解码器注册表，不需要所有其他的东西

00:09:57.440 --> 00:10:01.279
嗯，所以我们把它弄下来就像一个很干净的

00:10:01.279 --> 00:10:05.519
小界面，现在我真的很喜欢um，而且真的很适合

00:10:05.519 --> 00:10:08.480
其他人来建立它的其他实现

00:10:08.480 --> 00:10:12.399
完全兼容，合规以及其他实用程序库，其中最重要的是

00:10:12.399 --> 00:10:14.880
也许ipld block接口就变成了

00:10:14.880 --> 00:10:21.040
嗯，但是在gozala的帮助下，我在um中得到了那个

00:10:21.040 --> 00:10:24.320
想吃东西，我脑子里有了这个小主意

00:10:24.320 --> 00:10:28.399
就像一个小小的关键价值商店，基本上就是糖

00:10:28.399 --> 00:10:31.200
火腿的顶端就像什么都没有，没有花哨

00:10:31.200 --> 00:10:35.040
ipod的工作不仅仅是一只手，但它只是一件有趣的事情

00:10:35.040 --> 00:10:38.079
很好地探索这个空间，看起来会像什么

00:10:38.079 --> 00:10:41.200
顶部有糖和漂亮的javascript API

00:10:41.200 --> 00:10:44.640
创建一个增强了um的小键值存储

00:10:44.640 --> 00:10:47.200
事实证明，这就像一个非常酷的小图书馆，

00:10:47.200 --> 00:10:50.079
对um非常满意，所以一个新的块接口是

00:10:50.079 --> 00:10:53.200
很好，我喜欢它，它在这种情况下非常有效

00:10:53.200 --> 00:10:56.560
就像这样，我们可能应该将其移植到

00:10:56.560 --> 00:11:00.480
其他语言，因为它没有任何新

00:11:00.480 --> 00:11:04.000
在汉普顿以外工作，所以一旦我们有了一种语言的汉普顿工作

00:11:04.000 --> 00:11:08.079
嗯，一旦我们完成了我们可以喜欢的汉普顿运动，我们就很好了

00:11:08.079 --> 00:11:11.120
你知道创建一个小数据库，然后开始思考，好吧，

00:11:11.120 --> 00:11:14.079
会冷却糖看起来像糖，还是生锈

00:11:14.079 --> 00:11:18.480
因为您知道使用链接，或者因为您知道要突变数据库

00:11:18.480 --> 00:11:21.680
像你想如何揭露那件事，你会返回什么以及类似的东西

00:11:21.680 --> 00:11:25.440
因此，有一个名为dkv的小图书馆，它是分布式键值存储

00:11:25.440 --> 00:11:29.519
它只是在ipfs上，所以您调出一个ipfs实例，然后将其传递给它

00:11:29.519 --> 00:11:32.880
您就像在ipfs上使用键值存储库um一样很好

00:11:32.880 --> 00:11:36.560
很好，嗯，是的，我现在还是

00:11:36.560 --> 00:11:39.440
弄清楚ipld块接口应该是什么

00:11:39.440 --> 00:11:42.720
如果我们需要它，肯定有一些东西

00:11:42.720 --> 00:11:46.560
曾经做过，我们不再做了，嗯，你知道那里有很多懒惰

00:11:46.560 --> 00:11:49.519
装载东西里面有一些安全的东西

00:11:49.519 --> 00:11:53.839
在那里，我们做了不变性，所以我可能会创造一些新的

00:11:53.839 --> 00:11:56.000
那里的接口我只想实际拥有这些

00:11:56.000 --> 00:12:00.079
问题，当我去做，而不是那种时，真的要与他们打交道

00:12:00.079 --> 00:12:02.800
假设我可能需要做什么

00:12:02.800 --> 00:12:06.959
我对整个dkb库都做到了而没有给我留下深刻的印象

00:12:06.959 --> 00:12:11.040
真的需要基本UM以外的任何东西，所以我

00:12:11.040 --> 00:12:14.079
我想我可能会经历并更新一些dag db和

00:12:14.079 --> 00:12:16.880
在那我可能会发现一些我确实想要的情况

00:12:16.880 --> 00:12:20.160
在基本类型的基础上，还有更多实用程序

00:12:20.160 --> 00:12:23.519
这就是ipod块库将变成的

00:12:23.519 --> 00:12:29.360
传奇故事接下来的内容是eric

00:12:32.399 --> 00:12:35.200
所以我要打破最近的趋势，只谈论doc stock stock

00:12:35.200 --> 00:12:40.480
股票，然后上周我们有一个很好的

00:12:40.480 --> 00:12:42.880
我们在此召开的电话会议上召开了一次新会议

00:12:42.880 --> 00:12:46.800
尝试同步推送其他一些文档和规范资料

00:12:46.800 --> 00:12:50.079
那可能只是一个我们要开始滚动的球

00:12:50.079 --> 00:12:54.399
慢慢地，但我希望将来更多

00:12:54.399 --> 00:12:59.120
我将在接下来的一周中尝试做的是做更多的工作

00:12:59.120 --> 00:13:02.880
枚举我们知道需要的文档

00:13:02.880 --> 00:13:05.600
因为有很多，然后弄清楚我们将如何

00:13:05.600 --> 00:13:10.000
一起跟踪可能只是从更多的github开始

00:13:10.000 --> 00:13:12.720
问题，但似乎我们可能需要一些

00:13:12.720 --> 00:13:17.839
标签机制来分解这些东西，我不知道我们会看到

00:13:18.800 --> 00:13:22.639
这周，我也正在对所有这些内容进行更全面的总结。

00:13:22.639 --> 00:13:27.760
在字符串规范领域我们已经讨论过的事情

00:13:27.760 --> 00:13:32.320
到目前为止，我们已经就字符串规范和

00:13:32.320 --> 00:13:36.959
它接触的所有可能纠缠的组件

00:13:36.959 --> 00:13:40.560
我们谈论地图定义的一切

00:13:40.560 --> 00:13:44.720
当然也要像这样的基础，即值实际出现在的叶节点中

00:13:44.720 --> 00:13:49.279
大量数据，以了解我们如何遍历事物

00:13:49.279 --> 00:13:52.480
通常，我们的界面在各种语言中的外观和感觉以及

00:13:52.480 --> 00:13:58.240
我们未来的支持范围很大，这是一个非常棘手的问题

00:13:58.240 --> 00:14:01.360
嗯，我发现我已经将勘探报告发布为

00:14:01.360 --> 00:14:04.480
我刚刚发现了一份像6月份出版的礼物，实际上

00:14:04.480 --> 00:14:07.279
的内容可以追溯到

00:14:07.279 --> 00:14:13.360
今年，这是一个非常漫长的讨论，所以希望更多

00:14:13.360 --> 00:14:16.639
文件很快就会出来，他们可以

00:14:16.639 --> 00:14:19.680
带领我们迈向解决方案，希望我们能看到

00:14:19.680 --> 00:14:22.880
嗯，那是我的一周

00:14:24.959 --> 00:14:32.480
谢谢下一个是罗恩好的，所以最后一个

00:14:32.480 --> 00:14:36.720
上周对我来说很轻松

00:14:37.519 --> 00:14:44.000
那里有一些度假的东西，但是我有什么可以的，所以我做了一个

00:14:44.000 --> 00:14:48.240
随时随地携带更多狗铅物质，这在某种程度上是

00:14:48.240 --> 00:14:52.880
在真希运动中使用

00:14:52.880 --> 00:14:57.040
我拥有dagpb时，我的想法是什么

00:14:57.040 --> 00:15:02.000
随身携带的东西，部分与...进行其他熟悉工作

00:15:02.000 --> 00:15:07.680
ipld prime只是为了确保我知道您至少试图跟上

00:15:07.680 --> 00:15:10.240
与正在发生的事情，这是

00:15:10.240 --> 00:15:14.880
您如何在ipld prime中编写编解码器是一个非常有趣的练习

00:15:14.880 --> 00:15:19.600
至少对我来说，这对我来说是有教育意义的，

00:15:19.600 --> 00:15:27.760
呃，dag pb不像um json，这些是

00:15:27.760 --> 00:15:31.680
可以支持整个数据模型的编解码器，因此可以实例化

00:15:31.680 --> 00:15:37.279
所有不同类型的节点dag pb支持特定形状，因此

00:15:37.279 --> 00:15:43.680
本质上，您必须实例化为模式驱动的节点集

00:15:43.680 --> 00:15:47.199
而在另一种方式中，您只需要接受

00:15:47.199 --> 00:15:54.320
该类型的数据，所以只需学习如何进行转换

00:15:54.320 --> 00:15:56.720
进入架构驱动的内容，然后再次返回

00:15:56.720 --> 00:16:00.800
用它来进行验证，而不是写所有的验证

00:16:00.800 --> 00:16:05.519
再次，因为它已经在架构中，它已经在架构gen代码中，

00:16:05.519 --> 00:16:08.720
所以我的第一次尝试是开始写所有

00:16:08.720 --> 00:16:11.920
这些验证规则，我在想一分钟

00:16:11.920 --> 00:16:15.519
这一切都完成了，我不想重写这些东西，这是由代码生成完成的

00:16:15.519 --> 00:16:18.079
所以我被指出了正确的方向

00:16:18.079 --> 00:16:23.600
我认为我二世在我的周末做了一些黑客活动

00:16:23.600 --> 00:16:28.079
我和迈克尔在上周向我指出的海滨装卸库

00:16:28.079 --> 00:16:32.320
ghazala很快就会他

00:16:32.320 --> 00:16:40.800
自愿用我们的新东西替换ipfs中的ipld堆栈

00:16:40.800 --> 00:16:44.880
和嗯，然后有一个机会，有一个小窗口

00:16:44.880 --> 00:16:51.440
有机会获得我们想要的尽可能多的新作品

00:16:51.440 --> 00:16:55.519
其中一件是Seaborce，我挖的越多

00:16:55.519 --> 00:16:58.959
进入我们的海事服务业，您知道的越多

00:16:58.959 --> 00:17:04.880
我将在昨天闲聊的时候分享乌姆的黑暗角落

00:17:04.880 --> 00:17:07.760
这些所有的超能力，我们的javascript海滨图书馆都拥有它

00:17:07.760 --> 00:17:12.720
真的不应该这样做

00:17:12.720 --> 00:17:15.760
ii只是在周末修改，实际上真的很接近

00:17:15.760 --> 00:17:19.439
嗯，只是能够加入我们的

00:17:19.439 --> 00:17:23.839
sibor daxybore库，所以我要做

00:17:23.839 --> 00:17:27.439
在处理过程中进行了一些清理工作

00:17:27.439 --> 00:17:32.559
um编码形式的最终咬合块

00:17:32.559 --> 00:17:36.640
嗯，但就我们关注的所有沿海地区而言，

00:17:36.640 --> 00:17:40.240
基本知识就在那里，我只需要回去

00:17:40.240 --> 00:17:43.360
处理我们曾经做过的一些严格的规定

00:17:43.360 --> 00:17:47.280
达成共识，这样实际上是个好地方

00:17:47.280 --> 00:17:53.120
很好，嗯，我真的不知道优先级是多少，但是

00:17:53.120 --> 00:17:56.320
我想象gizelle开始发痒

00:17:56.320 --> 00:18:00.240
拆开ipfs并将这些新东西放进去

00:18:00.240 --> 00:18:06.080
所以她打了电话，所以今天在核心实施小组中

00:18:06.080 --> 00:18:08.720
当时不在，但亚历克斯在那儿，亚历克斯说他想要

00:18:08.720 --> 00:18:12.640
他确实想转移到新东西，但是

00:18:12.640 --> 00:18:16.000
他想要一些帮助，我说是的，我也想做的所有事情

00:18:16.000 --> 00:18:19.120
我们都应该打个电话，所以我想我可能会谈一点

00:18:19.120 --> 00:18:21.679
有点过分，但是就像一群人一样

00:18:21.679 --> 00:18:27.600
努力，因为所有人，我自己和亚历克斯·乌姆

00:18:27.600 --> 00:18:32.080
正确，这将已经引入了新的dagpb东西，这很好，所以它将

00:18:32.080 --> 00:18:38.000
进行一些真实世界的锻炼会非常好，因为

00:18:38.000 --> 00:18:41.280
我正在去做同样的事情，发现它会很高兴

00:18:41.280 --> 00:18:44.640
现实世界中的数据迟早会出现问题

00:18:44.640 --> 00:18:49.200
因为那里有大量的愤怒案例

00:18:49.200 --> 00:18:57.600
很高兴找到恩，所以我和恩讨论了

00:18:57.600 --> 00:19:01.120
在一些go库中有一些拉取请求

00:19:01.120 --> 00:19:04.640
与我们的工作重叠，他们只是没有答案，

00:19:04.640 --> 00:19:08.960
这部分是由于go ipfs

00:19:08.960 --> 00:19:13.679
团队缩水到一两个人

00:19:13.679 --> 00:19:17.120
领导力不再像

00:19:17.120 --> 00:19:21.039
原来的领导层已经不存在了，所以这些拉动要求就像

00:19:21.039 --> 00:19:25.039
dag dag kodak成

00:19:25.039 --> 00:19:31.280
去看看ID，你知道那里有s，所以我刚刚和

00:19:31.280 --> 00:19:35.039
向人们介绍有关所有权的问题，以及我真正想要的是什么

00:19:35.039 --> 00:19:37.200
是为了让院长站出来说是的，我会

00:19:37.200 --> 00:19:40.960
只是接管这些东西，但他是你知道显然不是真的想要

00:19:40.960 --> 00:19:48.400
嗯，但我们到达的地方是他确定的五个他认为清晰的图书馆

00:19:48.400 --> 00:19:53.919
显然，ipad ld um，我真的不希望我们对此承担全部责任

00:19:53.919 --> 00:19:56.160
之所以如此，是因为我们正尝试移至新的堆栈，

00:19:56.160 --> 00:19:59.280
显然，埃里克也不想在乎他们

00:19:59.280 --> 00:20:02.559
但我也不想看到这些事情

00:20:02.559 --> 00:20:05.440
对开源贡献者而言是陈旧的，因为这没有比这更糟糕的了

00:20:05.440 --> 00:20:08.559
出现很多工作，却一无所获

00:20:08.559 --> 00:20:14.000
没有得到任何回应，所以我建议我们可以

00:20:14.000 --> 00:20:16.400
至少在一些基本的移动维护工作上

00:20:16.400 --> 00:20:20.720
对公关的回应可能是在做一些基本的事情，例如

00:20:20.720 --> 00:20:24.000
切换github动作进行某些操作，因为

00:20:24.000 --> 00:20:27.919
现在有一个拉取请求，我实际上在技术上甚至无法合并

00:20:27.919 --> 00:20:31.440
虽然我有提交访问权限，因为回购规则

00:20:31.440 --> 00:20:34.880
除非所有支票都有，否则停止合并

00:20:34.880 --> 00:20:37.280
已通过，其中之一是代码小牛检查

00:20:37.280 --> 00:20:43.520
由于某些未知原因而失败，没有像super这样的人就无法修复

00:20:43.520 --> 00:20:46.559
您只需重新运行几次，最终

00:20:46.559 --> 00:20:50.640
是的，所以我不能，因为我已经尝试过重新运行，然后我

00:20:50.640 --> 00:20:53.600
它什么也没做，然后我转到详细信息页面，说你不做

00:20:53.600 --> 00:20:57.039
可以访问此文件，所以我无法重新运行，所以我告诉了贡献者，我说可以

00:20:57.039 --> 00:21:00.640
只需刷新提交并再次推送即可再次触发它

00:21:00.640 --> 00:21:04.960
它不会触发，所以我们只被锁定在这种虚无状态

00:21:04.960 --> 00:21:07.520
我要查一下我只是在做那个

00:21:07.520 --> 00:21:14.799
现在只是将其ping到哪个回购中，它是幽灵cid um

00:21:14.799 --> 00:21:20.960
拉请求呃这个一一二是什么

00:21:20.960 --> 00:21:24.559
如果您有访问权限，那就太好了

00:21:24.640 --> 00:21:27.760
所以院长认为我们他会拥有

00:21:27.760 --> 00:21:34.240
嗯，他也许能够开始将go ipfs更新为上帝

00:21:34.240 --> 00:21:38.320
请填入第一季度的数量，我提到

00:21:38.320 --> 00:21:43.200
彼得和埃里克看了那个嗯，你知道吗

00:21:43.200 --> 00:21:47.200
一切移动之前一切进展的整体图

00:21:47.200 --> 00:21:52.559
人员和优先事项的条款，所以他让ping y'all关于

00:21:52.559 --> 00:21:59.600
um ii，他还想要更好的github action等等

00:21:59.600 --> 00:22:03.840
我也向丹尼尔发送了他的正确信息，所以

00:22:03.840 --> 00:22:07.039
我已经和丹恩把丹尼尔拉进了一些东西

00:22:07.039 --> 00:22:10.640
特别是我一直在把丹尼尔拖进去的鬼cid

00:22:10.640 --> 00:22:15.520
查看go code um，但使用go cid的um就像测试一样

00:22:15.520 --> 00:22:20.880
在1.15 um上运行，因此只需将请求拉到go cid中即可

00:22:20.880 --> 00:22:25.919
更新那只是一个小小的修复，但同时对

00:22:25.919 --> 00:22:29.760
更新测试运行，但要确保这些测试的依赖关系

00:22:29.760 --> 00:22:33.360
事情真的很有趣，所以ipld prime我使用go cid

00:22:33.360 --> 00:22:36.640
不知道将来是否有更换它们的想法

00:22:36.640 --> 00:22:40.799
我不知道这是否必要，但似乎这件事

00:22:40.799 --> 00:22:43.360
就像它会发生

00:22:43.600 --> 00:22:49.600
抱歉，是的，我什至可能有有效的草稿，嗯，这只是

00:22:49.600 --> 00:22:53.120
由于高度的

00:22:53.120 --> 00:22:57.360
依赖关系，呃不清楚这是否真的是一个

00:22:57.360 --> 00:23:00.799
流畅的主意，我们也在javascript中完成它

00:23:00.799 --> 00:23:02.640
这是超级痛苦

00:23:02.640 --> 00:23:05.360
就像我的意思是，我们换掉了一种可以传递的类型，而您不会

00:23:05.360 --> 00:23:08.880
甚至是进口，这是最糟糕的事情

00:23:08.880 --> 00:23:14.400
现在更新是的，这将是可怕的，

00:23:14.400 --> 00:23:17.840
也去吧，因为我知道我们已经进行过对话

00:23:17.840 --> 00:23:20.480
在go ipfs实施细节中，

00:23:20.480 --> 00:23:25.360
在某些内部组件中也用作地图键，例如

00:23:25.360 --> 00:23:28.480
它如何与垃圾收集进行交互，像这样的事情是

00:23:28.480 --> 00:23:32.640
其实很不错，指针质量是否也有效

00:23:32.640 --> 00:23:38.320
相关的是，它是有毛的，它是非常通风的

00:23:38.960 --> 00:23:42.480
然后，我们对那些有关dana提出的有关法典的问题有一些疑问

00:23:42.480 --> 00:23:46.080
并为其中一些编解码器提供了常量，目前已将它们拆分

00:23:46.080 --> 00:23:50.640
就像我们在go cid中有编解码器之间

00:23:50.640 --> 00:23:56.320
我认为它是多哈希的哈希常量

00:23:57.919 --> 00:24:04.960
你知道这很有道理，但是是的，有回访的余地

00:24:04.960 --> 00:24:09.039
其中一些东西，但是我只是我看不到你有办法

00:24:09.039 --> 00:24:12.400
无论如何都要适当地弃用其中的大多数东西

00:24:12.400 --> 00:24:17.360
就像现在一样，go ipld prime proto使用了go merkel dag

00:24:17.360 --> 00:24:21.760
做它的远距离硬币的原型车，你知道去默克尔达格是最远的地方之一

00:24:21.760 --> 00:24:26.559
我认为这是古老的部分，但仍然很关键

00:24:26.559 --> 00:24:30.480
从事积极工作的路径，而当我有一个新的gop dagpb内容时，

00:24:30.480 --> 00:24:35.039
可能会取代它，这是这些非常敏感的古代之一

00:24:35.039 --> 00:24:37.360
您不只是想要的结构

00:24:37.360 --> 00:24:40.480
用一些新的代码琐碎地换掉

00:24:40.480 --> 00:24:44.159
并以格式显示，并在您的海边显示这些东西

00:24:44.159 --> 00:24:47.919
每次碰到iple时，到处都是

00:24:47.919 --> 00:24:51.120
这些东西被引入来创建块

00:24:51.120 --> 00:24:54.640
它们在每个测试夹具中，例如

00:24:54.640 --> 00:24:58.880
汽车库在这些方面的倾斜汽车在所有这些方面的借贷

00:24:58.880 --> 00:25:05.279
真的很深，所以他们不会消失，但是他们需要

00:25:05.279 --> 00:25:08.880
受到照顾的方式不会使他们看起来像被遗弃的软件，

00:25:08.880 --> 00:25:13.520
所以这是我主要关心的问题，所以我认为我认为我们只是在

00:25:13.520 --> 00:25:16.799
同意ipld小组和我愿意

00:25:16.799 --> 00:25:19.919
作为主要人物，我为此举手，因为我知道eric

00:25:19.919 --> 00:25:24.720
不想，但我也希望丹尼尔也能参加，我们会担当一定的角色

00:25:24.720 --> 00:25:27.520
只是让他们看起来至少不是被遗弃的软件，所以如果人们

00:25:27.520 --> 00:25:30.640
在问题中提出拉取请求，那么至少我们会出现，并且我们已经

00:25:30.640 --> 00:25:34.640
目前正在以类似的方式对多种格式进行类似的攻击

00:25:34.640 --> 00:25:37.919
我们在多种格式方面一直很活跃，但大多数情况下

00:25:37.919 --> 00:25:43.679
确保这个东西看起来好像没有死，所以有

00:25:43.679 --> 00:25:50.640
嗯，现在我昨天我写了一个嗯，我脑子里堆满了我的脑袋，我的头脑

00:25:50.640 --> 00:25:54.480
一堆我在哪里和我在做什么，因为我觉得自己一直在出现

00:25:54.480 --> 00:25:59.760
并做这些看似随机的事情，但不是随机um

00:25:59.760 --> 00:26:03.679
实际上有一种疯狂的方式正在做着我的事情，而且一切仍然进行着

00:26:03.679 --> 00:26:08.880
回到整个测试夹具计划中，所以我很快就给你我的

00:26:08.880 --> 00:26:12.159
堆砌我的智力堆，我真的把它放在我的

00:26:12.159 --> 00:26:15.200
头这是这里有一个堆栈，我有点想解散它，但是然后

00:26:15.200 --> 00:26:18.880
我有点再下降，然后我找到其他类似的东西

00:26:18.880 --> 00:26:22.960
在于那里，好吧，所以测试治具

00:26:22.960 --> 00:26:27.440
头号项之一是汽车档案，而汽车档案不是

00:26:27.440 --> 00:26:30.640
完成这些工作绝对必要的就是

00:26:30.640 --> 00:26:34.240
汽车文件是一个非常不错的部分，因为它们允许您

00:26:34.240 --> 00:26:39.120
捆绑您的固定装置，也捆绑其他数据

00:26:39.120 --> 00:26:41.200
可能有助于您的测试运行

00:26:41.200 --> 00:26:44.960
因此，如果您有设置环境，则需要从特定状态开始

00:26:44.960 --> 00:26:48.480
您可以将它们全部放入汽车文件中，这样汽车文件就很好

00:26:48.480 --> 00:26:51.919
外壳使此东西运行，所以我只想获取汽车文件

00:26:51.919 --> 00:26:56.240
正在运行，但javascript car文件库是um

00:26:56.240 --> 00:27:02.400
被固定在这个michael最初重写的javascript堆栈上

00:27:02.400 --> 00:27:07.120
堆栈，现在已经被吹走了

00:27:07.120 --> 00:27:10.880
加上gazala和michael的新作品，所以就像有一个重写

00:27:10.880 --> 00:27:14.320
需要，但同时整个接口只是垃圾

00:27:14.320 --> 00:27:18.640
我试图使用数据存储界面

00:27:18.640 --> 00:27:21.919
所有旧的javascript东西都在使用的界面，它只是

00:27:21.919 --> 00:27:25.679
如此糟糕的身材，一切都感觉笨拙，这使内部笨拙

00:27:25.679 --> 00:27:29.200
所以在同一时间我和加沙一起工作，直到现在我仍然

00:27:29.200 --> 00:27:34.960
活动项目，这又是在我的设计通用泛型新接口的堆栈中

00:27:34.960 --> 00:27:40.880
阻止存储um并在您放置的该空间上进行某种工作

00:27:40.880 --> 00:27:43.840
障碍以及您想如何与他们互动

00:27:43.840 --> 00:27:47.600
汽车库是一个有用的第一种情况

00:27:47.600 --> 00:27:51.360
但相同类型的接口将推广到其他块存储

00:27:51.360 --> 00:27:54.799
机制，以便设法做到这一点，我们有一个很好的计划

00:27:54.799 --> 00:28:00.480
我已经在整个过程中实施了大部分测试

00:28:00.480 --> 00:28:04.000
他们像镜子一样的汽车库固定装置

00:28:04.000 --> 00:28:07.679
汽车库中发生了什么事，他们把所有这些都拉进去了

00:28:07.679 --> 00:28:10.640
编解码器只喜欢尝试不同的编解码器

00:28:10.640 --> 00:28:14.559
dag pb一直是一个突出的问题，因为dag pb尚未

00:28:14.559 --> 00:28:17.600
更新为javascript中的任何新堆栈，就像我们仍然在

00:28:17.600 --> 00:28:22.559
使用这个我们一直在使用这个古老的dag pb东西，没有人拥有

00:28:22.559 --> 00:28:25.520
想触摸，所以我决定触摸那是

00:28:25.520 --> 00:28:30.000
我怎么以dag pb结尾，这是我如何发现它是一个

00:28:30.000 --> 00:28:31.760
比我想象的大得多的兔子洞

00:28:31.760 --> 00:28:37.279
正是在开始的时候，导致了所有这些规范

00:28:37.279 --> 00:28:40.960
更改dag pb和严格性内容，然后

00:28:40.960 --> 00:28:45.120
最终一直重写到编码和解码

00:28:45.120 --> 00:28:51.679
现在我们可以使用一个新的dag pb javascript编解码器，然后

00:28:51.679 --> 00:28:54.960
当我在那的时候，我也一直在努力，因为这是其中之一

00:28:54.960 --> 00:28:59.120
它在你脑海中的东西，如果我不工作，我会失去它

00:28:59.120 --> 00:29:01.200
在这上面，这就是为什么我一直在忙着工作的原因

00:29:01.200 --> 00:29:04.720
dag pb的东西不是因为它是关键路径，而是因为

00:29:04.720 --> 00:29:07.840
我在那里，很高兴有那个

00:29:07.840 --> 00:29:13.039
做完了，现在也看dag去ipld prime proto

00:29:13.039 --> 00:29:16.240
这已迅速成为远距离投币的关键路径

00:29:16.240 --> 00:29:20.000
仍然在使用具有所有这些严格性的旧dagp东西

00:29:20.000 --> 00:29:24.480
所有这些方法都可以解决的问题

00:29:24.480 --> 00:29:30.240
您可以使用几乎无限的方式对dag pv执行相同的数据，不同的cid

00:29:30.240 --> 00:29:33.520
所以将其整理出来真是太好了

00:29:33.520 --> 00:29:37.200
所以这就是我在BB牌上的原因之一

00:29:37.200 --> 00:29:40.640
嗯，与此同时，这是你知道的，而我在那里

00:29:40.640 --> 00:29:45.200
尝试使用ipld prime Codex，这不是很关键的事情，但这是

00:29:45.200 --> 00:29:50.559
那个堆栈的一部分，而我正试图消除它

00:29:50.559 --> 00:29:56.399
嗯，另一件事是，我需要杰森为这个东西工作，

00:29:56.399 --> 00:30:00.880
我只是认为jason准备好使用um

00:30:00.880 --> 00:30:03.679
当然天真

00:30:04.159 --> 00:30:08.159
当然，现在我知道这很幼稚，因为我希望能够创作

00:30:08.159 --> 00:30:11.520
道格·杰森（Doug jason）中的这些东西，我也很想拥有

00:30:11.520 --> 00:30:15.600
这些东西的简化版本，只是dag json，就像您可以转储

00:30:15.600 --> 00:30:19.360
json放入测试文件中，然后就可以复制并粘贴了

00:30:19.360 --> 00:30:22.880
json，那真的很好，也是

00:30:22.880 --> 00:30:27.039
jason um的一种宽松形式，我当时一直在想着养狗的想法

00:30:27.039 --> 00:30:30.720
jason pretty这是一个漂亮的印刷dag jason

00:30:30.720 --> 00:30:35.360
实际上在测试中看起来不错，但它是一个可以工作的公认编解码器

00:30:35.360 --> 00:30:41.440
跨我们的不同堆栈很容易实现

00:30:41.440 --> 00:30:46.399
从理论上说，无论如何，事实证明并非如此

00:30:46.399 --> 00:30:49.200
这一点都不简单，所以这是编解码器中的另一个原因

00:30:49.200 --> 00:30:54.000
走的一层，所以我学到的就是走

00:30:54.000 --> 00:30:59.840
go jason尚不支持字节，这对于这种东西很关键

00:30:59.840 --> 00:31:02.320
eric实际上确实开始就此开展工作

00:31:02.320 --> 00:31:06.559
引起了一些规格问题，这两个大期望

00:31:06.559 --> 00:31:09.600
我今天想解决的问题之一

00:31:09.600 --> 00:31:13.200
是关于这个令牌化的事情

00:31:13.200 --> 00:31:17.679
您必须深入了解地图才能确定您是否

00:31:17.679 --> 00:31:21.440
处理字节，当您发现自己没有在处理

00:31:21.440 --> 00:31:24.399
用它，因为您有一些无关紧要的财产，或者没有

00:31:24.399 --> 00:31:28.080
是的，您是否必须重用所有这些令牌，或者

00:31:28.080 --> 00:31:32.000
您可以拒绝该块，因为它的格式不正确吗？

00:31:32.000 --> 00:31:36.720
在javascript中，我们只是有效地倒带和重用

00:31:36.720 --> 00:31:40.799
并说哦，这不是字节，但我将其解释为只是数据模型映射

00:31:40.799 --> 00:31:44.840
在地图中，它变得更加复杂，因为您正在处理

00:31:44.840 --> 00:31:49.679
令牌化和eric一直在缓冲，我认为这是六个令牌

00:31:49.679 --> 00:31:52.799
这就是你在处理这六个令牌时要做什么的问题

00:31:52.799 --> 00:31:55.519
在第六个要素中发现它不是

00:31:55.519 --> 00:31:58.240
对，你必须然后放松然后

00:31:58.240 --> 00:32:03.360
正确地重用它们，或者你会说那不是垃圾

00:32:03.360 --> 00:32:06.799
拒绝，这是一个有趣的问题，需要解决，我不是真的想要

00:32:06.799 --> 00:32:08.640
今天解决这个问题，因为它很复杂

00:32:08.640 --> 00:32:13.390
嗯，我想解决的另一个问题是

00:32:13.390 --> 00:32:18.159
[音乐] multi-base和base64，所以eric的

00:32:18.159 --> 00:32:21.279
最初的实现只是做base64编码

00:32:21.279 --> 00:32:25.919
javascript实现使用具有多库前缀的base64

00:32:25.919 --> 00:32:29.440
我们一直在对规范仓库进行的讨论是

00:32:29.440 --> 00:32:32.559
为什么我们在那里有一个多碱基前缀

00:32:32.559 --> 00:32:37.600
嗯，我想提出的是，我们没有一个我们会做的多碱基前缀

00:32:37.600 --> 00:32:41.760
base64和沟多基地，因为没有

00:32:41.760 --> 00:32:44.240
除非我们认为我们要

00:32:44.240 --> 00:32:47.440
在其中添加不同的基础，然后将整个基础炸毁

00:32:47.440 --> 00:32:53.039
相同的数据，一旦相同的编解码器用于相同的数据，就像我们无法改变

00:32:53.039 --> 00:32:56.960
base它只是必须是base64。是的

00:32:56.960 --> 00:33:01.279
确实是在github上进行了讨论，但没有发生

00:33:01.279 --> 00:33:05.840
在其他地方，所以您应该能够找到该线程

00:33:05.840 --> 00:33:10.159
嗯，老实说，我不认为我们讨论了那么多

00:33:10.159 --> 00:33:13.519
我们花了大部分时间讨论什么是多基础

00:33:13.519 --> 00:33:17.600
应该用于cid，有点像哦，是的，我们将使用多基数64。

00:33:17.600 --> 00:33:22.080
我不记得为什么我们觉得在那里做前缀很重要

00:33:22.080 --> 00:33:25.120
但这实际上是所做的更改，是的

00:33:25.120 --> 00:33:29.120
像ii认为如果我没记错的话我做了更改，所以我赞成

00:33:29.120 --> 00:33:33.679
使用多基地，但是的，我不认为这是一个

00:33:33.679 --> 00:33:38.080
好主意了，所以我也想不起来为什么，但是

00:33:38.080 --> 00:33:41.440
我基本上我想我很好，为什么不使用

00:33:41.440 --> 00:33:45.679
它的多基础，但我认为是，我们的论点

00:33:45.679 --> 00:33:50.559
所以我认为如果您使用多库，这真的很有意义

00:33:50.559 --> 00:33:53.840
想要明显使用不同的多库

00:33:53.840 --> 00:33:57.279
但在这种情况下，我们明确不想

00:33:57.279 --> 00:34:00.480
从本质上讲，这是您不想看到其他任何东西的地步

00:34:00.480 --> 00:34:03.919
那里的多基地，所以前缀只是没有意义

00:34:03.919 --> 00:34:07.600
所以我同意只使用base64编码，

00:34:07.600 --> 00:34:10.399
没有前缀

00:34:12.159 --> 00:34:17.200
好的，我想建议我们继续进行更改，

00:34:17.200 --> 00:34:21.040
 json规范我不知道这会影响什么，因为实际上正在使用任何东西

00:34:21.040 --> 00:34:26.159
杰森（Jason）对于任何严重的事情还是我们只是将它当作玩具摆在各处

00:34:26.159 --> 00:34:30.480
是的，所以不是，您现在要找出正在使用的东西

00:34:30.480 --> 00:34:33.119
发布此

00:34:33.679 --> 00:34:36.560
绝对有一些关键依赖于此的东西，但是您

00:34:36.560 --> 00:34:39.760
直到那时才知道这是怎么回事

00:34:39.760 --> 00:34:42.800
现在可以工作了，所以它不会破坏任何东西

00:34:42.800 --> 00:34:49.599
认为它可能会破坏它可能会破坏生锈的frycoin

00:34:49.599 --> 00:34:54.480
嗯测试的东西，但我会检查与奥斯汀，以确保它像

00:34:54.480 --> 00:34:59.040
就像我很乐意提供解决此问题的公关一样，这就像不是视频一样

00:34:59.040 --> 00:35:02.560
是的是的，另一件事是另一件事

00:35:02.560 --> 00:35:05.920
不在我列表中的是go中的空白处理

00:35:05.920 --> 00:35:11.200
不需要清理，所以基本上我们只需要

00:35:11.200 --> 00:35:14.800
去这里工作，所以我的建议是我们整理好这些东西，以便

00:35:14.800 --> 00:35:17.520
多规范的事情让我们在规范仓库中做到这一点

00:35:17.520 --> 00:35:22.720
我想对令牌化做一些进一步的探索，

00:35:22.720 --> 00:35:26.320
嗯，我的建议是丹尼尔，因为你要依靠我来获得很多

00:35:26.320 --> 00:35:30.160
这些东西做完了，也许你可以转移到

00:35:30.160 --> 00:35:34.960
正在帮助我提高dag jason的规格，

00:35:34.960 --> 00:35:38.720
因为您的专业知识也在json中，所以这似乎很适合您

00:35:38.720 --> 00:35:42.800
嗯，达到规范，这样我们就可以拥有

00:35:42.800 --> 00:35:46.400
我们有一个我们知道是一对一的实现

00:35:46.400 --> 00:35:49.520
之间的语言，然后我们可以使用它作为一个原因

00:35:49.520 --> 00:35:52.000
我想用这些测试装置做的一件事就是测试我们的

00:35:52.000 --> 00:35:56.880
um的编解码器，如果我们没有像这样的编解码器，

00:35:56.880 --> 00:36:01.119
我们的编解码器同意标签pb是最接近的编解码器

00:36:01.119 --> 00:36:06.079
现在我们的语言之间存在差异，但没有其他共识，因此

00:36:06.079 --> 00:36:09.280
我们需要整理这些东西，所以这是我的建议

00:36:09.280 --> 00:36:15.440
如果您修复空白的东西，那么我认为这也最终解决

00:36:15.440 --> 00:36:18.960
您的标记化问题，因为这样您就可以对待

00:36:18.960 --> 00:36:24.480
整个前缀作为令牌权，因此如果您看到一个空位，就不是这样

00:36:24.480 --> 00:36:28.240
支架，您只需检查其其余部分是否为开放支架

00:36:28.240 --> 00:36:31.440
斜杠等等等等base64，然后那只是

00:36:31.440 --> 00:36:34.720
因为整个字节段就变成了整个字节

00:36:34.720 --> 00:36:39.280
说什么是base64的令牌是的，它不是那么简单，因为

00:36:39.280 --> 00:36:42.400
这里有一堆相互连接的零件

00:36:42.400 --> 00:36:47.680
必须达到一个高峰um，但是我的建议是

00:36:47.680 --> 00:36:49.599
丹尼尔可能会看的东西

00:36:49.599 --> 00:36:54.160
嗯，做这样的选择很复杂，因为是的，这是一个很好的选择

00:36:54.160 --> 00:36:56.960
解决方案，但我们在这里存在分层问题

00:36:56.960 --> 00:36:59.280
从中嵌入令牌的这些令牌

00:36:59.280 --> 00:37:05.200
直接退款，所以要窥视一下，您需要直接退款

00:37:05.200 --> 00:37:08.480
进入堆栈，这有点覆盖了这个

00:37:08.480 --> 00:37:11.520
层次感很复杂，所以丹尼尔可能会

00:37:11.520 --> 00:37:15.839
看看也许放松它们并不难，只需要一个

00:37:15.839 --> 00:37:18.960
一点点重构，但我知道我不认为eric真的想成为

00:37:18.960 --> 00:37:22.640
碰到这个，我觉得艾瑞克（Eric）你在愤怒中丢下了那个树枝，

00:37:22.640 --> 00:37:28.560
继续前进，不是吗，嗯，是的，有一个愤怒的分支，

00:37:28.560 --> 00:37:31.440
发现在那个也许丹尼尔可以看看

00:37:31.440 --> 00:37:33.599
这是一件令人沮丧的事情

00:37:33.599 --> 00:37:37.200
当我们喜欢但仍然不使用它时

00:37:37.200 --> 00:37:40.320
就像一天结束时一样，仍然请不要真正使用此功能

00:37:40.320 --> 00:37:43.040
用于事物，因为即使它仍然起作用

00:37:43.040 --> 00:37:48.800
真的很好，这真的很糟糕，我实际上可以看到很多

00:37:48.800 --> 00:37:52.160
我真正想要使用它的地方，就像测试一样

00:37:52.160 --> 00:37:55.920
夹具调试和打印东西到

00:37:55.920 --> 00:38:00.160
控制台，它作为一个

00:38:00.160 --> 00:38:05.280
我们现在可以查看并了解的内容字节和cids是一个问题

00:38:05.280 --> 00:38:12.240
但这至少是某种意义上的东西，反正

00:38:12.240 --> 00:38:17.040
那是我，感谢您的支持

00:38:17.280 --> 00:38:24.079
谢谢，下一个是彼得，是的，我有话要说

00:38:24.079 --> 00:38:27.440
恩，我爱你短短的一周

00:38:27.440 --> 00:38:36.880
忙着孩子们变成了你，我也知道周末工作

00:38:36.880 --> 00:38:40.960
是的，嗯，在我深入研究自己的东西之前，只是一个评论

00:38:40.960 --> 00:38:47.280
嗯，我和eric没能在ipfs中使用ltd prime取得成功的原因，这不是

00:38:47.280 --> 00:38:52.400
因为其他东西出现了，这是因为

00:38:52.400 --> 00:38:56.880
确实很难将任何东西移动到任何地方，因为您在做什么

00:38:56.880 --> 00:39:00.560
描述一切都取决于一切

00:39:00.560 --> 00:39:05.359
所有这些都是超级粗糙的，依此类推等等

00:39:05.359 --> 00:39:09.040
在那个音符上，我的工作原理，我把它剥了

00:39:09.040 --> 00:39:12.640
在这个周末，实际上是因为我在做，我没有时间

00:39:12.640 --> 00:39:17.680
就是要在真实的莲花上得到一个真实的莲花

00:39:17.680 --> 00:39:22.079
在这种情况下针对实际的sql数据库sqlite运行测试网

00:39:22.079 --> 00:39:26.480
所以我确实有一些可以保持链条同步的东西

00:39:26.480 --> 00:39:29.599
一切都正确吗，停下来开始

00:39:29.599 --> 00:39:32.720
你知道出口等等，等等，这是

00:39:32.720 --> 00:39:38.240
本质上是我给你们一个连锁店的门户

00:39:38.240 --> 00:39:44.240
因为没有其他东西可以满足我们的需求，所以前哨队是

00:39:44.240 --> 00:39:47.119
有同样的问题，希望

00:39:47.119 --> 00:39:50.240
实际上，其中一些工作对我们已经很有用

00:39:50.240 --> 00:39:55.680
适应其中的一些问题是

00:39:55.680 --> 00:39:59.200
最近的基本状态是900块

00:39:59.200 --> 00:40:05.599
变成了1700万个区块

00:40:05.599 --> 00:40:10.079
基本上大约七个小时的状态，然后我没有

00:40:10.079 --> 00:40:13.040
进口到任何地方，但这将是另一个机会

00:40:13.040 --> 00:40:16.319
比这大两个数量级，这意味着

00:40:16.319 --> 00:40:23.119
像s3数据存储区之类的东西出了，我就是不知道与s3交谈

00:40:23.119 --> 00:40:28.319
快速之间

00:40:28.319 --> 00:40:32.560
链存储区块存储区和实际badge数据存储区

00:40:32.560 --> 00:40:36.000
下方有三个大商店包装纸

00:40:36.000 --> 00:40:40.800
在四个数据存储包装器的顶部，这些包装器彼此包装在一起，具有不同的包装

00:40:40.800 --> 00:40:45.520
件，所以我基本上去了哦

00:40:45.520 --> 00:40:49.440
迈克尔，情况变得好多了，所以我过得还好

00:40:49.440 --> 00:40:53.040
我只需要一个博客商店，这就是我所需要的，而我确实需要我的博客

00:40:53.040 --> 00:40:58.800
所以实现该接口的五种方法有多难

00:40:58.800 --> 00:41:03.280
第一种方法是列出每个块

00:41:03.280 --> 00:41:07.200
没有分页没有限制没有什么，这

00:41:07.200 --> 00:41:10.800
是每次Lotus启动时都需要运行的东西

00:41:10.800 --> 00:41:14.480
不管链有多大，这就是第一

00:41:14.480 --> 00:41:18.079
嗯，这有点很难

00:41:18.079 --> 00:41:21.119
弄清楚事务和诸如此类的东西并锁定，但是您知道

00:41:21.119 --> 00:41:23.359
那仍然不能超级慢地工作，

00:41:23.359 --> 00:41:27.280
我发射后，我要像莲花一样把莲花拿起来

00:41:27.280 --> 00:41:30.000
我们嘘我们停止了，您知道扫描整个

00:41:30.000 --> 00:41:34.640
基本上最好是说7亿块

00:41:34.640 --> 00:41:38.160
是的，所以他们装载了7亿只

00:41:38.160 --> 00:41:42.400
同步阻止想法，这是一个渠道

00:41:42.400 --> 00:41:48.160
这是一个频道，不，不，不，不，这是一个频道，但是直到这个频道

00:41:48.160 --> 00:41:52.240
精疲力竭，您的api无法显示

00:41:53.359 --> 00:41:59.839
好的，所以它不会消​​耗7亿个块的内存

00:42:00.880 --> 00:42:02.960
它

00:42:13.359 --> 00:42:16.720
是的，这可能会更糟，一切都会更糟，这是事实

00:42:16.720 --> 00:42:21.119
好吧，我才刚刚开始，所以好吧，您将它们流式传输到

00:42:21.119 --> 00:42:26.079
呃，你和他们一起做东西吧，我很快就会回到这个神话

00:42:26.079 --> 00:42:30.720
嗯，那花了我差不多六个小时，就像为什么我的

00:42:30.720 --> 00:42:33.760
东西不起作用，因为它只是一个大商店，您只是知道

00:42:33.760 --> 00:42:37.119
列的关键和帐户的数据，什么也没有

00:42:37.119 --> 00:42:40.400
事实证明，如果你记得我

00:42:40.400 --> 00:42:45.040
提到有像一堆层和底层

00:42:45.040 --> 00:42:48.880
如果您还记得的话，最底层是ipfs数据存储区

00:42:48.880 --> 00:42:51.440
有回溯的话题，关于我们不是

00:42:51.440 --> 00:42:55.760
将要使用的CID，我们将使用多哈希查找的东西

00:42:55.760 --> 00:42:59.359
filecoin期望，并且在其大商店之一中找到

00:42:59.359 --> 00:43:04.240
将其作为交流电路板并以原始形式拿出的同一块

00:43:04.240 --> 00:43:10.880
反之亦然，所以如果您编写一个具有CID意识的块存储

00:43:10.880 --> 00:43:15.119
没有任何效果，您必须编写博客商店才能知道多播

00:43:15.119 --> 00:43:19.280
因为我们最近的权利使用了不同的密钥

00:43:19.280 --> 00:43:23.040
并告诉他们现在在多播比赛中

00:43:23.040 --> 00:43:26.319
那个我在谈论那个流东西的东西

00:43:26.319 --> 00:43:32.160
出来，它实际上没有普通的块存储所没有的

00:43:32.160 --> 00:43:35.760
甚至拥有此编码信息，因此您只需像拍打一样就可以输出cid

00:43:35.760 --> 00:43:40.880
不管他们是怎么来的

00:43:40.880 --> 00:43:44.960
最初进入大商店，所以此列表中的所有内容都列出了rossi的想法，但

00:43:44.960 --> 00:43:47.280
当您存储和检索时，您可能会

00:43:47.280 --> 00:43:51.520
获得sibo或您可能没有，所以中有一些评论

00:43:51.520 --> 00:43:54.800
在我也留下的链接中

00:43:54.800 --> 00:44:02.319
现在还有另一个问题

00:44:02.319 --> 00:44:12.319
嗯，第三件事是什么

00:44:12.319 --> 00:44:15.839
我已经介绍过了，呃，最后一件事是

00:44:15.839 --> 00:44:23.119
商店基本上与您交易不完全

00:44:23.119 --> 00:44:28.079
用你的话把这一切都放了，但是放的时候

00:44:28.079 --> 00:44:32.800
如果您使用真正的交易，您实际上希望肮脏的线索会起作用

00:44:32.800 --> 00:44:36.079
再次起作用，因为莲花的猎鹰部分不会

00:44:36.079 --> 00:44:39.200
看到他们刚刚在帖子中写的路径

00:44:39.200 --> 00:44:44.560
所以说的一切，是的，我们本质上有一个改变，那就是

00:44:44.560 --> 00:44:49.920
现在绝对依赖多播比较

00:44:49.920 --> 00:44:52.640
我什至不确定我们能否正确解开

00:44:52.640 --> 00:44:58.319
但这是我的勘探报告，所以为了解决该问题，

00:44:58.319 --> 00:45:03.839
每个存储接口必须基本上缓存任何获取的待处理的看跌期权

00:45:03.839 --> 00:45:07.599
直到交易完成，以便可以为那些

00:45:07.599 --> 00:45:10.880
无需实际与数据存储对话

00:45:10.880 --> 00:45:14.800
嗯，如果您使用类似sql的命令，只需打开幻像读取

00:45:14.800 --> 00:45:20.079
再次可能是我登录的其他女孩sqlite

00:45:20.079 --> 00:45:23.359
是不正确的，因为这真的很难

00:45:23.359 --> 00:45:27.839
甚至可以运行它，但是当我像你一样打开时

00:45:27.839 --> 00:45:32.400
知道幻影读过那是他之后的幸福吗

00:45:32.400 --> 00:45:37.839
好的，是的，与这个事情有关

00:45:37.839 --> 00:45:42.720
关于批处理的完成是以某种方式进行的交易

00:45:42.720 --> 00:45:47.680
他们不需要是哦，鲸似乎在badge上，看来

00:45:47.680 --> 00:45:52.000
就像他们正在尝试处理性能问题的事情一样，是的

00:45:52.000 --> 00:45:54.800
所以是的，所以badge的批次不是

00:45:54.800 --> 00:45:58.400
交易批次和badge基本上请不要看

00:45:58.400 --> 00:46:04.400
对于这100个区块，但它们已被实施为

00:46:04.400 --> 00:46:08.480
是的，我们正在尝试进行某些层的交易

00:46:08.480 --> 00:46:12.960
摆脱现在是的，就像

00:46:12.960 --> 00:46:20.240
不好，那是可惜的

00:46:20.640 --> 00:46:25.440
就像我不知道，但是一段时间以来它又是新的和有光泽的

00:46:26.720 --> 00:46:30.400
我只是我只是不喜欢它似乎不喜欢你所做的事情

00:46:30.400 --> 00:46:33.839
想要该层的数据库来做

00:46:33.839 --> 00:46:40.560
我不知道，嗯，最好的部分是，最好的部分是

00:46:40.560 --> 00:46:44.079
你知道那朵莲花仍然到处都有记忆问题，所以每当

00:46:44.079 --> 00:46:48.240
你拥有一朵莲花你杀死了尼娜badge

00:46:48.240 --> 00:46:52.960
表示您知道我们有大约20％的机会将其销毁，并且

00:46:52.960 --> 00:46:55.760
是的，我们有很多猎鹰人，例如

00:46:55.760 --> 00:46:58.960
基本上说好吧，所以你去找这个导演，你删除这个东西

00:46:58.960 --> 00:47:04.400
您再次从这里同步链条，这是正常操作

00:47:04.480 --> 00:47:09.440
这些只是我们很久以前解决的所有问题

00:47:09.440 --> 00:47:14.400
就像这些消失在leveldb中的许多库中一样

00:47:14.400 --> 00:47:17.839
和sqlite，以及在此级别上运行的所有内容

00:47:17.839 --> 00:47:21.200
就像我们在交易架构中解决这个问题一样，我不知道

00:47:21.200 --> 00:47:25.839
我们这么快就倒退了，这真的没有多大意义

00:47:25.839 --> 00:47:30.880
我，但无论如何，不​​行，迈克尔不行，行是民事的

00:47:30.880 --> 00:47:37.119
休息还可以，但是单身是可以的，所以我们正在努力解决这个问题。

00:47:37.119 --> 00:47:43.119
语言中的绑定，除非我们仍然需要正确设置它们

00:47:43.839 --> 00:47:49.920
很好，因为因为bl是仅建立在bls库上的bl的快速bls

00:47:49.920 --> 00:47:54.079
最新的Intel或AMD，您甚至无法在Macbook上构建它

00:47:54.079 --> 00:47:59.119
没有没有特殊的标志，那很好

00:47:59.359 --> 00:48:09.520
有人完成了dv级和um级，所以彼得，我想与此有关ii

00:48:09.520 --> 00:48:13.280
不知道你是否看过我包装的汽车街店界面

00:48:13.280 --> 00:48:15.920
一起把汽车直接用作

00:48:15.920 --> 00:48:18.559
只读块存储，并在其末尾添加索引

00:48:18.559 --> 00:48:21.599
我上个周末做了更多一点

00:48:21.599 --> 00:48:26.079
基于树的索引以及仅使用哑图

00:48:26.079 --> 00:48:29.200
如果我有所有sid的排序列表

00:48:29.200 --> 00:48:32.240
汽车文件中的咬合偏移量作为我使用的索引

00:48:32.240 --> 00:48:35.359
该指数实际上有点大，我没想到

00:48:35.359 --> 00:48:39.760
只是使用去基本地图

00:48:39.760 --> 00:48:44.720
映射sid到索引的类型，也许是因为它压缩了它，或者

00:48:44.720 --> 00:48:49.599
我不知道的东西，但抬头的速度似乎差不多

00:48:49.599 --> 00:48:53.680
可以说是在b3查找上快了一些，所以也许

00:48:53.680 --> 00:48:57.920
你可以做的更好，所以我的意思是

00:48:57.920 --> 00:49:00.880
ii不知道您是否希望像

00:49:00.880 --> 00:49:04.079
您更喜欢sql light作为快照

00:49:04.079 --> 00:49:08.559
嗯，感觉像使用sql light或sql将要进行多件事

00:49:08.559 --> 00:49:10.720
更加危险和破坏，

00:49:10.720 --> 00:49:15.200
嗯，所以我的用例实际上有点

00:49:15.200 --> 00:49:19.359
不同，因为我需要不断地拥有一些东西

00:49:19.359 --> 00:49:24.319
正确更新内容而不关闭任何内容，基本上这就是

00:49:24.319 --> 00:49:26.880
嗯，在这个的最终版本中，

00:49:26.880 --> 00:49:32.240
是一个postgres，它再次被奔跑，一朵莲花奔向它，然后

00:49:32.240 --> 00:49:36.720
其他事物读入该视图的次数多达

00:49:36.720 --> 00:49:39.119
他们想要，基本上我什至可以把它旋转起来

00:49:39.119 --> 00:49:44.880
像快照一样，或者它们并非完全是快照

00:49:44.880 --> 00:49:49.760
因为这家商店随着其他荷花荷花不断成长

00:49:49.760 --> 00:49:51.680
就像我的意思是你不能再跑莲花了

00:49:51.680 --> 00:49:55.040
反对吧，因为那另一只莲花会很困惑

00:49:55.040 --> 00:50:00.480
您可以在不打开电源的情况下购买这个东西

00:50:00.480 --> 00:50:03.280
我刚刚链接的网络中的实际恶魔按钮

00:50:03.280 --> 00:50:06.960
您基本上只是在创建此离线状态的地方

00:50:06.960 --> 00:50:14.319
是的，它完全违反了只读

00:50:14.319 --> 00:50:16.720
数据库ii已尝试多次

00:50:16.720 --> 00:50:23.599
好吧，这并没有像其他人尝试过的那样正确，我

00:50:23.599 --> 00:50:26.640
意思是我我已经做了很多事情

00:50:26.640 --> 00:50:29.760
这个方向实际上就像是线索，我停止通过了，所以我是我

00:50:29.760 --> 00:50:31.520
我正在研究这个，我发现有

00:50:31.520 --> 00:50:34.960
您可以拥有只读存储库的基本位置，然后

00:50:34.960 --> 00:50:38.240
真的没有在任何地方使用它，所以有人想到了，但是

00:50:38.240 --> 00:50:43.440
真的没有太多的证据可以证明这是一个可行的解决方案

00:50:43.440 --> 00:50:47.040
嗯，但是如果您能启动它并对此感到满意的话，那真是太棒了

00:50:47.040 --> 00:50:51.040
嗯，当我们

00:50:51.040 --> 00:50:54.000
考虑上周我们在哨兵上的选择

00:50:54.000 --> 00:50:57.440
我们可以像zfs或其他某种形式运行Lotus吗

00:50:57.440 --> 00:51:01.040
具有快照的文件系统，然后使用文件系统快照机制

00:51:01.040 --> 00:51:05.440
可以让您知道一致的快照并将其用作只读视图

00:51:05.440 --> 00:51:09.359
think或其他数据存储的数据，而莲花继续前进，我认为

00:51:09.359 --> 00:51:12.800
这可能是一条不太糟的道路

00:51:12.800 --> 00:51:17.040
抵抗，但这确实意味着一切都在同一个节点上

00:51:17.280 --> 00:51:21.440
嗯，嗯，在通话中其他所有人，为什么这实际上很重要

00:51:21.440 --> 00:51:28.079
莲花中还有另一件事，每当您进行api调用时，

00:51:28.079 --> 00:51:31.119
实际上是全局锁，它冻结了其他所有内容

00:51:31.119 --> 00:51:36.559
因此，如果您过多地击中了api，您将无法与链同步，因为无法

00:51:36.559 --> 00:51:40.400
赶上，这是另一件事，这是有情人正在反对

00:51:40.400 --> 00:51:45.119
我也在为弹弓比赛而反对，因为我

00:51:45.119 --> 00:51:48.240
需要一个也可以相对击中api的视图

00:51:48.240 --> 00:51:52.160
很快，但我需要喜欢以其他方式生产它，而又不会失去任何东西，因此

00:51:52.160 --> 00:51:54.480
那就是所有的东西基本上都汇合在一起了

00:51:54.480 --> 00:51:59.599
就像我要使其成为sql一样，是的，是的

00:51:59.599 --> 00:52:05.440
我们只剩下五分钟了，约翰尼有一个问题

00:52:05.440 --> 00:52:10.000
嗯，这决定了这件事

00:52:10.000 --> 00:52:14.880
映射顺序，我们用于um的出租车吧，是的，我们上周讨论过这个问题，

00:52:14.880 --> 00:52:17.599
刚刚感动到有很多人只是剪切和粘贴

00:52:17.599 --> 00:52:20.319
但实际上我正在最终确定规格并

00:52:20.319 --> 00:52:24.880
有人要求提供seabor和uh代表

00:52:24.880 --> 00:52:27.359
文档，我想确保它对齐

00:52:27.359 --> 00:52:30.480
决定因素已经订购了什么

00:52:30.480 --> 00:52:35.520
是ipld中存在的，所以问题是我们目前

00:52:35.520 --> 00:52:39.839
使用当前的顺序

00:52:39.839 --> 00:52:46.800
出租车吧规范首先建议我，我不能称呼我为

00:52:46.800 --> 00:52:50.960
首先是长度，然后是其余的，但我认为

00:52:50.960 --> 00:52:54.400
就像我们倾向于我想改变它

00:52:54.400 --> 00:52:58.880
所以我们还没有讨论过，但是我完全想做像

00:52:58.880 --> 00:53:04.319
基本上每个人都喜欢的只是记忆比较剑的顺序

00:53:04.319 --> 00:53:07.440
嗯，所以我不确定放入其中是否是个好主意

00:53:07.440 --> 00:53:11.280
我们使用的当前订单，因为喜欢我喜欢

00:53:11.280 --> 00:53:14.160
我自己想改变这一点，我不知道其他人如何看待

00:53:14.160 --> 00:53:17.920
沿海地图的键顺序很好，是规范

00:53:17.920 --> 00:53:20.880
本身在变化，就像我知道你粘贴了它一样

00:53:20.880 --> 00:53:24.240
发生了变化，但就像规范的海岸向另一侧移动一样

00:53:24.240 --> 00:53:27.599
也因为我认为我们选择的是因为它是规范的

00:53:27.599 --> 00:53:30.480
我认为规范化的一种说法就像我们所说的

00:53:30.480 --> 00:53:32.800
大约上周取决于实施者

00:53:32.800 --> 00:53:36.640
只要您在规范中指定了规范，就意味着什么

00:53:36.640 --> 00:53:40.559
然后它就如您所确定的那样规范，所以我要写回去，等等

00:53:40.559 --> 00:53:44.480
他们是要在下个星期左右将其关闭，以便实际获得

00:53:44.480 --> 00:53:46.880
候选人推荐，所以我想确保我不是

00:53:46.880 --> 00:53:50.640
用脚射击自己，这完全符合要求，所以我必须做

00:53:50.640 --> 00:53:56.559
最少的处理就可以使ipld与我刚刚写的内容一致

00:53:56.559 --> 00:53:59.520
然后我把它从复制品中拉出来，

00:53:59.520 --> 00:54:04.000
从呃749粘贴，当然是草稿

00:54:04.000 --> 00:54:06.400
他们不接受的版本是不规范的

00:54:06.400 --> 00:54:11.359
所以嗯，但是我可以指定我想要的任何东西，以确保它像

00:54:11.359 --> 00:54:14.720
如果我们正朝着不同的方向发展，那么实际上就像

00:54:14.720 --> 00:54:16.480
就像我们对此充满信心

00:54:16.480 --> 00:54:19.440
立即获得规格

00:54:21.839 --> 00:54:24.880
我现在对此没有热情

00:54:24.880 --> 00:54:28.720
最近与任何人重新讨论了这个问题，例如

00:54:28.720 --> 00:54:32.559
只是声称嗯，我会继续使用规范

00:54:32.559 --> 00:54:36.880
目前由海马规范定义的排序

00:54:36.880 --> 00:54:40.400
即使我们中几乎没有一个人包括我

00:54:40.400 --> 00:54:45.599
非常喜欢它，我会坚持使用，这就是我们最初指定的内容

00:54:45.599 --> 00:54:48.319
即将成为

00:54:48.799 --> 00:54:53.680
是的，我觉得我此时此刻仍在坚持

00:54:53.680 --> 00:54:56.799
是的，我认为这是更糟糕的事情，所以您也应该

00:54:56.799 --> 00:55:01.599
与它保持一致，我正在考虑此规范中显示的大多数属性

00:55:01.599 --> 00:55:08.400
还是提前知道的，所以我们也没有排序

00:55:08.400 --> 00:55:13.440
任何人的随机字符串键都在这里，我们现在还不是吗？

00:55:13.440 --> 00:55:18.319
我正在使用utf-8键utf

00:55:18.319 --> 00:55:22.319
 utf-8字符串作为键完全停止，在这种情况下

00:55:22.319 --> 00:55:26.400
但是有一种朝着称为sebor ld的方向发展的趋势

00:55:26.400 --> 00:55:29.680
使用外部字典的seabord链接数据

00:55:29.680 --> 00:55:33.440
以及基于字典顺序的顺序

00:55:33.440 --> 00:55:37.839
在这种情况下，您可以使用ins作为键

00:55:37.839 --> 00:55:40.079
嗯

00:55:41.040 --> 00:55:44.640
这样，那就是我在其中放置一个占位符

00:55:44.640 --> 00:55:51.359
在规范中，如何使用标签来执行此操作

00:55:51.359 --> 00:55:56.960
在海边，但就像大多数事情一样，这是一个正弦的事情，我们

00:55:56.960 --> 00:55:59.599
之前谈到的基本上是我有一个CID

00:55:59.599 --> 00:56:02.880
我身体上和那个cid是原始的cbor或

00:56:02.880 --> 00:56:07.359
或基本用uh签名的有效载荷

00:56:07.359 --> 00:56:12.720
因为有效载荷以标签42开头。所以主要是尝试获取

00:56:12.720 --> 00:56:16.960
这是候选人的推荐，我是

00:56:16.960 --> 00:56:19.280
只有一个正在工作的人，我看到更多的东西，我想我提到了

00:56:19.280 --> 00:56:23.520
吉姆·沙德（Um Jim Shid）上周去世了，他要帮我一些忙

00:56:23.520 --> 00:56:26.079
嗯，请确保他查看了它，

00:56:26.079 --> 00:56:32.480
 seabor专家，嗯，不，我认为您的工作方向正确

00:56:32.480 --> 00:56:36.319
与utf-8字符串键一起使用

00:56:36.319 --> 00:56:39.920
对我来说，这是一件好事，这对我们来说是最重要的

00:56:39.920 --> 00:56:44.000
对于我们现有的任何代码而言，自信将是最少的麻烦

00:56:44.000 --> 00:56:49.760
而且应该永远如此，我会坚持排序

00:56:49.760 --> 00:56:54.079
该原始海滨rfc指定的算法，即使它使

00:56:54.079 --> 00:56:56.240
我们很伤心，我们已经在其中致力于

00:56:56.240 --> 00:57:00.400
过去的船航行了很好，我们要和它住在一起

00:57:00.400 --> 00:57:04.160
我建议的一件事是看一下CDDL的简洁性

00:57:04.160 --> 00:57:06.960
数据字典语言您的数据定义语言

00:57:06.960 --> 00:57:11.680
我一直在使用它，我更喜欢将其作为抽象数据进行烘焙

00:57:11.680 --> 00:57:16.079
实际实现json和um之间的无损转换的模型

00:57:16.079 --> 00:57:18.960
和cbore嗯，所以我现在已经写了很多

00:57:18.960 --> 00:57:22.160
而且实际上是有道理的，我们实际上我可以将其可选地附加在前面

00:57:22.160 --> 00:57:24.000
带标签，但不使用dag键盘

00:57:24.000 --> 00:57:29.040
除了42之外的其他标签，所以我花了一些时间来学习它，

00:57:29.040 --> 00:57:32.480
实际上，它非常强大，实际上很多IATF都已满

00:57:32.480 --> 00:57:38.400
规范正在向um cddl迈进，包括你们是否记得

00:57:38.400 --> 00:57:41.599
吉姆·皮克（Jim Pick）和呃，谷歌（Google）的女人介绍了

00:57:41.599 --> 00:57:48.720
sxg嗯，签署了http有效负载，她用cdl编写了所有内容

00:57:48.720 --> 00:57:55.920
挺酷的，我们要打一个小时了

00:57:55.920 --> 00:58:00.400
标记，因此我在聊天室中发布了此斑马规格的链接，在此我们

00:58:00.400 --> 00:58:05.680
指定了石阶，是的，太棒了，是的，嗯

00:58:05.680 --> 00:58:10.880
我实际上并不知道我们这么清楚地指出那很酷

00:58:10.880 --> 00:58:17.520
嗯，是的，还有别的，但是我，我不想跑过去，但是如果

00:58:17.520 --> 00:58:23.359
有什么紧迫的事情，没有，似乎没有，那么

00:58:23.359 --> 00:58:31.839
谢谢大家，下周再见

