WEBVTT
Kind: captions
Language: zh-Hans

00:00:10.890 --> 00:00:15.440
[音乐]欢迎大家参加本周的ipld

00:00:15.440 --> 00:00:20.560
 2020年11月9日同步会议

00:00:20.560 --> 00:00:25.039
每周我们都会回顾过去一周的工作

00:00:25.039 --> 00:00:32.079
然后讨论我们可能遇到的任何未解决的问题

00:00:32.079 --> 00:00:38.079
嗯，是的，我从我自己开始，所以目前有很多

00:00:38.079 --> 00:00:41.120
东西在生锈的一面发生

00:00:41.120 --> 00:00:47.920
所以现在有一个关于rust multi-base的新版本，现在可以编译

00:00:47.920 --> 00:00:50.879
没有标准，这基本上意味着

00:00:50.879 --> 00:00:54.719
没有标准库，这主要是针对较小的库

00:00:54.719 --> 00:00:58.640
系统等等，它始终是一个更好的功能，但种类丰富

00:00:58.640 --> 00:01:05.280
使其在rust um中变得正确的过程非常复杂，现在这对于

00:01:05.280 --> 00:01:09.280
多库，已经有可能生锈

00:01:09.280 --> 00:01:14.799
pr4cid的multihash和wpr也在那里，所以像低级别一样早

00:01:14.799 --> 00:01:18.560
没有标准库的所有零件都可以工作

00:01:18.560 --> 00:01:25.360
这非常令人兴奋，然后有一个新的rastmodus版本

00:01:25.360 --> 00:01:32.720
即将到来的是基于从libp到pr的评论，

00:01:32.720 --> 00:01:37.119
普通观众可能还记得我很久以前打开过lib p2p问题

00:01:37.119 --> 00:01:41.439
并希望获得对此VR的反馈，以便我可以

00:01:41.439 --> 00:01:44.479
这些对锈和多播的更改，然后发布

00:01:44.479 --> 00:01:48.000
这没有奏效，所以我做了发行，现在我做了另一个突破

00:01:48.000 --> 00:01:52.479
发布与我得到的反馈，我希望能克服这里，但它

00:01:52.479 --> 00:01:54.720
真的没多大关系，不是

00:01:54.720 --> 00:01:58.960
这不像是一项艰巨的突破，而只是让事情发生

00:01:58.960 --> 00:02:03.280
更容易和更好，实际上与以前的版本更相似，因此如果

00:02:03.280 --> 00:02:07.040
人们实际上是从旧版本升级到这个新版本

00:02:07.040 --> 00:02:10.879
它会比升级到当前版本更流畅

00:02:10.879 --> 00:02:17.360
嗯，希望我这周能完成，然后

00:02:17.360 --> 00:02:23.280
嗯，我还完善了不变性的问题

00:02:23.280 --> 00:02:27.360
对于超链接Codex um，我们已经讨论了一点，这就是全部

00:02:27.360 --> 00:02:30.239
在这个问题上，简短的版本是我提议的

00:02:30.239 --> 00:02:35.680
一个新的措辞，基本上，如果我们有编解码器，例如

00:02:35.680 --> 00:02:41.519
dexymore或deck协议缓冲区，无论uan代码也应

00:02:41.519 --> 00:02:48.480
能够被股票和相应的解码器解码

00:02:48.480 --> 00:02:52.000
在这种情况下，编解码器是海港或协议缓冲区

00:02:52.000 --> 00:02:56.959
嗯，无论如何，这都是问题，您可以在其中随意鸣叫

00:02:56.959 --> 00:03:03.120
嗯，是的，这就是我在四月世界所做的一切

00:03:03.120 --> 00:03:07.200
我名单上的下一个是Rod

00:03:09.920 --> 00:03:14.959
当我找到我的按钮时，我们就这样

00:03:15.120 --> 00:03:22.400
嗯，太多的窗户打开了，好的，哦，挂在嗯

00:03:22.400 --> 00:03:25.519
我受伤了好吗

00:03:27.680 --> 00:03:31.440
错误的麦克风，这个应该更好

00:03:31.440 --> 00:03:38.959
嗯，所以上周是两件事嗯，新的javascript卡库是

00:03:38.959 --> 00:03:45.840
彻底完成了嗯，所以我只需要迈克尔发表

00:03:45.840 --> 00:03:51.360
因为迈克尔拥有所有钥匙，所以迈克尔可以请你做那个，

00:03:51.360 --> 00:03:54.959
它有文档，并且有整个类型跳过打字稿

00:03:54.959 --> 00:03:59.599
验证的东西，最重要的是，它有一些想法

00:03:59.599 --> 00:04:04.080
关于新的块存储接口

00:04:04.080 --> 00:04:10.720
应该适用于其他块源

00:04:10.720 --> 00:04:17.359
这样完成的方式非常分成功能，所以如果您想

00:04:17.359 --> 00:04:20.880
如果您想随机获得

00:04:20.880 --> 00:04:24.800
它就像一个get操作，那么您可以使用a来打开它，否则您将

00:04:24.800 --> 00:04:28.560
使用特定的接口提取它，如果您想遍历

00:04:28.560 --> 00:04:31.040
块，那么你会去去另一个，这些东西可能

00:04:31.040 --> 00:04:34.320
可能与类似

00:04:34.320 --> 00:04:36.240
您的块就像在具有

00:04:36.240 --> 00:04:39.440
轻松访问所有这些功能，然后所有这些功能

00:04:39.440 --> 00:04:43.120
您只有一件事将它们结合在一起，但这会分裂

00:04:43.120 --> 00:04:47.680
功能，以便当您拥有这些块存储时，

00:04:47.680 --> 00:04:52.720
有各种各样的限制，你只会得到适合他们的接口

00:04:52.720 --> 00:04:58.160
这是一个理论，但由于这是第一个真正使用新样式块的理论

00:04:58.160 --> 00:05:00.800
界面，这真的是很多理论

00:05:00.800 --> 00:05:04.880
但嗯，这很好用，嗯

00:05:04.880 --> 00:05:08.479
你知道当你想使用汽车文件时，你倾向于

00:05:08.479 --> 00:05:12.400
只考虑一种互动方式

00:05:12.400 --> 00:05:14.639
当您执行此操作时，如果您只想遍历

00:05:14.639 --> 00:05:17.199
全部或者如果您只想获取单个块

00:05:17.199 --> 00:05:21.440
当您阅读汽车文件时，这往往是两种样式

00:05:21.440 --> 00:05:27.520
嗯，嗯，那是呃，我做了更多的事，我得到了一个

00:05:27.520 --> 00:05:32.000
提取um js文档并将其提取的图片库

00:05:32.000 --> 00:05:35.840
分成一部分，你读了我，我做了一点

00:05:35.840 --> 00:05:39.199
在此期间的工作，以使其更好地处理一些

00:05:39.199 --> 00:05:44.080
较新的打字稿样式注释，并且我调整了输出

00:05:44.080 --> 00:05:49.440
我认为噪音有点大，噪音也小一点，所以我觉得

00:05:49.440 --> 00:05:54.750
js汽车的自述文件具有该样式api文档um

00:05:54.750 --> 00:06:00.080
 [音乐]，最后，亲要求三个和两个

00:06:00.080 --> 00:06:04.639
规范回购中的9个，其中包含文件硬币

00:06:04.639 --> 00:06:08.880
我们一直在谈论的数据形式

00:06:08.880 --> 00:06:13.039
拉出来，里面有两件大事

00:06:13.039 --> 00:06:17.919
好吧，那里有很多大事

00:06:17.919 --> 00:06:24.479
这还包括ADL，这是汉普顿AMT，它们是

00:06:24.479 --> 00:06:28.000
有点和数据um混在一起，正如eric指出的那样，它们全都

00:06:28.000 --> 00:06:32.720
从块的根部开始，这样您就可以链接到不嵌入它们的adl

00:06:32.720 --> 00:06:35.440
在其他的东西，但价值观被嵌入

00:06:35.440 --> 00:06:39.600
在大多数情况下，它们会链接到adl，但在大多数情况下，它们是

00:06:39.600 --> 00:06:45.199
在行中嵌入值，因此对于这第一遍

00:06:45.199 --> 00:06:49.759
我只是将其全部写在您的位置，以便您可以看到

00:06:49.759 --> 00:06:52.800
每个ADL，这些都有很多重复

00:06:52.800 --> 00:06:57.120
只是用不同的名字

00:06:57.280 --> 00:07:00.800
我们需要找到一种方法

00:07:00.960 --> 00:07:04.400
压缩，使其不那么冗长

00:07:04.400 --> 00:07:09.280
但我们不会丢失我真正想要的有关块布局的信息

00:07:09.280 --> 00:07:13.360
仍然能够显示所有原始块中的内容

00:07:13.360 --> 00:07:17.280
将其作为原始博客阅读，然后上一个台阶说可以，如果

00:07:17.280 --> 00:07:22.319
您将这些内容读为adls，那么您将看到

00:07:22.319 --> 00:07:26.240
深入研究细节的多种方法，所以我们必须弄清楚

00:07:26.240 --> 00:07:29.680
怎么做，它包含的第二件事是

00:07:29.680 --> 00:07:34.319
第二个停放了消息的坞站，现在消息已嵌入

00:07:34.319 --> 00:07:38.160
他们得到他们被编码为海滨，然后

00:07:38.160 --> 00:07:43.840
嵌入到其中一个块的字节字段中，然后获取

00:07:43.840 --> 00:07:48.160
编码为出租车牌，这就是消息的工作方式，以便

00:07:48.160 --> 00:07:51.440
它们被分别指定为这些单独的东西

00:07:51.440 --> 00:07:56.879
嗯，我看到um wills今天回答了我的问题，

00:07:56.879 --> 00:08:00.400
这些消息也会被编码，所以我们可能需要

00:08:00.400 --> 00:08:04.560
还要定义它们，以便每条消息都代表不同的信息

00:08:04.560 --> 00:08:09.199
在vm中起作用，所以在其中有一条消息，然后

00:08:09.199 --> 00:08:13.360
从中得到回报，然后两者之间就存在差异

00:08:13.360 --> 00:08:17.280
角色um的版本0和版本2，因此需要

00:08:17.280 --> 00:08:20.080
有待观察和另一件事，昨天我

00:08:20.080 --> 00:08:24.000
意识到我要睡觉的时候，我一直在看主分支

00:08:24.000 --> 00:08:28.240
演员，而不是具体版本

00:08:28.240 --> 00:08:31.919
两个，所以我可能需要回去

00:08:31.919 --> 00:08:35.919
并检查第二个版本，因为他们正在准备

00:08:35.919 --> 00:08:41.279
我知道第七版或某些版本，所以我需要回去并确保我

00:08:41.279 --> 00:08:45.200
尚未以不存在的较新格式引用所有这些内容

00:08:45.200 --> 00:08:48.880
块，所以有点烦人

00:08:48.880 --> 00:08:52.640
嗯，无论如何，我对第一次通过感到非常满意

00:08:52.640 --> 00:08:56.560
非常冗长，但这就是链条，很大

00:08:56.560 --> 00:09:00.959
所以我是的，我只想补充几件事

00:09:00.959 --> 00:09:05.360
呃我给你的卡文件没有

00:09:05.360 --> 00:09:09.279
来自他们没有收据的虚拟机的所有收益都不会

00:09:09.279 --> 00:09:12.880
目前，您将拥有一种导出方式

00:09:12.880 --> 00:09:16.080
可以肯定的是，在我们的下一次会议上，但希望在此之前，您将

00:09:16.080 --> 00:09:18.480
一种从其他地方获取它们的方法，但它们不在

00:09:18.480 --> 00:09:22.800
发现文件，我无法将它们放入此汽车文件中，因此

00:09:22.800 --> 00:09:26.160
基本上希望您有一些悬而未决的参考资料

00:09:26.160 --> 00:09:32.399
演员真正掌握的第一，第二是什么

00:09:32.399 --> 00:09:37.120
他们将要标记下一个，所以这不像浪费工作

00:09:37.120 --> 00:09:40.720
同时，我们需要为每个人建立一个架构

00:09:40.720 --> 00:09:46.720
演员的标签，因为连锁是的，我现在所掌握的是主人

00:09:46.720 --> 00:09:52.959
比版本2的很多，是的，是的，值得注意的是

00:09:52.959 --> 00:09:56.959
我认为我遇到的真正问题也遇到了同样的问题

00:09:56.959 --> 00:10:00.880
当您查看演员的主分支时，有一些结构

00:10:00.880 --> 00:10:06.560
尚未真正定义，他们希望为v2拥有类型别名或

00:10:06.560 --> 00:10:10.000
当您查看具体的v2或v1时为v1

00:10:10.000 --> 00:10:12.640
有时它们也没有定义，但是注释是不同的，实际上

00:10:12.640 --> 00:10:15.680
定义该结构是什么或它将在哪里

00:10:15.680 --> 00:10:20.000
版本，所以看标记版本很有用

00:10:20.000 --> 00:10:26.000
um文档奇怪地在这些标签之间更改了uh

00:10:26.000 --> 00:10:31.120
看着它肯定是在照亮呃是的

00:10:31.120 --> 00:10:35.120
我一直在想，也许实际上是在做一些澄清工作

00:10:35.120 --> 00:10:38.240
甚至当您在对邮件进行排序时，甚至是很小的事情

00:10:38.240 --> 00:10:41.760
然后在顶部按一个顺序定义它们，然后将它们拖移

00:10:41.760 --> 00:10:44.240
这样的底部真的很烦，我一直在想

00:10:44.240 --> 00:10:47.839
也许我应该去那里洗牌并将请求拉回去，但是

00:10:47.839 --> 00:10:50.480
你知道那噪音对我有用，但是

00:10:50.480 --> 00:10:54.800
可能对代码搅动没有用，所以无论如何

00:10:54.800 --> 00:10:58.560
嗯，再说一点，您看过的东西，它会

00:10:58.560 --> 00:11:03.680
实际上将在本周末成为下一个版本

00:11:03.680 --> 00:11:08.399
它会被标记，所以你离你很近

00:11:10.800 --> 00:11:14.079
那是最令人沮丧的部分，实际上是

00:11:14.079 --> 00:11:20.480
版本控制，因为您必须在本质上深入进行

00:11:20.480 --> 00:11:24.880
并排查看源代码的变化

00:11:24.880 --> 00:11:30.160
嗯，因为就像我将要说的那样，我对...没有高度的信任

00:11:30.160 --> 00:11:35.519
一些联系和一些重用性

00:11:35.519 --> 00:11:39.839
我认为我们正在建设的将有望成为

00:11:39.839 --> 00:11:43.200
帮助成为这件事的真相之源，所以

00:11:43.200 --> 00:11:46.959
对我们而言，正确处理可能很重要

00:11:46.959 --> 00:11:50.240
好吧，只是说一些积极的话，就像完全出于性格

00:11:50.240 --> 00:11:54.160
我，我们住了大约四个星期

00:11:54.160 --> 00:11:58.560
现在三周了，我们进行了四次升级

00:11:58.560 --> 00:12:02.240
本质上说，内部虚拟机完全是完美无缺的，所以

00:12:02.240 --> 00:12:06.320
他们建造的作品在建筑和诸如此类的方面都发挥了作用

00:12:06.320 --> 00:12:10.079
他们说对了，我们知道了

00:12:10.079 --> 00:12:13.120
因为没有其他我知道的区块链

00:12:13.120 --> 00:12:16.720
实际上可以即时交换这样的东西而无需

00:12:16.720 --> 00:12:24.959
没有重要的东西，所以是的，嗯，这仍然很烦人

00:12:24.959 --> 00:12:28.079
您必须为此使用链条高度，因为我们有

00:12:28.079 --> 00:12:31.760
我们做到了，我们只是没有办法在我们的模式中发信号

00:12:31.760 --> 00:12:37.519
这个东西在这里或这里，并试图想出像

00:12:37.519 --> 00:12:41.839
只是没有办法做像你一样形状变化的结构的并集

00:12:41.839 --> 00:12:46.320
添加一个字段um，就像我们可以将其设置为可选的一样，

00:12:46.320 --> 00:12:48.000
只是事实并非如此

00:12:48.000 --> 00:12:53.040
这将是一个新的过程，所以我是那个过程很烦人，我认为

00:12:53.040 --> 00:12:56.240
只是意味着我们必须要详细

00:12:56.240 --> 00:12:59.440
当您在不同的对象之间切换时，大约是um

00:12:59.440 --> 00:13:01.760
在这里版本链的高度，然后

00:13:01.760 --> 00:13:06.720
实际上从这里阅读，这很烦人

00:13:06.720 --> 00:13:12.000
我们不能强迫他退缩，哦，谁可以强迫他

00:13:14.639 --> 00:13:19.680
是的，对于那些最近加入我们的人，我们实际上是在说

00:13:19.680 --> 00:13:22.880
大概三个月前就这样，我们不应该这样做

00:13:22.880 --> 00:13:25.680
成为一场噩梦，我们有一个完整的文件来证明

00:13:25.680 --> 00:13:27.440
虽然，但这并没有帮助我的意思

00:13:27.440 --> 00:13:31.519
我们生活得如此，让我们继续前进，但这只是令人沮丧

00:13:31.519 --> 00:13:35.839
嗯，反正

00:13:36.000 --> 00:13:39.199
但是是的，但是还有其他一些有趣的事情

00:13:39.199 --> 00:13:42.079
像你这样的策划人都知道埃里克，我一直在谈论这个地方

00:13:42.079 --> 00:13:45.519
嗯，我们只是无法描述正在发生的事情

00:13:45.519 --> 00:13:48.320
当您跳入演员的角色时，就像演员一样

00:13:48.320 --> 00:13:52.320
声明你你不能定义联合

00:13:52.320 --> 00:13:54.800
因为这是定义的跳点

00:13:54.800 --> 00:13:59.120
您要阅读的内容和密钥

00:13:59.120 --> 00:14:02.399
我仍然不明白这一点，但是嗯

00:14:02.399 --> 00:14:06.639
所谓的代码说明了您要使用的演员类型

00:14:06.639 --> 00:14:10.639
代码是一个编码的cid

00:14:10.639 --> 00:14:17.519
字符串的原始身份多哈希值，类似于填充斜线

00:14:17.519 --> 00:14:22.639
两个斜杠演员类型呃，我不知道为什么那是一个cid

00:14:22.639 --> 00:14:25.920
为什么不只是一个字符串，因为最终它们将允许用户

00:14:25.920 --> 00:14:28.399
查找该sid将指向的演员

00:14:28.399 --> 00:14:33.120
定制角色类型为okay和um的已编译代码

00:14:33.120 --> 00:14:36.880
并且为理想的未来做准备从来都不是工程上的问题

00:14:36.880 --> 00:14:41.120
嗯，好吧，但是嘿，sid很普通，你可能适合任何东西

00:14:41.120 --> 00:14:46.079
您需要在那儿好吧，所以联合定义为

00:14:46.079 --> 00:14:50.959
跳点之外的东西等等

00:14:50.959 --> 00:14:55.519
因此，在我们的架构中，我们没有多个您无法链接的地方

00:14:55.519 --> 00:14:59.120
他们在一起，所以你不能你不能画一个图

00:14:59.120 --> 00:15:03.040
um将会显示的漂亮的um graphql图

00:15:03.040 --> 00:15:05.920
没有一些手动链接，实际上是说这个坑

00:15:05.920 --> 00:15:09.920
件连接到此，您无法采用我们的模式，然后从中绘制

00:15:09.920 --> 00:15:11.920
原始模式，我们必须拥有所有这些附加功能

00:15:11.920 --> 00:15:15.600
描述它们如何链接不同链接的并集的元数据

00:15:15.600 --> 00:15:20.240
跳点是um，iii一直在想是否有办法

00:15:20.240 --> 00:15:24.000
扩展模式语言来描述一些我知道的事情

00:15:24.000 --> 00:15:28.480
埃里克有点，他的皮肤有些爬行，谈论事情

00:15:28.480 --> 00:15:32.399
像链接类型提示联合

00:15:32.399 --> 00:15:35.839
或工会问题，您实际上可以说出此链接

00:15:35.839 --> 00:15:38.880
因为我们的链接中有类型提示，它确实可以解决此问题

00:15:38.880 --> 00:15:42.480
如果可以将类型提示扩展为

00:15:42.480 --> 00:15:48.240
表示此链接可以解析为此类型的列表，这将有助于um

00:15:48.240 --> 00:15:52.399
但是版本控制还有另一个问题，那就好了

00:15:52.399 --> 00:15:56.480
其中一些有助于文档编制过程的解决方案

00:15:56.480 --> 00:16:02.000
但我们也必须认识到，您知道硬币一直在推动极限

00:16:02.000 --> 00:16:06.639
在这里，您可能知道我们所拥有的东西

00:16:06.639 --> 00:16:09.279
与您知道的远价硬币限额不同的限额

00:16:09.279 --> 00:16:13.040
我们过去曾提出过提交硬币的建议，而这些建议却被忽略了，

00:16:13.040 --> 00:16:16.320
我们现在正在吃一些

00:16:16.320 --> 00:16:19.759
您知道我们不应该为了适应

00:16:19.759 --> 00:16:23.920
他们做出的决定，这只是一个内部限制

00:16:23.920 --> 00:16:27.759
所以反正值得深思

00:16:29.040 --> 00:16:37.040
谢谢，我名单上的下一个是丹尼尔·酷，所以我的要求

00:16:37.040 --> 00:16:42.160
Revive go多代码削减了一些评论，所以我认为我们大部分都同意

00:16:42.160 --> 00:16:46.000
该代码及其在api上的作用，然后我

00:16:46.000 --> 00:16:49.839
回购本身就是名字的掩饰，所以也许去吧

00:16:49.839 --> 00:16:53.199
多编解码器不是一个好的回购名称，所以也许它应该是多

00:16:53.199 --> 00:16:57.440
格式镜像js多种格式，所以我添加了一个

00:16:57.440 --> 00:17:00.480
停靠栏顶部的动作项，以获取一些

00:17:00.480 --> 00:17:07.039
以后的决定嗯，我还在大麻上做了更多的工作

00:17:07.039 --> 00:17:10.720
所以我添加了一堆我本质上添加了一种方法

00:17:10.720 --> 00:17:17.120
输入链接加载器和存储库，依此类推，至少现在在基本

00:17:17.120 --> 00:17:20.959
情况下，它确实知道如何加载链接和创建新链接，等等。

00:17:20.959 --> 00:17:25.439
一只手非常基本，我还留下了一些规格问题

00:17:25.439 --> 00:17:28.000
松懈，所以我希望得到那些答复

00:17:28.000 --> 00:17:32.000
很快，但不紧急，我也早些时候与eric同步过

00:17:32.000 --> 00:17:35.120
今天基本上就你知道直到现在我

00:17:35.120 --> 00:17:38.320
我主要是自己做一些我需要弄清楚的事情，

00:17:38.320 --> 00:17:41.840
等等，但是现在我已经到了需要与他同步并提供帮助的地步

00:17:41.840 --> 00:17:45.440
他在ipld Prime中获得了新的东西，例如

00:17:45.440 --> 00:17:50.320
他一直在进行的编解码器工作导致了新的链接接口，

00:17:50.320 --> 00:17:54.000
也将帮助我，接下来我需要做的是

00:17:54.000 --> 00:17:57.440
adl教它如何复制节点，因为现在无论何时修改

00:17:57.440 --> 00:18:00.960
手节点，它只是在适当的地方进行修改

00:18:00.960 --> 00:18:03.679
我现在进行的那种单元测试很好

00:18:03.679 --> 00:18:06.960
但是对于真正的手，它需要复制东西

00:18:06.960 --> 00:18:10.000
嗯，迈克尔在前面提到的是

00:18:10.000 --> 00:18:14.160
如果此atl支持新模式，而且还支持

00:18:14.160 --> 00:18:20.640
我认为文件硬币架构应该是可行的

00:18:20.640 --> 00:18:24.559
我需要调查一点，如果可能的话

00:18:24.559 --> 00:18:28.160
他说，猎鹰人可能感兴趣的是

00:18:28.160 --> 00:18:30.640
然后实施批量更新，因为

00:18:30.640 --> 00:18:33.360
他们目前没有的东西

00:18:33.360 --> 00:18:37.600
这样就节省了所有复制和创建新节点的工作，依此类推

00:18:37.600 --> 00:18:41.280
可以抵消例如微基准测试中的损失，这可能是相当大的。

00:18:41.280 --> 00:18:44.720
有趣，但这是我完成此操作的那种

00:18:44.720 --> 00:18:47.280
大概在本周结束之前

00:18:47.280 --> 00:18:50.160
这就是给我的

00:18:51.440 --> 00:18:54.960
还要感谢下一个

00:18:55.360 --> 00:19:00.000
当然，上周我花了很多时间

00:19:00.000 --> 00:19:07.200
从ipld模式开始执行um graphql代码生成，因此从

00:19:07.200 --> 00:19:11.360
该模式，我现在正在生成大多数graphql服务器

00:19:11.360 --> 00:19:16.000
能够从该ipld数据对象中获取

00:19:16.000 --> 00:19:20.080
然后创建graphql查询并为其提供服务

00:19:20.080 --> 00:19:26.080
因此，我实际上可以共享我的屏幕并显示此内容

00:19:26.080 --> 00:19:28.720
简要地

00:19:30.860 --> 00:19:34.810
[音乐]

00:19:35.120 --> 00:19:40.080
让我们看看我是否能够看到你们

00:19:42.000 --> 00:19:48.720
可能是的，所以这实际上是一个查询

00:19:48.720 --> 00:19:52.240
在罗德（Rod）说的一堆事情上，所以让我看看是否可以说出来，

00:19:52.240 --> 00:19:55.919
得到了演员地图，这是嗯

00:19:55.919 --> 00:20:02.880
这是一个折磨，嗯，现在我只允许您选择

00:20:02.880 --> 00:20:06.640
单个键或对象离开它，然后移开

00:20:06.640 --> 00:20:09.360
是这个隐式联合实际上是一个sid

00:20:09.360 --> 00:20:13.200
链接到我更新架构的一堆东西中

00:20:13.200 --> 00:20:19.440
这样我在这里有一个隐式联合um它在那里成为具体参与者之一

00:20:19.440 --> 00:20:23.840
声明它，而隐式联合是一个

00:20:23.840 --> 00:20:26.880
嗯，当您按照sid进行操作时，您会知道

00:20:26.880 --> 00:20:30.559
具体事物，无论出于何种原因，graphqls联合

00:20:30.559 --> 00:20:34.240
本质上是隐式联合，所以在这里可以正常工作

00:20:34.240 --> 00:20:38.240
嗯，唯一不起作用的地方是

00:20:38.240 --> 00:20:44.320
尝试将模式用作直接对您将要使用的数据类型的ipld。

00:20:44.320 --> 00:20:46.400
获取ipld会感到困惑，因为数据

00:20:46.400 --> 00:20:51.200
本身没有区分哪个值是

00:20:51.200 --> 00:20:55.520
另一个碰到杆的人是当你

00:20:55.520 --> 00:20:59.280
在某个高度之前询问块的状态路线

00:20:59.280 --> 00:21:02.480
你直接有演员的手而不是呃

00:21:02.480 --> 00:21:05.919
包含版本和信息的stateroot对象

00:21:05.919 --> 00:21:11.600
所以我不得不再次投入一点，你们知道档案硬币的垫片

00:21:11.600 --> 00:21:14.159
说如果低于这个，我要做的就是合成一个

00:21:14.159 --> 00:21:18.960
那只是在注入的小呃对象中说这是合成的

00:21:18.960 --> 00:21:26.000
信息呃状态路线和降级演员的sid嗯

00:21:26.000 --> 00:21:30.080
传递到应该的位置，以便获得一致的架构

00:21:30.080 --> 00:21:34.000
跨越那个呃过渡，以便您总是可以查询这些东西

00:21:34.000 --> 00:21:39.120
嗯，但最令人兴奋的部分是um，一旦您获得了graphql是

00:21:39.120 --> 00:21:42.080
非常高兴，在这里您可以说看我是否想成为演员

00:21:42.080 --> 00:21:44.559
地址，如果它是未成年人，我想这样做，然后

00:21:44.559 --> 00:21:47.679
根据您的输入，所以如果我输入的是

00:21:47.679 --> 00:21:54.799
嗯，文件硬币中的帐户对象我得到它的地址um

00:21:54.799 --> 00:21:58.000
而如果我输入的是次要的东西

00:21:58.000 --> 00:22:00.799
那么什么是未成年人

00:22:05.840 --> 00:22:11.440
那是个小孩子，嗯，我会告诉我它的主人是谁，所以我得到了

00:22:11.440 --> 00:22:14.640
基于事物的不同事物，这种结合基本上只是在起作用

00:22:14.640 --> 00:22:18.480
嗯，所以这是相当令人兴奋的进步

00:22:18.480 --> 00:22:24.080
嗯，这一切都是在没有太多的情况下发生的

00:22:24.080 --> 00:22:27.039
覆盖所有或任何类似的自定义代码，这仅仅是

00:22:27.039 --> 00:22:29.280
嗯

00:22:31.600 --> 00:22:35.600
抱歉，缩放令人困惑，只是纯粹在教练之外发生

00:22:35.600 --> 00:22:39.280
所以还有更多的工作要完成，但是

00:22:39.280 --> 00:22:43.760
我对很少要做的工作感到非常满意，这不是ipld

00:22:43.760 --> 00:22:48.640
通用与Filecoin特定的um，然后进行帮助

00:22:48.640 --> 00:22:58.640
在一些疯狂的规格东西上，谢谢，下一个是彼得

00:23:00.000 --> 00:23:05.520
是的，除了我上周建造的这栋建筑，实际上没有什么可报告的

00:23:05.520 --> 00:23:09.280
费力的工作

00:23:11.919 --> 00:23:15.200
希望你能在第一部分得到一切

00:23:15.200 --> 00:23:22.799
照顾了嗯，并在此过程中设法打破了gokar再一次呃

00:23:22.799 --> 00:23:27.600
除了传统的问题之外，还有更多

00:23:27.600 --> 00:23:31.360
短字段之类的东西我实际上现在正像这样

00:23:31.360 --> 00:23:35.280
我正在为此做测试用例，因为我不喜欢复制自己

00:23:35.280 --> 00:23:39.520
出于某种原因，嗯，是的，我一无所有

00:23:39.520 --> 00:23:41.919
激动人心的

00:23:42.640 --> 00:23:45.919
谢谢，下一个是埃里克

00:23:48.640 --> 00:23:52.320
没什么可举报的，因为我只花了很多时间进行审查，

00:23:52.320 --> 00:23:56.559
这个星期在思考各种东西，嗯，我对所有的falcoin感到非常兴奋

00:23:56.559 --> 00:24:01.039
架构化工作，我们真的为所有火腿内容感到兴奋

00:24:01.039 --> 00:24:05.679
即将到来的是大多数有趣的技术

00:24:05.679 --> 00:24:10.480
我这个工作周做的事情是

00:24:10.480 --> 00:24:14.640
我们开始越来越多地考虑使用热能

00:24:14.640 --> 00:24:18.240
现在开始可能是时候来看看

00:24:18.240 --> 00:24:23.679
输出大小，然后首先尝试量化它，

00:24:23.679 --> 00:24:28.480
看看这是否是一个问题，但喜欢自信地知道，然后

00:24:28.480 --> 00:24:31.039
也许看看是否该是时候开始改善了

00:24:31.039 --> 00:24:35.919
事情已经发生，所以我没有坦白说

00:24:35.919 --> 00:24:39.360
原来这是一个很大的话题，但是现在至少有一个问题

00:24:39.360 --> 00:24:43.279
对于那个um的讨论，它跟踪了一些我怀疑是

00:24:43.279 --> 00:24:46.320
将是未来的工作

00:24:47.360 --> 00:24:51.679
我开始偷看其中的一些

00:24:51.679 --> 00:24:56.960
当前大小的东西，我想我基本上到目前为止才意识到

00:24:56.960 --> 00:24:59.520
我们在那里需要多少工作

00:24:59.520 --> 00:25:04.000
现在尝试解决这个问题是

00:25:04.000 --> 00:25:07.440
我认为这是一个非常动手且有些手动的过程

00:25:07.440 --> 00:25:12.480
可以编写一些工具脚本来帮助检查

00:25:12.480 --> 00:25:17.679
好吧，所以检查um生成的源代码文本输出

00:25:17.679 --> 00:25:20.320
大小当然很容易，就像ls.l一样

00:25:20.320 --> 00:25:26.960
对，所以把它分解下来给我们作为开发人员的指导

00:25:26.960 --> 00:25:29.039
这个系统看看接下来应该改进什么

00:25:29.039 --> 00:25:34.240
是一个不同的问题，并弄清楚二进制大小是多少

00:25:34.240 --> 00:25:38.480
也是另一个完全不同的问题

00:25:38.480 --> 00:25:43.600
所以弄清楚现在我正在踢一个二进制大小是什么

00:25:43.600 --> 00:25:49.200
稍微看一下中间的汇编程序输出，

00:25:49.200 --> 00:25:56.640
给出了一些有趣的信息，但还是非常努力地尝试获得

00:25:56.640 --> 00:25:59.760
完全自动化的答案

00:25:59.760 --> 00:26:03.919
工具链，可能我只是还没有找到合适的旋钮

00:26:03.919 --> 00:26:10.400
嗯，答案也会因智能程度的不同而有很大差异

00:26:10.400 --> 00:26:14.640
编译器得到了有关摇树的东西，到目前为止，我实际上已经找到了

00:26:14.640 --> 00:26:18.960
编译器很烦人，它在简单的树上摇得太好了

00:26:18.960 --> 00:26:21.919
我制作的演示，因此有效地使我没有

00:26:21.919 --> 00:26:26.880
有关实际用户可能击中的尺寸的信息

00:26:26.880 --> 00:26:30.880
除非我提出一个完整的现实用例，然后再提出问题

00:26:30.880 --> 00:26:36.080
也以比我真正想要的更精确的方式进化

00:26:36.240 --> 00:26:39.440
将来要做的工作我只是发现了它的轮廓

00:26:39.440 --> 00:26:43.360
这周的问题就是这个

00:26:43.840 --> 00:26:48.400
谢谢，下一个是迈克尔

00:26:49.279 --> 00:26:55.039
你好，是的，主要是上周，我花了很多时间来解决这些校准问题

00:26:55.039 --> 00:26:59.840
会议以供我们审核，但um还做了很多工作

00:26:59.840 --> 00:27:04.480
cadb新的大块存储区，我现在有交易在运作

00:27:04.480 --> 00:27:07.679
有一些错误和删除，但我的钢笔有效

00:27:07.679 --> 00:27:11.279
现在非常完美，我可以看到效果如何

00:27:11.279 --> 00:27:15.279
这真的很像第一个大用途um，

00:27:15.279 --> 00:27:18.320
我们真正进行这些新树性能测试的地方

00:27:18.320 --> 00:27:21.919
马科拉想通了，然后他们真的很好

00:27:21.919 --> 00:27:25.360
就像这些，这就像一个非常好的数据结构，我们要

00:27:25.360 --> 00:27:28.320
能够做一些非常酷的事情，这只是第一个

00:27:28.320 --> 00:27:31.679
但是无论如何，这个数据库实际上执行得非常快

00:27:31.679 --> 00:27:35.679
嗯，您可以像这样来创建初始树

00:27:35.679 --> 00:27:38.720
每秒30万um的权利

00:27:38.720 --> 00:27:42.720
和花花公子创建一个初始树，我希望

00:27:42.720 --> 00:27:46.080
从那里下降的突变表现可能像

00:27:46.080 --> 00:27:50.640
每秒一百个条目以进行批量更新

00:27:50.640 --> 00:27:54.399
但这仍然相当快，比其他任何东西都快

00:27:54.399 --> 00:27:57.679
我现在知道的这个资料储存库上的um

00:27:57.679 --> 00:28:03.919
嗯，那是令人兴奋的东西嗯，应该让它变得更好

00:28:03.919 --> 00:28:07.360
一周，然后找出去哪里

00:28:07.360 --> 00:28:11.120
嗯，我需要记录下来，把它从我的头上弄出来

00:28:11.120 --> 00:28:15.039
嗯，也许和杆一起工作，如何编写一个好的规范，并为此停靠了

00:28:15.039 --> 00:28:19.039
然后，嗯，也坐在某个地方

00:28:19.039 --> 00:28:22.240
敬畏，并仔细研究获得实施的计划是什么

00:28:22.240 --> 00:28:28.720
然后去那个filecoin可以使用um，然后是的mccola嗯

00:28:28.720 --> 00:28:32.799
在这笔赠款上可以用来做树，而他呃他有一个初步的实现

00:28:32.799 --> 00:28:35.679
起来，这样您就可以检查出他写的ra树

00:28:35.679 --> 00:28:38.799
嗯，看起来很漂亮，它在打字稿中，所以，如果你有兴趣的话

00:28:38.799 --> 00:28:41.520
如果您是喜欢打字稿的人之一，那么您可能需要检查一下

00:28:41.520 --> 00:28:46.559
嗯，这就是我得到的

00:28:46.559 --> 00:28:52.640
请不要这样说，就像我知道我知道，不是那样，不是吗

00:28:52.640 --> 00:28:54.720
会坚持下去，每个人都会认为

00:28:54.720 --> 00:28:58.399
它在摩擦它甚至不会看它，因为它没有意义

00:28:58.399 --> 00:29:02.159
是的，我也认为它实际上并没有使用包装

00:29:02.159 --> 00:29:05.600
像兔子一样，实际上并不是一个很好的算法

00:29:05.600 --> 00:29:08.880
这是一个可怕的算法，这就是我的意思是没人会看

00:29:08.880 --> 00:29:12.559
之所以这样，是因为这可能无法正常工作，

00:29:12.559 --> 00:29:14.960
是的，不，他这里有一块厚厚的块，让我看看

00:29:14.960 --> 00:29:18.320
按照他的分块逻辑，嗯，是的，我的意思是他只是有些

00:29:18.320 --> 00:29:22.880
他正在那里做的数学，有些掩饰，

00:29:22.880 --> 00:29:26.320
没错，是的，我的意思是，你可以看到他的

00:29:26.320 --> 00:29:29.360
块的东西，这绝对不是我能告诉的兔子算法

00:29:29.360 --> 00:29:31.520
所以

00:29:31.919 --> 00:29:35.600
嗯，是的，我知道我是他的名字，但就在他想出这个名字的时候

00:29:35.600 --> 00:29:40.480
他说那不是一个好名字，我想所以我要承担这项工作，

00:29:40.480 --> 00:29:44.000
为更通用的数据结构版本创建ipld模式

00:29:44.000 --> 00:29:48.480
就像有一个可插拔的块um和其他可插拔的

00:29:48.480 --> 00:29:51.120
我们可以讨论和讨论的设计的属性

00:29:51.120 --> 00:29:54.640
但是我们应该能够像一种统一的实现

00:29:54.640 --> 00:29:58.399
您可以在其中实施新的分块器和新的分拣器，以及

00:29:58.399 --> 00:30:02.000
并稍微改变一些键和值的架构

00:30:02.000 --> 00:30:07.120
嗯，就其而言，它就像一个非常通用的数据结构

00:30:07.120 --> 00:30:11.039
用于读取和执行范围查询之类的实现

00:30:11.039 --> 00:30:14.080
甚至是为了创造突变

00:30:14.080 --> 00:30:18.880
嗯，那真的很好，然后我们基本上可以利用它来做

00:30:18.880 --> 00:30:23.279
稀疏数组，您会知道更大的地图以及各种不同的数据

00:30:23.279 --> 00:30:26.159
我们可以在此基本树的顶部构建的结构

00:30:26.159 --> 00:30:28.880
嗯，然后显然每个数据结构都会有不同的

00:30:28.880 --> 00:30:30.960
我们需要调整的性能配置文件

00:30:30.960 --> 00:30:34.000
嗯，我需要插入不同的设置和类似的东西，但是它将是

00:30:34.000 --> 00:30:38.960
挺酷的，就是我

00:30:39.120 --> 00:30:45.600
谢谢你，克里斯，即使没有进展，你有什么要报告的吗

00:30:45.600 --> 00:30:54.480
不，不，不，没有报告，真的很好，谢谢，嗯，那我们

00:30:54.480 --> 00:31:01.519
起床下巴项目dania想谈谈呃

00:31:01.519 --> 00:31:05.840
多码与女孩多种格式

00:31:06.240 --> 00:31:10.159
是的，所以这应该很容易，所以我只想导出

00:31:10.159 --> 00:31:15.440
多种格式的表格作为常数列表，我想我

00:31:15.440 --> 00:31:19.279
可以打电话给代码，但是我不会

00:31:19.279 --> 00:31:23.039
坚持那个嗯，所以我认为图书馆应该叫

00:31:23.039 --> 00:31:27.360
可以使用多种格式嗯，我认为我最初使用的是采用多种编码的格式，因为它

00:31:27.360 --> 00:31:31.600
是现有的回购协议，但实际上我并没有认真考虑

00:31:31.600 --> 00:31:35.760
所以大家都可以去多种格式吗

00:31:35.760 --> 00:31:39.120
好的多格式是所有内容的名称，包括多库和

00:31:39.120 --> 00:31:42.799
我认为它没有多基础功能

00:31:42.880 --> 00:31:46.080
传统上，我们甚至将该表称为多编解码器表

00:31:46.080 --> 00:31:51.039
就像它有恩，是的，迈克尔，实际上有一个

00:31:51.039 --> 00:31:56.399
关于他没有参加的讨论，我真正在这方面讲的很准确

00:31:56.399 --> 00:32:01.760
呃，我实际上忘记了自己的结果是什么

00:32:01.760 --> 00:32:04.480
嗯，我现在正忙于重新加载该文档，因为我没有

00:32:04.480 --> 00:32:07.360
记得其中之一，但我认为有人实际上已经测试过

00:32:07.360 --> 00:32:11.120
由于某些原因，多库不是特定格式

00:32:11.120 --> 00:32:15.519
详细的原因我以为我不太清楚这不是

00:32:15.519 --> 00:32:20.720
多编解码器当然是正确的，但还有很多事情

00:32:20.720 --> 00:32:24.159
许多其他的东西也不是多码率的，我们似乎

00:32:24.159 --> 00:32:28.390
喜欢同意[音乐]

00:32:38.720 --> 00:32:42.399
如果他们在桌子上，但我不知道你在玩你

00:32:42.399 --> 00:32:45.440
你像一年前一样开始嘲笑我们，我觉得我正在为你编索引

00:32:45.440 --> 00:32:49.360
说像一年前，所以是的，所以基本上我们有这个

00:32:49.360 --> 00:32:52.320
讨论，我们在其中一只狗中进行了讨论

00:32:52.320 --> 00:32:56.000
下沉会议，你在那里，迈克尔，这有点像

00:32:56.000 --> 00:33:01.840
所以回到是一个多编解码器，那么我们应该命名一个ipaldi Codex还是

00:33:01.840 --> 00:33:06.080
多重编码并调用其他所有编解码器，例如

00:33:06.080 --> 00:33:09.279
例如多格式代码，所以这是一种

00:33:09.279 --> 00:33:13.679
我们进行过讨论，但我也真的不太记得这个帐户

00:33:13.679 --> 00:33:16.960
嗯，但回到丹妮尔的问题希望

00:33:16.960 --> 00:33:20.559
可能更有意义，所以目前

00:33:20.559 --> 00:33:24.640
当前的问题是，我们目前在javascript中有某些东西

00:33:24.640 --> 00:33:28.720
这就是所谓的js multicodec，这只是表格

00:33:28.720 --> 00:33:33.919
有点像您目前正在建立的正是您在做什么以及我们在做什么

00:33:33.919 --> 00:33:37.519
目前，有一个用于所有新内容的新存储库，该存储库结合了

00:33:37.519 --> 00:33:42.960
cid multihash和multibase变成一件事，这就是我们

00:33:42.960 --> 00:33:47.120
当前调用js smarty格式

00:33:49.120 --> 00:33:54.480
所以我想我们是否可以像三周前那样忽略我们讨论的内容

00:33:54.480 --> 00:34:01.600
我将其称为多编解码器作为我们拥有的当前名称，但是如果

00:34:01.600 --> 00:34:04.159
我们想进行前瞻性思考，那么也许应该有所不同

00:34:04.159 --> 00:34:06.320
名称

00:34:07.600 --> 00:34:10.560
所以我认为这是一个很好的解决方案，我们应该称之为

00:34:10.560 --> 00:34:14.800
在这个更大的主题上使用多柯达是什么

00:34:14.800 --> 00:34:18.960
没有iflb的多编解码器，因为像我一样

00:34:18.960 --> 00:34:22.000
就像我们说的是multicodex就是这样，多哈希不是

00:34:22.000 --> 00:34:25.119
因为我们知道数据模型是什么，它意味着什么以及我们如何分配

00:34:25.119 --> 00:34:27.679
这些东西的编解码器，但从

00:34:27.679 --> 00:34:31.599
多种格式它只是一个整数表，用于标识那些

00:34:31.599 --> 00:34:35.520
我觉得这些都是多编解码器，其中一些是散列函数

00:34:35.520 --> 00:34:40.800
还有一些不是，这是主要的区别

00:34:40.800 --> 00:34:46.079
所以我上周发现了它，如果我想通过真正的快速冲刺

00:34:46.079 --> 00:34:48.639
嗯，我们基本上是在谈论这个

00:34:48.639 --> 00:34:52.079
我说的是几个结果

00:34:52.079 --> 00:34:55.839
所以第一步，我们谈论它的原因是我们发现这真的

00:34:55.839 --> 00:34:58.560
像几乎所有的人一样令人困惑

00:34:58.560 --> 00:35:03.119
在那次会议上讨论这些术语um这个表的事实

00:35:03.119 --> 00:35:06.560
当前称为多编解码器，其中包含一堆对

00:35:06.560 --> 00:35:12.000
例如，我们不称其为Codex的东西使我们深感困惑

00:35:12.000 --> 00:35:15.280
multihash也存在于此表中，令人困惑

00:35:15.280 --> 00:35:18.240
我们大多数人在这个表中的CID是

00:35:18.240 --> 00:35:22.079
令我们大多数人困惑的我可以继续

00:35:22.079 --> 00:35:24.160
列出一段时间，如果我只是滚动浏览

00:35:24.160 --> 00:35:29.520
表本身，所以我不是它也是

00:35:29.520 --> 00:35:34.240
当您将其与cids结合在一起时，令人困惑的是cids

00:35:34.240 --> 00:35:38.480
特别是cid v1将自身指定为具有多编解码器

00:35:38.480 --> 00:35:46.240
作为cid前缀中的变体之一，该数字必须仅引用

00:35:46.640 --> 00:35:50.400
编解码器，而不是多哈希，因为该数字指的是一个

00:35:50.400 --> 00:35:55.200
多哈希会疯狂，我们的大多数代码都会说“不”

00:35:55.520 --> 00:35:59.520
它会说最有可能以某种格式显示无效的CID

00:35:59.520 --> 00:36:06.320
所以我们有几张票试图将其分解，

00:36:06.320 --> 00:36:10.800
强烈同意的是

00:36:10.800 --> 00:36:14.480
我们认为当前该表被命名为多编解码器

00:36:14.480 --> 00:36:19.520
这是一个令人困惑的错误，我们应该朝某个方向推动重命名

00:36:20.240 --> 00:36:23.920
一个建议是将其重命名为多格式表

00:36:23.920 --> 00:36:30.640
那里的支持很温和，但很少有人反对，只是没有

00:36:30.640 --> 00:36:35.599
在场的任何人都有强烈的感情，所以我们在那里停车了

00:36:35.599 --> 00:36:39.760
没有人能对我们想要的东西提出强有力的解决方案，但是

00:36:39.760 --> 00:36:43.280
每个人都同意，目前称为多编解码器的做法令人深感困惑

00:36:43.280 --> 00:36:49.520
并应更改，因此在我看来cid调用

00:36:49.520 --> 00:36:55.599
该字段多编解码器是一个错误，该字段应仅称为编解码器

00:36:55.599 --> 00:36:58.320
因为cid数据结构在断言

00:36:58.320 --> 00:37:02.400
该整数的含义，它指向该会议

00:37:02.400 --> 00:37:06.160
成为大概在多编解码器表中的编解码器

00:37:06.160 --> 00:37:10.480
然后，多哈希显然也有一个指向它的多编解码器

00:37:10.480 --> 00:37:16.079
正在使用的哈希函数对我来说似乎很有意义

00:37:16.079 --> 00:37:19.599
就像我不知道我也倾向于把所有这些东西弄平

00:37:19.599 --> 00:37:23.200
这些只是特定数据结构中的变量，

00:37:23.200 --> 00:37:26.800
含义得到应用，因​​此我们不必担心

00:37:26.800 --> 00:37:29.760
在每个数据结构中，我们需要担心的是

00:37:29.760 --> 00:37:33.440
表的含义和表的含义只是为了

00:37:33.440 --> 00:37:41.200
像众所周知的协议一样映射到基本上是um的图像

00:37:42.400 --> 00:37:46.000
我认为在这一点上，我个人的理论是我们应该做一个嗯

00:37:46.000 --> 00:37:50.000
我们应该像在视觉上那样做一个维恩图

00:37:50.000 --> 00:37:54.079
是的，但是那就是说桌子是什么

00:37:54.079 --> 00:37:58.079
称它为多编解码器表就像不是最好的名字

00:37:58.079 --> 00:38:04.160
就像它真的不像呃

00:38:04.160 --> 00:38:08.079
如果如果不存在多库，我会从字面上称它为多库表

00:38:08.079 --> 00:38:14.160
因为它就像一个具有多个标识符的数据库，但是

00:38:14.800 --> 00:38:19.119
嗯，我的意思是我们可以将其称为多ID，也可以将其称为多表

00:38:19.119 --> 00:38:24.160
就像我真的喜欢任何东西一样，我确实认为只有编解码器确实有一点优势

00:38:24.160 --> 00:38:29.040
令人困惑的嗯，但我不是，但我没有为多代码赋予太多含义

00:38:29.040 --> 00:38:33.839
正如我认为其他人

00:38:45.040 --> 00:38:49.520
元多表

00:38:49.920 --> 00:38:56.880
我喜欢那就是方法的全部噢，我的意思是称它为多代码是

00:38:56.880 --> 00:39:00.480
这不是最糟糕的想法，因为多代码似乎使

00:39:00.480 --> 00:39:04.880
从很多方面来说，我都不会反对

00:39:06.160 --> 00:39:10.320
好的，我可能应该在此快速讨论中将其放在注释中，但

00:39:10.320 --> 00:39:13.359
像现在丹妮尔的答案一样

00:39:13.359 --> 00:39:17.040
基本上，有没有答案，现在就称它为多编解码器

00:39:17.040 --> 00:39:20.800
因为它与我们在其他地方的不良命名相匹配

00:39:20.800 --> 00:39:23.440
但是在某个时候，如果我们找出一个

00:39:23.440 --> 00:39:28.960
更好的名称，我们希望保持一致，我们将更新所有这些名称

00:39:28.960 --> 00:39:32.320
是的，我想说的是，嗯，听起来不错

00:39:32.320 --> 00:39:35.359
实际上，我提到核心多格式作为名称的唯一原因是因为我

00:39:35.359 --> 00:39:39.520
没注意到还有一个javascript多编解码器，所以是的

00:39:39.520 --> 00:39:43.839
听起来不错

00:39:46.720 --> 00:39:56.400
好的，我还有其他应该检查的议程吗

00:39:56.400 --> 00:40:01.599
议程上没有任何其他任何人想谈论的事情

00:40:02.720 --> 00:40:08.240
不酷，然后我关闭会议，所以谢谢

00:40:08.240 --> 00:40:11.839
大家，下周再见

00:40:13.880 --> 00:40:16.880
再见

