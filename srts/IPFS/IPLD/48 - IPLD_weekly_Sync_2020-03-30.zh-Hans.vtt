WEBVTT
Kind: captions
Language: zh-Hans

00:00:17.660 --> 00:00:24.900
为什么每个人都无法通过本周的IPL d /聋哑人士称其为“三月”

00:00:24.900 --> 00:00:31.289
 2020年3月30日，就像每周一样，我们回顾过去所做的事情

00:00:31.289 --> 00:00:37.800
一周，然后浏览我们可能拥有的任何新闻并讨论未解决的问题，或者

00:00:37.800 --> 00:00:45.629
问题是的，请把名字写在与会者名单上，尽管差不多

00:00:45.629 --> 00:00:53.150
过去一周完成了，所以这应该很好，我开始做自己，所以我

00:00:53.150 --> 00:01:00.120
乡村地工作正常，过去一周一直很好，因为我

00:01:00.120 --> 00:01:06.440
最终认为找到了一个很好的方法

00:01:06.620 --> 00:01:14.250
自定义编解码器表贯穿iPod e的整个链，所以问题在于

00:01:14.250 --> 00:01:19.259
您可能需要使用一些自定义的正确电缆，因为您有空间

00:01:19.259 --> 00:01:23.939
限制，或者您只经常使用三个编解码器

00:01:23.939 --> 00:01:28.259
与其他语言（例如JavaScript）不同，这是非常困难的，

00:01:28.259 --> 00:01:31.409
它来自魔术的某个地方，我认为在锈蚀中我找到了一种很好的方法

00:01:31.409 --> 00:01:36.689
使用它的泛型和内部代码，使内部颜色有点

00:01:36.689 --> 00:01:42.210
比较困难，但是从外部看，这只是类型的简单导出，因此您

00:01:42.210 --> 00:01:46.259
如果您需要做的话，甚至看不到通用名称

00:01:46.259 --> 00:01:49.829
像您想拥有自定义表的特殊功能，仍然有可能

00:01:49.829 --> 00:01:54.960
还有更多工作，但是的，仍然有可能，所以我必须打开PRS，他们

00:01:54.960 --> 00:01:59.490
仍然需要审核，这可能需要一些时间，因为它已经被审核

00:01:59.490 --> 00:02:03.859
来自外国团队的人，他们目前很忙，但是

00:02:03.859 --> 00:02:10.530
认为它将在本周或下周结束，然后我将继续致力于

00:02:10.530 --> 00:02:17.450
再次成为生锈的Blog API，应该会更容易

00:02:17.450 --> 00:02:22.400
然后我名单上的下一个是迈克尔

00:02:23.880 --> 00:02:33.490
是的，所以我上周整个病了，所以我做了很多改变，是的，因为我

00:02:33.490 --> 00:02:36.700
虽然我昨晚写了一些代码，但还是回到了秋千上

00:02:36.700 --> 00:02:42.760
有趣的新障碍，例如我看到一些奇怪的lambda节流

00:02:42.760 --> 00:02:50.710
我可以像数千个并发函数一样开始，但只有50个会

00:02:50.710 --> 00:02:56.350
真的很喜欢在一个奇怪的时刻完成，因为他们不是，他们只是

00:02:56.350 --> 00:03:02.020
停滞不前，我认为这是在s3中推送内容的右侧，但是

00:03:02.020 --> 00:03:05.380
然后我意识到这与它无关，实际上只是

00:03:05.380 --> 00:03:09.700
在没有数据存储卡的情况下为JavaScript创建汽车文件，因此我需要

00:03:09.700 --> 00:03:12.850
弄清楚那里发生了什么，并可能在某个时候与Radha同步

00:03:12.850 --> 00:03:18.180
弄清楚什么样的地雷会达到某种怪异的极限

00:03:18.180 --> 00:03:25.000
向数据存储库汽车库中编写了一项改进或功能以用于引入

00:03:25.000 --> 00:03:31.989
完整的图形，而不是将其转换为要导入的CR 2jsi BFS

00:03:31.989 --> 00:03:37.750
并导出汽车文件，然后我们将这种图形存储的东西

00:03:37.750 --> 00:03:42.700
讨论了一段时间，基本上是一个存储接口，可以跟踪

00:03:42.700 --> 00:03:46.350
并可以为您提供更多信息，而不仅仅是嘿，我是否拥有此阻止功能

00:03:46.350 --> 00:03:53.020
更像是您为我开始的所有这些添加整个图表吗

00:03:53.020 --> 00:03:58.000
在dag DB中完成原型，因为当我下沉到

00:03:58.000 --> 00:04:01.810
我周围的草丛不想遍历整个图形，而我最近

00:04:01.810 --> 00:04:06.790
选择的对象肯定取得了一些进展，我一直在内存原型工作中

00:04:06.790 --> 00:04:24.160
现在人们可以在生活中戳它，那就是我，也感谢下一个

00:04:24.160 --> 00:04:31.419
太多的东西无法报告，所以我终于找到了所有那些大的默里

00:04:31.419 --> 00:04:35.950
IPL d-prime回购中的因素，因此所有新接口

00:04:35.950 --> 00:04:39.520
他们自己的主人，在此之前我做了一个标签，以防万一有人

00:04:39.520 --> 00:04:44.860
不想解决这个问题，但我很兴奋，因为这些进展得更快，并且

00:04:44.860 --> 00:04:48.580
他们将是前进的好方法，甚至包括获得幻想

00:04:48.580 --> 00:04:53.290
罗伯建议的虚线语法会很好，所以您可以说不

00:04:53.290 --> 00:05:00.640
包名点样式点什么都可以，所以现在就这样

00:05:00.640 --> 00:05:06.670
清除了我重新开始使用代码生成的方式，我离开了旧的

00:05:06.670 --> 00:05:10.150
代码在后面运行进度，这称为汲取的教训，并做了

00:05:10.150 --> 00:05:15.880
干净的新板岩，这一次的速度要快得多

00:05:15.880 --> 00:05:19.470
吸取的教训，所以谢天谢地

00:05:19.620 --> 00:05:23.860
在第二遍获得了一些改善，以及

00:05:23.860 --> 00:05:27.970
所有现有的基础架构都可以在其中支持别名符号

00:05:27.970 --> 00:05:32.080
如果您遇到运动员碰撞问题，我将能够

00:05:32.080 --> 00:05:36.970
碰撞它们，这将能够获得整体所需的代码量

00:05:36.970 --> 00:05:42.790
特别是对于这个新系统中的价值组装者而言，

00:05:42.790 --> 00:05:47.800
虽然相当重要，但是像以前一样，这将是一段时间，但是大多数

00:05:47.800 --> 00:05:51.670
上次我在这个地区时遇到的障碍

00:05:51.670 --> 00:05:57.670
核心界面的更改使它们不再成为障碍，因此谢天谢地，

00:05:57.670 --> 00:06:03.160
我这周学到的其他有趣的东西可能是跨语言的兴趣

00:06:03.160 --> 00:06:08.890
不像我最近谈论的大多数事情

00:06:08.890 --> 00:06:14.380
重新启动选择器，我想这不是本周，但很大程度上要感谢

00:06:14.380 --> 00:06:18.760
给他围绕包导入和导出命令构建了很多很好的测试用例

00:06:18.760 --> 00:06:28.090
还有一些汽车用品我们发现有些数据拓扑

00:06:28.090 --> 00:06:34.260
用选择器查询根本没有意思

00:06:34.470 --> 00:06:40.300
因此，如果您认为选择器与结构化的reg X非常相似

00:06:40.300 --> 00:06:46.930
数据reg X是平面图reg X的性质是线性字符串的右部分是

00:06:46.930 --> 00:06:51.610
它取决于比赛之前的数据才能决定

00:06:51.610 --> 00:06:55.030
比赛在哪里等待，并在乡下人取决于数据

00:06:55.030 --> 00:06:59.710
以及之后，但有了选择器，我们只得到通向和的数据，因此

00:06:59.710 --> 00:07:04.300
有效地包括您到达某处的路径，而不仅仅是

00:07:04.300 --> 00:07:09.910
您到达的那一点的数据本身，所以这意味着选择器

00:07:09.910 --> 00:07:17.230
基本上需要扩展数据，我们可能会遇到这种情况

00:07:17.230 --> 00:07:23.350
看起来很像XML中的实体扩展攻击

00:07:23.350 --> 00:07:29.170
如果您将旧的有时被称为十亿韩元应用程序的攻击，

00:07:29.170 --> 00:07:34.210
有一个涉及几个节点的dag，然后分裂出来，然后

00:07:34.210 --> 00:07:40.090
这些节点中的每个节点都引用相同的子注释，然后可能重复此操作

00:07:40.090 --> 00:07:43.750
几次，当你在这棵树上某个地方落下时，数字

00:07:43.750 --> 00:07:48.550
您可以采用但仍到达同一节点的不同路径

00:07:48.550 --> 00:07:55.450
指数的，如果我们对选择器的定义是，您必须跟踪

00:07:55.450 --> 00:08:01.150
所有的路径，以决定您是否匹配这种东西

00:08:01.150 --> 00:08:07.540
受伤，所以我们发现情况确实如此，现在的问题有点好了

00:08:07.540 --> 00:08:12.250
好吧，我们该怎么办，我可能最终会做几个

00:08:12.250 --> 00:08:18.070
简单的事情，例如提供更多控制权以使用您的代码说“如果

00:08:18.070 --> 00:08:20.440
你正在做这件事中间的链接负载，你可以返回这个

00:08:20.440 --> 00:08:25.180
特别的我说跳过这不是一个错误，这只是一个跳过，这可能

00:08:25.180 --> 00:08:29.890
让我们走出困境，但这不是很完整的解决方案

00:08:29.890 --> 00:08:35.979
完整的解决方案，我不知道其中的一些几乎引起了疑问

00:08:35.979 --> 00:08:41.169
选择器的整个设计原理忽略了块边界，因为它是

00:08:41.169 --> 00:08:45.700
事实证明，解决此问题而忽略步行边界并不是

00:08:45.700 --> 00:08:53.020
最简单的事情另一个改进东西的机会可能会更复杂

00:08:53.020 --> 00:08:58.120
对我们去过的地方的记忆形式，例如cid的故事元组

00:08:58.120 --> 00:09:02.140
我们正在遍历的链接和我们将要回复的选择器

00:09:02.140 --> 00:09:08.140
并做一些非常聪明的记忆

00:09:08.140 --> 00:09:12.580
答案背后甚至还有很多更复杂的问题

00:09:12.580 --> 00:09:17.340
这不是您可以完全免费实施的东西，我认为是这样

00:09:17.340 --> 00:09:21.430
所以我们刚刚发现了问题空间，我们可以开始对其进行探测了

00:09:21.430 --> 00:09:26.650
猜想我们会看到有趣的地方

00:09:26.650 --> 00:09:30.970
api以及人体工程学应该如何特别发送

00:09:30.970 --> 00:09:39.900
我注意到了，这对我来说就是乔普林，只是想澄清一下，我的意思是你

00:09:39.900 --> 00:09:46.030
重新计算选择器以执行不同的算法，就像您做的一样

00:09:46.030 --> 00:09:50.590
深度优先与广度优先搜索，或者不像只有一个

00:09:50.590 --> 00:09:57.040
实际遍历图的规范方法，我们将选择器定义为

00:09:57.040 --> 00:10:01.390
深度优先部分是因为迭代加深深度优先搜索是其中之一

00:10:01.390 --> 00:10:08.140
我最喜欢的算法还可以，而且广度优先是更大的内存，因此

00:10:08.140 --> 00:10:12.210
深度优先，您基本上就拥有了

00:10:15.480 --> 00:10:20.530
但我不知道这是否真的很重要

00:10:20.530 --> 00:10:25.450
您到达那里所用的路径是您所使用的定义的一部分

00:10:25.450 --> 00:10:31.810
您的查询，然后您会达到此有问题的状态，因为

00:10:31.810 --> 00:10:35.830
有效地意味着您是在树上搜索，而不是在搜索时

00:10:35.830 --> 00:10:39.640
表示您正在将dag偷进一棵树中，这意味着您得到了

00:10:39.640 --> 00:10:46.450
指数扩展，因此我们的选择非常聪明或有所改变

00:10:46.450 --> 00:10:52.120
在定义的那部分，然后您会得到非常不同的东西，是的

00:10:52.120 --> 00:10:58.960
很好玩，是的，我的意思是现在我们默认为深度优先，因为那是我们的

00:10:58.960 --> 00:11:03.730
今天的确定性算法，我的意思是我们可能可以添加一个选项

00:11:03.730 --> 00:11:08.620
以后要更改它，然后它仍然是我的意思，因为该选项将

00:11:08.620 --> 00:11:11.800
在选择器中，我们仍然会有确定性选择器

00:11:11.800 --> 00:11:15.430
很好，但是我认为这不会改变这个问题，因为您可以

00:11:15.430 --> 00:11:19.420
仍然dag通常是重复的分支

00:11:19.420 --> 00:11:24.700
创建一个很大的dag非常便宜，因为

00:11:24.700 --> 00:11:34.210
穿越某些收藏家只是一项权利，我们实际上无法动员一切

00:11:34.210 --> 00:11:40.180
仅仅基于链接CID，您可能一开始可能会凭直觉想到

00:11:40.180 --> 00:11:45.640
瞥了一眼，但这是行不通的，因为如果您达到相同的水平，则很有可能

00:11:45.640 --> 00:11:51.250
选择器可能通过两个不同的路径匹配一个数据，但不匹配

00:11:51.250 --> 00:11:57.520
在另一个地方，是因为到达那里需要走的路，所以最

00:11:57.520 --> 00:12:04.020
你可以做的很明显的事情是不正确的，这是今年的结果

00:12:04.020 --> 00:12:08.470
是的，所以我们必须记住该块的选择标准和

00:12:08.470 --> 00:12:14.830
将ID一起屏蔽，是的，所以我认为这可能是

00:12:14.830 --> 00:12:23.760
最正确的答案，但编码出来也不是一件容易的事，所以超频

00:12:25.650 --> 00:12:35.230
酷，这是Chris大家好，所以在我表明我填写了模式编辑器之后

00:12:35.230 --> 00:12:41.320
上周我在github页面上发布了，所以现在您可以转到该链接并使用它

00:12:41.320 --> 00:12:46.900
这很酷，然后我调整了棱镜J的颜色语法

00:12:46.900 --> 00:12:54.910
突出显示规则以尝试展示作品我想你会怎么称呼它

00:12:54.910 --> 00:13:00.070
有多少更好的方法，然后是哈希图架构中的次要问题

00:13:00.070 --> 00:13:05.410
我认为Rod已解决，现在我的盘子上还没有任何东西，所以

00:13:05.410 --> 00:13:13.080
再次扩展Opera以帮助是这样

00:13:13.080 --> 00:13:24.200
该修复程序是否确实更改了架构？

00:13:24.200 --> 00:13:33.350
而且我想我知道这只是语法上的更改，例如，有些关键字可以

00:13:33.350 --> 00:13:35.930
甚至不是我真正的问题真正的问题就像

00:13:35.930 --> 00:13:43.820
更改组件，因为像每个人一样，包括他们在内，我和你

00:13:43.820 --> 00:13:49.010
几周前，当您触碰到它时，您对我发表了评论

00:13:49.010 --> 00:13:54.019
模式似乎与我正在生成的代码不同步

00:13:54.019 --> 00:13:57.560
不知道您是否仍然要坚持下去，但是听起来确实不错

00:13:57.560 --> 00:14:03.500
这对我来说是合理的，因为II确实将代码保留为变动状态，而我

00:14:03.500 --> 00:14:07.760
在做计划之类的东西，然后，我还没有完全同步

00:14:07.760 --> 00:14:11.480
如果我有感觉的话，我想还是需要重新审视一下

00:14:11.480 --> 00:14:16.850
确保所有内容都可以连接，但是，您知道这只是我们没有工具的可耻

00:14:16.850 --> 00:14:28.160
将该架构连接到代码，因此可以对该方案进行请求，并且感觉很随意

00:14:28.160 --> 00:14:33.860
以他们的方式发送给我，我可以看一下，您对此有印象吗

00:14:33.860 --> 00:14:41.390
获得类似JSON版本的并行痛苦很容易

00:14:41.390 --> 00:14:48.190
您应该不难知道，我实际上主要是一个UI界面问题

00:14:48.190 --> 00:14:52.250
你知道谁对我以一种明智的方式去做的想法

00:14:52.250 --> 00:14:56.660
也许我要按那种按钮在您知道一个窗格之间切换

00:14:56.660 --> 00:15:01.640
现在，然后是显示JSON的拆分窗格，但是这是我的主要主意

00:15:01.640 --> 00:15:05.449
我想知道的是我不确定如何在UI中明智地使用您，所以我知道

00:15:05.449 --> 00:15:10.670
之前是我的要求，但是那很有意义，我可以确定，但是杰森

00:15:10.670 --> 00:15:14.779
实际上非常大-所以就像您知道自己只是一点点

00:15:14.779 --> 00:15:18.860
在文档中，您将必须非常深入，JSON相当

00:15:18.860 --> 00:15:31.100
所以他们不喜欢并排，很容易

00:15:31.100 --> 00:15:36.350
好点，我不知道并排是否是我最好的用户体验

00:15:36.350 --> 00:15:39.370
就是说说下载JSON，他们可以

00:15:39.370 --> 00:15:43.540
下载它，但是也很少能看到它，然后您会得到

00:15:43.540 --> 00:15:47.320
对话或单独的页面，我不知道，所以埃斯特尔（Estelle）是我的主要障碍

00:15:47.320 --> 00:15:52.030
真正向前迈进的是最佳的用户体验，我认为也许是另一个选项卡

00:15:52.030 --> 00:15:57.850
类似于“预览”选项卡之类的权利，或者因为

00:15:57.850 --> 00:16:00.820
您可能不会在同一时间看到它，但是如果您确实想看到您，

00:16:00.820 --> 00:16:05.200
可以以这种方式接管，是的，这几乎是滚动同步

00:16:05.200 --> 00:16:10.000
否则，我会像某些编辑器一样知道我真的很喜欢hack MD编辑器

00:16:10.000 --> 00:16:13.930
在线，他们已同步在降价和

00:16:13.930 --> 00:16:28.630
我想我会考虑更多的渲染，我想我会

00:16:28.630 --> 00:16:33.730
只是有点懒，但我会找出一种解决方法，我什至可能只是

00:16:33.730 --> 00:16:38.380
做一些简单的事情，例如下载为JSON来完成它，但是我认为

00:16:38.380 --> 00:16:42.010
用户界面攻击也可能起作用，只是没有选项卡控件

00:16:42.010 --> 00:16:47.200
可以实现我自己的工具，但我可以找到一些可以肯定的东西

00:16:47.200 --> 00:16:52.780
对不起，我应该澄清一下，没有标签来控制快球，这就是我的目的

00:16:52.780 --> 00:16:57.700
被任命使用，所以我必须自己动手或找到一个视图，然后

00:16:57.700 --> 00:17:07.709
适应了他，所以我挖了交易，但接下来只是懒惰很酷，接下来的一些

00:17:07.709 --> 00:17:20.260
杆，所以对我来说是我自己的三个亮点，对我来说是最重要的。

00:17:20.260 --> 00:17:31.860
自我ipfs导出导入功能，该功能在我使用ipfs时就已经绑定了

00:17:31.860 --> 00:17:36.640
只是他声音很大，又是另一次迭代，所以

00:17:36.640 --> 00:17:41.710
我认为那边被拉成两个拉请求还没有完全落地

00:17:41.710 --> 00:17:45.520
还有一些讨论我不太了解他们的目标

00:17:45.520 --> 00:17:50.170
导入但有一些他们正在努力实现的目标

00:17:50.170 --> 00:17:53.890
带有用于真正快速输入的进口，我不知道

00:17:53.890 --> 00:17:57.190
dagger是他们一直在使用这个叫做dagger的项目的词

00:17:57.190 --> 00:18:04.600
非常快地扔掉积木，所以它们的导出是到汽车文件中

00:18:04.600 --> 00:18:10.090
格式正确的汽车文件，您知道的选择实际上是使用选择器

00:18:10.090 --> 00:18:16.960
汉娜（Hannah）的选择方式是选择汽车和IPL d-prime选择器

00:18:16.960 --> 00:18:22.030
现在基本上只是一个全选择器，但是它已经到位，因此它可以

00:18:22.030 --> 00:18:25.330
使用一个非常好的选择器，我可以想象一个命令

00:18:25.330 --> 00:18:32.110
您将说要导出CID，然后使用Tim的选择速记的行

00:18:32.110 --> 00:18:36.700
利用图表，他们将非常酷，但是现在只是CID和

00:18:36.700 --> 00:18:44.230
然后就可以进行图形导入了，就是他们只是在做这个事情

00:18:44.230 --> 00:18:51.190
基本上会导入它能找到的任何东西，所以它将接受一辆格式不正确的汽车，因此您

00:18:51.190 --> 00:18:55.780
即使他们甚至不想做，也知道路线并不存在于事物中

00:18:55.780 --> 00:18:59.380
路线，但前往法戈（Fargo）的车子却没有

00:18:59.380 --> 00:19:03.370
支持那个，但是有一些像他们想要做到的那样的东西

00:19:03.370 --> 00:19:06.370
真的很灵活，所以它很恶心，除了几乎所有看起来像

00:19:06.370 --> 00:19:09.670
块列表，所以我不太了解他们试图实现什么

00:19:09.670 --> 00:19:16.480
在那里，但是是的，我为JC ipfs制作了JavaScript版本

00:19:16.480 --> 00:19:22.840
它大致反映了所发生的情况，并采用了相同的ipfs风格，但是哦

00:19:22.840 --> 00:19:26.950
没有测试，我想等到所有固定装置和所有东西

00:19:26.950 --> 00:19:30.550
可以完成任务，但是在我输入ipfs之前，我认为我没有听说过

00:19:30.550 --> 00:19:35.230
从那开始，JSI PFS员工是否愿意接受它，因为我

00:19:35.230 --> 00:19:41.890
我知道在增加JSI PFS的重量之前有些犹豫，所以我

00:19:41.890 --> 00:19:45.880
有点像他们的信号，然后我花了更多的时间在上面，但是它

00:19:45.880 --> 00:19:54.940
很高兴看到从像这样的任意图形创建的汽车文件，我将其拉出

00:19:54.940 --> 00:20:00.300
从ipfs中提取IP有效出口网络图表，对我来说，将其粘贴在汽车文件中

00:20:00.300 --> 00:20:04.740
那很整洁，所以我喜欢这个功能

00:20:04.740 --> 00:20:08.530
很多原因，但它也在行使我们一直在努力的代码

00:20:08.530 --> 00:20:16.840
对，对不起，我希望我们不能做任何事

00:20:16.840 --> 00:20:20.950
将其添加到FS中，因为它已添加到命令行中，因此

00:20:20.950 --> 00:20:25.600
不会捆绑在一起，所以我不知道反对是什么样的添加

00:20:25.600 --> 00:20:30.640
体重很好，我的意思是我只是想听听你的评论

00:20:30.640 --> 00:20:34.930
原始问题，您可以公开发言，是的，我认为那是我认为

00:20:34.930 --> 00:20:39.850
通常是关于浏览器的问题，所以我认为我认为是您的

00:20:39.850 --> 00:20:45.190
应该分享到我的意思是，如果它们是在NPM安装中添加的

00:20:45.190 --> 00:20:48.850
大小就像来一样像已经安装了演出一样依赖

00:20:48.850 --> 00:20:54.190
就像这样，这就像是舍入错误，是的，我想也是

00:20:54.190 --> 00:20:58.750
那可能是在我们真正准备好所有汽车文件之前

00:20:58.750 --> 00:21:01.720
JavaScript，所以他们可能以为这会添加一个

00:21:01.720 --> 00:21:06.550
J J的ipfs的复杂性要高得多，但是一旦您使用库实现了它

00:21:06.550 --> 00:21:11.680
我们现在就好像是一段代码页面，这是不正确的，不是真的

00:21:11.680 --> 00:21:17.590
那真的是Dean以及能够做到的事，真是太好了

00:21:17.590 --> 00:21:29.020
少量的代码中如此复杂的事情，是的，这很整洁，我一直在

00:21:29.020 --> 00:21:38.980
出于存档目的，跳入一些区块链的东西，到目前为止，我正在寻找

00:21:38.980 --> 00:21:45.940
在比特币和Z缓存中，我知道Z缓存比比特币更好，尽管

00:21:45.940 --> 00:21:52.320
这真的像比特币加上加号，但是这让我意识到

00:21:52.320 --> 00:21:57.010
我们特别关注的类似IP LD库的不完整性

00:21:57.010 --> 00:22:00.640
JavaScript与我们没有去过的不匹配，

00:22:00.640 --> 00:22:08.830
我还没有完全了解可能出现的情况，所以我正在寻找

00:22:08.830 --> 00:22:14.950
关于我应该投资多少钱来清理那些图书馆的时刻，我认为

00:22:14.950 --> 00:22:19.840
事情做得很好甚至就座也很好

00:22:19.840 --> 00:22:24.880
并将事物放到ipfs上的网络上，以便资源管理器可以显示IPL

00:22:24.880 --> 00:22:29.470
这些很好，就像IPF essex i PFF IPL一样，真的很酷

00:22:29.470 --> 00:22:36.130
就像他们用来检查这些区块的那些区块浏览器之一

00:22:36.130 --> 00:22:42.070
这些区块链，但当然存在的问题是要确保

00:22:42.070 --> 00:22:46.480
网络充满了所有的块，但可能不是

00:22:46.480 --> 00:22:51.850
我想报名参加，因为您知道但无论如何都需要探索，因为

00:22:51.850 --> 00:22:57.399
有趣的数据，并且对这些数据的需求也很大

00:22:57.399 --> 00:23:04.270
人们经常使用它，所以对我们来说，能够建立更多连接可能是件好事

00:23:04.270 --> 00:23:08.520
并对其更有用

00:23:09.149 --> 00:23:15.880
所以那是我的主要事情，是的，我必须添加到Travis组比特币中

00:23:15.880 --> 00:23:20.230
和Zeke在这里的东西，因为这是我第一次写它们的时候

00:23:20.230 --> 00:23:25.390
拥有协议应用程序，因此基本上可以随意将其全部删除

00:23:25.390 --> 00:23:30.039
那时真是太棒了，那时我对区块链一无所知，我对

00:23:30.039 --> 00:23:35.830
JavaScript历经8年之久或如此之快

00:23:35.830 --> 00:23:40.630
完全重写它们，写点东西，是的，不，我做了

00:23:40.630 --> 00:23:44.950
并不是那么糟糕，只是他们喜欢它，所以有一个陷阱

00:23:44.950 --> 00:23:49.870
那些还不错，我想，因为我可以接受您的一些工作，

00:23:49.870 --> 00:23:52.240
有助于我认为我们到了一个更好的地方

00:23:52.240 --> 00:23:56.620
是的，比特币丢失了一笔交易，但除此之外

00:23:56.620 --> 00:24:00.669
它与go IPA首先非常相似，因为它在库之间

00:24:00.669 --> 00:24:05.049
是的，你们晚上很忙，这是我所做的，因为就像我只知道我知道

00:24:05.049 --> 00:24:09.460
在那件事上，所以我把它继续下去，然后随便做什么

00:24:09.460 --> 00:24:14.440
希望这是正确的，是的，这也是我感觉到的原因之一

00:24:14.440 --> 00:24:18.399
对此充满热情的是，我对这些区块链还不够了解，

00:24:18.399 --> 00:24:23.230
我不断遇到这些情况，在这些情况下，您知道我听到了这些声音

00:24:23.230 --> 00:24:28.120
来自这些社区，我不明白他们的想法

00:24:28.120 --> 00:24:32.100
关于事情的不同方式，我想更好地理解

00:24:32.100 --> 00:24:39.280
所以开车多一点，我认为这是社交学习经验，看到现金

00:24:39.280 --> 00:24:44.950
据我所知，解析的事情你也可以做一个比特币

00:24:44.950 --> 00:24:49.690
因为就像我正在使用的比特币JavaScript库一样

00:24:49.690 --> 00:24:54.640
我能找到的最好的代码，但是它巨大，就像是疯狂的代码量，所以我有

00:24:54.640 --> 00:24:59.920
不知道为什么它这么大，以防万一，如果你得出结论

00:24:59.920 --> 00:25:04.210
最好基本上将您的搜寻边缘分叉并使其成为比特币

00:25:04.210 --> 00:25:09.640
可能是对的，我认为这只是他妈的一个现金的情况，

00:25:09.640 --> 00:25:14.200
删除一些东西，它可能只会工作，因为是的，是的

00:25:14.200 --> 00:25:17.740
我在想那个，我会看的，因为我想得到

00:25:17.740 --> 00:25:20.560
在那里的交易，很高兴能够制作ID和

00:25:20.560 --> 00:25:27.430
对他们来说，一切都打开了两年左右，好吧，是的，所以

00:25:27.430 --> 00:25:30.910
太好了，是的，好吧，我可能很快就会知道的，然后我再次

00:25:30.910 --> 00:25:36.430
是因为这个是的，是的，很酷，所以你知道我是什么东西。

00:25:36.430 --> 00:25:43.780
这样做不是存储块，因为我将IP LD插件轻松插入54

00:25:43.780 --> 00:25:48.820
现金，是的，甚至以太坊都不再维护了，所以我实际上

00:25:48.820 --> 00:25:55.090
一直在使用JSON RPC并存储IP LD的问题是

00:25:55.090 --> 00:25:58.450
我不知道如果您实际使用编解码器，是否真的喜欢编解码器

00:25:58.450 --> 00:26:07.420
这是Seaboard JSON，但这是一个像这样的以太坊交易

00:26:07.420 --> 00:26:14.440
一种实际上只是对其进行编码的方法，是的，我想具有匹配的C ID

00:26:14.440 --> 00:26:18.580
过去我们一直在做这些事情的方式是挑战，所以

00:26:18.580 --> 00:26:23.710
块匹配您可以解码的CID，因为这是您应该使用的ID

00:26:23.710 --> 00:26:28.180
能够检查以查看ID进入多重哈希并获取实际块

00:26:28.180 --> 00:26:32.890
他们在网络上使用的标识符相同，这就是我的身份

00:26:32.890 --> 00:26:37.270
想得到我想看到陷阱我有点我有点

00:26:37.270 --> 00:26:41.560
我被以太威吓了一下，我知道那里有些复杂性，我不是

00:26:41.560 --> 00:26:43.630
不特别期待，我只是

00:26:43.630 --> 00:26:47.170
对以太网的了解也足够多，可以对此发表评论，但是我有点

00:26:47.170 --> 00:26:56.260
怕好吧，请使用kcal编解码器检查您的待处理问题，是的，主要问题

00:26:56.260 --> 00:26:59.830
与以太之类的东西是否就像您需要遍历的上下文一样

00:26:59.830 --> 00:27:03.760
等等，我们在寻址格式中没有，所以这就是为什么

00:27:03.760 --> 00:27:07.450
还有其他所有编解码器，因为这些代码基本上是标识符

00:27:07.450 --> 00:27:21.220
再次联系我，我认为我们的方式也有一些不同

00:27:21.220 --> 00:27:26.110
我们用C来解决问题是您知道这意味着要包含一个

00:27:26.110 --> 00:27:31.060
区块的哈希，但我认为对于所有这些区块链的交易

00:27:31.060 --> 00:27:37.360
块的交易部分使用默克尔根而不是这个

00:27:37.360 --> 00:27:42.790
部分哈希，因此我们进行CID的方式请不要完全匹配交易

00:27:42.790 --> 00:27:50.200
标识符对我来说似乎有点问题，我也很想

00:27:50.200 --> 00:27:55.450
理解的是为什么我们曾经保留过一个建议，即CID应该

00:27:55.450 --> 00:27:59.440
也有古怪的地方，而不是做完整的哈希，他们可以像

00:27:59.440 --> 00:28:06.430
您知道的默克尔根和样式哈希，而不是完整的块，否，

00:28:06.430 --> 00:28:15.730
有一个线程，链接应该能够包含pops，所以您

00:28:15.730 --> 00:28:19.780
应该能够直接链接到子属性，因此您基本上可以

00:28:19.780 --> 00:28:26.110
就像CID包对一样，是的，是的，我吐了，区别是

00:28:26.110 --> 00:28:31.960
因此，使用比特币区块标头，您可以获取CID并提取

00:28:31.960 --> 00:28:39.850
来自CID本身的原始数据块ID，因为它只是两次淋浴256或

00:28:39.850 --> 00:28:45.220
不管它是什么，所以它是块的直双哈希，我们有一个

00:28:45.220 --> 00:28:50.740
在多个散列中使用双散列，这样很好，您可以输入CID，然后您就可以

00:28:50.740 --> 00:28:54.610
你可以提取出来然后为你做相反的事情吗

00:28:54.610 --> 00:28:57.120
知道大端，并将其粘贴到一个大块的探索中，

00:28:57.120 --> 00:29:02.190
敢打赌，就我所知，您不能做相同的事情，因为

00:29:02.190 --> 00:29:07.380
当区块链接到其交易时，其链接到默克尔路线而不是

00:29:07.380 --> 00:29:13.230
区块的整个交易部分的哈希值，因此我们制作的C ID

00:29:13.230 --> 00:29:18.480
据我所知，与交易部分之间没有任何关系

00:29:18.480 --> 00:29:23.070
我的意思是说还可以，因为如果您进行交易

00:29:23.070 --> 00:29:28.200
你知道这是一个交易块你知道它的长度不是

00:29:28.200 --> 00:29:30.900
实际上直接指向交易，它为您提供整体

00:29:30.900 --> 00:29:33.750
路线的背景信息，但您知道如何从那里到达路线

00:29:33.750 --> 00:29:42.690
无论如何，交易还是这样，无论如何，我在这里我所掌握的知识并不多

00:29:42.690 --> 00:29:48.540
所以我可能应该停下来再等一会儿，这很有趣

00:29:48.540 --> 00:29:53.580
无论如何工作都是很好的教育，所以我很喜欢在这个特殊的地方

00:29:53.580 --> 00:29:56.970
现在，我不会想要继续做下去，因为我并不兴奋

00:29:56.970 --> 00:30:05.929
我很多我们没有交易

00:30:19.460 --> 00:30:26.100
是的，我正在工作，所以我正在工作IP ID，所以星际标识符是

00:30:26.100 --> 00:30:31.200
方法基本上在元数据中发布了加密密钥材料

00:30:31.200 --> 00:30:37.860
以IP LD的形式访问IP NS，我一直在研究如何为Lee加密

00:30:37.860 --> 00:30:43.320
迹象表明使用本地C Boris，所以我链接了我为

00:30:43.320 --> 00:30:46.620
重新启动或我本应该在两个星期前才在阿根廷的信任

00:30:46.620 --> 00:30:50.280
被取消了，协议实验室足够支付我的旅行费用，但实际上我

00:30:50.280 --> 00:30:55.140
必须取消它，因为那是全球性的流行病，真是令人讨厌

00:30:55.140 --> 00:30:58.620
但是，如果您有机会阅读我的论文，我留下了一些反馈意见

00:30:58.620 --> 00:31:06.360
除了允许标记98之外，还提到了几个github问题

00:31:06.360 --> 00:31:10.940
48:42因为实际上我可以做本地人

00:31:10.940 --> 00:31:18.700
使用标签98 4在C孔中签名，标签98 4带有指向IP LD标签的有效载荷

00:31:18.700 --> 00:31:25.970
4842，然后我认为这可以让我将所有内容保留在C内，而不是

00:31:25.970 --> 00:31:32.870
试图在IPL D中进行表示COE或Jose签名的表示，如此等等

00:31:32.870 --> 00:31:38.150
这更多的是IANA的模仿类型表示，还有

00:31:38.150 --> 00:31:45.410
我在应用程序/ c方面遇到的另一个github问题

00:31:45.410 --> 00:31:53.750
IPL D，所以基本上这是用C孔编码的严格IPL D，还有IPL D

00:31:53.750 --> 00:32:02.000
加JSON，我想迈克尔您问过我加号是什么意思

00:32:02.000 --> 00:32:07.070
加号的意思是，你基本上是一个约束类型，就像你有

00:32:07.070 --> 00:32:12.890
应用程序JSON，然后您实际上我可以拥有应用程序JSON + LD

00:32:12.890 --> 00:32:16.850
意味着链接数据，所以您基本上是Jason，但约束更严格

00:32:16.850 --> 00:32:20.600
Jason的版本，即Jason LD，这里适用的是

00:32:20.600 --> 00:32:27.380
Sita C加上IP IP LD意味着这是规范的

00:32:27.380 --> 00:32:41.150
以本机格式表示，但它代表我深入研究的IP LD对象

00:32:41.150 --> 00:32:44.600
这一点，因为还有另外一个关于添加编解码器的线程

00:32:44.600 --> 00:32:49.700
余弦，就这个问题说，它有点加热了，

00:32:49.700 --> 00:32:53.090
实际上，我认为Tech的办公室对我们感兴趣的是

00:32:53.090 --> 00:32:56.570
在那里做，但是我的意思是最明显的事情就是

00:32:56.570 --> 00:33:01.070
能够穿越有效载荷，因此它实际上就像将解码

00:33:01.070 --> 00:33:06.440
付款铜留置权，当您希望它突然爆发时，是的，我们正在寻找

00:33:06.440 --> 00:33:09.110
现在如何建立一个诊所，我只想确保

00:33:09.110 --> 00:33:11.840
没有什么比我们在这里要做的冲突更像冲突了

00:33:11.840 --> 00:33:16.280
您在这里要做的所有事情，我们应该是的，唯一的事情是

00:33:16.280 --> 00:33:23.990
实际上在严格的IP LD中，它会忽略标签42之外的所有内容，因此不会

00:33:23.990 --> 00:33:26.900
允许标签9，所以我认为这是我的困境

00:33:26.900 --> 00:33:33.710
是它不再是IPL D严格IPL D，因为严格IPL D会忽略

00:33:33.710 --> 00:33:37.970
除了向北的标签42以外，其他所有内容都比确定性好，这就是

00:33:37.970 --> 00:33:44.270
大C特别是我的出租车bori，对不起，是的，IC男孩，是的，

00:33:44.270 --> 00:33:49.640
因此，如果我们本身添加鸡蛋，我们只需为该标签添加足够的鸡蛋，我仍然

00:33:49.640 --> 00:33:56.780
知道其他时间还可以，所以这是一个很好的折衷，实际上是

00:33:56.780 --> 00:34:04.070
允许选择一个编解码器加上C孔，然后允许将标签98合二为一

00:34:04.070 --> 00:34:09.890
案例和42案例，我都很好，是的，所以这不是诊所

00:34:09.890 --> 00:34:14.360
不会，因为它们将是哥萨克（Dag Cossack），所以就好像不是角度dex电子邮件

00:34:14.360 --> 00:34:22.520
再加上任何机翼，其中包括有效载荷解码a，所以有一个

00:34:22.520 --> 00:34:26.110
重新启动信任的底部的示例，该信任实际上写在

00:34:26.110 --> 00:34:33.650
CD DL表示，因此基本上是标签98，其中有效负载指向标签

00:34:33.650 --> 00:34:40.429
我认为40年代的CID是谁，也应该是真实的签名

00:34:40.429 --> 00:34:44.120
我确实经历了实际验证以确保这一点的痛苦

00:34:44.120 --> 00:34:47.020
在工作

00:34:51.159 --> 00:34:56.570
这很有趣，因此有效载荷始终是林肯，是的，所以

00:34:56.570 --> 00:35:02.540
在这种情况下，它是一个舒适的签名标签98，但格式为

00:35:02.540 --> 00:35:13.810
有效负载是CID标签42哦，所以您只是在签名链接而未在签名

00:35:13.810 --> 00:35:21.260
正确，是的，但是它告诉您这是一种EDD算法

00:35:21.260 --> 00:35:28.820
减7，即如果您查看注释，则表示EDD SI 256，即

00:35:28.820 --> 00:35:36.830
我认为在CID中是多余的，但实际上它的格式正确

00:35:36.830 --> 00:35:40.910
这里的有效负载实际上是您签名的一团糟，实际上是这个标签

00:35:40.910 --> 00:35:45.650
42 CID至少为

00:35:45.650 --> 00:35:50.780
CID表示什么，对不起，是的，是的，是的，是的，二进制

00:35:50.780 --> 00:35:57.770
CID权限的表示形式，当它执行时会忽略标签信息

00:35:57.770 --> 00:36:07.040
正确的签名，是的，好的，有趣的，是的，我想我只是在考虑

00:36:07.040 --> 00:36:10.160
一点点，我的意思是这里的限制是你可以

00:36:10.160 --> 00:36:13.490
无法内联有效负载驱动程序，因此每个块都将是两个

00:36:13.490 --> 00:36:25.630
块中将包含签名，这是我认为可能是一种有趣的方法

00:36:26.109 --> 00:36:31.160
好吧，是的，这很棒，我会考虑很多事情，谢谢

00:36:31.160 --> 00:36:43.760
不错，但是现在您还有其他开放的事情，您想知道这场危机吧，哦，不

00:36:43.760 --> 00:36:47.380
停止录制后，我将与您再分享一件事，是的，很酷

00:36:47.380 --> 00:36:55.430
好吧，如果还有其他事情，那就再见大家，再见

00:36:55.430 --> 00:37:00.250
直播，我们下周见

00:37:00.680 --> 00:37:04.540
[音乐]

