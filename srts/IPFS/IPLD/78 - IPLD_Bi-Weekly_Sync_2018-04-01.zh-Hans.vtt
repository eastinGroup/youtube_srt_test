WEBVTT
Kind: captions
Language: zh-Hans

00:00:01.790 --> 00:00:12.410
欢迎大家参加2019年4月1日本周同步会议的IP

00:00:12.410 --> 00:00:25.740
首先，我们需要记笔记者，任何志愿者都要感谢Rod和任何人

00:00:25.740 --> 00:00:32.070
否则，请将您的名字放在参加者名单上的水手宠物上，我们就可以

00:00:32.070 --> 00:00:42.719
开始吧，是的，没有太多议程，但让我们从

00:00:42.719 --> 00:00:51.360
两周的更新我的更新很短，仅在会议记录中

00:00:51.360 --> 00:00:56.640
有很多联系，但是我基本上所做的是终于有了新的嫉妒心

00:00:56.640 --> 00:01:04.409
IP AP j SI p LD api合并并发布，然后我们进行了

00:01:04.409 --> 00:01:13.350
关于JavaScript API的许多讨论仍在进行中，是的

00:01:13.350 --> 00:01:18.290
这基本上是当前一代之后的一代，我们将看看这是怎么回事

00:01:18.290 --> 00:01:25.439
然后点击那里的链接，接下来的三周我将

00:01:25.439 --> 00:01:31.229
可能会再次处理该格式的IP LD格式内容，从而基本上

00:01:31.229 --> 00:01:36.180
实施优秀的仿制国外草案，以便

00:01:36.180 --> 00:01:45.210
喜欢混合FS的消费者最终可以使用sync删除API附件了

00:01:45.210 --> 00:01:49.259
基本上要求它什么时候终于完成，希望是的，我们有

00:01:49.259 --> 00:02:01.799
很快，这就是我接下来要说的，我的名单是Michael hey，所以我有几个

00:02:01.799 --> 00:02:06.360
像是要更新的东西的项目，然后是一些我们将要拥有的东西

00:02:06.360 --> 00:02:10.140
讨论，所以我将把一些讨论推迟到以后，但

00:02:10.140 --> 00:02:14.659
提一下，真正的快速一点就是，大事就像是大学

00:02:14.659 --> 00:02:19.769
草稿已更新为最新规格，不是吗？

00:02:19.769 --> 00:02:24.950
只是一种刺激，直到下一次IPO首次公开发行时

00:02:24.950 --> 00:02:28.260
完成将其更新为真正的更新会有点困难

00:02:28.260 --> 00:02:32.910
不可知，但现在它确实起作用，就像不可知路径一样

00:02:32.910 --> 00:02:38.000
而且它几乎具有完整的代码覆盖范围，现在只需要实际执行几行

00:02:38.000 --> 00:02:47.220
所以文档准备在柏林的峰会上，我在闲散的房间里把他们送出去了

00:02:47.220 --> 00:02:52.109
但是如果您还没有得到这些，请让我知道，我会确保您

00:02:52.109 --> 00:02:56.340
添加到他们或给了链接或您需要的任何东西，但他们有三个

00:02:56.340 --> 00:02:59.849
其中的细节有点像前两天，然后是最后两天

00:02:59.849 --> 00:03:03.870
过去两天在柏林的日子，我们将再开放一点

00:03:03.870 --> 00:03:06.540
并邀请更多人参加，这就是为什么我们有单独的文件

00:03:06.540 --> 00:03:09.829
可以邀请人们去那些狗

00:03:09.890 --> 00:03:14.370
每当稍后关于dag JSON的讨论以及我认为我们的一些决定时，

00:03:14.370 --> 00:03:18.900
需要做出来的，因为它们会影响到这种效果，例如内联阻止的东西想谈一谈

00:03:18.900 --> 00:03:23.130
一点点，也谈论这个身份多哈希的事情，我

00:03:23.130 --> 00:03:27.989
不知道存在，我不知道是否有人知道存在，但我们需要

00:03:27.989 --> 00:03:32.220
考虑到那显然是我不知道的事情

00:03:32.220 --> 00:03:43.860
关于，就是Eric我在测试用例中使用了决明子，因为

00:03:43.860 --> 00:03:50.040
他们真的很有帮助，是的，是的，我想，一旦我

00:03:50.040 --> 00:03:54.450
意识到他们存在的问题是像我们所有的Traverse错误一样

00:03:54.450 --> 00:03:57.599
假设如果CID是对您开箱即用的东西的引用

00:03:57.599 --> 00:04:02.400
还是不像CID那样将数据包含在其中

00:04:02.400 --> 00:04:15.030
多点触控，所以我认为像我们一样，我们可能需要考虑

00:04:15.030 --> 00:04:32.280
关于这一点，所以在手套的遍历包装中，主要的东西和一些

00:04:32.280 --> 00:04:41.250
如果您要执行的函数需要一个

00:04:41.250 --> 00:04:47.160
请注意和路径，并为您提供一些对您起作用的回调

00:04:47.160 --> 00:04:53.669
现在，该功能已完全实现并且可以正常使用，并且与任何链接无关

00:04:53.669 --> 00:04:58.740
在那条路的中间，这真的很酷，可以让我们做一些

00:04:58.740 --> 00:05:04.740
我认为从来没有得到过支持的东西

00:05:04.740 --> 00:05:08.130
在路径中间改变事物，这将需要更多的蓝色

00:05:08.130 --> 00:05:11.610
问我的大衣是对的，但是它让你像出现在任何事物中一样

00:05:11.610 --> 00:05:17.849
做一些AB操做的事，这真的很酷

00:05:17.849 --> 00:05:21.570
现在已经有了测试用例，并且已经证明了一大堆

00:05:21.570 --> 00:05:26.820
他们的代码和我做的D素数，这基本上以前没有经过测试

00:05:26.820 --> 00:05:32.430
因此，对一堆这类东西进行更细粒度的测试将是非常受欢迎的，但是

00:05:32.430 --> 00:05:40.830
一些非常高级的集成测试现在就像工作一样，这就是

00:05:40.830 --> 00:05:44.760
对不起的意义专注这个词的意义是什么

00:05:44.760 --> 00:05:52.200
东西，这是我编造的一个词，这意味着我们被赋予了一些节点并赋予了

00:05:52.200 --> 00:05:57.870
一些路径或类似一系列路径段的路径，每个

00:05:57.870 --> 00:06:01.740
他们是您可能要进行的一次特定跳跃，所以我可以获得一张地图，

00:06:01.740 --> 00:06:05.430
您会立即获得一个关键索引，这是更多的通过列表，我们已经有了一个

00:06:05.430 --> 00:06:09.569
以路径段为增量的整数索引，依此类推

00:06:09.569 --> 00:06:12.389
您已经给了一个节点，该节点仅具有类似的跃点路径，您可以到达

00:06:12.389 --> 00:06:18.780
另一个节点，这样您就可以给我一个注释，一个路径和一个回调，我将

00:06:18.780 --> 00:06:26.569
用该映射调用回调，这样它就可以让您做这种只读的操作

00:06:26.569 --> 00:06:35.639
以非常通用的方式对某些图形进行检验，因此我们接下来要做的是

00:06:35.639 --> 00:06:41.190
然后采取这种非常具体的实施方式，然后将其用于

00:06:41.190 --> 00:06:48.180
非常通用的事物，例如遍历，像

00:06:48.180 --> 00:06:52.560
在bash或午餐中完成水龙头，然后结束某物，然后

00:06:52.560 --> 00:06:58.469
按下回车键，我们希望现在有电影，以便选择您的实现

00:06:58.469 --> 00:07:04.979
我们在bash中有一个像点斜线星一样的限制，然后发生了一些事情

00:07:04.979 --> 00:07:11.460
或点斜线明星，这样有点棘手，但这会很好

00:07:11.460 --> 00:07:19.009
如果我们这样做的话，那么现在我就这样我现在在家尝试制作遍历点

00:07:19.009 --> 00:07:27.120
遍历或类似的东西做正确的事，所以真的很高兴

00:07:27.120 --> 00:07:32.490
在那里有焦点实现，所以它显示了复杂性的深度

00:07:32.490 --> 00:07:37.500
是，我们将进入并跳入树中，现在可能会有

00:07:37.500 --> 00:07:41.819
我正在尝试使这些东西通常适用于选择器

00:07:41.819 --> 00:07:47.610
树木的一部分真的很有趣，我开始尝试工作

00:07:47.610 --> 00:07:53.520
在这个星期，也许你约束自己说这是真的

00:07:53.520 --> 00:08:04.469
有趣，是的，这真的很有趣，例如，我开始关注

00:08:04.469 --> 00:08:10.260
与某些最通用的bash代码最接近的bash代码

00:08:10.260 --> 00:08:16.050
我们想从这个社交系统询问的事情，我不确定是否

00:08:16.050 --> 00:08:20.520
如果其他人对房间很熟悉，那么在混搭中可以像doc斜线明星一样

00:08:20.520 --> 00:08:29.250
它将匹配星星所在的一件事，然后匹配通常

00:08:29.250 --> 00:08:35.390
例如将人们转换为Z SH但也存在于bash中，这被称为俱乐部明星

00:08:35.390 --> 00:08:46.020
因此，它是u点斜线星形，然后匹配，它将递归起作用，并且

00:08:46.020 --> 00:08:49.920
这是一种有趣的功能，因为如果您单独使用它，

00:08:49.920 --> 00:08:55.620
很明显，它的作用以及是否将其与其他斑点或其他模式一起使用

00:08:55.620 --> 00:09:05.339
同一条命令中的匹配变得非常有趣，所以我开始工作

00:09:05.339 --> 00:09:09.330
在本周遍历遍历和选择器的尝试中，

00:09:09.330 --> 00:09:14.220
我有退回地毯的地方，我不知道我会努力写出更好的记录

00:09:14.220 --> 00:09:22.560
这基本上是一堆东西，如果你想传播

00:09:22.560 --> 00:09:27.000
这件事的默克尔证明，那么您将需要进行预购

00:09:27.000 --> 00:09:36.960
遍历，如果您想做lob star或star start则可以逆转它们的运气

00:09:36.960 --> 00:09:47.040
调和这是我本周发现很酷的时候

00:09:47.040 --> 00:09:57.750
我们从Rod yeah那里进行了更新，非常高兴实现了地图，

00:09:57.750 --> 00:10:04.140
这是一个非常好的我想这是IPL中数据结构的一个非常好的介绍

00:10:04.140 --> 00:10:09.330
迪亚兹（Diaz），在我看来，他们跳到不同种类的收藏中并不是

00:10:09.330 --> 00:10:14.490
一旦我们有了基本的收藏，那就太好了，所以我已经做了任何

00:10:14.490 --> 00:10:22.230
我已经在JavaScript中完成了汉普特实现，这是一个冠军的变种，

00:10:22.230 --> 00:10:28.110
各种工具的周围漂浮着一对，这是一个

00:10:28.110 --> 00:10:35.250
有点像现在的那种，让我们一起努力吧，我

00:10:35.250 --> 00:10:42.420
认为它被称为，但是我的意思是这不遵循任何特定的规范，并且

00:10:42.420 --> 00:10:47.850
它在某些区域有点松散，所以有点类似，但是

00:10:47.850 --> 00:10:56.690
不完全是，它与伊恩（Ian）的码头阵风中的那个更接近

00:10:56.690 --> 00:11:02.580
无论如何，所以我已经对其进行了建模，因此感觉就像是JavaScript映射，但是

00:11:02.580 --> 00:11:08.220
异步且不可变，因此我们操作的每一个突变都会产生

00:11:08.220 --> 00:11:16.020
一个新节点，然后您需要对其进行序列化或继续操作

00:11:16.020 --> 00:11:21.720
变异，效果很好

00:11:21.720 --> 00:11:28.410
我目前无法获得覆盖奇怪边缘情况的测试的机会

00:11:28.410 --> 00:11:34.530
压实，所以您要确保树的不同形式

00:11:34.530 --> 00:11:39.870
当您删除正确压缩的节点时，会有很多不同的结果

00:11:39.870 --> 00:11:44.250
可以形成它们的方式有一些特殊情况，所以我试图

00:11:44.250 --> 00:11:48.390
以这些方式形成树的测试用例，然后将其压缩到

00:11:48.390 --> 00:11:52.590
正确的方法只是为了证明它有效，并且在这样做时我发现了一些问题

00:11:52.590 --> 00:11:59.160
在我的算法中，因此进展顺利，确实提高了

00:11:59.160 --> 00:12:02.790
我希望通过一些有趣的问题来解决这个问题

00:12:02.790 --> 00:12:07.650
接下来的几天，以便我们可以开始进行这些讨论，因为我

00:12:07.650 --> 00:12:13.230
认为它们真的很有趣，所以像最终序列化的东西

00:12:13.230 --> 00:12:17.010
这些数据结构的形式，我知道需要一些帮助

00:12:17.010 --> 00:12:21.950
从你们那些已经序列化馅料的人那里看到的球比我更多

00:12:21.950 --> 00:12:28.770
你知道II只是一种天真的序列化实现，但是它

00:12:28.770 --> 00:12:32.850
他们可能会占用比所需空间更多的空间，这是什么原因

00:12:32.850 --> 00:12:38.100
最佳分支因子串联时的最佳铲斗尺寸与

00:12:38.100 --> 00:12:43.560
链接条目存储最好，我当前使用的哈希算法是什么

00:12:43.560 --> 00:12:48.990
假定具有不同长度的哈希字节和

00:12:48.990 --> 00:12:53.280
你来自哪一边，闲着在讨论哪一边

00:12:53.280 --> 00:12:57.720
从左侧或右侧获取的哈希值实际上是一种复杂的

00:12:57.720 --> 00:13:02.670
问题，因为它取决于使用的哈希值，但它也是可插入的哈希值

00:13:02.670 --> 00:13:06.210
你预先知道它是多少个字节，然后在序列化它时

00:13:06.210 --> 00:13:09.690
你能把它拉出来，并每小时比正确的哈希有一个合适的哈希值吗？

00:13:09.690 --> 00:13:14.790
这类东西的字节数，所以我已经知道了

00:13:14.790 --> 00:13:19.830
有很多文档，即使它的结构很复杂

00:13:19.830 --> 00:13:24.600
大量记录了测试应该应该解释得更好的测试，因此

00:13:24.600 --> 00:13:30.570
希望我希望当我们得到这些讨论时，这些讨论是切实可行的

00:13:30.570 --> 00:13:35.970
要看的东西不太难，所以希望在

00:13:35.970 --> 00:13:45.420
接下来的几天很酷，感谢您的更新，是的，所以无论如何都如此

00:13:45.420 --> 00:13:51.189
在进行更深入的讨论之前，也有更新

00:13:51.189 --> 00:13:58.160
没事吧，是的，所以只有我也把迈克尔的东西列入议程

00:13:58.160 --> 00:14:04.459
在这次会议的议程之下，有点像我想说的话

00:14:04.459 --> 00:14:11.059
关于此，以及在远距离块或内联块排序上嵌套的ILD格式，还是

00:14:11.059 --> 00:14:15.410
要么我们称呼他们，但这基本上与您可能想要的重叠

00:14:15.410 --> 00:14:21.709
讨论一下，我想我只是交给迈克尔，是的，我想

00:14:21.709 --> 00:14:25.910
我们现在已经为您知道的内联块内容提供了一种解决方案

00:14:25.910 --> 00:14:31.850
真的很糟，就像滥用身份一样，因为像你一样

00:14:31.850 --> 00:14:36.769
您实际上确实会得到，但就像我们一直在寻找一种方法来

00:14:36.769 --> 00:14:40.910
采用多编解码器格式，然后将其混入原始数据中，然后

00:14:40.910 --> 00:14:48.079
这实际上是在CID中具有身份多重哈希的AI发生的情况

00:14:48.079 --> 00:14:55.429
像其他人一样解释一下，好吧，就像我在阅读主题

00:14:55.429 --> 00:14:59.179
认为就像2015年那样，就像您知道有时数据

00:14:59.179 --> 00:15:02.989
您的哈希值小于哈希值，那么为什么我们不像添加多编解码器一样

00:15:02.989 --> 00:15:08.329
为了代替哈希，这里只是数据，这里是字节，并将其用作

00:15:08.329 --> 00:15:10.850
标识符（如果最终要比多头短）或

00:15:10.850 --> 00:15:17.329
比实际的哈希值还短，现在好主意，结果就像

00:15:17.329 --> 00:15:21.529
因为它的大小没有限制，所以您可以在任何地方有效地使用它

00:15:21.529 --> 00:15:25.790
指向创建多个散列，就像具有一堆二进制数据一样

00:15:25.790 --> 00:15:28.610
就像是说嘿，这是前面的二进制数据，然后

00:15:28.610 --> 00:15:32.779
因为C ID就像顶部的多余元数据一样，

00:15:32.779 --> 00:15:37.309
哈希，您可以通过说“哦，这是什么”来有效地执行内联代码块

00:15:37.309 --> 00:15:41.329
带有身份多重哈希的CID，所有内容都在叮咬区域，并且没有

00:15:41.329 --> 00:15:47.059
限制大小，所以之类的事情，因为几乎要

00:15:47.059 --> 00:15:50.839
有效地完成此任务，因为就像您可以继续嵌入

00:15:50.839 --> 00:15:56.029
他们甚至可以嵌套它们，问题是，就像我不认为我们已经

00:15:56.029 --> 00:16:00.709
真正考虑了IPL其余部分中的这种用例的生态系统，例如

00:16:00.709 --> 00:16:05.120
您正在遍历，并且正在执行分辨率，则返回一个see

00:16:05.120 --> 00:16:08.059
如果您尝试在Traverse或其他不尝试的项目中使用

00:16:08.059 --> 00:16:11.779
将其解释为一个块，如果您将CID交给一个块存储，他们会喜欢

00:16:11.779 --> 00:16:16.999
将那个标识符作为一个块查找，此时我不知道

00:16:16.999 --> 00:16:20.420
任何喜欢的事情哦，不，不喜欢，数据在CID内，否则

00:16:20.420 --> 00:16:27.740
被赶上了，所以我想做一些工作来支持这一点，但这听起来

00:16:27.740 --> 00:16:31.220
那样就可以解决问题，如果他想要的话我不能解决

00:16:31.220 --> 00:16:36.430
参数化块，但是就像您为以下内容设计参数化元数据一样

00:16:36.430 --> 00:16:40.490
就像任何看起来像您订阅的性质一样

00:16:40.490 --> 00:16:42.290
Seabourn，然后您将其嵌入到我的

00:16:42.290 --> 00:16:50.329
对，是的，所以像基督徒一样，我的意思是说它不在府绸上

00:16:50.329 --> 00:16:54.920
但这是否是您想要像灯一样的解决方案

00:16:54.920 --> 00:16:59.029
框，我的意思是实际上是完全一样的

00:16:59.029 --> 00:17:03.139
当我们谈论正确的事情时，它采用编解码器并将其捣碎

00:17:03.139 --> 00:17:07.579
紧靠二进制块，然后像这样嵌入二进制数据

00:17:07.579 --> 00:17:10.579
并没有太大的不同，我认为只有真正改变的地方

00:17:10.579 --> 00:17:17.240
是这样，所以我们在Dec JSON中有这个线程，就像我们一样

00:17:17.240 --> 00:17:20.899
想要创建一种实际上不是有效的JSON格式，以使

00:17:20.899 --> 00:17:24.890
二进制文件不吮吸，就像能够将二进制文件附加到末尾块而已

00:17:24.890 --> 00:17:29.120
有它的引用，还是我们想说不，对于这样，这样比较好

00:17:29.120 --> 00:17:33.440
只是JSON，如果要与二进制对话，则必须链接到它，因为如果使用

00:17:33.440 --> 00:17:36.980
像这样的情况将变得突出，那么就像你不能真正做到

00:17:36.980 --> 00:17:40.909
它们有效地放在JSON中，因为您将拥有这些微小的

00:17:40.909 --> 00:17:44.120
有点像大量的元数据，然后像一个庞大的基础知识

00:17:44.120 --> 00:17:51.679
在像CID之前，大多数是二进制数据，例如yeah，实际上并没有用

00:17:51.679 --> 00:17:59.149
所以那是我唯一的想法，所以如果您继续

00:17:59.149 --> 00:18:04.510
嵌套的东西变得很难看

00:18:05.320 --> 00:18:11.210
所以我只是想知道你是否喜欢它

00:18:11.210 --> 00:18:16.220
像这样的想法不像通过冻结融化，而是要做可能想拥有

00:18:16.220 --> 00:18:22.100
就像您指定的那样，看到的广告就像嵌入式CD一样，

00:18:22.100 --> 00:18:28.279
然后将二进制数据放在其他地方，就像在制作CD一样

00:18:28.279 --> 00:18:31.850
和数据分开与块

00:18:31.850 --> 00:18:35.659
因此，如果您知道CD是否具有数据，并且带有内联long snosurf，则使用Bronx也是如此

00:18:35.659 --> 00:18:39.440
在某个地方的城市，然后你在其他地方有了模式，因为像我一样

00:18:39.440 --> 00:18:43.519
如果我们看到这个全球性的大公司，我认为这是同一回事

00:18:43.519 --> 00:18:48.200
完全可以工作，我只是想知道是否不是，但是然后

00:18:48.200 --> 00:18:53.960
数据实际上并没有使用相同的颜色进行加密，所以

00:18:53.960 --> 00:18:57.070
这就是您需要内联数据的原因

00:18:57.070 --> 00:19:01.370
是的，就像你是你，是的，你会有效地希望，如果你

00:19:01.370 --> 00:19:08.269
只担心像图索引这样的安全性，但是如果您

00:19:08.269 --> 00:19:11.210
担心像整个块存储的安全性，而不是存储

00:19:11.210 --> 00:19:15.350
纯文本格式的任何内容（如果实际上已加密的话）将最终导致

00:19:15.350 --> 00:19:18.350
存储一堆明文，例如人们认为越来越多的块

00:19:18.350 --> 00:19:24.769
打断了，所以我想这种方式就像这样是一种可行的方式，如果

00:19:24.769 --> 00:19:29.720
事实证明这是一个更好的选择，他们会发现我的意思是，嘿，这是一种获取

00:19:29.720 --> 00:19:34.610
开始，看看它是否有效，然后如果不起作用，我们将做一些事情

00:19:34.610 --> 00:19:45.980
否则，是的，我喜欢它，我只是想知道为什么这是一个理想的选择

00:19:45.980 --> 00:19:50.809
与其他实体相对的解决方案是因为它适合于

00:19:50.809 --> 00:19:59.419
当前的结构，所以很容易拔鞋，或者这是不，不，我不会

00:19:59.419 --> 00:20:05.110
读一个特例，然后为什么不介绍一个特例，那就是

00:20:05.110 --> 00:20:09.740
不，我的意思是说理想情况实际上是非常

00:20:09.740 --> 00:20:14.539
不同，我们最终朝这个方向前进的事实是，

00:20:14.539 --> 00:20:21.830
就像不一样，我们希望能够将其他格式的数据一起加密

00:20:21.830 --> 00:20:26.870
与其他块数据一样，这就是要点，例如，如果我想链接

00:20:26.870 --> 00:20:30.730
放入get块，然后我想对整个结构进行加密

00:20:30.730 --> 00:20:35.960
有效地获得了一堆都正确加密的块，我没有

00:20:35.960 --> 00:20:43.309
失去了像将IPL B的性质链接到散步中那样的任何东西，就像在

00:20:43.309 --> 00:20:47.450
首先，我有点讨厌这个，现在看来，这是最优雅的

00:20:47.450 --> 00:20:54.470
以一种怪异的方式，就像不，但是但是要清楚，就像我认为那个我

00:20:54.470 --> 00:20:58.130
认为这应该只是在某个时候要被编码

00:20:58.130 --> 00:21:02.360
以某种次要的方式，所以我想像的方式是

00:21:02.360 --> 00:21:05.450
就像我们将嵌套性质从中移除一秒钟（如果您有障碍物的话）

00:21:05.450 --> 00:21:09.320
除非已加密为“ ham”的元数据被加密，否则它将具有

00:21:09.320 --> 00:21:14.510
像call like data这样的属性，它是实际的加密二进制数据，

00:21:14.510 --> 00:21:19.730
可以是指向单独的二进制原始块的链接，也可以内联

00:21:19.730 --> 00:21:24.950
对，这样就像还不错，所有的一切都变得

00:21:24.950 --> 00:21:32.270
解密，然后像解释一样，就像您所知道的一样，

00:21:32.270 --> 00:21:34.760
在加密数据中是否有意义

00:21:34.760 --> 00:21:38.690
就像我不认为我们应该在蓝旗亚中使用它们，就像我说过

00:21:38.690 --> 00:21:41.990
NC ID是dag C钻孔，然后我给了您整个二进制文件，但已加密

00:21:41.990 --> 00:21:45.710
你就没有办法解密它，就像那不是真的

00:21:45.710 --> 00:21:48.740
因此，出于加密的目的，我们仍然需要

00:21:48.740 --> 00:21:52.550
那里的字段说加密的格式是什么，以便

00:21:52.550 --> 00:21:56.600
在我解密它之后，我知道如何解释它，但是如果还有其他

00:21:56.600 --> 00:22:01.280
该块内的数据必须内联到该块中才能获取

00:22:01.280 --> 00:22:09.390
加密的地方就是像花式CIT这样使用它的地方，所以我们使用它

00:22:09.390 --> 00:22:16.799
看到具有身份跨国联系的ID，也许我是我

00:22:16.799 --> 00:22:22.440
也错过了一些类似的用例是什么，好吧，我

00:22:22.440 --> 00:22:26.400
就像我有一个JPEG，我不想我不想只是向您发送

00:22:26.400 --> 00:22:30.960
我不想加密JPEG并将加密的哈希放入CID中

00:22:30.960 --> 00:22:35.549
我实际上想将整个JPEG排列成一行并很好地发送给您，因此

00:22:35.549 --> 00:22:40.020
钉是相对容易的，因为那仍然是原始的二进制数据，我认为

00:22:40.020 --> 00:22:44.040
问题是，比如说我有一个要加密的数据结构

00:22:44.040 --> 00:22:48.809
就像整个事情一样，其中的一些链接也喜欢

00:22:48.809 --> 00:22:54.390
以太坊区块和获取区块我需要加密那些属于数据的区块

00:22:54.390 --> 00:22:57.990
结构，所以最终将要发生的事情就像我将不得不

00:22:57.990 --> 00:23:02.400
内联该数据在其他实际上已完全加密的其他块中的某处

00:23:02.400 --> 00:23:06.419
可以解释为加密程序的一部分，我的主要问题是

00:23:06.419 --> 00:23:09.720
像我们正在谈论的所有这些元数据一样，必须添加一个

00:23:09.720 --> 00:23:13.380
层在要加密的事物之上，因此如果不在IPL中

00:23:13.380 --> 00:23:17.070
像其他内容寻址格式一样的深层数据模型，它可以有效地

00:23:17.070 --> 00:23:21.150
必须是无懈可击的，这样我们才能将其放入数据模型中

00:23:21.150 --> 00:23:33.660
然后我们可以解释是不是像多编解码器那样，或者是的，所以

00:23:33.660 --> 00:23:40.650
将CID与身份哈希一起使用的原因是为了内联，所以

00:23:40.650 --> 00:23:49.380
您是从CID获得多编码解码器，而不是像这样

00:23:49.380 --> 00:23:54.720
您要导入的结构不是我也许我不明白

00:23:54.720 --> 00:23:58.620
多编解码器本来是应该的，但是我想我以为你知道

00:23:58.620 --> 00:24:02.100
你就像任何东西一样，就像一个多编解码器，因为这就是我

00:24:02.100 --> 00:24:06.330
得到提交看起来像等等，如果你

00:24:06.330 --> 00:24:09.510
我们确实在做其中一种您想在使用时使用的结构

00:24:09.510 --> 00:24:13.620
您只需将其中之一称为多编解码器，这就是您要指定的内容

00:24:13.620 --> 00:24:18.210
内部结构看起来像这样，所以您拥有的数据已经在多个

00:24:18.210 --> 00:24:23.640
编解码器喜欢它是git commit权利，我需要喜欢我有一些

00:24:23.640 --> 00:24:29.429
关于我要加密的内容，我也想对块进行加密，以便我

00:24:29.429 --> 00:24:33.120
可以将它发送给某人，即使它是我同意某人的多个区块，

00:24:33.120 --> 00:24:39.330
没有人知道正确的方法，所以我需要两件事，我需要一堆

00:24:39.330 --> 00:24:43.770
有关我喜欢发送的加密的信息以及其周围的数据

00:24:43.770 --> 00:24:47.990
需要加密，然后我需要对该块进行引用

00:24:47.990 --> 00:24:52.650
与它前面的获得多编解码器的多涂层，以便我们

00:24:52.650 --> 00:24:57.660
知道如何解释块数据，但是如果我将其制成一个单独的块，则它将

00:24:57.660 --> 00:25:01.860
最终不会正确加密，因为哈希将匹配，因此

00:25:01.860 --> 00:25:05.669
我需要做的就是喜欢将所有数据（包括多

00:25:05.669 --> 00:25:10.400
编解码器，然后将其放在我实际上正在加密的另一个块中

00:25:10.400 --> 00:25:15.270
就好像您实际上可以解释呃，所以我们在谈论

00:25:15.270 --> 00:25:20.520
八对，所以我们正在谈论将它们包装在很小的范围内

00:25:20.520 --> 00:25:25.169
具有附加元数据的外壳，所以我正在想象这些事情的进展

00:25:25.169 --> 00:25:28.799
在任何东西里面，这样您就可以知道其中包含很多东西的块

00:25:28.799 --> 00:25:33.360
那么你只是把它挂在一边，但是不，就像它只是一个

00:25:33.360 --> 00:25:37.740
拳击机制是是很好，我的意思是说我们正在打开一个

00:25:37.740 --> 00:25:43.380
这里的门就像无限的嵌套一样，但是就像

00:25:43.380 --> 00:25:46.679
还有很多其他原因导致您不想拥有巨大的街区，因此

00:25:46.679 --> 00:25:52.380
如果有人最终创建了巨大的块，例如

00:25:52.380 --> 00:25:56.429
他们不会在很多地方工作，所以没关系，那里有足够的东西

00:25:56.429 --> 00:26:03.090
减少区块大小的激励措施我期待着ILD炸弹的到来

00:26:03.090 --> 00:26:15.320
是我们正在无限使用的袋子，所以不会发生

00:26:18.230 --> 00:26:25.600
至少没有无限递归，对吧，艾玛

00:26:25.600 --> 00:26:30.850
其他任何事情，因为我们已经有一个小时半小时了，我已经满了

00:26:30.850 --> 00:26:36.910
我想我不会担心甲板上的东西，我想是的，我是说

00:26:36.910 --> 00:26:42.370
我们可以推迟一下，也许我认为现在我们已经快没时间了

00:26:42.370 --> 00:26:47.230
如果有人想提出有关峰会的任何信息，那将是

00:26:47.230 --> 00:26:50.380
很酷，请确保您签出了文档，但是

00:26:50.380 --> 00:26:53.890
是的，就像柏林的首脑会议，我们需要开始消除细节，嗯，

00:26:53.890 --> 00:26:56.920
任何人都可以预订任何地方，因为我正在寻找

00:26:56.920 --> 00:27:03.550
对我们来说，崩溃就像一个大地方，是的，有一些像

00:27:03.550 --> 00:27:07.090
他们中很少有一个人足够好，他们有一个供我们喜欢工作的空间

00:27:07.090 --> 00:27:21.190
刚开始的几天都没用-哦，其他伟大的事情都失去了时光，

00:27:21.190 --> 00:27:27.190
然后我结束会议，希望在两周后再见到大家，然后

00:27:27.190 --> 00:27:29.940
直播

