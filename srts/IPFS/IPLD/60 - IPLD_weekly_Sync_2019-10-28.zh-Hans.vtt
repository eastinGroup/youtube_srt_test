WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.060 --> 00:00:04.159
和录音

00:00:17.430 --> 00:00:21.750
欢迎大家参加本周的IPL d /聋哑同步会议

00:00:21.750 --> 00:00:29.490
今天是2019年10月28日

00:00:29.490 --> 00:00:34.680
我们上周已经做过，然后我们在未完成项目中讨论了我们可能会

00:00:34.680 --> 00:00:53.960
嗯，我从我自己开始，所以我致力于获得IPL，其余的我只致力于

00:00:53.960 --> 00:01:01.049
手术，所以可悲的消息是我们似乎无法断言，因为

00:01:01.049 --> 00:01:08.159
将需要进行上游更改，尽管C的作者对此感到厌烦

00:01:08.159 --> 00:01:15.090
siva的东西不是最喜欢的，维护者也不是，所以我认为这条评论

00:01:15.090 --> 00:01:21.870
我认为注释中的内容似乎不会发生

00:01:21.870 --> 00:01:28.320
我首先提出另一条评论，所以我仍在为此奋斗，但看起来

00:01:28.320 --> 00:01:35.159
是不会的，我完全不同意这个决定

00:01:35.159 --> 00:01:42.210
但我想我没有什么可以做的，所以就目前而言，我可能只是

00:01:42.210 --> 00:01:46.260
是的，我已经有休息了，我被某人撤回了实施

00:01:46.260 --> 00:01:51.540
其他没有使用调查，我现在可能只是使用它，所以我们可以

00:01:51.540 --> 00:01:59.250
只是继续前进，然后看未来会带来什么，但这是一种

00:01:59.250 --> 00:02:05.880
出乎意料，所以我希望我能说服维护者，但我不能

00:02:05.880 --> 00:02:09.299
我们将看到这是我们给您某人出现的一种答案

00:02:09.299 --> 00:02:16.349
说我想要这种格式的无符号整数，是的，我们复制并粘贴了

00:02:16.349 --> 00:02:24.290
文字是是我读得很忙，我也告诉他们，我完全同意，如果您有

00:02:24.290 --> 00:02:29.819
您不接受的图书馆，例如有人进来并说我想做XY您

00:02:29.819 --> 00:02:33.780
在这种情况下完全没有

00:02:33.780 --> 00:02:41.790
基本上是达成共识的做法，可以向调查中添加文本，这是基本的

00:02:41.790 --> 00:02:46.080
我为零物料所做的工作，然后已经在泰米尔语中实现，

00:02:46.080 --> 00:02:50.610
在消息页面中，因此基本上有三个不同的作者使用

00:02:50.610 --> 00:02:55.200
同意的Hank来解决这个问题，我认为这足以证明还可以

00:02:55.200 --> 00:02:59.700
也许是的，这应该向上游发展，这就是我

00:02:59.700 --> 00:03:13.710
一直希望，但是，我们会看到的，所以让我们进入秦州，是的，我让你

00:03:13.710 --> 00:03:18.810
更新，如果有什么变化，但我真的没有，是的，我看不到太大

00:03:18.810 --> 00:03:24.530
变化，他们并没有改变um，但这也是个好消息，因为

00:03:24.530 --> 00:03:31.590
几个月前，我喜欢另一件事，当时我正在开发堆栈原型

00:03:31.590 --> 00:03:38.040
在堆栈规格说明中，我发现他们正在做某事

00:03:38.040 --> 00:03:43.310
与校验和，他们想这样做基本上已经与

00:03:43.310 --> 00:03:48.810
对冲他们在校验和中使用它，我说很好，您可以使用multi hi

00:03:48.810 --> 00:03:52.350
弗洛伊德，他们说好主意就是

00:03:52.350 --> 00:03:57.870
我们要去做，所以我要尽快写一个规格供他们使用

00:03:57.870 --> 00:04:04.680
多哈希，这是数字混音器的张力um，好消息是，这是一个

00:04:04.680 --> 00:04:09.870
目前由独立人员完成的规范，但将由

00:04:09.870 --> 00:04:14.580
OGC，因此紧迫性是参考您的标准所需要的基础，并且经常

00:04:14.580 --> 00:04:18.989
还是她看到十个已经成为ISO标准，所以基本上我认为

00:04:18.989 --> 00:04:24.060
很高兴看到繁忙的多重哈希进入这种圈子并看到

00:04:24.060 --> 00:04:42.750
是的，它有一些选择，所以这很酷，即使您不是超级

00:04:42.750 --> 00:04:54.000
静音，您应该超级静音。谢谢，我很抱歉，罗恩，我认为

00:04:54.000 --> 00:04:58.890
您是停靠单中的下一位，我是下一位，对不起，我只是

00:04:58.890 --> 00:05:07.280
只是做早上的事情，赶上我的一件事情，所以

00:05:07.280 --> 00:05:10.680
像这样的管子这个星期真的不算大

00:05:10.680 --> 00:05:14.940
但是我真的很想获得面向用户的架构文档，这使得

00:05:14.940 --> 00:05:21.840
计划者grah Keable由该群体之外的人甚至在PL之外

00:05:21.840 --> 00:05:26.700
工程空间只是一个小众市场，需要成为

00:05:26.700 --> 00:05:32.160
从头开始，目前正在研究中，我已经获得了一些入门资料，例如

00:05:32.160 --> 00:05:37.170
到目前为止，我已经掌握的材料还可以，我已经展示了这件事，这是什么

00:05:37.170 --> 00:05:41.250
它，然后这将帮助您获得灵感，这是什么？

00:05:41.250 --> 00:05:46.860
事情，然后是我的机器上有一个正在重组的版本

00:05:46.860 --> 00:05:51.690
额外内容中的一点点可以指导更高级的内容

00:05:51.690 --> 00:05:56.330
材料，这就是我所在的位置，这就是我本周要做的其他事情

00:05:56.330 --> 00:06:00.030
进行链接，然后使其结构一致，以便您可以

00:06:00.030 --> 00:06:04.560
将该模式目录视为教程，以快速掌握

00:06:04.560 --> 00:06:10.890
并理解它，以便我们不在回声室中，并希望

00:06:10.890 --> 00:06:15.120
其他人会在对某些内容有所了解的情况下出现并批评我们的工作

00:06:15.120 --> 00:06:21.630
我们正在做，然后甚至开始使用它，所以那是我的，那是我的大事

00:06:21.630 --> 00:06:28.050
真的，我现在专注于另一件事是作为Kesha Kesha

00:06:28.050 --> 00:06:36.300
不，这太嫉妒了，我剥了个简单的缓存，因为上游

00:06:36.300 --> 00:06:41.910
解码器基本上没有JavaScript实现

00:06:41.910 --> 00:06:45.210
之所以放弃，是因为它们全都只是比特币的分叉，带有一些骇客

00:06:45.210 --> 00:06:50.040
它适用于Z缓存，并且没有人真正使它们保持最新状态，或者

00:06:50.040 --> 00:06:57.740
保持，这样就可以在他高速缓存时看到

00:06:57.740 --> 00:07:03.640
DAG的东西，不管它是什么，不是国民包，在我之前是Z现金编解码器

00:07:03.640 --> 00:07:09.950
在没有支持实现的情况下剥离D，因为我们现在使用的是

00:07:09.950 --> 00:07:12.470
一个依赖关系中的一个安全漏洞，并且没有得到

00:07:12.470 --> 00:07:22.070
更新，然后流经火灾ipfs，因此ipfs需要进行此操作

00:07:22.070 --> 00:07:27.290
可选，因为它不需要大部分运送给人们

00:07:27.290 --> 00:07:32.900
除非他们真的想使用缓存，但我写了一段时间的实现

00:07:32.900 --> 00:07:38.690
回到一个块解码器，上周我把它连接起来，这样它就可以了

00:07:38.690 --> 00:07:44.000
替换那里的东西，它有什么我不知道的依赖项

00:07:44.000 --> 00:07:48.680
如果有任何依赖关系，那么领先就没有任何风险

00:07:48.680 --> 00:07:55.550
日期和依赖关系安全性问题，这就是吸引力

00:07:55.550 --> 00:08:01.220
请求过程，但看起来快完成了，我刚刚推送了我

00:08:01.220 --> 00:08:04.970
刚把我的分支推高了，我醒了，这就是我被静音时正在做的事情

00:08:04.970 --> 00:08:09.260
因为您评论了即使我说他们不在我的代码也没有

00:08:09.260 --> 00:08:16.420
更新，所以现在在那里

00:08:16.720 --> 00:08:25.280
好的耳环，接下来很酷我最近第二周又度过了一个有趣的星期

00:08:25.280 --> 00:08:30.740
几周来，我才刚学到关于go编译器的许多知识，

00:08:30.740 --> 00:08:36.590
关于性能如何运作的信息，以防万一，

00:08:36.590 --> 00:08:40.820
有其他人尝试加入我们的行列我学到了很多新的东西

00:08:40.820 --> 00:08:46.580
让go编译器非常清楚地告诉我感觉，所以就像

00:08:46.580 --> 00:08:49.910
我在本周发现的这个GC标志着咒语

00:08:49.910 --> 00:08:56.960
我不知道我以前没有它怎么过，哦，天哪，它是如此有用，

00:08:56.960 --> 00:09:02.660
也完全没有文档说明，因此GC标志-M为您提供了有关以下内容的简短信息

00:09:02.660 --> 00:09:06.170
编译器对转义分析的看法以及内存分配的位置

00:09:06.170 --> 00:09:11.450
应该像守护者堆栈一样去，等等，GC标志引用它

00:09:11.450 --> 00:09:16.520
M-M再次做了完全不同的事情

00:09:16.520 --> 00:09:20.210
好吧，不，它做同样的事情，但是它有足够的信息来做

00:09:20.210 --> 00:09:25.100
单个M会给您带来真正的帮助，就像刚才说的那样

00:09:25.100 --> 00:09:28.790
一堆是事实，但并不能使您了解

00:09:28.790 --> 00:09:32.000
编译器是如何得出这些结论的，所以我尝试使用它

00:09:32.000 --> 00:09:39.050
以前很久以前，我认为基本上没用，两个M给你

00:09:39.050 --> 00:09:43.880
就像是编译器在何时何地以及如何决定某事的逻辑树

00:09:43.880 --> 00:09:52.400
失败的转义分析失败，所以这实际上真的非常有用，所以我

00:09:52.400 --> 00:09:55.100
这周学到了很多有关编译器和内存模型的知识

00:09:55.100 --> 00:10:00.530
并且找到了一些不错的文档，我应该将其编译为

00:10:00.530 --> 00:10:05.270
内部指针以及GCE如何看待这些，所有这些都是有用的

00:10:05.270 --> 00:10:12.470
因为我一直在尝试找出代码的形状在哪里

00:10:12.470 --> 00:10:17.150
该cogent应该发出，以及在整个过程中指针如何存在

00:10:17.150 --> 00:10:24.200
结构树将影响系统的整体性能，因此

00:10:24.200 --> 00:10:28.730
现在，我想我可以很自信地说一些新的理解

00:10:28.730 --> 00:10:34.490
作为基线，是的，我们想在大多数情况下使用它嵌入笔画

00:10:34.490 --> 00:10:39.950
因为这将使我们能够摊销不重复的数量

00:10:39.950 --> 00:10:47.060
我们使用的内存分配，所以我的意思是已知的，但是我已经了解到

00:10:47.060 --> 00:10:50.120
除此以外，还有几件事使整个事情发挥了很大作用

00:10:50.120 --> 00:10:54.740
我们要使用嵌入式结构而不是指针，因此比这早

00:10:54.740 --> 00:11:02.060
大多数时候，我们实际上确实希望使用指针接收器和许多

00:11:02.060 --> 00:11:06.530
指针和方法调用，因为现在我对它有了更好的理解

00:11:06.530 --> 00:11:11.420
从那些额外的标志中逃脱分析，结果发现，将一堆

00:11:11.420 --> 00:11:16.220
方法签名中的指针并不一定意味着

00:11:16.220 --> 00:11:21.140
事情将被转移到堆上，这实际上意味着编译器

00:11:21.140 --> 00:11:25.280
拥有更多自由决定是否转移

00:11:25.280 --> 00:11:31.910
因此，如果您获得许多方法，即使事情失败了，也可以进行逃避分析

00:11:31.910 --> 00:11:38.180
在叶子方法中，如果可以内联这些方法，尤其是对于

00:11:38.180 --> 00:11:42.260
然后可能会发现，在使用它们的上下文中，所有

00:11:42.260 --> 00:11:45.800
那东西永远不会逃脱，然后它们实际上都没有变热，然后

00:11:45.800 --> 00:11:48.560
即使您认为到处都有指针，它实际上确实非常快

00:11:48.560 --> 00:11:53.570
并不一定会导致内部分配严重依赖于

00:11:53.570 --> 00:11:58.730
内部指针语义还意味着我们可以分配的内存少于

00:11:58.730 --> 00:12:01.760
我以为上周我的一些最坏情况的想象就是我们错了

00:12:01.760 --> 00:12:08.690
我很高兴向您汇报我现在提出的一些最佳抽象想法

00:12:08.690 --> 00:12:14.660
有很多内在的挣扎，并且在

00:12:14.660 --> 00:12:18.830
注意构建器端，如果我们有一个节点构建器实现实际上有

00:12:18.830 --> 00:12:23.150
其中一堆预留空间供我们知道的节点构建器类型使用

00:12:23.150 --> 00:12:28.160
我们需要孩子，然后我们可以让您知道其中一个的节点构建器

00:12:28.160 --> 00:12:32.870
当要求其提供节点生成器时，struct可以使用内部的成员类型

00:12:32.870 --> 00:12:35.960
它可以只返回其现有内存的一个子部分，然后

00:12:35.960 --> 00:12:40.160
到任何内部指针中，因此不再有相同类型的分配

00:12:40.160 --> 00:12:45.200
分期付款的东西，那么如果我们做节点构建器之类的树，

00:12:45.200 --> 00:12:49.570
分别，然后我们为实际节点和那些节点建立了内联结构

00:12:49.570 --> 00:12:53.900
他们只是相互之间相互返回了很多内部指针，

00:12:53.900 --> 00:12:57.560
节点构建器需要大量内部指针来指向节点树，

00:12:57.560 --> 00:13:02.390
您正在构建，但是可以摊销到基本上一分之一

00:13:02.390 --> 00:13:09.410
巨大的方块而不是整个树上的分形亚历克斯，所以这是

00:13:09.410 --> 00:13:14.270
好消息是设计大概是我要去的方向

00:13:14.270 --> 00:13:22.820
现在，它仍然不是完美的，我想我可以证明它是

00:13:22.820 --> 00:13:33.560
不完美，因为结果很多，我不知道我是否只是想

00:13:33.560 --> 00:13:36.709
大声地阅读这整个事情，我可能还会写一些更多的东西来做

00:13:36.709 --> 00:13:40.340
就像工程时间接近无穷远时的极限一样

00:13:40.340 --> 00:13:45.740
在这里，但我认为基本上可以证明，仍然存在很多折衷

00:13:45.740 --> 00:13:52.160
在大多数情况下，我们要嵌入结构而不按顺序使用指针

00:13:52.160 --> 00:13:57.410
摊销我们已经知道很多的锁定帐户，但是当我们

00:13:57.410 --> 00:14:02.180
开始研究人们使用数据结构的方式

00:14:02.180 --> 00:14:06.050
如果有人想改组周围的树木，我们就会发展成树木

00:14:06.050 --> 00:14:11.660
一堆树的内部，那么他们可能开始希望

00:14:11.660 --> 00:14:17.690
在它们所处的树的任何特定部分中再次出现指针

00:14:17.690 --> 00:14:20.510
改组是因为我们不希望指针到处都失败

00:14:20.510 --> 00:14:23.780
记住类似物，我们确实希望指针在您要进行随机播放的任何地方

00:14:23.780 --> 00:14:28.160
对，因此几乎可以发现，无论您要指向何处的指针

00:14:28.160 --> 00:14:36.950
be是由您将要进行的转换决定的，但这不是

00:14:36.950 --> 00:14:39.920
实际上，我们可以使用其他信息来设计我们的信息

00:14:39.920 --> 00:14:43.550
现在，代码生成我们只是在设计代码gem，它会吐出助手

00:14:43.550 --> 00:14:49.460
通常进行一堆树操作，如果我们不确切知道

00:14:49.460 --> 00:14:54.800
用户将要编写更多代码来操纵我们的树的一部分

00:14:54.800 --> 00:14:58.670
只是在我们的管道中的正确位置没有该信息，以便

00:14:58.670 --> 00:15:08.240
使用它，我认为最理想的解决方案是我们完全忽略了自己的发展

00:15:08.240 --> 00:15:12.650
时间，而我们只是想走一百万年，因为我们

00:15:12.650 --> 00:15:20.900
会产生一种全新的编程语言的困扰Rod的静音，但是他

00:15:20.900 --> 00:15:26.870
在笑，他应该是的，我们制作了一个全新的程序

00:15:26.870 --> 00:15:30.670
语言以及可能建立在类别理论等基础上的东西

00:15:30.670 --> 00:15:36.460
递归方案态射之类的东西得到了很高的评价

00:15:36.460 --> 00:15:42.290
如果我们有这样的编程语言，那么我们可以确定

00:15:42.290 --> 00:15:45.410
我们希望所有的指针和东西都能够进行最佳的松露

00:15:45.410 --> 00:15:50.780
与我们要执行但编程的实际逻辑完全匹配

00:15:50.780 --> 00:15:56.310
语言目前不存在，所以我们可能不想构建它

00:15:57.750 --> 00:16:02.140
这很令人沮丧，但我想我很高兴拥有此信息

00:16:02.140 --> 00:16:06.640
现在可用，因为现在我们绝对可以知道任何解决方案

00:16:06.640 --> 00:16:10.870
我们选择的将是妥协，我想至少可以使我受益匪浅

00:16:10.870 --> 00:16:21.520
更有信心，我们可以在妥协的前提下向前迈进，所以很有趣，

00:16:21.520 --> 00:16:23.980
另一个好消息是Hana开始使用Jen的部分剪辑

00:16:23.980 --> 00:16:27.760
做一些工作的东西，并填满了很多东西，例如手摇曲柄

00:16:27.760 --> 00:16:32.260
整数类型和东西，所以我们有一些用法练习

00:16:32.260 --> 00:16:35.260
他们的畸形如反馈循环，以确保我们不会搞砸那是

00:16:35.260 --> 00:16:50.110
真的很令人兴奋，那是我的一周，你还在笑，不，我是

00:16:50.110 --> 00:16:58.840
过去常常打电话给某人正在想那么多的人

00:16:58.840 --> 00:17:05.190
我们正在做的事情的背景可能会听起来像

00:17:05.190 --> 00:17:10.900
进行一些非常激烈的过早优化

00:17:10.900 --> 00:17:19.680
甚至还没有做任何事情的水平，所以要澄清一下

00:17:20.160 --> 00:17:26.380
在理解各种方法的含义方面所做的工作

00:17:26.380 --> 00:17:34.240
实现该功能可直接影响API的效果，因此您所需要的

00:17:34.240 --> 00:17:39.970
现在要做的就是告知我们呈现给用户的内容，本质上

00:17:39.970 --> 00:17:43.870
锁定是正确的，比我多一点

00:17:43.870 --> 00:17:47.710
就像它正在确定所有可能的类型中的指针在何处结束，并且

00:17:47.710 --> 00:17:53.230
一堆这样的东西，不幸的是，这些东西

00:17:53.230 --> 00:17:57.430
确实一直泄漏到面向API的用户，我希望有一种方法

00:17:57.430 --> 00:18:02.890
使他们不这样做，但没有旁注，我要做的另一件事是

00:18:02.890 --> 00:18:06.250
被认为隐藏了另一整套东西

00:18:06.250 --> 00:18:11.080
在go代码中的接口下，并且能够切换出更多位置

00:18:11.080 --> 00:18:14.799
指针是和不是，那么事实证明，如果这样做，那么您就失去了

00:18:14.799 --> 00:18:18.820
编译器可以内联一堆方法的能力，我相当确定

00:18:18.820 --> 00:18:29.590
从细节上讲，这将是一个巨大的错误，因此撇开

00:18:29.590 --> 00:18:36.009
它显示的其他地方是对的，所以我很沮丧地发现了这个

00:18:36.009 --> 00:18:39.879
一个，但我正在认真考虑替代音符生成器

00:18:39.879 --> 00:18:43.539
抽象，因为注释生成器抽象的类型是从

00:18:43.539 --> 00:18:47.490
内部，所以您围绕它构建了任何包裹的东西，请继续走出去

00:18:47.490 --> 00:18:55.149
这与我想要进行内存分配时想要的相反

00:18:55.149 --> 00:18:58.259
一个大块头，然后在我走的时候把它填满

00:18:58.259 --> 00:19:07.299
他们是完全相反的方向是流动我刚走了多少

00:19:07.299 --> 00:19:15.700
通过优化返回的vo就像我调用send一样返回值

00:19:15.700 --> 00:19:19.210
它应该能够将其直接放入目的地而无需

00:19:19.210 --> 00:19:33.940
不得不做任何时髦的事情，我不知道这是否是大多数人的问题

00:19:33.940 --> 00:19:38.649
各种高级优化可以叠加多少其他优化

00:19:38.649 --> 00:19:42.009
同时或像我可以放置多少个间接层

00:19:42.009 --> 00:19:45.309
在A点和B点之间，让编译器仍然发现

00:19:45.309 --> 00:19:51.940
优化的工作原理，所以我不知道可能有一些研究人员，是的，我想你

00:19:51.940 --> 00:19:59.440
在我认为保证这些情况的情况下，我认为可以保证在C ++中占有最大的地位

00:19:59.440 --> 00:20:09.129
拉斯也没有完全确定这是一个问题，还是这项工作有点

00:20:09.129 --> 00:20:16.809
抱歉因生锈而打拳击的问题，因为就像我打个电话问问一样

00:20:16.809 --> 00:20:19.409
退还一些东西

00:20:20.610 --> 00:20:25.780
在缩影中，我通过别的东西不分配东西，然后你结束

00:20:25.780 --> 00:20:29.500
出现了这样的问题：在创建分配后创建分配

00:20:29.500 --> 00:20:38.799
事情要休息一下，就像它必须实际分配或转移到您分配的

00:20:38.799 --> 00:20:42.340
现场，这样，如果我可以像某些地方一样参观过

00:20:42.340 --> 00:20:47.640
神奇地工作，我希望不要

00:20:50.940 --> 00:20:55.179
是的，也许值得探索，我想我会为此担心

00:20:55.179 --> 00:21:02.289
因此，使节点构建器抽象的目的之一就是使我们

00:21:02.289 --> 00:21:06.760
可以将Codex连接到此节点构建器，这就是

00:21:06.760 --> 00:21:11.830
我们如何平凡地使编解码器能够使用19种不同的

00:21:11.830 --> 00:21:15.100
即使数据结构将这些插件编码在相同的数据结构上

00:21:15.100 --> 00:21:22.330
可能是代码生成器的超级专业权限，所以大多数

00:21:22.330 --> 00:21:27.400
当我们创建一些新值时，

00:21:27.400 --> 00:21:32.230
再次对节点构建器进行抽象，并且因为有一堆接口

00:21:32.230 --> 00:21:39.390
接下来，可用的内联量很小甚至没有

00:21:39.390 --> 00:21:44.710
所以当时我不知道我们的vo是否有能力在那些条件下工作

00:21:44.710 --> 00:21:55.870
诸如只是快速搜索之类的条件也没有给我显示任何信息，是的

00:21:55.870 --> 00:22:02.350
总是有可能他们称之为怪异的东西，我的意思是最近有概念

00:22:02.350 --> 00:22:05.679
但我一直在寻找，发现有人指出没有

00:22:05.679 --> 00:22:13.030
如果您想和我一起演奏Splunk表演，我会很高兴

00:22:13.030 --> 00:22:16.630
球在这里等着，我很抱歉，我只是在周围写了shell脚本

00:22:16.630 --> 00:22:20.289
编译器喜欢转储一些基准测试，我会喜欢它是否具有功能

00:22:20.289 --> 00:22:26.260
是或否，那是获得有关此问题的正确答案的一种方法

00:22:26.260 --> 00:22:29.610
爱这周我

00:22:31.550 --> 00:22:39.260
哦，是的，我身体不好，下周大概会打扰你

00:22:39.260 --> 00:22:48.500
只是为了娱乐，是的，我不知道

00:22:48.500 --> 00:22:50.980
越来越近

00:22:53.830 --> 00:23:04.750
好吧，我想斯蒂芬没有任何更新，我想是这样

00:23:04.810 --> 00:23:09.110
我们也有哦，我忘了提，星期五我们要去了

00:23:09.110 --> 00:23:25.180
因为这是一个公共假期，是的，底部还有其他注释

00:23:28.240 --> 00:23:36.770
所以埃里克问我是否可以和其他学生一起做选择器

00:23:36.770 --> 00:23:42.460
我想是的

00:23:45.220 --> 00:23:51.470
不，我认为可以，是的，因为这些文明

00:23:51.470 --> 00:23:58.580
就像我提到的那样，我觉得它很复杂，以某种方式使它不应该工作

00:23:58.580 --> 00:24:01.910
就像我们所说的获取数据，这是一个大问题，而沿海银行不应

00:24:01.910 --> 00:24:06.560
被打败你的意思是我想使用姓氏，但如果我不使用它

00:24:06.560 --> 00:24:11.810
不应该像是水电，所以无论如何都是点点滴滴，也许我是

00:24:11.810 --> 00:24:15.740
说的是，不会和不会的银鼠尾草的东西不会，也不会

00:24:15.740 --> 00:24:21.700
我猜是其他任何作品的阻碍者

00:24:23.260 --> 00:24:30.800
是的，但是我实际上有任何计划可以，是的，所以我已经计划了很多

00:24:30.800 --> 00:24:36.950
在我的后续步骤中进行详细说明，但想法是让我们将照片合为选择器

00:24:36.950 --> 00:24:41.180
看起来是这样，所以计划是要调查Prosecco系统，

00:24:41.180 --> 00:24:45.110
目前拥有的东西，像整个Mikey一样适合我的东西

00:24:45.110 --> 00:24:49.549
他这个订单真正存在的是什么，然后建立

00:24:49.549 --> 00:24:55.130
缺少低层次的作品，然后进入那些我想做的基础

00:24:55.130 --> 00:24:59.720
看看我们目前有什么，那一点他在这两个地方停了下来

00:24:59.720 --> 00:25:09.170
天站的步骤，但现在我会对您感兴趣的这些东西

00:25:09.170 --> 00:25:13.520
到达它是我有一种感觉，你会发现大部分相同的东西

00:25:13.520 --> 00:25:18.020
我现在正在拔头发的东西，像这样的存储市场

00:25:18.020 --> 00:25:25.160
东西和锈可能会把它丢在你的脸上，因为它生锈了，所以

00:25:25.160 --> 00:25:31.040
我只是很高兴看到这种状态如何形成，因为我有很好的

00:25:31.040 --> 00:25:36.410
希望以另一种语言在这里为我上课，是的，所以我

00:25:36.410 --> 00:25:43.130
仍然像我一样大，并且担心我的技能不足以找到

00:25:43.130 --> 00:25:48.200
最佳的解决方案，但我们会看到，就像我仍在发现

00:25:48.200 --> 00:25:52.669
就像整个学习资料肯定是学习更深入的一个好步骤

00:25:52.669 --> 00:25:58.910
变成东西，所以我的意思是我将看到巴士能像我一样做的令人惊奇

00:25:58.910 --> 00:26:02.480
就像你可以用很多不同的方式做很多事情，所以我很漂亮

00:26:02.480 --> 00:26:13.360
很高兴看到我们能得到怎样的东西，我生产的东西很酷很酷

00:26:13.390 --> 00:26:22.700
所以我没有写下另一件事，但我想我们已经在谈论

00:26:22.700 --> 00:26:27.260
这一点在某个地方之前，但我们应该再放一些

00:26:27.260 --> 00:26:34.059
研究为我们所有人提供了递归方案之类的东西

00:26:34.330 --> 00:26:39.200
因为更简单的方法来描述我本周的一些更新，基本上是

00:26:39.200 --> 00:26:46.640
发现了哦，我希望该数据记录变形的抽象形式，

00:26:46.640 --> 00:26:53.120
对于几乎任何其他更复杂的态射，那么我需要一个

00:26:53.120 --> 00:26:56.030
事实证明，完全不同的抽象具有不同的内存问题

00:26:56.030 --> 00:26:59.240
这些内存摊销的事情就像

00:26:59.240 --> 00:27:02.960
完全与态射同构同构，这让我大吃一惊

00:27:02.960 --> 00:27:10.610
使接下来的一切变得容易得多，我有一个

00:27:10.610 --> 00:27:13.640
感觉那将变成真正可重用的知识，所以

00:27:13.640 --> 00:27:23.840
也许我们应该事先考虑一下，是的，所以如果你有

00:27:23.840 --> 00:27:30.650
任何或任何好的好东西要阅读，或者我很乐意赶上，或者

00:27:30.650 --> 00:27:34.910
就是你只用谷歌搜索一下，找到我发现的东西，是的，我什么都不知道

00:27:34.910 --> 00:27:38.950
好的资源，我就像是通过一堆渗透来获得的

00:27:38.950 --> 00:27:45.140
资源和一些汇编所需的，如果我们发现我希望我有更好的链接

00:27:45.140 --> 00:28:03.350
会很棒的更好的链接好吗还有其他没有办法吗

00:28:03.350 --> 00:28:11.360
然后我结束会议，谢谢大家的观看或参加

00:28:11.360 --> 00:28:13.840
下周

