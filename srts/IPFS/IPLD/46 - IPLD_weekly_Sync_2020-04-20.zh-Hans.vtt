WEBVTT
Kind: captions
Language: zh-Hans

00:00:14.000 --> 00:00:21.960
是的，看起来像我的，不，你好，欢迎大家参加

00:00:21.960 --> 00:00:29.790
一周的IPL表示现在是2020年4月20日

00:00:29.790 --> 00:00:35.840
一周，我们将回顾过去一周中已经完成并计划要做的事情

00:00:35.840 --> 00:00:45.360
是的，所以我首先从关于这次见面神的事情开始，现在是我们的

00:00:45.360 --> 00:00:50.130
扩展槽，但计划仍要尽量缩短，这只是一个问题

00:00:50.130 --> 00:00:56.160
如果我们有一个小时的时间空缺，那么他们就不会有其他会议了。

00:00:56.160 --> 00:01:05.700
是的，然后要进行更新，我是的，我还没有做到这一点

00:01:05.700 --> 00:01:10.200
上周没有做很多事情，我也认为你确实做了很多

00:01:10.200 --> 00:01:16.170
它的工作主要是我已经完成了一些JSI的维护工作，所以屋顶是敞开的

00:01:16.170 --> 00:01:26.450
纳迦巨星们的依赖更新，我花了一些心思

00:01:26.450 --> 00:01:37.460
关于我，我们将把有关基于二进制二进制密钥的内容放在这里

00:01:37.460 --> 00:01:44.640
映射到IP旧数据模型中，我什至已经将其删除了，但我仍然需要

00:01:44.640 --> 00:01:51.000
输入内容，但希望本周有类似我的想法，因为我已经

00:01:51.000 --> 00:01:56.700
谈到了罗德（Rod），也谈到了埃里克（Eric），我是的，终于如此

00:01:56.700 --> 00:02:01.970
会像探险家一样，非常有荚，提供一些解释事情的上下文，并且

00:02:01.970 --> 00:02:10.049
所以我的结论是，它应该是

00:02:10.049 --> 00:02:17.400
可以通过IP API很好地存储以使用二进制密钥

00:02:17.400 --> 00:02:22.000
角度来看，它应该是外面的弦，但是它在里面

00:02:22.000 --> 00:02:29.980
探索耐心致电，是的，我们可以通过um讨论细节，这就是我的全部

00:02:29.980 --> 00:02:36.640
是的，我对此有疑问，就像在其他图书馆中一样

00:02:36.640 --> 00:02:40.060
在谈论HAMP的那一刻，您正在手中进行查找

00:02:40.060 --> 00:02:44.260
在很多时候看起来不像是在法线地图上的查找

00:02:44.260 --> 00:02:46.630
这就是在JavaScript中的外观，因为它从字面上像

00:02:46.630 --> 00:02:51.670
将同步操作转换为异步操作是一件事情，所以实际上并没有像

00:02:51.670 --> 00:02:57.070
完全限制密钥类型需要是什么样，它可以是二进制的

00:02:57.070 --> 00:03:01.180
我们真的不在乎模型，因为模型没有

00:03:01.180 --> 00:03:08.320
考虑到多块收藏，所以我有点奇怪，为什么你

00:03:08.320 --> 00:03:16.180
为什么像您的API表单必须转换为字符串M是，所以原因是

00:03:16.180 --> 00:03:26.560
我认为媒体应该是这样，对于高级数据，他们也喜欢赞美诗

00:03:26.560 --> 00:03:34.450
它们仍然像我所说的数据模型那样工作，因为如果它们

00:03:34.450 --> 00:03:42.970
不能，例如，您不能将它们与松弛总线一起使用，因为如果您想

00:03:42.970 --> 00:03:51.459
用选择器使用您的手，它需要的界面与普通我的意思相同

00:03:51.459 --> 00:03:55.660
还有很多奥秘，依此类推，我的意思是选择器仍然会

00:03:55.660 --> 00:04:01.750
以了解如何遍历汉普顿以在其中进行关键查找

00:04:01.750 --> 00:04:07.120
不知道不是全部，就像整个要成为

00:04:07.120 --> 00:04:17.350
关于高级数据层的全部要点是它们的行为正常，因此第六

00:04:17.350 --> 00:04:23.560
根的行为基本上应该像法线贴图，我的意思是，如果

00:04:23.560 --> 00:04:27.280
在代码库中已经对此进行了设置，我们期待着

00:04:27.280 --> 00:04:31.900
如果部署选择器，它就会走了，它只会将事物视为地图

00:04:31.900 --> 00:04:35.840
手动执行，因为提示也会使用

00:04:35.840 --> 00:04:39.980
与其余遍历过程将使用的相同的加载器回调

00:04:39.980 --> 00:04:45.020
甚至没有任何线索的更高层次的东西，例如图同步

00:04:45.020 --> 00:04:52.580
只要麻蛋白到现在为止，因为甚至有些东西

00:04:52.580 --> 00:04:59.000
抓住Sanka会神奇地得到它，它将知道正在被所有的块

00:04:59.000 --> 00:05:03.740
穿过那里，所以我不想一直是这个家伙，但是你仍然有

00:05:03.740 --> 00:05:07.850
信号问题，例如您如何知道在

00:05:07.850 --> 00:05:11.410
障碍的路由块，而不是

00:05:13.479 --> 00:05:19.940
是的，所以如果您必须将其选中，那么您基本上是在说哦，这

00:05:19.940 --> 00:05:23.090
实际上是做一些其他遍历的提示，然后您必须

00:05:23.090 --> 00:05:28.190
其他代码去哦，这是一个障碍，我要去做别的事情，所以

00:05:28.190 --> 00:05:37.280
它在功能上有所不同，您仍然必须在选择器中说

00:05:37.280 --> 00:05:41.180
像是，老兄只是抬头，一半可能仍然是基于关键点的抬头

00:05:41.180 --> 00:05:43.910
一半，所以看起来就像要做收集器查询

00:05:43.910 --> 00:05:48.800
说这不仅是地图，还是我的帽子，所以我们已经在整个过程中都使用了它

00:05:48.800 --> 00:05:55.760
放置并移动它，所以从我的角度来看，至少这就像您确实在

00:05:55.760 --> 00:05:59.300
需要解决信令问题，但我已经遇到了这个问题，

00:05:59.300 --> 00:06:02.780
已经必须解决它，这样就不会像我们这样说

00:06:02.780 --> 00:06:05.660
已经必须走了，您必须决定自己在记忆中的内容

00:06:05.660 --> 00:06:13.210
表示形式，但这就是整体，没有风格和东西与我有关

00:06:13.210 --> 00:06:16.550
意味着您仍然需要做出巨大的差异化

00:06:16.550 --> 00:06:21.650
在选择器引擎中，因为您无法假设自己只是

00:06:21.650 --> 00:06:29.000
将在常规地图上从键选择中获得最多一个块或节点

00:06:29.000 --> 00:06:32.599
但一脚踏车可能要有多个街区和路障才能到达目的地

00:06:32.599 --> 00:06:37.639
就像我们走过这条路之前，就像我们必须解决那样，

00:06:37.639 --> 00:06:42.320
很好，因为整个权重图在此同步了概念，

00:06:42.320 --> 00:06:46.000
所有这些东西得以实现的原因

00:06:46.900 --> 00:06:49.900
正确的

00:06:51.099 --> 00:06:54.889
正确，所以链接加载器层知道它实际上在遍历

00:06:54.889 --> 00:07:07.460
块，并且可以正确地正确浮出，好吧，这确实有点

00:07:07.460 --> 00:07:12.110
回答我的问题，尽管我很想知道为什么您需要为什么只能代表

00:07:12.110 --> 00:07:18.589
为了让他们看起来抬头，但我确实感觉像人们在使用

00:07:18.589 --> 00:07:23.749
二进制密钥，他们可能希望API形式接受二进制多维数据集，因此，如果它们是

00:07:23.749 --> 00:07:27.529
使用汉普顿命令来执行二进制密钥，就像它们可能不是

00:07:27.529 --> 00:07:30.319
将欣赏一个API，使他们可以在整个字符串中进行字符串转换

00:07:30.319 --> 00:07:33.620
一个对他们来说实际上并不有趣的地方，他们可能这样做是为了

00:07:33.620 --> 00:07:38.569
在某个时候得到一个选择器，但大多数时候我认为他们只是去

00:07:38.569 --> 00:07:41.960
要以二进制形式传递它们，至少它们应该能够做到这一点

00:07:41.960 --> 00:07:49.520
如果底层的实现是有趣的和二进制的，但是如果

00:07:49.520 --> 00:07:54.439
是这样的话，如果您想使用选择器之类的裁定，例如

00:07:54.439 --> 00:07:59.240
能够使用这样的东西，您需要基本上遵守ID

00:07:59.240 --> 00:08:02.719
数据模型，如果您在数据模型之外做其他事情，您当然可以自由地做

00:08:02.719 --> 00:08:06.259
所以，但是然后您就没有希望他们都一样，如果您CH甚至

00:08:06.259 --> 00:08:11.300
围绕它进行更多的调整，但是您当然可以自由地这样做，而且它不会像

00:08:11.300 --> 00:08:15.789
平滑，就好像您将更多地使用数据一样

00:08:17.589 --> 00:08:30.529
好的，仅供参考，以UM PowerPoint正在使用二进制文件执行HAMP的方式进行参考

00:08:30.529 --> 00:08:36.680
像各地的钥匙一样，只要把它们放在雷达上就可以了

00:08:36.680 --> 00:08:43.039
大量使用大量文件硬币的大数据项目是相当不错的

00:08:43.039 --> 00:08:46.430
在此数据表中做了很多事情，我们实际上处理了太多数据，我们

00:08:46.430 --> 00:08:49.940
每个月都会有二十万美元的s3账单，所以

00:08:49.940 --> 00:08:54.920
我们删除了一堆数据，并在需要时对其进行重新处理

00:08:54.920 --> 00:08:59.870
所以我们就不用付钱了，因为cuz lambda太便宜了，以至于我们付出了代价

00:08:59.870 --> 00:09:05.490
减少生成故事的数据，虽然那样，但这就像

00:09:05.490 --> 00:09:10.139
现在返回燃烧器，所以我被释放了其他东西，得到了一堆DAG

00:09:10.139 --> 00:09:14.370
完成的工作我现在有更新或讲师，基本上就像

00:09:14.370 --> 00:09:18.420
用于完成我们传统上称为命名问题的API

00:09:18.420 --> 00:09:22.230
某物的易变名称，您需要交换引用，这是

00:09:22.230 --> 00:09:26.430
就像API层一样，您可以将其插入，因此我一直

00:09:26.430 --> 00:09:33.149
最近在使用HTTP进行工作，到处都有一个LRU问题

00:09:33.149 --> 00:09:39.600
一分钟之内，您是否拥有一个良好且一致的图书馆，可以胜任Global的

00:09:39.600 --> 00:09:43.800
跨浏览器和一个即使在所有情况下也保证是全局的节点

00:09:43.800 --> 00:09:51.980
版本不匹配，而我以前使用的所有东西都是

00:09:56.360 --> 00:10:07.319
全球单曲之类的东西，就像被黑客入侵一样，因为你不是

00:10:07.319 --> 00:10:13.800
应该，但我实际上不知道，所以它将是胶水晶兄弟

00:10:13.800 --> 00:10:17.870
无论如何，有趣的链接给你

00:10:18.949 --> 00:10:27.360
出于明显的原因，您要缓存它的名称是global和browser as

00:10:27.360 --> 00:10:33.540
蕾娜（Rayna）的全球好吧，我会检查一下，谢谢，是的，现在我正在研究

00:10:33.540 --> 00:10:38.190
它的远程部分类似于获取远程设备，因此您可以添加远程设备并

00:10:38.190 --> 00:10:42.529
然后你从他们那里推拉，这就是我正在那里工作的部分，

00:10:42.529 --> 00:10:58.889
除了喜欢一些招聘的东西和其他一些团队的东西

00:10:58.889 --> 00:11:09.199
任何人都可以看到文本文档列表Cochin现在走得更远

00:11:10.819 --> 00:11:14.310
它仍然遥不可及，因为事情的范围只是

00:11:14.310 --> 00:11:19.830
字符串类型发生了很多事，但是发生了很多事情

00:11:19.830 --> 00:11:22.980
现在正确生成整数类型不正确生成这些

00:11:22.980 --> 00:11:26.460
就像简单的标量叶节点，所以它们很简单，但是

00:11:26.460 --> 00:11:32.550
刚完成的开发就可以在测试中使用，现在将结构与数学作为

00:11:32.550 --> 00:11:36.780
代表，所以它们是自然的代表作品，其中包括

00:11:36.780 --> 00:11:40.770
他们有可理解的字段，其中包括效果可选字段

00:11:40.770 --> 00:11:45.750
包括是否将每种类型的mays实现为指针还是

00:11:45.750 --> 00:11:49.980
作为嵌入式Struck，这是我现在已将其设置为参数的内容

00:11:49.980 --> 00:11:53.370
您可以通过一些辅助配置进行控制，因此这不是此操作的一部分

00:11:53.370 --> 00:11:56.220
进行宣告，因为这对围棋很重要

00:11:56.220 --> 00:12:00.150
koujun并不关心语义，而只是内部语义，但这是一个

00:12:00.150 --> 00:12:04.590
像现在进行配置一样，还有一个辅助配置配置

00:12:04.590 --> 00:12:09.030
系统现在通过管道传递所有模板化的所有文化，以便

00:12:09.030 --> 00:12:15.630
东西是一致的，没有完全连接起来，就像感觉重新命名以区别对待

00:12:15.630 --> 00:12:20.520
就像您说的那样，从逻辑上讲这个模式是最新的，但是

00:12:20.520 --> 00:12:24.390
像90％的人一样，实际上需要出口时需要涂油漆，但是

00:12:24.390 --> 00:12:30.540
所有的裁切都在那儿，我们放置的架构中的重命名方向

00:12:30.540 --> 00:12:36.990
很好的第一个结构演示，我就像刚刚开始

00:12:36.990 --> 00:12:40.470
这么长的列表太荒谬了，但我也很激动，我要拖拖拉拉

00:12:40.470 --> 00:12:45.540
每个人都道歉，但好像并不安全

00:12:45.540 --> 00:12:51.830
具有字符串联合表示的结构现在也可以使用

00:12:51.830 --> 00:12:58.170
真的很重要，因为这是相同类型的有效证明

00:12:58.170 --> 00:13:04.410
负载和打击具有不同的功能表示策略，因此

00:13:04.410 --> 00:13:07.500
我们可以进行打击，可以进行字符串连接，也可以进行map

00:13:07.500 --> 00:13:13.950
表示法和这项工作的所有令人信服的符号，是的，这只是

00:13:13.950 --> 00:13:19.260
真的很令人兴奋，所有这些东西还组成了递归列表，甚至添加了一个

00:13:19.260 --> 00:13:24.150
该结构嵌入具有地图表示的结构，该地图表示具有一个字段和

00:13:24.150 --> 00:13:29.130
另一个结构字符串表示形式甚至可以在其中包含其他笔触

00:13:29.130 --> 00:13:30.960
他们可以更多的字符串表示形式

00:13:30.960 --> 00:13:37.160
分解或个人地图工作，包括听不见的价值

00:13:37.160 --> 00:13:42.120
包括您选择可能实施的所有方式的所有可行方法

00:13:42.120 --> 00:13:49.980
递归，这就是很多事情，所有这些现在都具有测试系统

00:13:49.980 --> 00:13:54.630
我实际上对此感到满意，这是从

00:13:54.630 --> 00:14:00.060
以前最长时间以来，我一直在做很多这样的开发，例如

00:14:00.060 --> 00:14:04.649
又快又脏，所以库存中会有所有编码，当您

00:14:04.649 --> 00:14:07.860
在那个包上运行测试，他会吐出一堆生成的文件

00:14:07.860 --> 00:14:13.200
代码，然后将编辑器上下文切换到该程序包，然后我请求

00:14:13.200 --> 00:14:18.510
在那边测试，这是我的流程，就像看到我没有正确执行此操作一样

00:14:18.510 --> 00:14:24.720
在所有报告周期中，报告被分成两半，就像真的没有

00:14:24.720 --> 00:14:30.779
好的，现在修复了，新系统将测试代码生成

00:14:30.779 --> 00:14:36.390
本身可以测试生成的代码是否在同一时间编译

00:14:36.390 --> 00:14:40.980
并且它具有针对新的运行功能测试的机制

00:14:40.980 --> 00:14:45.330
编译生成的代码，并且所有这些都可以通过常规路测之外的其他方式运行

00:14:45.330 --> 00:14:51.120
命令完全按照正常格式进行格式化，实际上我在说完全

00:14:51.120 --> 00:14:56.940
正常的，这并不疯狂，这就是我的意思

00:14:56.940 --> 00:15:02.580
最终要做的事情是使用go插件构建系统，然后加载

00:15:02.580 --> 00:15:08.459
将该插件再次动态地添加到同一进程中，所以这有点

00:15:08.459 --> 00:15:13.050
易碎，顺便说一句，它在Windows上不起作用，因此，如果您尝试开发此软件，

00:15:13.050 --> 00:15:18.240
从Windows上对不起，您将不得不把自己拖到CIA遥控器中

00:15:18.240 --> 00:15:23.490
田径运动是否有一条路可以让它一天工作，或者就像

00:15:23.490 --> 00:15:31.800
可能足够了，但这是否像多步生成一样

00:15:31.800 --> 00:15:38.570
替代之类的

00:15:38.930 --> 00:15:44.689
我应该澄清一下，这是因为如果我讲得太快，这一切都是为了

00:15:44.689 --> 00:15:51.829
测试，就像每一个外观，您都可以在没有此功能的情况下使用它，到目前为止

00:15:51.829 --> 00:15:58.220
进行测试的最好方法我也花了很多时间尝试执行此操作

00:15:58.220 --> 00:16:03.879
就像在一个软件包上进行go测试一样，将go go测试作为子流程进行，

00:16:03.879 --> 00:16:11.629
更糟糕的是，这些解决方案都无法真正使

00:16:11.629 --> 00:16:17.389
我非常激动，喜欢塔田（Tatian）的细节，但可以正确管理所有输出

00:16:17.389 --> 00:16:25.339
递归指示要进行测试，因为它是一个子过程，甚至都不好笑，我只是

00:16:25.339 --> 00:16:31.819
在我再说些什么之前，我会像我的嘴唇一样，因为真正的

00:16:31.819 --> 00:16:40.369
有些问题至少很有趣，这个问题没有上升，所以有

00:16:40.369 --> 00:16:46.069
另一个也正在做令人信服的软件包，没有使用这个解释

00:16:46.069 --> 00:16:51.949
堵住东西，这样仍然有两步的手动过程，但是

00:16:51.949 --> 00:17:03.379
一个具有不同目的的程序包正在测试与

00:17:03.379 --> 00:17:08.569
基本的东西做到了，所以手滚知道类型信息，例如通用或可重复使用的基本信息

00:17:08.569 --> 00:17:14.720
表示某些相同拓扑结构边框的音符和余弦

00:17:14.720 --> 00:17:21.559
使用相同的基准来映射和构造令人兴奋

00:17:21.559 --> 00:17:27.010
自己说，还说我想说的是Cochin更快

00:17:27.010 --> 00:17:33.679
有时快很多，我想写更多的基准来说明多少，但是在

00:17:33.679 --> 00:17:40.850
就算是很小的数据集也要快25％，我敢肯定其中的一些

00:17:40.850 --> 00:17:45.649
事情也像所有em相对于所有一个尺度一样，就像更大

00:17:45.649 --> 00:17:50.539
结构的速度更快，但我没有足够的基准来说明

00:17:50.539 --> 00:17:55.520
是的，很确定这就是我们所缺少的

00:17:55.520 --> 00:18:02.240
是的，这很酷，在Co gen上仍有大量工作要做，因此清单

00:18:02.240 --> 00:18:07.880
完成他们应该很容易我只是还没有完成但工会还没有完成，那些

00:18:07.880 --> 00:18:10.909
可能要花点时间，因为在那里有五个不同的

00:18:10.909 --> 00:18:16.390
他们的口味，那里有一堆代码，可能会有一些

00:18:16.390 --> 00:18:22.840
挑战，尤其是私人工会，因为它们非常不同

00:18:23.200 --> 00:18:26.659
还有很多其他的随机表示和结构

00:18:26.659 --> 00:18:31.250
已经完成，但是它们都应该可行，因为我们已经有了两个主要的

00:18:31.250 --> 00:18:35.659
差异得到批准，所以我们知道可以做到

00:18:35.659 --> 00:18:39.020
错误处理将需要花费很多精力，而我只是一直在飞行

00:18:39.020 --> 00:18:45.380
通过此操作无需在Mac大脑堆栈深度限制上花费太多精力，因此

00:18:45.380 --> 00:18:49.850
文字生成也不包括在内，我现在跳过了，因为

00:18:49.850 --> 00:18:56.090
没有什么像直接依靠正确的，所以像某些地区希望拥有它

00:18:56.090 --> 00:18:58.669
因为我们让它们更清晰，其他一些诸如元反射

00:18:58.669 --> 00:19:03.260
我很乐意拥有此功能，但是这些功能已设置在我的最低可行功能中，因此

00:19:03.260 --> 00:19:08.750
然后最大的警告是，如果您想使用此功能，则全都不是

00:19:08.750 --> 00:19:14.120
连线以从扫描仪文档中调用是的，它仍然由代码驱动

00:19:14.120 --> 00:19:20.150
所以你不得不喜欢并使用这些肮脏的临时建筑功能

00:19:20.150 --> 00:19:28.059
我们会克服的，但不是今天，这很令人兴奋

00:19:28.059 --> 00:19:35.260
在这一点上，我想请某人做一个有益的皮肤

00:19:35.260 --> 00:19:42.200
与我的这种巨大的公关差异和理智性检查了一些我不知道的事情

00:19:42.200 --> 00:19:46.340
实际上认真地请我逐行阅读整个菜品，因为它

00:19:46.340 --> 00:19:52.610
正在迅速变得庞大，但至少有一些评论认为

00:19:52.610 --> 00:19:55.600
值得一看，我开始发现一些非常有趣的东西

00:19:55.600 --> 00:20:00.669
诸如此类的细节相互作用

00:20:01.179 --> 00:20:06.600
如果需要的话，一些有关地图如何表现的规则

00:20:06.600 --> 00:20:10.659
键中发生的有趣的事情可能与其他

00:20:10.659 --> 00:20:14.770
我们之前进行的讨论原来是有一些情况

00:20:14.770 --> 00:20:20.620
就像我真的想强迫这种论点

00:20:20.620 --> 00:20:24.909
确保路径可以使选择器可以轻松提交给我们的东西简化

00:20:24.909 --> 00:20:32.649
适用的只是很多东西，比如真的很高兴再有一套

00:20:32.649 --> 00:20:36.760
大脑看着这个，并确保所有检查都像某人一样

00:20:36.760 --> 00:20:49.120
意识到潜在的后果，所以是的，我倾向于不去做这件事。

00:20:49.120 --> 00:20:59.500
推Peters cui直到为时已晚，也许我应该像你一样

00:20:59.500 --> 00:21:12.460
讨论一下cuz，您可能会和我同步得很像

00:21:12.460 --> 00:21:18.179
有点因为它很大，我还没有写出连贯的评论

00:21:18.179 --> 00:21:23.740
就像我的意思是说它的草案甚至会推动它

00:21:23.740 --> 00:21:29.049
有大量的实现被缝制了，但是

00:21:29.049 --> 00:21:32.559
该专利肯定在我的脑海和文件中，因此

00:21:32.559 --> 00:21:39.750
独自阅读，但希望会有所改变

00:21:40.169 --> 00:21:44.529
这本书有足够的时间来帮助和集中负责人，这可能是一个很好的地方。

00:21:44.529 --> 00:21:49.330
经历艰苦的事情，并整体崩溃的时刻

00:21:49.330 --> 00:21:55.059
芝士的东西，所以我看看，但是钱多少

00:21:55.059 --> 00:22:00.130
我上次PR的进度我还没走完所有的路

00:22:00.130 --> 00:22:04.740
我去拿着录像我

00:22:05.010 --> 00:22:12.820
感谢您为她所做的悲剧的全心全意King zone yeah yeah so

00:22:12.820 --> 00:22:16.529
她最好为我包起来

00:22:17.910 --> 00:22:29.760
谁为我打哈欠还为时过早，还没有完全醒悟呢，所以

00:22:29.760 --> 00:22:36.780
我一直在分解的两件事主要是这个农场女王多码蛋

00:22:36.780 --> 00:22:43.380
东西，这已经使我们采用了现代格式/多编码回购代码

00:22:43.380 --> 00:22:52.230
从将请求161，然后发出一六八来同一件事的提议

00:22:52.230 --> 00:23:02.460
农业团队是否希望能够识别这些承诺哈希，如

00:23:02.460 --> 00:23:10.290
CID表单，这就是他们需要的一些多编解码器条目，但是

00:23:10.290 --> 00:23:18.420
问题是我花了很多东西不清楚

00:23:18.420 --> 00:23:24.960
上周试图弄清楚一些，但仍然有一个不清楚的地方

00:23:24.960 --> 00:23:29.250
就是为什么，但是她去那儿撞砖墙，有一个

00:23:29.250 --> 00:23:37.200
坚持认为这很重要，但基本上您会得到

00:23:37.200 --> 00:23:42.570
您可以从以下各个过程中获得这三个承诺哈希

00:23:42.570 --> 00:23:48.720
归档硬币承诺，一项承诺，数据承诺，我认为是

00:23:48.720 --> 00:23:57.930
我最了解的是四个部门和一个复制承诺

00:23:57.930 --> 00:24:06.200
是一项承诺，因为我可以生成它们，这基本上是一个

00:24:06.200 --> 00:24:11.750
复杂的填充和默克尔化过程，使您仅需一个哈希

00:24:11.750 --> 00:24:17.880
从您要发送到文件的输入数据中，该文件将永远无法工作，并且

00:24:17.880 --> 00:24:24.450
您会在四个方面做出承诺，这基本上就是所获得的东西的ID

00:24:24.450 --> 00:24:31.830
存储，您可以用它来做交易和做交易

00:24:31.830 --> 00:24:36.090
但随后也会传染其他疾病，所以这些问题是

00:24:36.090 --> 00:24:39.360
不只是朝着鼻孔而已，不仅是孵化，还不像他是我的狗在孵化

00:24:39.360 --> 00:24:44.220
程序和哈希函数，并给您返回哈希注释，这样您就不能

00:24:44.220 --> 00:24:49.070
用我们的标准范式说这个东西代表了一些基础数据

00:24:49.070 --> 00:24:56.190
但您可以说这个哈希值代表Merkle的尖端

00:24:56.190 --> 00:25:03.690
树，因此使其适合多种格式的一种方法是获取多种编解码器

00:25:03.690 --> 00:25:10.470
仅限于此，并说这些只是当地人的最爱

00:25:10.470 --> 00:25:17.250
compey和comdey的树，这是一个二元奇迹树，所以您可以这样说

00:25:17.250 --> 00:25:24.870
至少此值对应于一个具有两个以上值的块

00:25:24.870 --> 00:25:29.400
您可以按照相同的方式将两个以上的值转换为两个以上的值，直到您

00:25:29.400 --> 00:25:38.100
通过

00:25:38.100 --> 00:25:46.230
密封的数据会得到一棵新颖的Merkle树，因此您拥有诸如二进制本地

00:25:46.230 --> 00:25:52.650
树，它使用更复杂的算法到达那里，但它仍然是本地树，因此

00:25:52.650 --> 00:25:59.280
您可以通过类似的方式将此节点指向其他节点的列表

00:25:59.280 --> 00:26:06.620
您可以按照有序的方式访问基础数据，以便那些

00:26:06.620 --> 00:26:16.940
拆开了任务161的原始内容，并且出现了au，因为多编解码器

00:26:16.940 --> 00:26:25.679
森林172中3个项目的提案，将这些内容标识为

00:26:25.679 --> 00:26:31.380
这种类型的东西，但是还有另外两个多散列树，

00:26:31.380 --> 00:26:39.980
 Porticus曾经对我和171进步170是一个char到256变种

00:26:39.980 --> 00:26:50.039
用零替换掉最后两位，嗯，这是一个新颖的sha-256

00:26:50.039 --> 00:26:55.500
这是有先例的，因为我们在两到六分钟内进行了两次淋浴

00:26:55.500 --> 00:27:01.049
已经进行了两位操作，所以执行此操作不是一件容易的事，只是您

00:27:01.049 --> 00:27:07.860
知道正在打开更多这些古怪变体的大门，所以

00:27:07.860 --> 00:27:10.679
关于它的名称的一些草图，因为它是当前

00:27:10.679 --> 00:27:16.679
叫做trunk to，而trunk可能不是正确的词，因此两者可能

00:27:16.679 --> 00:27:19.799
不是正确的意思是那里有一些讨论，但是我

00:27:19.799 --> 00:27:25.860
认为我们可能会到达某种东西，然后他们的复数形式171正在添加一个

00:27:25.860 --> 00:27:31.590
新哈希函数Poseidon，它们用于Sidon的密封数据

00:27:31.590 --> 00:27:37.100
有趣，因为它是一个新的哈希函数，但它也很沉重

00:27:37.100 --> 00:27:46.590
参数化一面墙，所以您不能只是说我正在使用Poseidon 256

00:27:46.590 --> 00:27:52.169
你知道你不得不说我正在用波塞冬曲线和这个

00:27:52.169 --> 00:28:00.659
阿里，然后是一堆其他的小总理，所以我撤出了那些

00:28:00.659 --> 00:28:09.710
曲线和树的能量这两个主要的东西进入这个已婚的名字，然后

00:28:09.710 --> 00:28:15.000
在其末尾添加了一个五点变体作为其他参数，因此，如果

00:28:15.000 --> 00:28:17.669
有人在使用波塞冬，他们可以购物，他们可以拥有和拥有

00:28:17.669 --> 00:28:21.269
另一个条目，他们可以列出自己的曲线，他们可以列出自己的树木树

00:28:21.269 --> 00:28:26.100
然后他们可以拥有自己的其他参数变体，如

00:28:26.100 --> 00:28:31.590
到目前为止，如果他们检查我是否更改过他们，您可以对此进行迭代

00:28:31.590 --> 00:28:35.850
参数，如果他们正在使用此哈希函数，则可以对其进行迭代，然后

00:28:35.850 --> 00:28:41.070
任何其他人添加一个，然后它就可以扩展，这样您就可以看到主要部分，但是

00:28:41.070 --> 00:28:44.970
他们还有空间来更改这些附加参数，然后在

00:28:44.970 --> 00:28:51.120
当您在文件硬币和

00:28:51.120 --> 00:28:55.950
波塞冬（Poseidon）实例，您可以通过添加其他方式来完成

00:28:55.950 --> 00:28:58.920
通过散列函数提供电路，该散列函数提供了

00:28:58.920 --> 00:29:05.700
更高的安全性版本，因此当他们到达那里时，它们就是最初的哈希

00:29:05.700 --> 00:29:09.930
功能，如果愿意，他们还将获得第二个可以使用的功能

00:29:09.930 --> 00:29:17.370
如果在基本漏洞中发现安全漏洞，这将很有用

00:29:17.370 --> 00:29:21.630
可以说，让我们切换到高安全性版本，更多

00:29:21.630 --> 00:29:25.470
价格昂贵，但可供他们使用，因此那里还有第二个

00:29:25.470 --> 00:29:30.210
解释了一个事实，即尽管他们可能没有使用这个东西

00:29:30.210 --> 00:29:37.410
无论如何使用它还是有点复杂，但是在这些事情上有讨论

00:29:37.410 --> 00:29:43.740
而且没有人压迫它得到解决，并且

00:29:43.740 --> 00:29:49.620
有一点你知道圆钉成方孔之类的东西

00:29:49.620 --> 00:29:54.990
在某些东西上进行，但是我认为我认为这是有道理的。

00:29:54.990 --> 00:30:00.030
做到了，我觉得这就像刮擦多层大衣一样，你知道吗

00:30:00.030 --> 00:30:05.040
在某种程度上，我不认为这是最初想到的

00:30:05.040 --> 00:30:10.140
舒展也许我不知道我的意思是，这似乎是坚定的，这是

00:30:10.140 --> 00:30:13.170
多协议应该可以工作的方式，如果不能这样工作

00:30:13.170 --> 00:30:20.850
那么多编解码器一般来说是不可扩展的，所以我会

00:30:20.850 --> 00:30:24.210
喜欢更多的订婚，然后我让Falco订婚，但如果您知道

00:30:24.210 --> 00:30:27.590
我对此的看法真的很有帮助

00:30:29.210 --> 00:30:36.660
所以无论如何，我一直在做的另一件事是比特币的事情怎么办

00:30:36.660 --> 00:30:42.120
我PLD是比特币，以前我们有JavaScript库，但没有

00:30:42.120 --> 00:30:50.580
完整，我的意思是在不同程度上，他们并没有完全说明所有

00:30:50.580 --> 00:30:56.040
在比特币区块中骑自行车，所以go库可以分解并且有点

00:30:56.040 --> 00:31:03.510
记录到具有C ID的IPL契约块系列，但您并不能说明所有问题

00:31:03.510 --> 00:31:07.950
这些块，您在进行处理时最终会丢失一些数据

00:31:07.950 --> 00:31:14.400
这全都归功于他们对她所做的秘密改变

00:31:14.400 --> 00:31:21.540
拥有一切，基本上您就是标准

00:31:21.540 --> 00:31:30.030
标头加上Merkle树，目前约有一半的交易无效

00:31:30.030 --> 00:31:33.120
交易实际上不知道有多少交易是神圣的

00:31:33.120 --> 00:31:39.150
交易，但如果您遵循该规则，则会错过所有见证数据

00:31:39.150 --> 00:31:42.600
因此，每当有人进行交易并且他们想要在其中记录见证数据时，

00:31:42.600 --> 00:31:47.580
在那里，您知道区块链用于存储各种各样的其他东西

00:31:47.580 --> 00:31:52.890
除了金融交易之外，所有这些东西现在都悬而未决，

00:31:52.890 --> 00:31:58.590
要到达那里，您必须遵循第二棵默克尔树，但随后您到达

00:31:58.590 --> 00:32:03.300
基本上是原始交易的复制品，有些交易

00:32:03.300 --> 00:32:10.830
其中的其他字节，我将在第二台计算机上共享屏幕

00:32:10.830 --> 00:32:17.340
连接到这里，我将带你经历这件事，

00:32:17.340 --> 00:32:24.030
一直在努力，因为我投入了大量的智力并弄清楚了

00:32:24.030 --> 00:32:33.870
如何运作，您将和我一起坐下来，但是我确实想要

00:32:33.870 --> 00:32:39.060
有关此过程的一些反馈，因为这会对我们的方式产生影响

00:32:39.060 --> 00:32:47.220
考虑硬币中的IP LD和其他内容内容寻址数据，所以如果

00:32:47.220 --> 00:32:51.330
您想将比特币视为内容地址，那么您必须

00:32:51.330 --> 00:32:56.340
将其压缩到我们的范例中，或者您必须扩展我们的范例以使其起作用

00:32:56.340 --> 00:33:04.350
比较适合尝试啤酒之类的东西，所以主要是比特币区块

00:33:04.350 --> 00:33:10.800
由其标题和您在比特币区块和

00:33:10.800 --> 00:33:13.260
您可以在各种各样的网站上找到一个街区

00:33:13.260 --> 00:33:18.680
通过其ID，您知道以零字符串开头

00:33:18.740 --> 00:33:22.460
那是街区ID，但那是一个双淋浴-如果您修复

00:33:22.460 --> 00:33:25.880
仅此而已，只有80位击球手的哈希值

00:33:25.880 --> 00:33:32.029
并且该块比标头长很多，并且它的工作方式是

00:33:32.029 --> 00:33:37.820
标头包含此TX移动根，其中是默克尔树的尖端

00:33:37.820 --> 00:33:42.770
二进制本地树，它将带您进入还包含的事务

00:33:42.770 --> 00:33:49.750
在该区块内，瞬时的点不稳固是因为要考虑到不均匀性

00:33:49.750 --> 00:33:57.350
对于奇数级，它们会进行哈希的重复，这导致了

00:33:57.350 --> 00:34:07.100
到安全漏洞，但您可以将TX Merkel分解为节点

00:34:07.100 --> 00:34:13.339
默克尔树的树，所以您要做的是说每个需要注意的默克尔树

00:34:13.339 --> 00:34:19.570
树本身就是一个IP LD块，它导致了另外两个，直到您发现

00:34:19.570 --> 00:34:27.220
这个东西实际上指向真实的交易，因此可以正常工作，但随后

00:34:27.220 --> 00:34:34.639
问题是这些用于我的鼠标的默克尔树工作正常，所以

00:34:34.639 --> 00:34:38.659
默克尔树的交易，如果你看下来经典的交易

00:34:38.659 --> 00:34:46.250
这里的TX ID是我们现在完成的交易的舱口

00:34:46.250 --> 00:34:50.419
封装了整个区块，因此交易可以是理想的区块，

00:34:50.419 --> 00:34:55.429
它的ID是它的哈希，我们可以使用它进行翻译，因为交易ID

00:34:55.429 --> 00:34:59.330
是比特币社区过去流传的另一件事

00:34:59.330 --> 00:35:02.980
因为您可以通过他们的ID查找交易

00:35:02.980 --> 00:35:07.250
但是随后出现了一段，说我们这个见证人有问题

00:35:07.250 --> 00:35:10.460
拨号被附加到事务中，并导致一些

00:35:10.460 --> 00:35:15.380
安全问题，我们需要将其与其余的阻拦犬隔离开来，因此，如果

00:35:15.380 --> 00:35:20.630
您低头看这些神圣的交易，他们仍然会付出代价

00:35:20.630 --> 00:35:25.339
交易ID位于此处，但仅是部分交易的哈希值

00:35:25.339 --> 00:35:30.550
交易实际上您必须删除

00:35:30.650 --> 00:35:35.780
交易数据中间的两个主要部分来获取哈希

00:35:35.780 --> 00:35:41.180
为您提供交易ID，因此如果我要按照D条款提出上诉，

00:35:41.180 --> 00:35:47.240
并且您已将TX ID作为您的CID，但它并未给您完整的阻止

00:35:47.240 --> 00:35:52.520
给您这个部分块，以便从那件事中删除见证数据

00:35:52.520 --> 00:35:57.680
有一个TX哈希，然后他们确实将其具有整个批次的哈希，但随后

00:35:57.680 --> 00:36:02.150
这存储在其他地方，所以发生的事情是你

00:36:02.150 --> 00:36:07.160
导航到所有这些TX ID之后，您便拥有了这些

00:36:07.160 --> 00:36:11.510
不是真实交易的交易，不是交易中的全部交易

00:36:11.510 --> 00:36:16.760
很多情况下他们没有证人数据，您可以转到第一个

00:36:16.760 --> 00:36:22.850
是coinbase交易，这是矿工所在的交易

00:36:22.850 --> 00:36:30.220
给予奖励，在那您就可以找到这一见证人的承诺，

00:36:30.220 --> 00:36:41.510
我们见证人的承诺是，这是一棵不太漂亮的默金树的哈希

00:36:41.510 --> 00:36:47.780
节点，但它是Merkle树节点的哈希值加上一个随机数，而随机数是

00:36:47.780 --> 00:36:51.410
重要的是您需要使用它来重建适当的币库

00:36:51.410 --> 00:36:57.350
交易，但随后枫树知道它与一起出现会给您一个

00:36:57.350 --> 00:37:04.760
实际使用事务的适当哈希值的本地树，因此

00:37:04.760 --> 00:37:09.560
您可以使用该随机数和

00:37:09.560 --> 00:37:12.380
这项承诺，然后您就可以重建其余的

00:37:12.380 --> 00:37:15.290
通过遵循他们的本地树进行交易，然后您将其适当

00:37:15.290 --> 00:37:21.710
散列，所以如果您遵循所有步骤，就会发现这里的问题之一是我们

00:37:21.710 --> 00:37:29.330
可以将一个比特币块重构为这个双重记忆的指令，因此

00:37:29.330 --> 00:37:35.060
说一个区块中有一百笔交易，您有一百笔基本交易

00:37:35.060 --> 00:37:41.450
交易，然后是所有导致到达本地路由的本地节点，但随后

00:37:41.450 --> 00:37:44.220
你必须再建一棵第二棵默克尔树

00:37:44.220 --> 00:37:50.460
再次导致相同的交易，我们大约有一半是

00:37:50.460 --> 00:37:57.540
不同，我在其中有这些见证人数据，所以主要的问题是

00:37:57.540 --> 00:38:01.080
除了复杂性之外，主要的问题是

00:38:01.080 --> 00:38:09.210
有重复的数据，所以在每个细分交易中，您都会有

00:38:09.210 --> 00:38:17.160
它在摩卡咖啡中的经典形式和神圣形式就在于此

00:38:17.160 --> 00:38:23.280
IPL专用的比特币区块版本，所以我不知道我不知道什么

00:38:23.280 --> 00:38:32.280
任何数字都与此有关，但他们说区块链目前是

00:38:32.280 --> 00:38:39.599
如果我们要变成IPL，那么现在的区块链有多大

00:38:39.599 --> 00:38:43.380
电子内容，我们可以乘以它的大小

00:38:43.380 --> 00:38:59.760
1.5倍也许只是为了达到我们经典的理想形式，但是它可以工作，但是

00:38:59.760 --> 00:39:04.470
您可以看到它在哪里扩展了我们的概念，另一件事是

00:39:04.470 --> 00:39:10.020
在这个远点多编解码器讨论中可以做到的是

00:39:10.020 --> 00:39:18.510
诸如默克尔过程之类的东西也是一个哈希，因此实际上在其中添加了一个条目

00:39:18.510 --> 00:39:27.349
比特币默克尔的多舱口盖，然后您可以说您的CID为

00:39:27.349 --> 00:39:34.310
涉及TX默克尔根，并解析为交易列表和

00:39:34.310 --> 00:39:39.270
然后就把它放在那然后再说

00:39:39.270 --> 00:39:44.010
默克尔流程具有一些非常疯狂的功能，可让您解决

00:39:44.010 --> 00:39:50.790
查找可能的数据，然后我们就可以实际使用该过程

00:39:50.790 --> 00:39:55.380
对于Farpoint事物使用相同的参数，但随后您会得到输入

00:39:55.380 --> 00:40:01.940
对于多重哈希表中的各种非本地进程，您和

00:40:01.940 --> 00:40:06.140
您和您将多重哈希的概念扩展到了最初的概念之外

00:40:06.140 --> 00:40:13.700
写成反正我希望你喜欢这个演讲，有没有

00:40:13.700 --> 00:40:26.599
这么多的问题我不确定我是否完全遵循他们为什么要嵌入

00:40:26.599 --> 00:40:32.630
在此顺序范围内的一些隔离证人信息

00:40:32.630 --> 00:40:42.559
个字节，但不对其进行哈希处理，这只是有趣，是的，不一定

00:40:42.559 --> 00:40:49.430
重要的是，我们此时只需要处理一下即可，所以您可以

00:40:49.430 --> 00:40:57.039
大条码阅读Boonton中的比特币新闻提案一对一

00:40:57.039 --> 00:41:05.180
那是我的神圣之源，是的，看起来我只是在快速阅读

00:41:05.180 --> 00:41:08.869
抽象此位定义了一个称为见证的新结构，即

00:41:08.869 --> 00:41:12.680
致力于与交易本地树分开的块结构

00:41:12.680 --> 00:41:16.519
包含转移，它可能会检查交易的有效性，但不是必需的

00:41:16.519 --> 00:41:20.150
确定交易效果，尤其是脚本签名是

00:41:20.150 --> 00:41:23.480
移到这个新结构中，见证人将致力于树

00:41:23.480 --> 00:41:27.109
通过Coinbase交易嵌套到现有的默克尔路线的区块中

00:41:27.109 --> 00:41:31.670
使其软的目的是使软的具有可比性

00:41:31.670 --> 00:41:37.519
未来的硬叉，并将这棵树放在区域分支中

00:41:37.519 --> 00:41:40.849
我不太了解，但事实是，

00:41:40.849 --> 00:41:48.500
矿工可以使用此见证数据来操纵他们的哈希

00:41:48.500 --> 00:41:55.279
过程，因为见证人Tanner就像实际交易的附录

00:41:55.279 --> 00:41:59.210
因此，这与

00:41:59.210 --> 00:42:02.660
交易，他们想确保当矿工在

00:42:02.660 --> 00:42:07.250
散列这些不是他们正在使用的交易的交易正在变化

00:42:07.250 --> 00:42:10.640
块的正确部分，以达到他们的

00:42:10.640 --> 00:42:15.170
赢得孵化而不是成为目击者

00:42:15.170 --> 00:42:22.550
放入疯狂的面孔电子邮件，我认为这是主要原因，因此您也有

00:42:22.550 --> 00:42:28.070
与十个未成年人有关的事情选择是否包括这个

00:42:28.070 --> 00:42:32.990
在他们找到哈希之后，他们就在那里哈希而无需考虑或考虑

00:42:32.990 --> 00:42:36.290
该见证数据，然后在实际创建块时将其放入

00:42:36.290 --> 00:42:39.320
之后，他们不应该那不重要，然后让他们

00:42:39.320 --> 00:42:49.130
改变任何东西，你知道这是我决定的事情之一

00:42:49.130 --> 00:42:53.690
不要太深入地了解它，而是接受一个事实，那就是疯狂的事情

00:42:53.690 --> 00:43:04.280
存在是的，虽然这是存在的，但它提出了一个问题，是吗

00:43:04.280 --> 00:43:12.680
在区块链的某种程度上，不是不是很好，然后你不是说

00:43:12.680 --> 00:43:20.870
有一个想法，将所有这些数据包括哈希函数返回到

00:43:20.870 --> 00:43:26.630
在那里它被隔离了，但是并没有完全分开，它与

00:43:26.630 --> 00:43:34.040
交易，但仍包含在障碍中，因此通过自身交易

00:43:34.040 --> 00:43:38.780
奇迹的过程，所以它与像改变这些东西并不完全分开

00:43:38.780 --> 00:43:46.160
会改变区块的哈希值，所以我猜原因就像原因之一

00:43:46.160 --> 00:43:50.750
他们这样做是为了让他们可以重用

00:43:50.750 --> 00:43:55.010
区块链基本上将其存储在某个地方，但同时不是

00:43:55.010 --> 00:44:00.760
必须更改TX​​ ID是什么样的东西，以便可能回答

00:44:00.760 --> 00:44:08.000
埃里克（Eric）的问题，但我的问题是我们是否代表区块链

00:44:08.000 --> 00:44:16.610
如果我们处理，段数据是否是功能块链

00:44:16.610 --> 00:44:20.930
我们会丢失很多信息，因为人们正在使用见证数据

00:44:20.930 --> 00:44:24.859
你知道人们说的很好我你知道我已经验证了这个基础

00:44:24.859 --> 00:44:28.910
在区块链上吸引人们知道他们做的事情就像他们可以

00:44:28.910 --> 00:44:34.369
了解他们可以通过说出“外观II”将此内容记录下来来记录历史

00:44:34.369 --> 00:44:38.920
比特币区块链在某个时候，您可以查找它以确认它在那里

00:44:38.920 --> 00:44:42.950
所有这些都将消失，而数据实际上将是

00:44:42.950 --> 00:44:50.779
我觉得这个过程很有趣，所以让我来总结一下

00:44:50.779 --> 00:44:55.009
我不确定这是否正确，但我仍在尝试处理，但似乎

00:44:55.009 --> 00:45:02.690
就像我们正在寻找的是他们有我们可能试图映射成两个的东西

00:45:02.690 --> 00:45:07.609
不同的区块概念，但实际上它们实际上在区块内部

00:45:07.609 --> 00:45:10.670
其他的，这有点让我们头晕目眩，因为那不是我们的方式

00:45:10.670 --> 00:45:19.489
通常会考虑它，而我们尝试定义很多IP LD

00:45:19.489 --> 00:45:23.989
出于任何新设计的目的，因为链接是您在此放置的东西

00:45:23.989 --> 00:45:29.900
数据结构拓扑的中间，但您不要过于依赖它们

00:45:29.900 --> 00:45:36.109
直接出于任何应用目的，我们要关注的比特币内容

00:45:36.109 --> 00:45:39.890
链接非常直接，因为这是人们习惯于关心的

00:45:39.890 --> 00:45:43.069
这些应用程序正在编写，所以我们处在这个怪异的岩石和艰难的地方

00:45:43.069 --> 00:45:48.619
我们想要这些链接的地方，但它们只是不映射到

00:45:48.619 --> 00:45:53.049
以同样的方式，因为Lachman的这种怪异的阻挡是

00:45:53.049 --> 00:45:57.799
是的，这更好，但不一定是硬约束

00:45:57.799 --> 00:46:01.970
进行讨论，但是我的一个假设是

00:46:01.970 --> 00:46:06.109
某人应该应该能够露面，比如说我们把看到的一样

00:46:06.109 --> 00:46:09.829
像具有这些块的ipfs网络，有人应该可以

00:46:09.829 --> 00:46:13.539
硬币，假设他们应该使用该哈希值的交易ID

00:46:13.539 --> 00:46:17.720
反转它，因为它以大端字节序显示，所以我们将其反转到一点

00:46:17.720 --> 00:46:21.920
endian开头的字节，使其成为CID，您应该在查询中

00:46:21.920 --> 00:46:27.140
网络可以使用块ID来获得相同的交易，所以这是我的

00:46:27.140 --> 00:46:32.930
这是我工作的基础，不是这样想的

00:46:32.930 --> 00:46:37.220
不一定非要那样，那你应该怎么做

00:46:37.220 --> 00:46:40.740
这些块，如果您将不得不使用链接到它们

00:46:40.740 --> 00:46:44.730
我们的哈希值，它们将成为我们添加哈希值的方式

00:46:44.730 --> 00:46:49.380
意味着就像在比特币区块链中一样，他们的内部存储机制可以

00:46:49.380 --> 00:46:52.650
只需使用两个单独的键来保持该块，一个键就可以验证整个

00:46:52.650 --> 00:46:55.890
阻止和不属于它的一部分，然后他们可以

00:46:55.890 --> 00:46:59.910
用它作为地图可以，我们真的不能那样做，因为我们就像一个

00:46:59.910 --> 00:47:04.320
更通用的商店，在某些情况下，商店实际上不是

00:47:04.320 --> 00:47:06.660
值得信赖，因为您正将其从网络中撤出

00:47:06.660 --> 00:47:13.320
因此您不能只喜欢接受不存在的哈希，因为人们可以

00:47:13.320 --> 00:47:19.530
随便什么垃圾，是的，就像我们只是效率略低

00:47:19.530 --> 00:47:27.570
数据中的每个人，但无论如何对我来说似乎是一个很好的权衡，所以

00:47:27.570 --> 00:47:32.940
这是我一直潜伏并观看直播的地方，但我有一个问题

00:47:32.940 --> 00:47:35.550
我希望前一阵子确实有添加这个概念

00:47:35.550 --> 00:47:40.860
IP LD的功能，当然是天生不安全的，但是这些似乎

00:47:40.860 --> 00:47:44.130
是非常简单的功能，例如在

00:47:44.130 --> 00:47:47.040
事务或中间的一定数量的字节

00:47:47.040 --> 00:47:51.690
事务，所以这是一个非常完全简单的函数调用

00:47:51.690 --> 00:47:58.370
实际上可能是CID中的链接，并且有些东西是您有效负载的，而不是

00:47:58.370 --> 00:48:03.870
对不起，没有CID，但该节点可能仍然存在类似的问题

00:48:03.870 --> 00:48:08.100
我想通过哈希表来获取，然后我从其他人那里索要，

00:48:08.100 --> 00:48:11.520
我只是删除其中的数据，所以它们可以给我像

00:48:11.520 --> 00:48:17.600
实际的块连接sigrid数据，但是它们可以给我任何类似的东西

00:48:17.780 --> 00:48:21.390
而就像在比特币区块链中，当他们拉动这个区块时，他们只知道

00:48:21.390 --> 00:48:25.920
这是一个特殊的模块，必须使用两个不同的模块进行验证

00:48:25.920 --> 00:48:32.700
保持两个不同的动作，是的，那里应该另外澄清一些东西

00:48:32.700 --> 00:48:38.580
即使我们喜欢某人一次交易而我们仅成功了

00:48:38.580 --> 00:48:43.350
进入IPA网络，他们有一个交易ID，可以查询它，但是

00:48:43.350 --> 00:48:46.170
他们只会得到它的经典版本，即使它与

00:48:46.170 --> 00:48:51.600
交易比特币内部所做的就是在解码这些东西时

00:48:51.600 --> 00:48:59.580
它将见证数据附加到单个交易组件中，因此

00:48:59.580 --> 00:49:04.650
只是将它们填满，但我们将对它们进行哈希处理，所以让我们在

00:49:04.650 --> 00:49:07.950
我的图片在这里与TX 3对比，假设您看到的是哈希值

00:49:07.950 --> 00:49:11.760
对我们来说，您遵循那种治疗方法，我是说直到您不遵循牛奶

00:49:11.760 --> 00:49:16.830
您只能按原样获取它，但无法导航回

00:49:16.830 --> 00:49:20.220
阻止您无法向下导航以找到

00:49:20.220 --> 00:49:24.120
见证数据，因为您必须向下导航才能进行第一个交易

00:49:24.120 --> 00:49:30.330
交易，而这些交易不是，它们不会彼此链接，它们只是

00:49:30.330 --> 00:49:34.560
通过路线链接，因此如果您有，则仍然无法获得见证数据

00:49:34.560 --> 00:49:38.160
一个交易ID，您出现了那个查询IPF的网络

00:49:38.160 --> 00:49:43.530
对于那个交易ID，你会说是的，他是他这个交易，但是嘿，我

00:49:43.530 --> 00:49:47.400
不知道这是否是段交易，BI也不知道

00:49:47.400 --> 00:50:04.400
除非您必须阻止ID，否则如何到达目击者的动脉

00:50:04.450 --> 00:50:10.170
[音乐]没关系，没几个月，这取决于

00:50:10.170 --> 00:50:14.700
人们会如何在其中使用这些东西II会假设，如果您

00:50:14.700 --> 00:50:19.410
拉这些东西，无论如何，您都将按块进行操作，因为这些块是

00:50:19.410 --> 00:50:23.940
您会尝试完成一些事情，以便进行单个的个人交易

00:50:23.940 --> 00:50:28.350
很有意思，财务数据就在那儿，但您只有

00:50:28.350 --> 00:50:31.380
如果您要退出交易，则接受单个交易

00:50:31.380 --> 00:50:39.060
从IPL D数据中，您可能会或可能不会获得所需的信息，我想也是

00:50:39.060 --> 00:50:42.090
就像在这之间很难区分

00:50:42.090 --> 00:50:45.630
比特币需要做的事情，就像使用比特币数据的人需要做的是

00:50:45.630 --> 00:50:49.800
我假设人们今天使用的是什么，我觉得他们实际上在做

00:50:49.800 --> 00:50:52.710
想要像您正在谈论的那样看待这种数据结构，

00:50:52.710 --> 00:50:56.040
就像对您的兴趣稍微减少了，知道倒出其中之一

00:50:56.040 --> 00:50:59.850
没有其余上下文的交易，所以我认为

00:50:59.850 --> 00:51:03.140
我们在这里发现的地面实际上就像以东的一个很好的中间地带

00:51:03.140 --> 00:51:07.050
对我来说很有意义，因为这似乎提供了有用的

00:51:07.050 --> 00:51:11.610
我认为本机无法提供的用于处理这些数据的结构

00:51:11.610 --> 00:51:15.690
一切都很好，除非您要尝试做的实际上是在

00:51:15.690 --> 00:51:18.080
比特币

00:51:19.130 --> 00:51:26.430
因此，我接下来的步骤是将骰子X放到这个东西上，但事实并非如此

00:51:26.430 --> 00:51:32.490
就IP LD而言，已经完成但我想做的是能够吐痰

00:51:32.490 --> 00:51:38.280
我构建模块，看看平均一个现代有多少个

00:51:38.280 --> 00:51:45.780
交易，然后能够回头浏览区块链并进行

00:51:45.780 --> 00:51:49.980
确保他们验证我实际上是在解释所有字节中的每个字节

00:51:49.980 --> 00:51:55.080
最大的问题是块，这样我就可以采用那些IP LD

00:51:55.080 --> 00:51:58.620
版本，然后以完全相同的形式重建块将无法

00:51:58.620 --> 00:52:03.090
做到这一点，这样我就可以证明我可以对申请提出上诉

00:52:03.090 --> 00:52:09.090
但是它有两种方式，然后那也可以告诉我开销的大小

00:52:09.090 --> 00:52:15.120
我们知道这将是一件非常有趣的事情，但是无论如何

00:52:15.120 --> 00:52:18.330
外卖的夏天是因为这些事情变得非常复杂

00:52:18.330 --> 00:52:23.880
他们想要做的是他们想使其柔软以便兼容，所以他们不得不超载

00:52:23.880 --> 00:52:32.490
coinbase交易然后执行此疯狂的第二次本地操作，所以这可能是

00:52:32.490 --> 00:52:39.600
已经包括在您的思考中了，但是我认为其中的一些并不像它那么糟糕

00:52:39.600 --> 00:52:45.660
似乎只要我们建立一些词汇和心理空间

00:52:45.660 --> 00:52:52.250
就像我们出于逻辑目的想要的链接和

00:52:52.250 --> 00:52:59.760
我们倾向于考虑IP的物理布局存储方式

00:52:59.760 --> 00:53:06.570
LD紧密相连，但实际上并不一定要如此，而您

00:53:06.570 --> 00:53:13.440
如果您没有数据，并且想获取它，它将查询您是否在做

00:53:13.440 --> 00:53:18.060
您需要知道，我们也倾向于认为这与

00:53:18.060 --> 00:53:20.880
哈希自我中的链接，我深深地吸引了我，但再次

00:53:20.880 --> 00:53:25.290
不必本身，所以如果我们对这三件事没问题的话

00:53:25.290 --> 00:53:33.240
渐行渐远，那么这一切都很好，是的，我当时

00:53:33.240 --> 00:53:38.490
试图早点考虑是不是有点相似，但还有很多

00:53:38.490 --> 00:53:42.450
表示一个链接到一个内部路径的问题很复杂

00:53:42.450 --> 00:53:46.050
阻止，而不仅仅是链接到阻止，是的，我们知道在某个时候，我们将

00:53:46.050 --> 00:53:49.230
需要这样做，我们想创建一种类型，就是这样

00:53:49.230 --> 00:53:52.440
相似，这就像复杂得多，因为它像

00:53:52.440 --> 00:53:57.690
链接到该块中二进制文件的块的切片，就像一个

00:53:57.690 --> 00:54:02.579
很少访问，但就像我不知道也许有某种布局

00:54:02.579 --> 00:54:06.930
您可以做的就是将其分解成多个单独的块

00:54:06.930 --> 00:54:11.970
很多质地哦，那太可怕了，是的，我认为它足够多了

00:54:11.970 --> 00:54:15.240
在相同的解决方案中复杂将无法正常工作，但从概念上讲，我认为

00:54:15.240 --> 00:54:21.180
他们占据了更多的空间，可能有些复杂

00:54:21.180 --> 00:54:25.980
以及大家都问过为什么的Linkletter函数和go代码库

00:54:25.980 --> 00:54:29.549
这些在那里可能有可能实际上在这里有所帮助，并且可能是

00:54:29.549 --> 00:54:35.190
值得思考，例如，有这样的整体

00:54:35.190 --> 00:54:38.579
的复杂性，所以您有一个链接加载器功能，它的其中之一

00:54:38.579 --> 00:54:43.380
参数是哈希，是的，然后它带我们去，所以它们只是一个小元组

00:54:43.380 --> 00:54:47.220
参数称为链接上下文，我没有像这样的所有信息

00:54:47.220 --> 00:54:50.579
兄弟节点，以防您需要在那儿或路径中查找某些东西

00:54:50.579 --> 00:54:56.250
你带到这里，这样的东西可能在这里有用

00:54:56.250 --> 00:55:01.349
也因为我最初将整个视觉化的一件事

00:55:01.349 --> 00:55:05.910
链接上下文方案是哦，如果我有一些类型信息并且我想使用

00:55:05.910 --> 00:55:11.280
推断我在磁盘上的物理存储具有不同的分片

00:55:11.280 --> 00:55:15.809
根据应用程序逻辑，您知道这些是您必须编写的东西

00:55:15.809 --> 00:55:20.609
一些胶水代码，但您可以这样做，也许类似的事情会

00:55:20.609 --> 00:55:25.770
实际上在这里工作很好，你会想像哦，我有这种比特币

00:55:25.770 --> 00:55:31.859
我知道有人在请求链接的交易，它在这组交易中

00:55:31.859 --> 00:55:35.609
字段，然后从语义上给我

00:55:35.609 --> 00:55:39.780
信息，这就是这个被隔离的事物的胆量，我将要

00:55:39.780 --> 00:55:48.000
使用完全不同的逻辑功能查找存储

00:55:48.000 --> 00:56:00.210
很不错，是的，我们希望能够获得他们的交易ID

00:56:00.210 --> 00:56:07.020
有用的块ID限制了我们如何放置这些

00:56:07.020 --> 00:56:14.190
事情是有用的，但我们没有希望我们拥有很多力量

00:56:14.190 --> 00:56:19.560
用我们可以在块和块内的节点之间导航的方式，例如if

00:56:19.560 --> 00:56:22.380
你有一个块ID，那么当我们完成所有事情时，你可以建立一个选择器

00:56:22.380 --> 00:56:34.260
真的很好，但是交易ID问题是这样的，如果您在

00:56:34.260 --> 00:56:38.940
就像我们扩展时一样，我将资源管理器剥离了，例如在Web上

00:56:38.940 --> 00:56:43.980
能够理解比特币块，我们实际上可以做到这一点，

00:56:43.980 --> 00:56:48.900
靠近所有这些各种区块链资源管理器网站

00:56:48.900 --> 00:56:53.220
我们通过再次进行操作将其置于障碍之中，这始终是关于我们可以做的信息

00:56:53.220 --> 00:56:57.000
如果我们把我所有的东西都放在网络中，但是你做不到

00:56:57.000 --> 00:57:00.780
您只能获取基本财务数据的交易ID

00:57:00.780 --> 00:57:07.290
链接，并且没有办法将导航嵌入到块中

00:57:07.290 --> 00:57:12.690
从交易ID中获取，除非您还拥有元数据查看系统，即

00:57:12.690 --> 00:57:17.849
不是，这不是我的感觉T的工作方式就像我们不那样，我们不反向备份一个

00:57:17.849 --> 00:57:27.150
树无论如何都不要这样做，外卖的是我可以解释所有

00:57:27.150 --> 00:57:32.150
字节，然后将其转为理想状态，这不是很好

00:57:34.089 --> 00:57:39.859
而且我认为我认为这还将扩展到其他具有全部功能的区块链

00:57:39.859 --> 00:57:43.460
基于比特币的区块链，它们都有相似的

00:57:43.460 --> 00:57:48.440
挑战，然后您就会知道整个生态系统都在考虑内容

00:57:48.440 --> 00:57:52.369
以非常本地化的方式解决问题，我们见证了很多

00:57:52.369 --> 00:57:56.660
最近我们与他们进行讨论时，与以太坊进行了讨论

00:57:56.660 --> 00:58:11.630
强迫性定位到位水平非常有趣，这是我们的第一个目标

00:58:11.630 --> 00:58:16.930
时间延长到一个小时，我们当然过去了

00:58:16.930 --> 00:58:26.060
我们开始有点晚了哦，好吧，其他任何东西

00:58:26.060 --> 00:58:35.390
谁一直在通话，我知道一些额外的地方，所以我只想带

00:58:35.390 --> 00:58:42.710
我们并没有真正像道路那样探索它并添加了哈希

00:58:42.710 --> 00:58:46.339
不是真正的散列函数，但我们并没有真正钻研

00:58:46.339 --> 00:58:54.310
如果我们在多哈希表中添加一些内容，这是否意味着

00:58:54.310 --> 00:59:01.180
像去CID库或类似的东西，否则CID必须能够

00:59:01.180 --> 00:59:06.579
实施，您知道并了解每个CID并验证所有内容

00:59:06.579 --> 00:59:13.760
不，我们需要做得更好，因为这种方式

00:59:13.760 --> 00:59:16.730
到目前为止，我们已经实现了很多此类库

00:59:16.730 --> 00:59:21.470
并且我们需要确保我们不会以多种格式阻止内容

00:59:21.470 --> 00:59:28.160
因此，实施不应假定它们具有整个多

00:59:28.160 --> 00:59:31.790
连接表，或者他们可以支持一切，甚至是我所支持的一切

00:59:31.790 --> 00:59:35.450
要怎样摆一张像你这样的桌子只知道多色表的部分

00:59:35.450 --> 00:59:41.300
您的支持是理想的，而我们远离支持的运送

00:59:41.300 --> 00:59:44.569
对于所有不可能扩展的东西，我们已经有了捆绑包

00:59:44.569 --> 00:59:47.279
JavaScript和许多我们的代码中的问题

00:59:47.279 --> 00:59:50.819
Cookie的方式不必要地大了，因为我们在魁北克的每个地方都在拉

00:59:50.819 --> 00:59:56.219
以及其他所有哈希函数，所以是的，我知道事情将会继续下去

00:59:56.219 --> 01:00:01.109
没有很多人支持的桌子，没关系，是的。

01:00:01.109 --> 01:00:06.509
问题是离散的，是当前多哈希的问题是

01:00:06.509 --> 01:00:14.219
被描述为支持完善的哈希函数，这就是我们所说的

01:00:14.219 --> 01:00:23.219
是可变的，我们写新的文本来定义我认为就像所有

01:00:23.219 --> 01:00:28.529
一旦打开它，它就会缩短文件创建的多格式步骤

01:00:28.529 --> 01:00:35.039
回到治理方面，只不过是关于多种格式和变更的一般文档

01:00:35.039 --> 01:00:39.719
将此语言中的一些内容更清楚一点，因为我认为

01:00:39.719 --> 01:00:43.679
几个人对这些想法有真正一致的想法

01:00:43.679 --> 01:00:47.069
事情应该做，但我们并没有真正完成沟通就做得很好

01:00:47.069 --> 01:00:51.179
所以我们需要真正坐下来阅读，并以一致的方式写下来

01:00:51.179 --> 01:00:57.559
会说我更一致地遇到了默克尔树的想法

01:00:57.559 --> 01:01:03.239
应该被视为单个节点是具有以下特征的个体

01:01:03.239 --> 01:01:06.890
他们自己的C ID，这是我遇到的更加一致的事情

01:01:06.890 --> 01:01:10.769
在这方面做过工作的人，尤其是对这些人进行礼节的人

01:01:10.769 --> 01:01:14.249
然后关于整个弥尔顿树应该是一个哈希函数的想法，我们

01:01:14.249 --> 01:01:21.390
可以带来多重哈希来处理基本数据，这就是我要去的

01:01:21.390 --> 01:01:27.979
说像我们这样的温度的数据源正在批准其中的一些

01:01:27.979 --> 01:01:33.559
ITF在此表的一部分中，您知道我们到底指的是什么

01:01:33.559 --> 01:01:39.029
嗯，所以我们需要确保语言的任何语言变化都能使其

01:01:39.029 --> 01:01:43.829
那里，但是在大多数情况下，该表不会进入IETF，所以该表会去

01:01:43.829 --> 01:01:47.489
变成阴离子或注册表，随着时间的推移它仍然可变，因此我们可以继续

01:01:47.489 --> 01:01:50.939
补充感谢，它没有滴答滴答的钟声，例如现在进货或

01:01:50.939 --> 01:01:58.459
后来我不喜欢成熟的

01:02:00.299 --> 01:02:03.480
哪一部分基本上就像我们在说

01:02:03.480 --> 01:02:10.170
这是一个ID表，您知道它随时可能更改

01:02:10.170 --> 01:02:14.010
一点或不仅仅是ID，因为如果您现在看一下

01:02:14.010 --> 01:02:19.310
储存库肯定是更多的一天，然后这些想法就好了，再加上这些

01:02:19.310 --> 01:02:27.390
东西，但IIT提交的拆分是将多个哈希散列到单独的事物中，

01:02:27.390 --> 01:02:31.860
然后，因为这是多海洋，所以这是多编解码器，但是我们使用相同的表

01:02:31.860 --> 01:02:37.230
为他们两个想，是的，全部都放在一张桌子上，所以我认为桌子是

01:02:37.230 --> 01:02:41.730
就像您所知道的那样，只是将数字定义为

01:02:41.730 --> 01:02:48.390
识别基本上是哦，如果您旋转多视点，也很不错哦，是的，因为

01:02:48.390 --> 01:03:00.860
多功能底座实际上不在桌子上，可以，很酷，我认为我们很好

01:03:00.860 --> 01:03:11.840
停止流是我的工作好再见

