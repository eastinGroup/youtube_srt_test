WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.030 --> 00:00:10.280
我将关闭窗口，因为我不需要在YouTube上见到自己

00:00:10.429 --> 00:00:18.199
好了，欢迎大家参加有史以来的第一个IPL DB每周电话

00:00:18.199 --> 00:00:27.330
今天是2018年11月12日，我们还有一个议程要在此发布

00:00:27.330 --> 00:00:35.430
形状，是的，所以第一件事是我们需要一个记笔记的人

00:00:35.430 --> 00:00:46.920
任何志愿者都是羰基雅各布，所以任何人这都是艰巨的任务

00:00:46.920 --> 00:00:51.989
我可以记笔记，我可以记笔记，但是在哪里可以走呢？

00:00:51.989 --> 00:00:56.910
我是的，我可以同时做两件事，所以头在这里还可以

00:00:56.910 --> 00:01:04.710
现在好吧，谢谢艾伦，好吧，接下来的事情是

00:01:04.710 --> 00:01:10.290
如果您正在参加，请把您的名字放在出席名单上，然后

00:01:10.290 --> 00:01:14.070
很快，我想知道这个电话应该是关于什么的，是什么

00:01:14.070 --> 00:01:19.229
true格式是或应该像我们进行的同步会议一样

00:01:19.229 --> 00:01:27.420
在追逐世界还是其他类似的东西，所以我建议我

00:01:27.420 --> 00:01:31.619
看到残疾基本上也像花时间讨论事情，我真的

00:01:31.619 --> 00:01:35.820
想要使更新的周期非常短，所以我宁愿称之为

00:01:35.820 --> 00:01:39.720
意识更新而不是状态更新，所以真的非常快，所以人们

00:01:39.720 --> 00:01:43.229
知道好吧，我在做图唱歌，在做格式工作。

00:01:43.229 --> 00:01:46.229
还有其他事情，我真的不在乎

00:01:46.229 --> 00:01:52.229
公关合适，所以至少有我需要的东西，是的，我的意思是

00:01:52.229 --> 00:01:56.460
从我的角度来看，没有太多事情发生，我现在感到D

00:01:56.460 --> 00:02:00.750
就像其他电话一样，您无法保持最新​​状态

00:02:00.750 --> 00:02:03.750
发生了太多的事情，人们真的依赖于人们的那种

00:02:03.750 --> 00:02:08.970
更新发生的事情，所以我们绝对可以减少很多

00:02:08.970 --> 00:02:12.959
对像Trent一样更感兴趣的是，我们有很多似乎不开放的线程

00:02:12.959 --> 00:02:16.360
离我们越来越近，所以如果我们可以采取类似的事情

00:02:16.360 --> 00:02:18.610
我们真正需要讨论的有争议的问题

00:02:18.610 --> 00:02:21.849
并花很多时间让他们畅通无阻，这是我最想念的

00:02:21.849 --> 00:02:27.280
时间的有效利用，所以我可能会把这样，所以我认为这是

00:02:27.280 --> 00:02:31.840
很棒，如果人们可以把他们在婴儿床上所做的工作穿上，那么

00:02:31.840 --> 00:02:35.739
您将其存储在某个位置，但是基本上，如果最后有时间，我们

00:02:35.739 --> 00:02:40.930
如果愿意的话，基本上可以通过这些事情，但是我也可以

00:02:40.930 --> 00:02:47.829
事情不是，是的，让我说这个更新或任何其他议程项目

00:02:47.829 --> 00:02:51.579
来自社区的权利

00:02:51.579 --> 00:02:58.060
我的议程上还有什么Liz yeah um

00:02:58.060 --> 00:03:02.409
目前，所以我们仍然有这种奇怪的东西，就像我们的ipfs一样，

00:03:02.409 --> 00:03:07.840
 i PLD，所以我们还是应该将注释放到我们现在要去的节点和

00:03:07.840 --> 00:03:15.040
跟踪记录，还是我们应该将它们放在摘要姿势上，并且您喜欢的IPL是

00:03:15.040 --> 00:03:20.430
我可能只是将其放在XP Emery民意测验中

00:03:20.430 --> 00:03:27.160
完成的人谁是我会做的史蒂文我想继续使用

00:03:27.160 --> 00:03:32.590
团队管理合作伙伴最好等待我感觉D的东西，如果您没有

00:03:32.590 --> 00:03:38.889
积极地下午，我们可能应该做一个首字母缩写，也许也没有

00:03:38.889 --> 00:03:41.970
团队和管理层，我想这很容易找到

00:03:41.970 --> 00:03:49.209
是的，我想我的意思是我们称呼它为“是”，就像

00:03:49.209 --> 00:03:52.060
这就是我所关心的，嘿，别知道名字是一样的

00:03:52.060 --> 00:03:57.910
是的，看到的东西也出现在下午，但是，是的，赎回我，这很有趣，但是

00:03:57.910 --> 00:04:04.709
是的，所以公元前3年我们放好了，然后我们将所有东西放到了IPL中

00:04:04.709 --> 00:04:17.079
储存库好吧，对我来说还好吧，是的，那么我有我

00:04:17.079 --> 00:04:22.210
最大的项目可能会讨论图同步我有点像我们有三个

00:04:22.210 --> 00:04:27.520
提案，只是达成共识或我们如何行动

00:04:27.520 --> 00:04:32.349
等等，我不确定您是否应该先讨论这个问题，因为它可能

00:04:32.349 --> 00:04:38.849
即使我们在十分钟之内开始，它仍然需要整个会议

00:04:38.849 --> 00:04:50.830
所以大概我想让我看看我们还有什么其他东西

00:04:50.830 --> 00:04:56.830
其中来自约翰尼（Johnny）的我之前从未见过

00:04:56.830 --> 00:05:01.389
所以约翰尼，您想快速告诉我们您想讨论或告诉我们什么吗

00:05:01.389 --> 00:05:10.659
关于实际上有两件事，所以一是我提交了重新启动

00:05:10.659 --> 00:05:16.930
几个月前，人们对多伦多和简有了信任

00:05:16.930 --> 00:05:21.880
D ID方法的通用框架，因此D ID是分散的

00:05:21.880 --> 00:05:27.610
自我主权数字身份的标识符，并且有一定的安全性

00:05:27.610 --> 00:05:32.650
Jason LD当前方法中的漏洞，我认为IP LD

00:05:32.650 --> 00:05:38.259
会更安全的方法，所以我和克里斯蒂安领导一起介绍

00:05:38.259 --> 00:05:44.680
适合您的端口协议，我们将其编写出来，但仍然存在一些缺点

00:05:44.680 --> 00:05:50.380
大部分工作都来自w3c工作凭证

00:05:50.380 --> 00:05:54.520
工作组，他们非常专注于HTTP协议，因此

00:05:54.520 --> 00:05:59.319
他们认为所有内容都是URL，因此我提出了一个更安全的方法

00:05:59.319 --> 00:06:06.639
框架，只是为了提供信息，我仍在与其他小组进行斗争

00:06:06.639 --> 00:06:11.889
组到凭证组以包含一些更安全的语法

00:06:11.889 --> 00:06:21.759
包括保留斜杠作为IP LD链接的保留，所以我认为

00:06:21.759 --> 00:06:25.419
阅读本文，我很乐意您对这种方法的反馈，这就是我使用的方法

00:06:25.419 --> 00:06:29.490
IP ID方法

00:06:30.880 --> 00:06:35.060
有人提出，我想你们可以阅读并看一下

00:06:35.060 --> 00:06:42.680
从那开始你就开始哭泣，是的，哦，是的，所以我真的

00:06:42.680 --> 00:06:45.890
感谢您的反馈意见，主要是因为我认为当前

00:06:45.890 --> 00:06:49.820
实际上，我在D Web Summit上与之讨论的是

00:06:49.820 --> 00:06:55.940
很多这种json-ld语法都被破坏了，我认为这真是乞求

00:06:55.940 --> 00:07:03.310
为什么我们需要多键和多键的需求非常繁琐

00:07:03.310 --> 00:07:09.020
代表椭圆曲线的X和y，实际上我已经

00:07:09.020 --> 00:07:15.550
而不是Java JavaScript的Jose，更像是Java的支持者

00:07:15.550 --> 00:07:20.300
加密库我实际上真的很喜欢使用的舒适程序

00:07:20.300 --> 00:07:24.980
Seaborg，所以我认为您知道很多只是规范化

00:07:24.980 --> 00:07:30.530
运用到确定性的Jason模型中，这就是为什么我喜欢IPL D的原因，所以我

00:07:30.530 --> 00:07:39.460
真的很棒，嗯，关于这个问题的几个简短的问题是嗯

00:07:39.460 --> 00:07:45.200
这是否会实际更改D ID，因此在D ID内部引用了一个

00:07:45.200 --> 00:07:50.900
特定的公钥，我们最终会引用CID到数据结构吗

00:07:50.900 --> 00:07:53.750
而不是公钥，还是仍然是公钥，但是当您

00:07:53.750 --> 00:07:56.480
去查找有关您最终会得到的信息

00:07:56.480 --> 00:08:00.370
而不是json-ld，因为现在这些实际上已经在后面分开了

00:08:00.370 --> 00:08:06.530
是的，这实际上是我为我的方法所采用的方式是我发布了IP

00:08:06.530 --> 00:08:12.200
实际上是其他人使用IP NS名称空间的方式

00:08:12.200 --> 00:08:17.780
如果他们使用IP LD，则发布他们将CID发布到智能合约，并且

00:08:17.780 --> 00:08:24.860
到目前为止，至少在最新版本的ipfs中

00:08:24.860 --> 00:08:30.020
您可以存储IP LD，而我可以正确地链接到您知道的东西

00:08:30.020 --> 00:08:34.910
这就是它是IPL d链接的上下文，因此您可以解决它

00:08:34.910 --> 00:08:39.919
很好，很酷，很酷，您来了

00:08:39.919 --> 00:08:46.639
一个多键，所以我们要查看的是一堆需要

00:08:46.639 --> 00:08:52.459
发生在多种格式中，它不是处于我们想要获得的最佳状态

00:08:52.459 --> 00:08:54.829
想要获得一些标准的东西，我们认为这是

00:08:54.829 --> 00:08:59.959
就像准备好像多重哈希一样然后在设置过程之后

00:08:59.959 --> 00:09:03.319
实际情况可能是在煤渣轨道和ICS上，我们确实希望

00:09:03.319 --> 00:09:06.559
开始在多键上做更多的工作，并为此编写更好的规范

00:09:06.559 --> 00:09:12.549
对其进行迭代，因此您所拥有的任何评论都将非常有帮助

00:09:12.549 --> 00:09:16.069
是的，实际上我们正在考虑很多问题，我认为，我真的

00:09:16.069 --> 00:09:20.299
正在走向选择代表曲线的框架

00:09:20.299 --> 00:09:24.279
不幸的是有些想法

00:09:24.309 --> 00:09:30.499
实际上尚未标准化的Polly和cha-cha算法

00:09:30.499 --> 00:09:36.529
确实处于边缘，但实际上实际上是零

00:09:36.529 --> 00:09:39.439
知识证明服务器实际上是在利用，因此实际上不在

00:09:39.439 --> 00:09:44.809
任何ATF都是最前沿的，因为实际上

00:09:44.809 --> 00:09:50.420
我认为很多工作需要标准化的工作

00:09:50.420 --> 00:09:55.459
标准化的词汇表以及我实际使用IP LD的意义是

00:09:55.459 --> 00:10:00.259
实际上可以拥有自我解析的密钥，就像您曾经说过的那样

00:10:00.259 --> 00:10:05.869
我用cha-cha算法创建了Polly 2020，这就是我的意思

00:10:05.869 --> 00:10:10.579
这就是名称空间注册，如果您有很多的话

00:10:10.579 --> 00:10:16.879
对g6算法有一个sha-2，这是什么意思

00:10:16.879 --> 00:10:24.799
那是谁说那是谁那是什么sha-2-二五六在哪里

00:10:24.799 --> 00:10:29.089
注册工作，我们创造了热情，这使我陷入了这种困境

00:10:29.089 --> 00:10:34.489
就像我下一个话题一样，我很抱歉，我已经不在了，

00:10:34.489 --> 00:10:39.829
没有回应我的github提到了Steven，就打字系统而言，

00:10:39.829 --> 00:10:47.119
 IP LD之所以面临挑战，是许多带有症状a的rdf模型

00:10:47.119 --> 00:10:52.880
语义网最终会遇到一个简单的路由问题

00:10:52.880 --> 00:10:58.430
最终，RDF世界中的一切都是作为URL的路由，因此

00:10:58.430 --> 00:11:03.080
并不是您最终需要更强大的类型表示形式

00:11:03.080 --> 00:11:06.500
我认为您可以拥有简单的数据类型或我们实际使用的通用数据类型

00:11:06.500 --> 00:11:09.470
随着数据类型变得越来越复杂，您实际上必须拥有一些

00:11:09.470 --> 00:11:16.010
一些轻量级的本体或链接的数据，告诉您这是什么东西

00:11:16.010 --> 00:11:20.590
我们现在谈论的是很多人

00:11:20.590 --> 00:11:26.330
注册一个符号，然后将该符号注册到某处，但在其中

00:11:26.330 --> 00:11:30.110
整个RDF之前都有循环表示，而这并不是

00:11:30.110 --> 00:11:36.380
对我们来说运作良好，我只是将其作为下一个主题中的另一个链接

00:11:36.380 --> 00:11:39.920
只是关于该主题的一些注释，您可能无法解决该问题

00:11:39.920 --> 00:11:44.510
因为我正在可怕的互联网访问中，所以我刚搬到

00:11:44.510 --> 00:11:51.290
我和芝加哥喜欢上下三兆位，向上半兆位，所以

00:11:51.290 --> 00:11:58.910
那是我刚刚将其存储为IP FS，所以它可能无法很好地工作，谢谢

00:11:58.910 --> 00:12:07.340
约翰尼，你好，我想我们可以提高微调，是的，然后我们可以去

00:12:07.340 --> 00:12:16.880
该图会唱歌，我想是的，希望大家知道我们是否有

00:12:16.880 --> 00:12:22.070
现在有三个提案，哦，它们有点相似，我们有点我需要

00:12:22.070 --> 00:12:27.470
喜欢是，找到一种方式，像我们如何继续前进，我知道

00:12:27.470 --> 00:12:31.820
迈克尔对此有一些想法，是的，我的意思是基本上就像我认为我们

00:12:31.820 --> 00:12:36.230
应该开始将这些分解开一些，就像它站立一样

00:12:36.230 --> 00:12:40.010
有三个建议要求我们转向更基于RPC的方法来

00:12:40.010 --> 00:12:45.980
复制我们有两个建议，需要某种默克尔证明

00:12:45.980 --> 00:12:52.520
我们知道的特定路径，这些就像是一组

00:12:52.520 --> 00:12:57.290
如果我们首先说的像是​​让我们放下框架以进行更多的RPC

00:12:57.290 --> 00:13:02.030
基于方法，然后在某些RPC方法中开始分层以

00:13:02.030 --> 00:13:08.090
启用这些不同的这些不同的复制方案，这将为我们提供

00:13:08.090 --> 00:13:11.240
与尝试相比，这是一条更好的路径，以一种更加模块化的方式前进

00:13:11.240 --> 00:13:15.770
不仅针对界面和所有方面都提出了完整的建议

00:13:15.770 --> 00:13:20.120
基础设施的变化使这种情况发生了，但这里暗示的是

00:13:20.120 --> 00:13:24.350
就像难以置信的医学逻辑来解决一堆边缘案件和

00:13:24.350 --> 00:13:27.470
我们可以看到这些性能问题中的每一个都发生了

00:13:27.470 --> 00:13:31.700
复制方法，而如果我们说的看起来不错，我们会将其映射到

00:13:31.700 --> 00:13:36.500
像在我们实现它们之后，将逻辑映射到这些RPC api的顶部

00:13:36.500 --> 00:13:41.840
更交错的方法，然后在这个世界上，我们可以

00:13:41.840 --> 00:13:47.270
希望开始在其中模拟出其中一些复制用例

00:13:47.270 --> 00:13:49.010
不同的网络条件和不同

00:13:49.010 --> 00:13:54.110
数据，例如不同类型的数据，因此我在PR中有一些代码可以尝试

00:13:54.110 --> 00:13:57.050
像模拟器视频那样创建，但是我们应该阻止的另一件事

00:13:57.050 --> 00:14:01.730
任何工作，直到我们对所有这些仿真逻辑都了如指掌，并且我们确切知道

00:14:01.730 --> 00:14:05.300
哪些用例可以复制或更好地解决，我们可以开始实施

00:14:05.300 --> 00:14:09.830
现在是通过使用通用API，然后开始实施

00:14:09.830 --> 00:14:14.180
基本ap是正确的，就像我要获得许多CID一样，无论我们需要什么

00:14:14.180 --> 00:14:18.890
无论我们需要什么，API都将非常有用

00:14:18.890 --> 00:14:21.650
我们说的API就是给我这个的Merkle证明

00:14:21.650 --> 00:14:26.950
特定路径，然后您知道实现选择器语法的语法

00:14:26.950 --> 00:14:31.580
将会很困难，但是无论如何我们都需要

00:14:31.580 --> 00:14:37.130
如果我们不直接在复制器网络API中使用它，因为那样会

00:14:37.130 --> 00:14:40.910
最终成为面对API的用户，因此我们需要一个解析器来解决这个问题

00:14:40.910 --> 00:14:43.490
不管如何，我们可以开始执行所有这些事情，

00:14:43.490 --> 00:14:47.900
甚至在没有达成共识的情况下，就像哦，我的上帝，整个巨型堆栈

00:14:47.900 --> 00:14:52.670
就像是要走的路，所以斯蒂芬是一种非常清晰的区分机器

00:14:52.670 --> 00:14:57.020
像是网络垂直广告，面对用户的感觉就像是用户

00:14:57.020 --> 00:15:02.420
面对眼神，他喜欢的默克尔通行证可能很重要，但事实并非如此

00:15:02.420 --> 00:15:04.790
必不可少，但这就像网络中的东西

00:15:04.790 --> 00:15:10.570
我很批评，但不喜欢忘记很多，就像他们与众不同

00:15:10.750 --> 00:15:15.980
是的，我很好，所以我们需要它，我们需要在遇到障碍物后需要AP

00:15:15.980 --> 00:15:19.010
然后我们可能希望在获得多个块之后获得一个AP，或者我们可以

00:15:19.010 --> 00:15:23.960
平行的眼睛，就像我们可以挡住船壳一样，我们可以看到像

00:15:23.960 --> 00:15:27.860
哪种网络条件更适合每个人，但我认为这就像

00:15:27.860 --> 00:15:32.120
如果我们没有很多女人，我们就用它，我们也希望我们

00:15:32.120 --> 00:15:34.880
需要弄清楚，当有人没有障碍时会发生什么

00:15:34.880 --> 00:15:37.700
他们是否犯了拒绝这样的问题，这是其中每一个问题

00:15:37.700 --> 00:15:41.270
我们还没有弄清楚的规格，所以它们就像所有的共同点，

00:15:41.270 --> 00:15:45.650
那是的，我的意思是，如果你们像我这样肯定的话，对用户来说

00:15:45.650 --> 00:15:49.640
就像想要一个API指出这个问题，你知道我像我一样填满了选择器

00:15:49.640 --> 00:15:53.150
真的很想要，所以无论如何我们都需要像选择器一样的解析器

00:15:53.150 --> 00:15:56.840
所以我们要并行执行的操作只是在选择器规范和三元组上工作

00:15:56.840 --> 00:16:04.700
定义的运行实现也使人们感到奇怪，实际上可能不是

00:16:04.700 --> 00:16:11.420
最好的模型，因为至少像侵略一样，你有一个像

00:16:11.420 --> 00:16:16.250
取回一堆积木，一切看起来像这样，是的，你取回了一个

00:16:16.250 --> 00:16:20.180
请求之前的数据包，您实际上可能想取消sequester naman

00:16:20.180 --> 00:16:23.990
消耗它已经收到的消息，所以它不太像我发送单个请求

00:16:23.990 --> 00:16:27.830
他们得到了回应，更像是我最终要求的回应或

00:16:27.830 --> 00:16:31.790
更多的节点，这个请求甚至可能共享相同的ie，然后从一个或

00:16:31.790 --> 00:16:38.030
我得到一个或多个类似的对象的更多节点

00:16:38.030 --> 00:16:40.760
我们要做的就是您只想阻止此请求，因为如果您这样做，那么

00:16:40.760 --> 00:16:44.390
如果您在库马西（Kumasi）上行走，则必须从本地使用类似的资源

00:16:44.390 --> 00:16:49.520
阻止每个请求的呼叫，但是是的，我想是通过RPC进行的

00:16:49.520 --> 00:16:54.830
我不是说真正严格的要求，例如回应回覆，我的主要意思是

00:16:54.830 --> 00:16:59.960
就像我们需要带有发送选项的命名方法一样，我们需要像模型一样

00:16:59.960 --> 00:17:03.230
一种将来添加它们的方法，然后像那样，是的，我们应该

00:17:03.230 --> 00:17:06.050
可能尝试过，我们应该尽可能不了解什么

00:17:06.050 --> 00:17:11.630
响应流似乎是我要添加的一件事，用于实时pvp

00:17:11.630 --> 00:17:18.560
守护进程的东西，我们只是喜欢使用protobufs的非常简单的消息协议

00:17:18.560 --> 00:17:22.430
有点适合这个，所以可能值得一看

00:17:22.430 --> 00:17:27.940
是的，这很直截了当，我们也一直在谈论的一件事是

00:17:27.940 --> 00:17:35.150
多流协议，任何季节都来了，就像我们的协议是

00:17:35.150 --> 00:17:39.830
实际上更像是垂直行业的端点，因此一种可行的方法是

00:17:39.830 --> 00:17:43.700
您简化了多个端点，每个单一方法都简化了一个端点

00:17:43.700 --> 00:17:47.450
允许您曾经拥有过，它给您提供了一种非常容易的方式来告诉其他人

00:17:47.450 --> 00:17:50.990
方面，您支持哪些方法或类似于Grassley协议的方法可能像flash

00:17:50.990 --> 00:17:55.490
崩溃，想想闪存并获取块/图形，是的，是的，阻止闪存崩溃

00:17:55.490 --> 00:17:59.450
链接闪烁，如果有任何意义，可能不是正确的方法

00:17:59.450 --> 00:18:03.380
这样做可能太复杂了，但是它确实允许您利用基础

00:18:03.380 --> 00:18:06.470
协议以使其支持更高级别的便携式设备，因此非常适合

00:18:06.470 --> 00:18:22.400
考虑好吧，嗯，我想我们现在拥有的，所以我们当然做到了

00:18:22.400 --> 00:18:28.130
面向用户的员工与内部沟通之间的区别

00:18:28.130 --> 00:18:37.010
我们所谓的东西，嗯，我也是，所以我也完全同意那只是想要

00:18:37.010 --> 00:18:41.510
完整版并没有为面对内容的用户提供这些内容，但是我想是的，我们

00:18:41.510 --> 00:18:52.370
应该从内部的东西开始，是这样，我们如何继续前进呢，所以

00:18:52.370 --> 00:19:00.800
就像您能就迈克尔基本上说的是我们达成共识

00:19:00.800 --> 00:19:10.580
当然需要获得多个块，并给我一些路径，使所有节点都向上

00:19:10.580 --> 00:19:16.370
那里的工人证明证明是我们可以达成共识的东西，但请参见

00:19:16.370 --> 00:19:22.280
这尤其是与一个图表，说看到提案再次出现，我想我说

00:19:22.280 --> 00:19:25.790
像我在说的那样区分，我不确定我们甚至

00:19:25.790 --> 00:19:30.140
确实想要像我们这样的方式获取多个块的单个消息RPC

00:19:30.140 --> 00:19:34.159
悲惨的小伙子们想让名单多抓进我

00:19:34.159 --> 00:19:37.999
假设这就像一条包含多个请求和一条消息的消息

00:19:37.999 --> 00:19:41.330
请求给我作为ID的类型，这样我就可以提出一个拉链问题，并且

00:19:41.330 --> 00:19:44.599
给我这条路，给我这个主意，给我另一个选择器，这样我

00:19:44.599 --> 00:19:49.820
感觉像是的，是的，我认为我们可以启动一个单独的线程，例如

00:19:49.820 --> 00:19:52.909
需要获得很多还是没有，我们实际上可以进行目的测试，看看是否

00:19:52.909 --> 00:19:57.259
实际上这里有收获，就像那里可能我认为那里

00:19:57.259 --> 00:20:02.029
可能只是在Jas方面的某些方面使自己陷入瘫痪中的一个错误

00:20:02.029 --> 00:20:05.330
像我们之前讨论过的请求，这样冲洗就好了

00:20:05.330 --> 00:20:09.289
出来看看我们是否真的需要很多东西，就像我不知道那是什么

00:20:09.289 --> 00:20:13.369
多流2.0的东西发生了，但就像如果我们有

00:20:13.369 --> 00:20:18.259
本质上是免费的子流我不知道我们是否需要正确处理

00:20:18.259 --> 00:20:24.649
只需使用单一的获取就可以了，就像我们拥有的一切一样，除了客户

00:20:24.649 --> 00:20:27.710
与客户看到的内容以及我们通过网络发送的内容是安全的，因为

00:20:27.710 --> 00:20:30.649
从客户的角度来看，如何获得很多特别有用的东西是非常有用的

00:20:30.649 --> 00:20:33.710
资源跟踪，让我感觉像是让客户还是备份所有

00:20:33.710 --> 00:20:37.580
忘记了，这是一次交换，不管它是什么，然后我们就通过了

00:20:37.580 --> 00:20:39.889
可以在一天内通过网络优化中心的许多工作

00:20:39.889 --> 00:20:43.489
它有一个客户，所以像开一本书，猜想我们可能不会

00:20:43.489 --> 00:20:47.239
适当地破裂，并使用大量额外资源，例如做间接费用

00:20:47.239 --> 00:20:53.149
成为唯一的一家，因为就像获得所有亚马逊一样，是的，让它们与众不同

00:20:53.149 --> 00:20:56.389
那么我们需要什么来实际发生网络中心以及我们该怎么做？

00:20:56.389 --> 00:21:04.249
这就是我要说的，我有一个约束对吧

00:21:04.249 --> 00:21:07.399
现在他们只是像我一样赚钱而不是寄钱

00:21:07.399 --> 00:21:11.029
单独，或者，如果该问题将由流2.0修复，或者

00:21:11.029 --> 00:21:13.159
这样的事情，所以我们可以讨论是否

00:21:13.159 --> 00:21:15.889
我认为这是一个很好的优化，尽管如此

00:21:15.889 --> 00:21:19.070
就像代码API和网络API一样

00:21:19.070 --> 00:21:22.219
在那里，因为代码API上的很多东西实际上应该能够并行化

00:21:22.219 --> 00:21:26.299
无论如何，即使每个对等点都必须获得许多网络

00:21:26.299 --> 00:21:30.259
因此，无论如何，衰退是其中之一，实际上我想支持

00:21:30.259 --> 00:21:32.749
两者都具有破坏性，实际上我又在考虑这一点

00:21:32.749 --> 00:21:35.299
在这种情况下会更好，因为理想情况下

00:21:35.299 --> 00:21:39.169
我们发出一个请求，其中有很多类似的问题，我

00:21:39.169 --> 00:21:43.970
真的，我从来没有指责过你打包东西或需要这样做

00:21:43.970 --> 00:21:47.600
也有点像是，它简化了谢谢你，但嗯，也许

00:21:47.600 --> 00:21:54.230
好吧，别忘了只海登（Hayden）对不起，是的，我只是一个问题，因为

00:21:54.230 --> 00:21:59.900
我对这种东西是陌生的，我们正在谈论的是IP LD之类的图形

00:21:59.900 --> 00:22:04.490
关于它们大部分是它们都是不可变的，还是像这样包括在内

00:22:04.490 --> 00:22:09.920
可变性指向我们的感觉，您知道图表的大部分是可变的

00:22:09.920 --> 00:22:15.680
所以我问你知道有人知道你知道我想要什么吗

00:22:15.680 --> 00:22:20.960
在这个房间里，我问了一些人和其他人，我问你认识我的同龄人

00:22:20.960 --> 00:22:24.920
它们在不同的用户中给了我不同的数量，然后II粉碎了它们

00:22:24.920 --> 00:22:28.760
一起，然后我得到我的网络列表，就像是否支持该列表

00:22:28.760 --> 00:22:34.070
支持或计划确切的时间，但那不是那种方式

00:22:34.070 --> 00:22:37.460
我们已经谈论过它，主要是谈论它，就像你在

00:22:37.460 --> 00:22:40.340
您在想，这意味着您有现金，这意味着

00:22:40.340 --> 00:22:44.720
就像状态在整个图和状态中是一个特定的CID

00:22:44.720 --> 00:22:48.620
现在更改其中的新CID，以便在其中包含旧图

00:22:48.620 --> 00:22:52.550
现金状态，现在您只需要新的变化，这肯定是其中的一部分

00:22:52.550 --> 00:22:58.340
范围我不知道我们是否已经并行查看，我正在拉

00:22:58.340 --> 00:23:03.620
一堆数据，我不知道我不知道根源是什么

00:23:03.620 --> 00:23:06.200
然后当我得到它们时，也许您在每个数据中重复了一个数据，但我没有

00:23:06.200 --> 00:23:10.130
知道我们是否选择了它，所以它的调用方式可能取决于您的意思

00:23:10.130 --> 00:23:17.360
根，好吧，你知道你有没有，让我们说我们喜欢

00:23:17.360 --> 00:23:20.570
文档的起始状态，以及每次您对文档进行更改（如获取）时

00:23:20.570 --> 00:23:27.230
您只需要指向树的右端，这样我的树的版本就会发生变化，

00:23:27.230 --> 00:23:30.710
您的树版本发生了变化，现在我需要对其进行同步，并且

00:23:30.710 --> 00:23:37.310
正确地将两个图混淆在一起，也许我们可以假装以方便使用

00:23:37.310 --> 00:23:41.480
有一个非常简单的合并函数，如果我有一个指针，

00:23:41.480 --> 00:23:46.220
您有一个指向相同节点的指针，您知道该节点是

00:23:46.220 --> 00:23:50.440
向右分支，然后用户从那里弄清楚

00:23:50.440 --> 00:23:56.590
是的，有些事情是这样的，对吧

00:23:57.029 --> 00:24:05.860
格鲁宾一周内进出一趟，所以合并似乎超出了范围

00:24:05.860 --> 00:24:10.240
有点草率，所有这些垂直行业是的，你所做的就像你得到了

00:24:10.240 --> 00:24:13.480
来自所有同龄人的根，您获取了整个图，它们都是

00:24:13.480 --> 00:24:16.659
您没有的片段，然后运行自己的合并功能，然后您将

00:24:16.659 --> 00:24:20.230
广播并告诉所有人结果，是否有意义，就像是

00:24:20.230 --> 00:24:23.470
单独的步骤，但是就像您有一个步骤是在下一步中拉东西一样，您是

00:24:23.470 --> 00:24:28.090
合并，然后您重新广播，因此假设是

00:24:28.090 --> 00:24:31.480
一切都是引用，就像这个系统现在可以正常工作，我有一些东西

00:24:31.480 --> 00:24:36.039
基本上可以做到这一点，但是它涉及到您知道发送给用户的

00:24:36.039 --> 00:24:41.889
他们的全图彼此相对，而不是您知道有某种协议

00:24:41.889 --> 00:24:45.429
交流和说嘿我实际上需要这张图的哪几块

00:24:45.429 --> 00:24:49.990
发送给您，事实证明，这里一路只有五个变化

00:24:49.990 --> 00:24:55.990
我需要发送我不需要全部发送，因此在新复制中

00:24:55.990 --> 00:25:00.580
我正在使用模拟器，所以我们可以模拟这些

00:25:00.580 --> 00:25:04.179
条件和这些类型的数据结构，但就目前而言，我认为

00:25:04.179 --> 00:25:07.929
我们应该创造一些新的问题来描述我们所遇到的一些情况

00:25:07.929 --> 00:25:10.269
确保我们捕获了它们并可以在以后处理它们，因为我有

00:25:10.269 --> 00:25:13.570
考虑到这种情况，您基本上拥有仅追加的内容

00:25:13.570 --> 00:25:18.190
结构，所以最终发生的是，路线总是像新的一样

00:25:18.190 --> 00:25:21.669
并发生变化，然后最终您在解析树时碰到了一个要点

00:25:21.669 --> 00:25:25.210
您知道在缓存中拥有的所有C思想和完整的子草

00:25:25.210 --> 00:25:29.409
所以你真正想做的就是说，嘿，给我所有新东西，直到

00:25:29.409 --> 00:25:33.010
您会看到这些C想法，并且实际上您早就知道了该列表，就像

00:25:33.010 --> 00:25:37.389
非常有趣的不同情况，而就像我们习惯了

00:25:37.389 --> 00:25:41.080
这些图就像哦，Eid改变了图的根，我需要

00:25:41.080 --> 00:25:45.340
在我知道变化和我拥有的东西之前就开始浏览它

00:25:45.340 --> 00:25:50.769
就像在某些情况下，您实际上可以预测另一端何时

00:25:50.769 --> 00:25:54.639
然后，我们需要停止通过图表进行解析，这就像

00:25:54.639 --> 00:25:58.059
我们可以在那里提出非常酷的优化

00:25:58.059 --> 00:26:03.820
倒过来做吧，是的，而不是它的根

00:26:03.820 --> 00:26:07.840
拥有所有孩子的哈希值拥有所有孩子的哈希值

00:26:07.840 --> 00:26:12.470
父母，然后你倾向于那些正确的笔

00:26:12.470 --> 00:26:18.080
就像她对不起的女士一样，我只是说我们有点精疲力尽

00:26:18.080 --> 00:26:25.340
时间还可以，因为我想将其保持在30分钟之内，所以现在的计划也是如此

00:26:25.340 --> 00:26:30.620
基本上将这些东西分开了，所以我们进行了这种新的加工

00:26:30.620 --> 00:26:35.660
存储库，您基本上就将所有我们想要的部分拆分了

00:26:35.660 --> 00:26:41.000
想看到问题，然后从那里走出去，基本上这是

00:26:41.000 --> 00:26:54.140
这是一个可行的方法，或者我认为只有八个问题就可以了

00:26:54.140 --> 00:26:58.190
像这里这样的封面是图形需要解决的事情，将有助于摆脱

00:26:58.190 --> 00:27:01.910
在事物上有很多类似的误解和分歧，因为

00:27:01.910 --> 00:27:04.610
现在，它们都漂浮在以太中，但是像我一样

00:27:04.610 --> 00:27:08.410
还没有看到什么，您应该就像列出用例一样

00:27:08.410 --> 00:27:12.919
除非我错过了什么，当我知道我求婚时会发生什么

00:27:12.919 --> 00:27:16.910
事实证明，这是一个坏主意，它超出了图表的范围

00:27:16.910 --> 00:27:20.750
说“好”就好了，您可能最终会像污染问题一样，然后

00:27:20.750 --> 00:27:24.530
您必须关闭并重新打开的每个自我就像

00:27:24.530 --> 00:27:30.830
我们也可以为任务做的精选版本，例如II认为这是

00:27:30.830 --> 00:27:34.340
像我们一样，可能行之有效的几乎就像我不喜欢的相反

00:27:34.340 --> 00:27:38.510
认为我们曾经非常认真地检查过所有用例，

00:27:38.510 --> 00:27:41.480
将有多个用例，基本上就是我们要去的东西

00:27:41.480 --> 00:27:44.059
总是能够找到不适用于特定情况的用例

00:27:44.059 --> 00:27:46.669
方法，将来我们将不得不进行多次复制

00:27:46.669 --> 00:27:50.480
这样的方法就像我们开始时一样，而不是从列表中开始

00:27:50.480 --> 00:27:54.500
需要解决的事情，比如让我们开始列出用例，然后

00:27:54.500 --> 00:27:59.179
我们对其中一些问题有解决方案，我们可以确定它们中的哪些

00:27:59.179 --> 00:28:03.140
修复以及他们不修复哪些问题，但是像这样说超出了范围

00:28:03.140 --> 00:28:06.410
我们接下来要做的事情似乎不会很好地扩展

00:28:06.410 --> 00:28:09.140
我们知道我们将必须有多个复制方案来做到这一点

00:28:09.140 --> 00:28:12.710
有道理，但是的，很抱歉，但我的意思是更多

00:28:12.710 --> 00:28:18.290
就像基本上我们必须要进行此交换一样，它在很多情况下都有效

00:28:18.290 --> 00:28:22.490
东西，但我认为我们实际上没有一个好的文档，这是为什么

00:28:22.490 --> 00:28:26.720
足够，因为对于很多喜欢的图形来说，如果您可以建立很多

00:28:26.720 --> 00:28:30.050
像垂线一样在草签顶部放草，然后将其用作基础

00:28:30.050 --> 00:28:32.690
像区块交换引擎一样，但是像您一样，您仍然喜欢很多奇特的东西

00:28:32.690 --> 00:28:37.370
在草顶上做你的实际计划，至少要这样做

00:28:37.370 --> 00:28:41.420
就像我想，可能是有些东西来了

00:28:41.420 --> 00:28:47.480
有点他妈的的情况对我们不起作用我喜欢协议级别

00:28:47.480 --> 00:28:53.000
是的，所以我想要那个，因为这样模拟器会做的第一件事就是

00:28:53.000 --> 00:28:56.450
就像一堆比特交换的东西只是显示哪些用例不起作用

00:28:56.450 --> 00:28:59.470
很好，但是

00:29:00.470 --> 00:29:12.560
因为有了实施，如果我们真的如愿以偿的话，这就是

00:29:12.560 --> 00:29:15.470
所有今天用ipfs不能很好复制的东西，我们都会发现

00:29:15.470 --> 00:29:17.960
实际上像其中一些是由于错误，而某些则是由于错误

00:29:17.960 --> 00:29:20.960
理论上的局限性以及我们如何设计工作，没有一个

00:29:20.960 --> 00:29:25.310
分离这些东西的好方法

00:29:25.310 --> 00:29:28.790
我认为实际上存在一个不错的错误，例如您可以查看很多

00:29:28.790 --> 00:29:32.890
不同的数据结构，就像我们可以说得很好一样

00:29:32.890 --> 00:29:36.920
通过交换复制此内容，或者有一个基本的表示法，代价高昂

00:29:36.920 --> 00:29:40.960
您可以进行模拟操作

00:29:41.080 --> 00:29:46.940
是的，是的，我正在构建模拟器来做到这一点，是的，我们将

00:29:46.940 --> 00:29:52.670
我认为有办法解决问题，是的，我们将继续

00:29:52.670 --> 00:29:56.480
复制仓库，我们需要开始几个问题，包括哪些问题

00:29:56.480 --> 00:30:01.550
细节是要全部停止，而不是说图同步，因为这意味着

00:30:01.550 --> 00:30:05.360
每个人都有一些不同，如果我们像这样说就好了

00:30:05.360 --> 00:30:08.060
我们正在谈论的特定网络API就是这样

00:30:08.060 --> 00:30:11.930
如果您给它足够的字段选择器，它会返回您，它只会返回您的东西

00:30:11.930 --> 00:30:14.330
这意味着停滞不前，就像这意味着什么用例

00:30:14.330 --> 00:30:18.050
解决，然后当我们提出一个仅用于默克尔证明的方法时，

00:30:18.050 --> 00:30:22.280
可以只讨论可以解决的用例，然后再讨论

00:30:22.280 --> 00:30:24.470
谈论像草链接，从字面上意味着另一回事

00:30:24.470 --> 00:30:29.500
我与您交谈过的每个人，例如特定的ap，也是

00:30:29.500 --> 00:30:33.860
与所有这些并发，我们需要将选择器堆栈分解为

00:30:33.860 --> 00:30:40.640
自己的规格以及如何在那穿线，所以我想我的收获是

00:30:40.640 --> 00:30:45.350
我认为基本上是一个好主意，所以我们有很多用例

00:30:45.350 --> 00:30:49.790
请记住，从我的API开始，然后仅描述用例

00:30:49.790 --> 00:30:55.430
它可以解决问题，而不是您发现的其他方式，我认为这是个好主意

00:30:55.430 --> 00:31:01.280
至少，是的，涵盖了很多用例，是的，我认为

00:31:01.280 --> 00:31:11.120
好的，嗯，所以我们接下来的两周有什么行动项目吗？

00:31:11.120 --> 00:31:13.910
喜欢嫁接，所以我会说我曾经花时间在周围

00:31:13.910 --> 00:31:19.310
但我想我会和Michael紧密合作，是的，

00:31:19.310 --> 00:31:30.200
没事了，还有什么别的，因为我们

00:31:30.200 --> 00:31:38.360
好像已经七分钟了，如果我看不到任何东西，一定要有东西

00:31:38.360 --> 00:31:44.060
我认为我们的手覆盖得很好，我只感谢一些反馈，因为

00:31:44.060 --> 00:31:51.380
丽塔，他们终于回应了史蒂文斯的问题，伙计们给了我关于

00:31:51.380 --> 00:31:58.460
是的，四月，是的，好的，我要把你的笔记拿出来，然后谢谢

00:31:58.460 --> 00:32:03.670
加入，我们将在两周内再次见到我们

00:32:03.670 --> 00:32:08.200
再见大家[音乐]

