WEBVTT
Kind: captions
Language: zh-Hans

00:00:12.889 --> 00:00:23.730
好的，欢迎大家参加本周的IPL d同步会议，时间是2020年2月17日

00:00:23.730 --> 00:00:28.529
每周我们都会谈论IPL小组正在处理的工作

00:00:28.529 --> 00:00:38.190
并在接下来的几天内进行了工作，是的，然后讨论任何

00:00:38.190 --> 00:00:46.320
开放议程项目，我们可能会从我自己的工作开始

00:00:46.320 --> 00:00:53.640
锈IPL的东西，这真的是我终于开始，它正在塑造

00:00:53.640 --> 00:01:00.059
很好，所以我发现如何进行一些编码，所以有一个PR

00:01:00.059 --> 00:01:06.450
哈希值目前正在审核中，因此令人兴奋的是，它得到了

00:01:06.450 --> 00:01:13.590
已经有很多人评论过，所以现在我认为是七个

00:01:13.590 --> 00:01:18.600
来自七个不同公司的不同人员，所以这真的像是

00:01:18.600 --> 00:01:22.290
太神奇了，所以这不仅仅只是个人评论，我真的很想独立

00:01:22.290 --> 00:01:27.450
其他公司的人，所以这伊万真的很高兴

00:01:27.450 --> 00:01:36.799
令人兴奋，所以这让我真的很高兴，是的，很好地羞愧，

00:01:36.799 --> 00:01:46.530
那么另一件事是，目前有一个聋哑的锈病大开放

00:01:46.530 --> 00:01:56.219
ipfs即将获得批准，而这些人已经打开了

00:01:56.219 --> 00:02:01.740
我填写有关IPS锈蚀的注释的问题有一个卷存储库

00:02:01.740 --> 00:02:06.659
您基本上想收集所有我想参与的人

00:02:06.659 --> 00:02:11.160
参与IP的Russell基础，但当然我也觉得自己

00:02:11.160 --> 00:02:15.040
应该采用多种格式，以此类推，以防万一您可以观看并希望

00:02:15.040 --> 00:02:21.790
参与进去，然后去github.com，我认为那很生锈，所以他们都应该

00:02:21.790 --> 00:02:28.870
来，是那里的最后一期，还有那些可以看到我的人

00:02:28.870 --> 00:02:37.709
上周打过电话，会议记录也链接在记录中

00:02:37.709 --> 00:02:43.780
我很不错，只是看到Ike是的，我需要做的计划是这样的

00:02:43.780 --> 00:02:50.170
他们可以使用它-只有计划做的事，但重点会如此

00:02:50.170 --> 00:02:57.010
是的，如果您有兴趣，请阅读笔记，所以我将不进行的工作是

00:02:57.010 --> 00:03:02.530
我从三周前开始做了一些我想完成一个区块API的工作。

00:03:02.530 --> 00:03:07.209
草稿，以便我可以与其他人讨论这些内容，然后我还可以

00:03:07.209 --> 00:03:12.430
这周需要做的是写一篇有关所有ipfs生锈工作的博客文章

00:03:12.430 --> 00:03:16.720
因为就在上周，中国有一家公司的另一个仓库

00:03:16.720 --> 00:03:22.290
打开他们也没有让我生锈，我想实现还是开始

00:03:22.290 --> 00:03:29.049
而且我也粉红色它们，是的，我们应该一起看等等，所以我

00:03:29.049 --> 00:03:33.430
真的很想确保我们能把这个词说出来，所以人们知道

00:03:33.430 --> 00:03:38.139
我们是与人们保持联系的切入点，您知道这是

00:03:38.139 --> 00:03:44.889
发生了一些事情，然后我们可以一起处理所有事情，是的，我是

00:03:44.889 --> 00:03:53.139
真的很高兴，这样的造型非常好，是的，这就是我清单上的下一个

00:03:53.139 --> 00:04:03.579
是蒂姆，但他不在这里，所以他正在做选择器的工作，是的，也是的

00:04:03.579 --> 00:04:10.620
它快一点，所以很好，我去找下一个

00:04:10.620 --> 00:04:22.139
是的，上周非常熟悉，我的状态不算什么

00:04:22.669 --> 00:04:29.930
所以我们上周着陆是为了让平静的皮特在

00:04:29.930 --> 00:04:39.460
lambda，我们有3个演出，没有3008 Meg的记忆和500个

00:04:39.460 --> 00:04:52.370
梅格（Meg's）从头开始做一个演出，一个演出是我最好的

00:04:52.370 --> 00:04:59.810
可以做的是超过3100 Meg的内存，所以它只是

00:04:59.810 --> 00:05:08.750
不能在lambda中运行，是的，所以它需要大约一个演出才能被填充

00:05:08.750 --> 00:05:16.060
版本，然后进行一次演出，然后在缓存期间进行两次演出

00:05:16.389 --> 00:05:23.330
您知道本地树计算，我认为这两个部分都是

00:05:23.330 --> 00:05:28.969
我认为可能会简化很多事情

00:05:28.969 --> 00:05:33.620
以流的方式完成，但这就是文件的深处

00:05:33.620 --> 00:05:39.169
切割样张，所以我们如此坚持，所以我所做的就是默克尔树

00:05:39.169 --> 00:05:48.620
缓存后备存储是可插入的，因此默认情况下，文件硬币证明会插入

00:05:48.620 --> 00:05:52.159
磁盘后备存储，这就是我们必须换出以进入内存的原因

00:05:52.159 --> 00:05:56.899
具有已随附的后备店的矢量后备店

00:05:56.899 --> 00:06:03.979
存储，所以我所做的就是写了一个后备存储，将磁盘端

00:06:03.979 --> 00:06:10.009
向量后备存储，然后在磁盘上下一个400兆梅格的赌注，

00:06:10.009 --> 00:06:18.020
然后剩下的在内存中，然后在大小调整的内存和使用下进入

00:06:18.020 --> 00:06:24.560
现在有一点磁盘可以到达，它实际上是作为lambda起作用的

00:06:24.560 --> 00:06:29.199
它的结果至少来自某些测试的简单测试数据（一个演出测试数据）

00:06:29.199 --> 00:06:34.069
我对Locker的代码并不超级自信

00:06:34.069 --> 00:06:41.480
为我复查了一下，并修复了一堆铁锈，但其中有一个

00:06:41.480 --> 00:06:45.590
尤其是应该有逻辑的错误，但组应该有

00:06:45.590 --> 00:06:50.810
导致计算不佳，但没有引起问题，这引起了关于为什么不这样做的问题

00:06:50.810 --> 00:06:58.820
在结果中显示为错误，从而破坏了我的

00:06:58.820 --> 00:07:02.540
即使这似乎可以使我们对此做些正确的事情，但还是有一点信心

00:07:02.540 --> 00:07:07.280
给我正确的结果，所以就像我所说的那样

00:07:07.280 --> 00:07:13.880
在此之前，我们不再使用理想的代码

00:07:13.880 --> 00:07:23.030
莲花端，然后使用Falcone，则信心越低，我们

00:07:23.030 --> 00:07:29.000
应该包含结果，因此我们将致力于这一路径的更多测试

00:07:29.000 --> 00:07:34.730
我们将必须做的是确保我们的计算值实际上是

00:07:34.730 --> 00:07:40.120
硬币将产生相同的数据，所以我正在做的另一件事是

00:07:40.120 --> 00:07:47.060
在星期五开始填写，实际上并没有在星期六写这样的内容

00:07:47.060 --> 00:07:52.370
JavaScript中的内容不是因为我认为这是一种理想的方法，而是

00:07:52.370 --> 00:07:57.230
因为我觉得我想更自信地了解如何

00:07:57.230 --> 00:08:01.760
这实际上是在做，因为我沿着

00:08:01.760 --> 00:08:06.800
这样我想我们将尝试Andrea我的尝试，看看是否可以得到

00:08:06.800 --> 00:08:12.110
我应该做的结果，所以这是一个有趣的练习，可能不会

00:08:12.110 --> 00:08:17.990
将会硕果累累，但仍然很有趣，但我应该能够

00:08:17.990 --> 00:08:28.600
是的，我有一个生锈的lambda可以发布，但我对此并不十分自信

00:08:28.600 --> 00:08:33.229
然后另一件事是我昨天有一个聊天歌词

00:08:33.229 --> 00:08:41.719
通用IP LD数据结构（如内部表示形式API）有点

00:08:41.719 --> 00:08:47.360
有关排序内容的信息密钥排序存储器密钥的存储器表示

00:08:47.360 --> 00:08:50.089
排序vs编解码器vs所有东西

00:08:50.089 --> 00:08:57.230
在松弛中有一个-线程，在松弛中有一个线程，并且

00:08:57.230 --> 00:09:01.069
我们聊了一下，我记了一些笔记，我想埃里克记了一些，可能更好

00:09:01.069 --> 00:09:05.439
请注意，但我们发现确实存在某种东西

00:09:05.439 --> 00:09:10.689
处于锈蚀初期的沃尔克也应接受检查

00:09:10.689 --> 00:09:23.589
实施是的，您知道我们需要毫无疑问的是我

00:09:23.980 --> 00:09:33.860
我名单上的下一个是Michael hey yeah所以上周我完成了很多

00:09:33.860 --> 00:09:40.249
此新切片器项目的修复和迁移使汽车文件下降

00:09:40.249 --> 00:09:48.889
在一次演出以下，我迷失了一天，我发现分段扫描

00:09:48.889 --> 00:09:53.749
您可以做到应该更快，但是从我开始做那一刻起

00:09:53.749 --> 00:09:59.209
然后，我们在吞吐量方面超载了Dynamo表，因此我不得不

00:09:59.209 --> 00:10:05.059
退后并回到顺序，这样很烂，但几乎完成了

00:10:05.059 --> 00:10:22.059
现在可以迁移和修复所有基本错误，任何旧数据都可以，是的，现在我

00:10:22.389 --> 00:10:27.860
创建了所有这些，然后我可能会锁定该compy

00:10:27.860 --> 00:10:33.319
除非我认为罗杰说他已经做好了，但是我们

00:10:33.319 --> 00:10:37.720
认为它可能起作用，所以我们可以开始向它扔一些东西，这是很好的

00:10:37.720 --> 00:10:47.170
里面的东西好吧好吧，我将它拉起来并在实验室中完成

00:10:47.170 --> 00:10:51.379
即使它就像一次一样，我至少也可以获得其余的代码

00:10:51.379 --> 00:10:57.319
围绕它工作，所以这是一件好事，我担心它是

00:10:57.319 --> 00:11:01.220
就像我们说的那样，我们喜欢极限之地，说我们有一个

00:11:01.220 --> 00:11:08.450
半个10磁盘的演出，但Brian认为

00:11:08.450 --> 00:11:13.460
在贷款人职能之间共享的，所以我需要看看

00:11:13.460 --> 00:11:25.220
这笔交易是我们很快就会发现的，也许知道为什么

00:11:25.220 --> 00:11:30.080
那会很有趣，是的，希望这会是一件值得的事情

00:11:30.080 --> 00:11:33.530
到本周末结束前的高级步骤

00:11:33.530 --> 00:11:39.980
然后与Brian讨论将这个想法用于数据库

00:11:39.980 --> 00:11:46.790
建立起来，就像他将要想到的东西，因为它基本上是

00:11:46.790 --> 00:11:51.050
交易记录记录，就像手中的键值存储一样

00:11:51.050 --> 00:11:55.580
交易记录在上面的所有不同操作上

00:11:55.580 --> 00:11:59.000
这样您就可以喜欢并获得前进的动力

00:11:59.000 --> 00:12:03.890
在哪个方面，所有操作都在下一个点之间

00:12:03.890 --> 00:12:07.430
排序发生在不同音符上的不同操作

00:12:07.430 --> 00:12:12.860
操纵相同的数据结构，然后就可以对其进行某种程度的同步

00:12:12.860 --> 00:12:17.870
嗯，是的，我一直在戳它，这让我开始思考

00:12:17.870 --> 00:12:21.830
我们很久以来就遇到的一些API问题

00:12:21.830 --> 00:12:28.790
特别是我们肯定会需要一个知道如何

00:12:28.790 --> 00:12:33.410
图的大部分是为特定的cid存储的，因此基本上

00:12:33.410 --> 00:12:36.620
整个图都存储在里面，所以仅仅说像这样我是不够的

00:12:36.620 --> 00:12:40.220
有这个障碍物，或者我没有，你知道你是否在下面有所有东西

00:12:40.220 --> 00:12:44.150
阻止，否则我无法真正执行高效的同步操作，所以这是一个

00:12:44.150 --> 00:12:49.310
另一件事是类型，我拥有的类型生成内容

00:12:49.310 --> 00:12:54.260
从我去过最长时间的模式开始，我就拥有了这个get方法，

00:12:54.260 --> 00:12:58.880
会取出色块并遍历多个色块层

00:12:58.880 --> 00:13:03.620
然后将Limbo转换为类型，现在我正尝试在其中使用

00:13:03.620 --> 00:13:08.450
这是他们的背景，我意识到那不是您想要的方式

00:13:08.450 --> 00:13:12.110
使用它实际上可能会更好地占用存储空间

00:13:12.110 --> 00:13:17.089
层并接受类型，并具有用于将它们粘合在一起并进行铸造的API

00:13:17.089 --> 00:13:22.180
正确地遍历它们，所以我可能会在某个时候进行处理

00:13:22.180 --> 00:13:25.970
但是，是的，这就像一个不错的星期天项目，我

00:13:25.970 --> 00:13:41.899
开始在那个um周围戳，然后是Eric，我没有实现目标

00:13:41.899 --> 00:13:46.129
我们可以获取所有接口更改的基本节点，然后进入

00:13:46.129 --> 00:13:51.769
法院在IPO D总理或法典遍历和东西，那是

00:13:51.769 --> 00:13:58.639
真正雄心勃勃的事实证明，花了比我预期更多的时间

00:13:58.639 --> 00:14:03.769
主要是在我做所有这些新界面时，我开始是为了

00:14:03.769 --> 00:14:08.420
快速迭代，我只是将所有新代码扔进了一个

00:14:08.420 --> 00:14:11.930
庞大的程序包，所有基准测试都必须完成所有这些工作，所以我只是

00:14:11.930 --> 00:14:18.259
按两个特征，他不会下雪的，是的，所以现在我准备将其移动

00:14:18.259 --> 00:14:22.879
进入核心，并像正确地进行划分一样，将基本

00:14:22.879 --> 00:14:27.559
记录了我正在重命名的内容，我杀死了无铅产品，但是代码是什么

00:14:27.559 --> 00:14:33.490
名字很好，他们对我来说太多了，这是基本的节点软件包

00:14:34.059 --> 00:14:38.329
另一个程序包，我将放置原型代码和我以前使用的东西

00:14:38.329 --> 00:14:42.139
用来确保研究步入正轨，将那些结果证明是正确的

00:14:42.139 --> 00:14:49.189
不平凡，因为演示代码生成的东西使用的是

00:14:49.189 --> 00:14:54.769
基本的远程软件包，事实证明，如果我想维护一些

00:14:54.769 --> 00:15:01.339
围绕不变性的契约，这些事情无法以集中的方式触及

00:15:01.339 --> 00:15:04.309
当它们实际上在单独的包装中时，所以只有一些

00:15:04.309 --> 00:15:09.550
学习在那里的未来代码的经验，我基本上是在表

00:15:09.550 --> 00:15:15.649
修复此程序包中的内容，因为这无关紧要，因为它就像是一个

00:15:15.649 --> 00:15:19.339
研究项目，对，所以我只是想把那些位丢掉，但是

00:15:19.339 --> 00:15:22.249
经验教训，好的副作用是我得到了大量的设计

00:15:22.249 --> 00:15:25.850
一周的码头，将来可能还会继续获得回报

00:15:25.850 --> 00:15:30.830
并希望可以推广我正在努力

00:15:30.830 --> 00:15:34.670
就像识别所有不同的值一样

00:15:34.670 --> 00:15:41.210
优先考虑速度和装配尺寸，然后进行检查

00:15:41.210 --> 00:15:45.560
权衡选择，然后这种解释非常多的代码

00:15:45.560 --> 00:15:51.560
至少我希望我也能很快遇到比平常更多的问题

00:15:51.560 --> 00:15:57.050
如果有人在听，想做一些漂亮的编码工作

00:15:57.050 --> 00:16:02.210
定义明确的地方，例如独立的娱乐场所，那里有很多

00:16:02.210 --> 00:16:06.500
管道上的新问题，并为诸如遍历接口之类的问题做好了准备

00:16:06.500 --> 00:16:12.980
认为拥有核心内容很酷，而且很容易做，所以我

00:16:12.980 --> 00:16:17.450
对那些我认为可能是好主意的东西做了一些写作，但如果

00:16:17.450 --> 00:16:26.360
任何人都想跳到他们不知道的地方，我也有一个思考的机会

00:16:26.360 --> 00:16:32.300
大声说出每种退货策略，因为我意识到了一些情况

00:16:32.300 --> 00:16:36.410
我要返回错误的地方有点蛮横，我努力捍卫

00:16:36.410 --> 00:16:45.410
现在很冗长，所以任何人都喜欢在那条评论上有细微差别的意见

00:16:45.410 --> 00:16:52.520
会受到欢迎，我们可能正在与go ipfs进行一些对话

00:16:52.520 --> 00:16:56.930
关于他们整合更多的这些东西，那些还很早

00:16:56.930 --> 00:17:03.380
需要通过诸如研究之类的对话来产生一定范围的概念，

00:17:03.380 --> 00:17:05.690
像在那个过程中会发生什么和一个订单

00:17:05.690 --> 00:17:18.709
那就是我们将看到的情况，并为我包装了两件事，我

00:17:18.709 --> 00:17:26.510
对于完整的东西有一个问题，所以我们在

00:17:26.510 --> 00:17:32.720
一点，所以标题“ sn”的问题显然放在最后

00:17:32.720 --> 00:17:37.250
但是他们所谓的填充（padding）就像位以某种方式移位一样，然后

00:17:37.250 --> 00:17:43.440
它不能倒流，因为它也会倒退，依此类推，是吗

00:17:43.440 --> 00:17:47.070
将其更改为流传输会疯狂地复杂吗？

00:17:47.070 --> 00:17:54.780
就像疯狂地温和也许这就是我在JavaScript中的感受

00:17:54.780 --> 00:18:00.000
现在就打开它，为什么呢，那里面有这个怪异的代码

00:18:00.000 --> 00:18:07.230
在乡村需要寻求特质，因为它会备份，所以它会去

00:18:07.230 --> 00:18:11.310
前进，然后备份，然后再次前进，我将尝试

00:18:11.310 --> 00:18:15.210
了解为什么备份，为什么不备份，因为它是我认为的

00:18:15.210 --> 00:18:19.590
一次只备份一个字节，所以理论上您知道这不是

00:18:19.590 --> 00:18:24.840
对随机位置的siik，这只是一点点备份，因此从理论上讲应该

00:18:24.840 --> 00:18:30.480
真的很容易流式传输，为什么这东西不只是缓存一口或

00:18:30.480 --> 00:18:35.220
为什么它需要寻找那是我不明白的两个原因之一

00:18:35.220 --> 00:18:42.870
我喜欢的作品忙碌的音乐还可以，我也喜欢

00:18:42.870 --> 00:18:47.070
快速浏览一下，因为我想我的意思是基本上我也很喜欢

00:18:47.070 --> 00:18:51.570
对它感兴趣，这就像在说，如果您说还可以，就像没有路可走

00:18:51.570 --> 00:18:57.240
他们忘了我可能不会，但是听起来很有趣

00:18:57.240 --> 00:19:01.380
代码我的意思是你在证明中，所以这应该是你的

00:19:01.380 --> 00:19:07.230
是的，是的，这很有趣，而且喜欢

00:19:07.230 --> 00:19:11.040
整个算法看起来很有趣，我将其粘贴到聊天中

00:19:11.040 --> 00:19:16.260
在CFR 32的文件硬币证明中，有一个在存储证明中，但在

00:19:16.260 --> 00:19:18.680
Fargo的证明是完成大部分工作的地方

00:19:18.680 --> 00:19:25.830
检查在哪里，只是大量的文档而已

00:19:25.830 --> 00:19:30.480
其中有些真的很晦涩，例如您真的，但我认为，

00:19:30.480 --> 00:19:34.350
之所以说它真的很复杂，是因为它允许

00:19:34.350 --> 00:19:40.050
任意填充，所以我们只关心每两个54位填充2位

00:19:40.050 --> 00:19:43.440
这就是烂摊子，这是我们关心的唯一填充物

00:19:43.440 --> 00:19:47.550
但是写这个东西是为了它可以占用任意数量的填充位

00:19:47.550 --> 00:19:53.820
每位，因此以这种超通用的方式进行

00:19:53.820 --> 00:20:01.279
因此它可以处理这些疯狂的情况，但我们每2:54只关心两个

00:20:01.279 --> 00:20:06.509
像这样的情况应该很简单，但我认为它试图

00:20:06.509 --> 00:20:14.069
占任意数目的填充孩子，因为我打赌该文件

00:20:14.069 --> 00:20:17.909
他之所以远离，是因为他从来不喜欢所有错误修复方面的改进。

00:20:17.909 --> 00:20:22.619
改善或喜欢任何东西，我就像哦，天哪，我的天，这是在呼唤

00:20:22.619 --> 00:20:31.739
我今年32岁，是的，当然是其中之一

00:20:31.739 --> 00:20:37.259
值得一看的跨性别的功能是对的我有牛，所以

00:20:37.259 --> 00:20:41.579
这就是它，它完成了大部分工作，并且它正在占用C Keable

00:20:41.579 --> 00:20:54.679
字符串，确实如此，它只是一个备份，还可以

00:20:54.679 --> 00:21:06.569
是的，迈克尔，我有一个问题要问912梅格，为什么这个数字

00:21:06.569 --> 00:21:15.149
特别是一个，我想保留它，因此必须四舍五入到1 Meg

00:21:15.149 --> 00:21:19.589
显然因为沿着其他切片已经像我们这样

00:21:19.589 --> 00:21:24.929
倾向于将切片已对齐到1兆字节的切片或1兆字节的块

00:21:24.929 --> 00:21:32.189
抱歉，我想确保所有块都有足够的空间

00:21:32.189 --> 00:21:37.559
当我们投入很多时，所有的UNIX必须是一个块，并且car文件的开销

00:21:37.559 --> 00:21:44.039
小型文件放入其中之一，我们已经必须保留小型汽车文件

00:21:44.039 --> 00:21:48.869
一定数量的绝对文件下的文件，因为然后根块

00:21:48.869 --> 00:21:53.579
太大以至于无法将根块保持在2 Meg或Meg以下

00:21:53.579 --> 00:22:01.859
大约是20,000，所以912就像一个相当安全的数字

00:22:01.859 --> 00:22:05.279
我们总是有所有的开销，我们可以将其保持在1天以下

00:22:05.279 --> 00:22:09.950
马克好吧好吧，那是一个哦，是的，这主要是关于

00:22:09.950 --> 00:22:13.490
做河景和高架部分，因为II

00:22:13.490 --> 00:22:19.340
周末的算法，弄清楚什么是舍入，而不仅仅是

00:22:19.340 --> 00:22:29.240
最多是2的幂用填充是最多2的幂

00:22:29.240 --> 00:22:34.580
因此，该阈值将为1616兆字节，并且

00:22:34.580 --> 00:22:41.320
一旦您超过1600，它就会跳到两个演出，所以告诉您

00:22:41.320 --> 00:22:47.480
硬性门槛是101六对，但这是之后

00:22:47.480 --> 00:22:51.710
所有我无法很好估计的开销，是的，所以我要多一些

00:22:51.710 --> 00:22:56.720
保守比让您知道很多这些事情要好

00:22:56.720 --> 00:23:11.230
像矿工一样占用大量存储空间，好吧

00:23:11.230 --> 00:23:21.049
我失去了会议的一切，并告别

00:23:21.049 --> 00:23:27.820
大家，我们下周将在同一频道再次见面

00:23:28.269 --> 00:23:31.269
再见

