WEBVTT
Kind: captions
Language: zh-Hans

00:00:12.160 --> 00:00:16.800
欢迎大家参加本周的ipld同步会议

00:00:16.800 --> 00:00:24.720
2021年2月22日，星期一

00:00:24.720 --> 00:00:29.279
每周，我们都会简要介绍一下我们已经完成的工作，然后继续进行下一步的工作

00:00:29.279 --> 00:00:33.920
一周，然后讨论我们可能有的任何议程项目

00:00:33.920 --> 00:00:40.399
嗯，我从我自己开始，我现在工作

00:00:40.399 --> 00:00:46.800
关于获取js ipfs实现

00:00:46.800 --> 00:00:53.600
使用js多种格式的东西和类似的东西作为第一步，我

00:00:53.600 --> 00:00:58.719
难道我尝试使用

00:00:58.719 --> 00:01:07.200
新的甲板协议缓冲标尺正在执行um的编解码器，如果是这样，则使用unix

00:01:07.200 --> 00:01:12.560
这部分是出乎意料的容易，但是问题现在正在整合

00:01:12.560 --> 00:01:18.159
进入ipfs，因为js ipfs当然是在使用

00:01:18.159 --> 00:01:21.840
内部ipld，当然还有整个ipld

00:01:21.840 --> 00:01:28.240
我们目前使用的是旧的CID，旧的Codex，依此类推

00:01:28.240 --> 00:01:31.520
所以是的，这不能很好地协同工作

00:01:31.520 --> 00:01:36.479
所以我目前的想法是我要尝试做的，然后我会看看它是否是一个

00:01:36.479 --> 00:01:41.439
好主意是在内部而不是使用此

00:01:41.439 --> 00:01:46.479
有点像ipld开膛手，我们曾经使用过

00:01:46.479 --> 00:01:50.079
回购或阻止服务，直接了解详细信息

00:01:50.079 --> 00:01:54.560
它只是使用编解码器直接对其进行编码，然后对其进行解码，然后

00:01:54.560 --> 00:01:57.680
将它们直接放入商店，所以

00:01:57.680 --> 00:02:01.200
真的不喜欢介于两者之间，

00:02:01.200 --> 00:02:07.280
这样我应该能够使用back product缓冲区来做s

00:02:07.280 --> 00:02:10.479
直接零件，一切都会好起来的，但是

00:02:10.479 --> 00:02:14.160
他们仍然会像整个Deck api仍将使用旧的东西一样，因此

00:02:14.160 --> 00:02:16.160
继续，是的，我们将看到结果如何

00:02:16.160 --> 00:02:20.080
但我想在科幻小说工作期间迈出的第一步，因为像这样

00:02:20.080 --> 00:02:23.760
有点像至少对我来说ipfs的核心是

00:02:23.760 --> 00:02:26.480
这样做，这将是非常重要的一步

00:02:26.480 --> 00:02:30.879
希望让那些使用我们也要使用的新库的人

00:02:30.879 --> 00:02:35.120
人们在他们的javascript中使用

00:02:35.120 --> 00:02:38.879
生态系统，嗯，这就是我正在继续的

00:02:38.879 --> 00:02:44.080
在接下来的几周内做嗯

00:02:44.080 --> 00:02:47.599
接下来是丹妮尔

00:02:48.000 --> 00:02:51.920
很酷，所以一些东西终于开始成形

00:02:51.920 --> 00:02:55.840
是我不想称它为json编码的第二版，但这是

00:02:55.840 --> 00:03:00.319
这是一种为json编写新实现的实验

00:03:00.319 --> 00:03:02.720
我一直在和几个人一起做这件事

00:03:02.720 --> 00:03:05.840
几个月的时间，我们确实希望将其开源

00:03:05.840 --> 00:03:09.519
最终嗯，所以我们还没有完全在那里，因为我们

00:03:09.519 --> 00:03:11.440
不想引起太多关注，但

00:03:11.440 --> 00:03:15.200
github上现在有一个公共快照，它是可导入的

00:03:15.200 --> 00:03:19.920
作为一个联合模块，所以如果有人想立即使用它，它是否已完全

00:03:19.920 --> 00:03:25.280
它是一个完整的令牌编码器和解码器，因此您可以做得很低

00:03:25.280 --> 00:03:28.000
我认为将会是水平的东西

00:03:28.000 --> 00:03:31.360
主要对dac json和go之类的东西很有趣

00:03:31.360 --> 00:03:36.720
而且例如快速运行在json中必须有一个记录器，它实际上必须是

00:03:36.720 --> 00:03:39.680
速度非常快，但现在它会生成大量代码

00:03:39.680 --> 00:03:43.280
与一个外部库，我认为这可能像50行

00:03:43.280 --> 00:03:49.680
有了这个新的令牌编码器，它将不断改进，因此您

00:03:49.680 --> 00:03:53.120
可以按照该回购协议进行交易，如果您现在想只是个固定汇率的话

00:03:53.120 --> 00:03:57.920
而我正在做的另一件事本质上是我们的第一个项目

00:03:57.920 --> 00:04:04.159
在新团队中，在ipfs中使用ipld prime，因此我在设计部分

00:04:04.159 --> 00:04:08.239
接载的是api中的节点修改

00:04:08.239 --> 00:04:11.439
去merkle dag这是很多ipfs软件包

00:04:11.439 --> 00:04:14.959
使用，所以我已经链接到我们所在的hackmd

00:04:14.959 --> 00:04:17.600
收集所有的模块和软件包

00:04:17.600 --> 00:04:20.639
使用这些api并与它们进行交互，并且

00:04:20.639 --> 00:04:24.320
在这方面我可能必须与eric同步，因为我认为他一直在设计

00:04:24.320 --> 00:04:28.160
用于修改和导航节点的类似API，我认为它们是

00:04:28.160 --> 00:04:30.960
所谓的转换api可能是错误的

00:04:30.960 --> 00:04:35.520
呃，但是我想和他说话，因为你知道

00:04:35.520 --> 00:04:38.720
本质上，我应该决定我是否要在那里重复使用他的工作

00:04:38.720 --> 00:04:42.880
如果快要准备好了或者我想做些简单的事情

00:04:42.880 --> 00:04:48.639
然后直接去merkle jack或类似的东西，对我来说就是这样

00:04:51.680 --> 00:04:59.919
谢谢，接下来我的清单上是规则确定的，所以我也是这个小组的一员

00:04:59.919 --> 00:05:05.520
丹尼尔正在考虑将ipld和ipld prime应用于

00:05:05.520 --> 00:05:11.120
ipfs，我们仍然认为我们要达成共识

00:05:11.120 --> 00:05:16.800
咀嚼那个项目中有很多问题，而我们看起来

00:05:16.800 --> 00:05:20.800
在每个新的呃存储库中，我们就像哦

00:05:20.800 --> 00:05:23.759
仍在使用gx，有很多事情可以做

00:05:23.759 --> 00:05:28.720
那是一um的低挂，所以有一些设计工作，如um dan

00:05:28.720 --> 00:05:31.440
提到很多事情正在弄清楚

00:05:31.440 --> 00:05:34.880
映射当前称为dag服务的服务，该服务结合了一些不同的功能

00:05:34.880 --> 00:05:39.600
事物，包括如何获取数据的概念

00:05:39.600 --> 00:05:46.000
一般提供服务，以及如何在本地数据中添加和删除数据

00:05:46.000 --> 00:05:48.800
存储um，这有点独立

00:05:48.800 --> 00:05:51.360
接口，因为它不一定以相同的方式从网络中拉出

00:05:51.360 --> 00:05:53.199
两者都会潜在地从

00:05:53.199 --> 00:05:55.360
网络或可能来自本地数据存储

00:05:55.360 --> 00:05:59.039
然后还有一大堆对dags的突变和修饰

00:05:59.039 --> 00:06:02.800
和数据，然后弄清楚我们想要的实际接口是什么

00:06:02.800 --> 00:06:06.800
从世界的ipld格式视图移到的时间

00:06:06.800 --> 00:06:10.960
ipld格式节点位于块级别，而不是

00:06:10.960 --> 00:06:14.319
ipld主节点，它更精细，并且

00:06:14.319 --> 00:06:16.319
我们认为的单个节点

00:06:16.319 --> 00:06:20.080
今天意味着我们接下来要传播

00:06:20.080 --> 00:06:23.039
一堆东​​西，其中一个畅通无阻

00:06:23.039 --> 00:06:26.880
我希望本周度过的那些，嗯，有一堆

00:06:26.880 --> 00:06:31.520
ipfs至少能够读取的其他编解码器

00:06:31.520 --> 00:06:34.639
从包括git和

00:06:34.639 --> 00:06:40.080
tar um，所以我们应该弄清楚该如何处理

00:06:40.080 --> 00:06:42.240
相同的数据并将其读入ipld主节点

00:06:42.240 --> 00:06:45.759
这样，当我们移至ipld主节点时，我们仍然可以拥有网络

00:06:45.759 --> 00:06:50.880
世界，所以我希望至少收拾起同样程度的功能

00:06:50.880 --> 00:06:56.000
能够从我的数据中获得磁盘上的焦油的结果

00:06:56.000 --> 00:06:59.599
具有相同数据的ipld专用节点视图

00:06:59.599 --> 00:07:05.360
嗯，这样我们就可以开始使用IPL主界面了

00:07:05.360 --> 00:07:10.400
嗯，我想我也最终会发布一堆

00:07:10.720 --> 00:07:17.039
github问题中的链接可以帮助人们继续进行这项工作，但是

00:07:17.039 --> 00:07:20.240
理想情况下，最终视图是附加的ipld

00:07:20.240 --> 00:07:23.199
编解码器可以使他们进入ipfs的方式更多

00:07:23.199 --> 00:07:27.440
轻松使我们的生活更加幸福

00:07:27.440 --> 00:07:34.479
对我来说就是这样，谢谢下一个

00:07:36.560 --> 00:07:40.639
哦，男孩，上周发生了很多事情

00:07:40.639 --> 00:07:45.360
而且我没有每天写日记，所以我忘记了大多数

00:07:45.360 --> 00:07:48.000
但是我开始做的一些对这个小组很有趣的事情

00:07:48.000 --> 00:07:52.639
看着mv dan链接的新json内容

00:07:52.639 --> 00:07:59.120
更早的时候，这是很酷的惊喜，所以如果我们

00:07:59.120 --> 00:08:03.280
可以用来在将来制作更好的dag json

00:08:03.280 --> 00:08:06.879
我也一直想知道并且仍然想知道的事情

00:08:06.879 --> 00:08:10.319
是我们是否能够使用

00:08:10.319 --> 00:08:15.039
该库可以做其他更广泛的工作，例如将其用作dex的基础

00:08:15.039 --> 00:08:18.720
海边令牌处理嗯，我认为那是

00:08:18.720 --> 00:08:22.319
乍一看，我可能会想起来的可能性要小得多

00:08:22.319 --> 00:08:25.199
关于这一点，因为我的意思越明显，我可以做的越多

00:08:25.199 --> 00:08:30.560
用过我更开心的事情，但这只是为了做json事情

00:08:30.560 --> 00:08:33.519
因此，如果它不是超级可重用的，也就不足为奇了

00:08:33.519 --> 00:08:38.080
所以将来我可能会像一些编解码器实用程序那样最终使用

00:08:38.080 --> 00:08:43.360
共享dexyborne.json的内容，然后会有这样的转换，

00:08:43.360 --> 00:08:48.399
开始使用json库中的令牌

00:08:48.399 --> 00:08:52.560
我们会看到所有我也只是在看的东西

00:08:52.560 --> 00:08:55.360
编写代码，因为这是一个整体

00:08:55.360 --> 00:09:00.160
努力，尚未出版

00:09:00.160 --> 00:09:06.240
我想在这里征询其他人的意见

00:09:06.240 --> 00:09:11.760
跨语言装置，我们在某些项目中已经使用了其中的一些装置

00:09:11.760 --> 00:09:15.920
以各种格式显示，我已经开始做笔记

00:09:15.920 --> 00:09:20.320
在那个um上，有几个我们已经在做的地方的例子，

00:09:20.320 --> 00:09:24.720
关于该如何解决的想法以及我应该做的一些选择

00:09:24.720 --> 00:09:27.519
认为我们应该看看前进的人

00:09:27.519 --> 00:09:33.839
我想知道英语怎么说，所以有一个公关

00:09:33.839 --> 00:09:37.519
勘探报告进行中，我很乐意对此发表评论

00:09:37.519 --> 00:09:43.360
到目前为止，只有少数几种可能被认为有用的格式

00:09:43.360 --> 00:09:47.120
所以这就是我所听说的

00:09:47.120 --> 00:09:55.040
可能还有更多，是的，请看一看，仅此而已

00:09:57.200 --> 00:10:01.519
谢谢，我能读到彼得没有更新

00:10:01.519 --> 00:10:08.720
这个星期和下一个是卡尔森

00:10:08.720 --> 00:10:12.000
谁也没有真正的更新，但是如果你是

00:10:12.000 --> 00:10:16.839
随便谈谈您的[音乐]

00:10:16.839 --> 00:10:21.200
是的，这周我们研究的不多，我们的团队只是

00:10:21.200 --> 00:10:25.120
经历了重大的研究冲刺，所以没有太多

00:10:25.120 --> 00:10:29.040
尤其是任何形式的代码进度，都有一些有趣的地方

00:10:29.040 --> 00:10:32.480
我可以谈论的研究发现，但这与

00:10:32.480 --> 00:10:38.000
在这里讨论，所以我会离开那个工作

00:10:38.000 --> 00:10:44.000
所以上周我与印加开关公司（Incan Switch）的pvh碰面，我们聊了关于ipld

00:10:44.000 --> 00:10:47.600
嗯，因为那位船员一直

00:10:47.600 --> 00:10:51.760
好奇已经ipld好奇了一段时间，我想我说服他们给

00:10:51.760 --> 00:10:57.600
这是一个尝试的嗯，所以我们希望从中有一些问题

00:10:57.600 --> 00:11:04.880
互联网的频谱即将到来，那边的地球变得凉爽

00:11:04.880 --> 00:11:10.880
是我们已经开始围绕一些建议提出一些建议

00:11:10.880 --> 00:11:18.480
迈克尔告诉我的散列一致排序的树工作，但是我认为

00:11:18.480 --> 00:11:25.360
也许是亚历克斯或某人

00:11:25.360 --> 00:11:30.000
有人把它写了起来，所以对于某些线程看起来很有希望

00:11:30.000 --> 00:11:35.040
同步我们正在做的事情，这很酷

00:11:38.399 --> 00:11:43.279
如果您的研究中有您认为合理的文件

00:11:43.279 --> 00:11:48.079
我们了解并喜欢发现

00:11:48.079 --> 00:11:51.839
给我们发送一些链接，我将把它们链接到

00:11:51.839 --> 00:11:56.079
我们的仓库称为勘探报告，并从那里链接到它们

00:11:56.079 --> 00:11:59.200
很好，我们的团队实际上已经开始行动了

00:11:59.200 --> 00:12:02.639
我们正在尝试在开放式环境中做更多的研究工作

00:12:02.639 --> 00:12:06.480
像很多人一样，所以我们已经开始将内容转移到github讨论中

00:12:06.480 --> 00:12:09.760
嗯，看起来真的很好

00:12:09.760 --> 00:12:14.000
作为一种把东西拿出来的方法，这样我就可以潜在地将其中一些链接起来

00:12:14.000 --> 00:12:19.040
是的，是的，是的，我的梦想只是

00:12:19.040 --> 00:12:22.480
拥有一个大的旧链接农场ii放弃尝试在

00:12:22.480 --> 00:12:26.800
格式，这没有什么可笑的，生产率很低，但是链接收集

00:12:26.800 --> 00:12:34.880
是的，很酷，好吧，反正就是我了，谢谢

00:12:34.880 --> 00:12:40.079
嗯，在我们转到之前，其他人是否有任何更新

00:12:40.079 --> 00:12:45.920
ad gen项也可以随意编辑议程项

00:12:46.800 --> 00:12:51.200
酷然后[音乐]

00:12:51.200 --> 00:12:57.839
遗嘱中有一个关于go之间分配的问题

00:12:57.839 --> 00:13:06.959
编码卡座PB和ipod Prime原型，我想这是一个eric

00:13:06.959 --> 00:13:13.360
区别实际上不适合我，我几乎有什么区别

00:13:13.360 --> 00:13:24.240
我本来可以问这个问题的，其他人也知道吗

00:13:25.279 --> 00:13:28.320
好吧，所以我想我们会通读好吧，也许这是介于

00:13:28.320 --> 00:13:33.279
和汉娜，我们应该弄清楚为什么我们有看起来像

00:13:33.279 --> 00:13:39.040
ipld prime的两个编解码器均为pg pb

00:13:39.360 --> 00:13:42.639
两者都已在上个月更新

00:13:42.639 --> 00:13:50.079
很酷，那么下周我们会听到的

00:13:50.079 --> 00:13:54.720
嗯，是的，所以我也有一个问题要问

00:13:54.720 --> 00:13:58.160
对你们大家来说，关于4月ipfs的内容

00:13:58.160 --> 00:14:05.920
嗯，所以第一个是关于UM的，当您谈论操纵时，什么是

00:14:05.920 --> 00:14:09.839
使用ipf fpfs对象api进行计划

00:14:09.839 --> 00:14:14.240
因为像这样，我们在js ipfs中也有

00:14:14.240 --> 00:14:18.560
就像落入ipld世界一样

00:14:18.560 --> 00:14:23.040
但是我们总是告诉人们不要像不使用对象api那样使用它

00:14:23.040 --> 00:14:25.839
因为它最终会被弃用

00:14:25.839 --> 00:14:29.360
所以我只是想知道那里有什么计划，因为

00:14:29.360 --> 00:14:34.320
我完全赞成弃用它，或者只是喜欢

00:14:34.320 --> 00:14:39.680
对于用例来说，它有更好的效果，而随着我

00:14:39.680 --> 00:14:43.040
清楚地将js ibfs移到它也喜欢的新内容中

00:14:43.040 --> 00:14:46.800
有点像移动这件旧东西有意义，或者如果您还认为

00:14:46.800 --> 00:14:48.639
关于我们是否应该移动这件旧东西

00:14:48.639 --> 00:14:54.000
讨论我们该怎么做是有意义的，所以

00:14:54.000 --> 00:14:58.800
我今天早些时候和院长谈过，至少他在ipfs方面是开放的

00:14:58.800 --> 00:15:04.160
改变界面，说感觉很奇怪

00:15:04.160 --> 00:15:08.000
我们在ips prime中所处的位置以及拥有呃的位置所给的尴尬之处

00:15:08.000 --> 00:15:11.279
你知道也许与dag合并或者

00:15:11.279 --> 00:15:14.639
我们反对赞成贾格·迈克尔（Jag Michael）似乎有话要说

00:15:14.639 --> 00:15:20.000
就像这样，我们正在进入像

00:15:20.000 --> 00:15:24.880
一种真正的现状偏见，例如我认为我们应该实际构架

00:15:24.880 --> 00:15:28.320
两个问题，并将它们放在github问题中，看看我们是否能找到任何问题

00:15:28.320 --> 00:15:32.240
足够的响应um一个用于对象api，另一个用于

00:15:32.240 --> 00:15:36.079
dag api并要求任何人

00:15:36.079 --> 00:15:41.600
捍卫它的存在就像任何人都可以认为这是一件好事吗

00:15:41.600 --> 00:15:45.120
想法仍然有这些，如果不是更好，只需在其中使用block api

00:15:45.120 --> 00:15:50.079
其他的api一样，是否有真正的防御

00:15:50.079 --> 00:15:53.839
这些事情，因为我们一直喜欢像我们周围的模式

00:15:53.839 --> 00:15:56.399
弃用它也许不行，但是就像我没听过一样

00:15:56.399 --> 00:16:00.480
几年中的任何人都真正尝试捍卫他们

00:16:00.480 --> 00:16:04.000
就像让我们以这种方式构架然后

00:16:04.000 --> 00:16:08.240
我认为到最后，我们将非常清楚我们需要做什么

00:16:08.240 --> 00:16:11.120
也许我错了，也许某人有一个很好的理由，他们需要

00:16:11.120 --> 00:16:15.279
dag api或其他正确的方法，但如果没有人，如果没人能提出一个

00:16:15.279 --> 00:16:19.920
就像我认为关闭起来要容易得多

00:16:19.920 --> 00:16:24.240
嗯，因为对象中有两个听起来完全正确，

00:16:24.240 --> 00:16:29.680
甚至从um这样的命令行

00:16:29.680 --> 00:16:33.519
在这种固有的怪异形式上与结构化数据进行交互

00:16:33.519 --> 00:16:36.480
序列化命令行的东西，也感觉像这个奇怪的脱节

00:16:36.480 --> 00:16:40.959
您知道您完全可以看到，通过http api或

00:16:40.959 --> 00:16:44.320
在你的嗯

00:16:44.880 --> 00:16:48.320
内部呃，就像我嵌入为图书馆一样

00:16:48.320 --> 00:16:52.160
我可能希望像我的ipld dag一样能够进出

00:16:52.160 --> 00:16:56.000
正确的，从某种意义上说，就像这个界面

00:16:56.000 --> 00:17:00.720
这些不是这些东西，是一个界面的好主意

00:17:00.720 --> 00:17:03.279
就像我们应该建立那样的东西，不是

00:17:03.279 --> 00:17:09.600
家伙是当当api就像是一个非常糟糕的jsony api一样

00:17:09.600 --> 00:17:13.039
用不同的编解码器创建块数据的方法，例如

00:17:13.039 --> 00:17:16.400
就是这样，您始终可以通过以下方式设计出更好的体验

00:17:16.400 --> 00:17:19.600
有编解码器和客户端，并使用块api，则可以使用

00:17:19.600 --> 00:17:22.079
平台api um，它们基本上是

00:17:22.079 --> 00:17:25.120
一对一就像没有其他

00:17:25.120 --> 00:17:28.400
本质上重要的功能是dag api获取um

00:17:28.400 --> 00:17:31.520
那里没有特殊的处理或改善

00:17:31.520 --> 00:17:35.520
就像是，您所描述的听起来像是一件有用的事情

00:17:35.520 --> 00:17:39.440
嗯，这不是我们所拥有的

00:17:39.760 --> 00:17:43.520
是的，所以我这样，所以我们应该考虑一下这些东西要移到哪里，但是好像

00:17:43.520 --> 00:17:46.799
从某种意义上说，就像自然事物一样，

00:17:46.799 --> 00:17:50.080
并破坏了很多人使用的东西，但是如果我们有ipld prime

00:17:50.080 --> 00:17:52.720
我们也可能会公开它，好像公开它似乎很有用

00:17:52.720 --> 00:17:56.080
实际的fpld节点就是这样

00:17:56.080 --> 00:17:59.760
喜欢与um一起使用的自然事物，但我们需要弄清楚如何结束

00:17:59.760 --> 00:18:05.280
在那里，是的，所以我也和幽灵萨拉赫谈过

00:18:05.280 --> 00:18:08.000
他也说过的javascript的东西基本上是这样

00:18:08.000 --> 00:18:12.080
他想是的，要么将事物移动到具有单独api的block api中

00:18:12.080 --> 00:18:15.280
但同时，我们对卡座api是否有意义也进行了相同的讨论

00:18:15.280 --> 00:18:18.559
对象api是有道理的，是的，但是

00:18:18.559 --> 00:18:20.480
无论如何，很高兴听到基本上两者都

00:18:20.480 --> 00:18:23.360
方面，例如目标方和成绩单方表示，我们还需要更多

00:18:23.360 --> 00:18:27.120
讨论并弄清楚一些东西，我认为

00:18:27.120 --> 00:18:30.559
迈克尔的想法很好，因为我也有印象，因为喜欢

00:18:30.559 --> 00:18:35.440
如果有人对此有疑问，或者我总是告诉人们不要使用这些数据

00:18:35.440 --> 00:18:40.720
api不使用对象api，我想像我们许多人一样

00:18:40.720 --> 00:18:45.840
在过去的几年中，希望人们不会使用它，但是我

00:18:45.840 --> 00:18:50.400
也不能说完全是人们使用了我不知道的那些api

00:18:50.400 --> 00:18:56.960
嗯，酷，是的，所以，谁喜欢你，我们如何

00:18:56.960 --> 00:19:03.200
嗯，向前走，就像谁是那些所有者的所有者，比如打开那些问题或得到

00:19:03.200 --> 00:19:06.160
讨论开始了，我给自己一个要提交的行动项目

00:19:06.160 --> 00:19:11.120
问题还可以，我认为最终决定可能是

00:19:11.120 --> 00:19:15.440
斯蒂芬坦率地说，是的，是的

00:19:15.440 --> 00:19:18.720
是的，但仍然像我的目标是

00:19:18.720 --> 00:19:22.240
显然拥有它可以推动这一发展，所以这会很好

00:19:22.240 --> 00:19:28.000
很好，谢谢，请呀，然后抄送我，我可以

00:19:28.000 --> 00:19:29.919
然后还要从JS ping其他人

00:19:29.919 --> 00:19:34.240
一边，是的，这很不错，很酷

00:19:34.240 --> 00:19:38.000
很好，很好

00:19:38.000 --> 00:19:41.120
另一个问题是相关的，是

00:19:41.120 --> 00:19:44.240
目前，正如您在谈论更多编解码器和

00:19:44.240 --> 00:19:47.600
我想目前也有一个以太坊编解码器

00:19:47.600 --> 00:19:53.440
ipld我猜想去那里还是只有一个javascript

00:19:53.440 --> 00:19:55.679
事物

00:19:56.160 --> 00:20:01.039
遍历以太坊区块链数据

00:20:01.360 --> 00:20:06.000
我不知道我们可能会有很多代码在浮动

00:20:06.000 --> 00:20:12.159
嗯，我认为是互联网上的某个地方

00:20:12.159 --> 00:20:18.799
当前在go ipfs中链接，然后保证已经维护了

00:20:18.799 --> 00:20:24.159
直到现在为止都是非常可疑的，所以

00:20:24.159 --> 00:20:27.840
我会说它将保持不变，但一直保持不变，这就是说

00:20:27.840 --> 00:20:34.720
我真的不知道，是的，所以是如此，所以实际上有一些

00:20:34.720 --> 00:20:40.320
像这样的事态发展有点涌入，我认为

00:20:40.320 --> 00:20:43.520
我认为硫化的人就像他们刚硫化的人一样

00:20:43.520 --> 00:20:46.720
关于以太坊和ipld的整个大文件

00:20:46.720 --> 00:20:50.480
嗯，我认为建议稍加修改

00:20:50.480 --> 00:20:53.520
我们做到了，或者也许正好标准化为

00:20:53.520 --> 00:20:56.720
标尺以前做过的事情，但我认为我们

00:20:56.720 --> 00:21:00.880
至少现在有更好的文档，我

00:21:00.880 --> 00:21:05.039
认为有一个建议让他们围绕此做一些赠款工作，

00:21:05.039 --> 00:21:08.559
可能最终包括的新版本

00:21:08.559 --> 00:21:12.240
那些最终可能包括那些新版本的um实际上是

00:21:12.240 --> 00:21:14.159
他们提出的其中一件事

00:21:14.159 --> 00:21:19.200
他们需要的是一堆这些编解码器的主要版本的ipl um

00:21:19.200 --> 00:21:22.320
所以我认为我们可能实际上是在资助他们这样做，但是

00:21:22.320 --> 00:21:26.400
我不是那个降落的地方的100，因为

00:21:26.400 --> 00:21:28.720
我们与他们有一些不同的赠款，我不知道

00:21:28.720 --> 00:21:33.679
是什么阶段，所以这个问题的背景

00:21:33.679 --> 00:21:38.320
有没有以太坊的javascript编解码器

00:21:38.320 --> 00:21:43.600
这疯狂地过时了，所以我什至不确定它是否有效，所以

00:21:43.600 --> 00:21:46.640
基本上是在我加入协议实验室之前写的

00:21:46.640 --> 00:21:50.159
它就像我是官方维护者，但

00:21:50.159 --> 00:21:53.919
我对以太坊几乎一无所知，所以有点像

00:21:53.919 --> 00:21:58.640
你看无论它做什么都保持工作，但我什至不知道它做了什么

00:21:58.640 --> 00:22:02.799
所以所以因此我当然不会动

00:22:02.799 --> 00:22:07.039
所以我不想为新的js多种格式的东西创建新的编解码器，所以我

00:22:07.039 --> 00:22:10.640
基本上只是想知道我们是否关心例如未来

00:22:10.640 --> 00:22:15.120
javascript中的鹦鹉特征奇偶性等等

00:22:15.120 --> 00:22:17.919
我认为如果有人要使用的东西

00:22:17.919 --> 00:22:23.600
带有js ipfs的以太坊，它们应该从头开始，例如

00:22:23.600 --> 00:22:27.200
那只是诚实的答案，因为你不能

00:22:27.200 --> 00:22:31.760
建立在我们目前拥有的东西之上，所以我

00:22:31.760 --> 00:22:34.960
宁愿弃用它，也可以将其从js ipfs中删除

00:22:34.960 --> 00:22:38.240
然后是的，我只是想知道目标方在做什么或喜欢我们

00:22:38.240 --> 00:22:41.440
有，是的，我认为基本上是

00:22:41.440 --> 00:22:45.919
同样的故事，现在走吧，我们有图书馆，我认为我看不到

00:22:45.919 --> 00:22:49.360
我们已正式支持升级到主要版本的编解码器，因此我们不

00:22:49.360 --> 00:22:53.600
计划做任何以太坊柯达工作

00:22:53.600 --> 00:23:00.000
项目，我想是的，那么对我来说，行动项将是

00:23:00.000 --> 00:23:05.760
我说的是ipfs的uh子集的javascript端，

00:23:05.760 --> 00:23:07.919
谈论发生了什么，如果你真的做了

00:23:07.919 --> 00:23:12.320
更新到js多种格式，就像我们借此机会说好吧，我们

00:23:12.320 --> 00:23:17.039
不要再维护这些代码了，或者是这样的，因为

00:23:17.039 --> 00:23:19.360
甚至不一定要在

00:23:19.360 --> 00:23:22.640
很快就会吸引我，就像我认为我们可以接受

00:23:22.640 --> 00:23:25.520
它不在您的盘子上，并且不包括在此升级中

00:23:25.520 --> 00:23:31.200
嗯，但是棒，我不知道你将如何停留在你的循环中

00:23:31.200 --> 00:23:35.039
硫化的人们和那里的下午的新角色，

00:23:35.039 --> 00:23:38.640
在做那个嗯，但我们至少应该对他们说

00:23:38.640 --> 00:23:41.840
的JavaScript方面也需要

00:23:41.840 --> 00:23:45.039
一些爱，可能你知道也许有

00:23:45.039 --> 00:23:51.840
如果他们有一些js工程师，vulcanize想做的另一笔赠款

00:23:52.480 --> 00:23:56.240
是的，我不认为那完全在他们的道路上

00:23:56.240 --> 00:24:01.840
满足他们的需求，但我想他们是否渴望获得拨款，然后确定

00:24:01.840 --> 00:24:04.960
是的，我的意思是就像确保

00:24:04.960 --> 00:24:08.880
生态系统那边的pms知道这里有一个洞

00:24:08.880 --> 00:24:12.400
在javascript方面，嗯，他们至少可以在寻找人们

00:24:12.400 --> 00:24:19.760
给定的时间可能会填补它已经是一个

00:24:19.760 --> 00:24:22.559
硫化人群的建议带来了一点好消息，

00:24:22.559 --> 00:24:25.039
他们正在写的很好

00:24:25.039 --> 00:24:28.159
转换数据的方式的模式

00:24:28.159 --> 00:24:31.520
因此，如果我们将来做的话，期待拥有

00:24:31.520 --> 00:24:35.600
有人接受以太坊东西的javascript新实现

00:24:35.600 --> 00:24:38.960
那么这可能对确保

00:24:38.960 --> 00:24:47.840
实现实际上是一致的

00:24:48.559 --> 00:24:52.320
好的，嗯，那是我的问题

00:24:52.320 --> 00:24:58.960
嗯或我的经纪人物品还有其他东西吗

00:24:58.960 --> 00:25:03.679
我没有在议程上看到任何东西

00:25:04.240 --> 00:25:12.640
任何其他意见或事物，或者我们例如想要

00:25:12.640 --> 00:25:15.679
卡森谈谈这项研究

00:25:15.679 --> 00:25:19.760
万一你愿意接受或者我不知道

00:25:19.760 --> 00:25:23.120
还是我们结束会议好吗

00:25:23.120 --> 00:25:26.640
一个问题，当我问这个嗯，别嘲笑我

00:25:26.640 --> 00:25:30.720
但是我在谈论哈希认证数据结构

00:25:30.720 --> 00:25:34.799
嗯，给医疗保健中的某人，他们就像把这个问题包起来了

00:25:34.799 --> 00:25:37.760
两个数据项和项之间的冲突怎么办

00:25:37.760 --> 00:25:40.320
你处理这个，我一直都回答我

00:25:40.320 --> 00:25:45.279
相信数学上的书呆子，但是嗯，飞行的不是很好

00:25:45.279 --> 00:25:48.320
所以我很好奇，如果你们有一个更结构化的答案或

00:25:48.320 --> 00:25:51.279
还是那件事

00:25:53.919 --> 00:25:58.240
是的，嗯，我的意思是如果您对碰撞进行数学计算

00:25:58.240 --> 00:26:02.080
嗯，你可以告诉他们几率是多少

00:26:02.080 --> 00:26:07.919
实际上，如果您看到碰撞，它就像一个足够的哈希函数

00:26:07.919 --> 00:26:12.080
意味着有人像这样攻击算法

00:26:12.080 --> 00:26:15.600
那就是那个意思，嗯，那就像过去一样

00:26:15.600 --> 00:26:19.200
受到威胁，他们正在追捕您的数据，例如

00:26:19.200 --> 00:26:23.679
就像从字面上看，您只是不会真正看到

00:26:23.679 --> 00:26:26.240
您看不到带有足够哈希值的自然碰撞的可能性

00:26:26.240 --> 00:26:30.320
函数um的确是答案，如果

00:26:30.320 --> 00:26:34.000
如果可以，如果您要查看的话，是否可以看到这些

00:26:34.000 --> 00:26:37.520
一直都是随机的，那么像区块链这样的事情就不会

00:26:37.520 --> 00:26:41.120
实际功能正确，就像它必须

00:26:41.120 --> 00:26:45.600
难以产生这些碰撞

00:26:45.600 --> 00:26:49.600
是的，而且更实际的是，如果我们发生了碰撞，我们将会崩溃

00:26:49.600 --> 00:26:53.360
就像有恐慌，有日志，一切都停止了

00:26:53.360 --> 00:26:57.279
直到有人进来弄清楚发生了什么事，

00:26:57.279 --> 00:27:01.360
更改哈希函数，以使其不再发生

00:27:01.360 --> 00:27:07.279
坚持，所以您说的是ipfs可能会崩溃，但ipld不会因为它

00:27:07.279 --> 00:27:13.120
不知道那种知识，不是这样

00:27:13.120 --> 00:27:18.240
这就像再次假设这种情况并非自然发生

00:27:18.240 --> 00:27:21.279
因为发生了攻击，所以将有一些方法可以将比特放入

00:27:21.279 --> 00:27:24.320
仍然看起来像有效数据，因此它不会在崩溃时崩溃

00:27:24.320 --> 00:27:27.120
攻击它唯一会崩溃的时间是

00:27:27.120 --> 00:27:29.679
就像期望数据看起来是一种特殊的方式

00:27:29.679 --> 00:27:33.279
然后不是因为自然碰撞

00:27:33.279 --> 00:27:36.399
这又就像你知道你是你

00:27:36.399 --> 00:27:43.679
更有可能被雷电击中，而被诸如

00:27:43.679 --> 00:27:47.120
我可以用你的希望能理解的方式来表达吗

00:27:47.120 --> 00:27:51.039
基本上是告诉他们每个比特币钱包

00:27:51.039 --> 00:27:55.440
由相同的东西和没有

00:27:55.440 --> 00:28:00.320
像左和右这样的比特币盗窃意味着这个东西实际上是有效的

00:28:00.320 --> 00:28:02.720
因为那里确实有人

00:28:02.720 --> 00:28:06.799
试图猜测你知道缓存到实际的钱包，他们不是很

00:28:06.799 --> 00:28:11.440
成功的，那是你，你知道实际的是的，是的

00:28:11.440 --> 00:28:16.880
风险场景，所以我实际上我不太关注

00:28:16.880 --> 00:28:21.919
你的逻辑在那里彼得，我想让我放一点

00:28:21.919 --> 00:28:26.399
医疗保健的扭曲，所以如果您有的话，我认为关注的是您知道

00:28:26.399 --> 00:28:30.000
医疗保健数据具有某些规定

00:28:30.000 --> 00:28:35.360
正确，所以如果有碰撞

00:28:35.360 --> 00:28:38.720
潜在的数据可能会丢失，所以我认为这是他们的主要

00:28:38.720 --> 00:28:42.640
有点担心，我不确定怎么办，因为我的意思是

00:28:42.640 --> 00:28:46.320
从理论上讲，我可以有两个不同的医学图像，但

00:28:46.320 --> 00:28:50.399
从理论上讲现在创造相同的现金实际上我

00:28:50.399 --> 00:28:54.640
同意你们不会发生的事情，但我认为当您谈论一个

00:28:54.640 --> 00:28:58.320
超级风险不利的人，只是我必须在某种程度上解决

00:28:58.320 --> 00:29:01.600
有些方式，所以他们会想念你吗？

00:29:01.600 --> 00:29:04.960
说彼得，或者您认为我的榜样是什么？

00:29:04.960 --> 00:29:08.880
在那里积极寻找巨大的碰撞

00:29:08.880 --> 00:29:13.760
支付，他们不成功，您和您的情况是哦，我只是

00:29:13.760 --> 00:29:16.559
会随机发生碰撞而无需寻找

00:29:16.559 --> 00:29:21.919
所以基本上这是我的观点

00:29:21.919 --> 00:29:27.120
就像当他们开始大呃的时候呃

00:29:27.120 --> 00:29:31.360
他们是在问物理学家，就像哦，不喜欢爆炸，他们是

00:29:31.360 --> 00:29:33.840
从理论上讲，它可以变成

00:29:33.840 --> 00:29:41.840
黑洞对，它基本上是相同水平的东西

00:29:42.799 --> 00:29:46.000
如果是这样，那么我可以将其用作参数

00:29:46.000 --> 00:29:49.760
我的意思是我的意思是宇宙射线可能会设置一些红色标记，但是嗯

00:29:49.760 --> 00:29:53.440
我会说，就像一致性保证一样，它们已经习惯了

00:29:53.440 --> 00:30:00.480
从将其写入硬盘驱动器，这些人更可能喜欢

00:30:00.480 --> 00:30:03.520
那些硬盘驱动器更有可能破坏该数据

00:30:03.520 --> 00:30:08.159
事实上，就像我们知道的那样，存在像腐败率之类的确定性因素

00:30:08.159 --> 00:30:11.919
这些硬盘就像是，更多

00:30:11.919 --> 00:30:15.520
可能会比发生碰撞的情况更糟um

00:30:15.520 --> 00:30:18.240
您更有可能同时遭受多个腐败

00:30:18.240 --> 00:30:22.000
比它同时镜像

00:30:22.000 --> 00:30:26.480
你会想要像一个哈希函数，是的，我猜

00:30:26.480 --> 00:30:31.279
每个sla上都带有九个数字，所以有点像

00:30:31.279 --> 00:30:34.640
如果您信任某个数字为9的存储系统

00:30:34.640 --> 00:30:40.320
发生哈希冲突的机会比您落后很多

00:30:40.320 --> 00:30:42.799
担心你担心错误的事情

00:30:42.799 --> 00:30:46.080
是的，是的，只是抬头看看

00:30:46.080 --> 00:30:49.520
在哈希函数中查找发生冲突的可能性，然后进行转换

00:30:49.520 --> 00:30:52.320
到九点，告诉他们，就像你知道

00:30:52.320 --> 00:30:56.480
像409之类的东西或诸如您可以的正确之类的东西

00:30:56.480 --> 00:30:59.760
如果您愿意的话，可以按照这些条款给他们

00:30:59.760 --> 00:31:03.760
好的，这就是我的想法，这是很有帮助的，我认为那是我必须思考的方式

00:31:03.760 --> 00:31:06.320
关于这是有很多的可能性

00:31:06.320 --> 00:31:09.120
错误的概率，而这仅仅是

00:31:09.120 --> 00:31:12.640
这就是它与您担心的其他对象之间的关系

00:31:12.640 --> 00:31:16.640
我快速思考的方式ii快速思考我的饲料

00:31:16.640 --> 00:31:19.919
基本上说，哦，我们实际上会生成一个哈希

00:31:19.919 --> 00:31:23.679
使用两个不同的哈希函数，这两个函数的概率

00:31:23.679 --> 00:31:26.880
碰撞相同的数据是呃

00:31:26.880 --> 00:31:30.720
就像不可能，所以我不知道我不想那样做，但这就是我

00:31:30.720 --> 00:31:33.840
迅速回答

00:31:34.720 --> 00:31:39.679
无论如何，谢谢您的反馈，这是其中一个问题

00:31:39.679 --> 00:31:43.360
概率变得难以想象，就像

00:31:43.360 --> 00:31:46.159
棋盘上的东西知道更多

00:31:46.159 --> 00:31:49.039
可能比您能做的棋步

00:31:49.039 --> 00:31:51.840
我不知道宇宙中的原子或其他任何统计信息

00:31:51.840 --> 00:31:55.679
荒谬的是，这是您在棋盘前放置棋盘的地方

00:31:55.679 --> 00:31:59.279
你，这是关于如何

00:31:59.279 --> 00:32:03.279
您无法统计出所有

00:32:03.279 --> 00:32:06.320
呃，这个小棋盘上可能有什么动作

00:32:06.320 --> 00:32:10.559
在一系列合理的结果中

00:32:10.559 --> 00:32:15.279
一套可衡量的解决方案，这真的很难想象

00:32:15.279 --> 00:32:18.320
但这就是您需要在此处进行的沟通

00:32:18.320 --> 00:32:23.360
看起来这是表面上的声音，听起来很荒谬

00:32:23.360 --> 00:32:27.120
但是概率是所有这些东西的基础

00:32:27.120 --> 00:32:34.159
太极端了，嗯，只是你知道不太可能发生

00:32:34.159 --> 00:32:38.880
在你的一生中，如果发生的话，那就是

00:32:38.880 --> 00:32:44.320
这很可能是针对sha1的合法攻击

00:32:46.799 --> 00:32:49.760
谢谢，谢谢

00:32:54.000 --> 00:32:57.120
好的[音乐]

00:32:57.120 --> 00:33:00.399
还要别的吗

00:33:06.320 --> 00:33:12.480
不好意思，然后我结束了会议

00:33:12.480 --> 00:33:16.240
非常感谢大家的参与，下周再见

00:33:16.240 --> 00:33:25.840
再见了，大家

