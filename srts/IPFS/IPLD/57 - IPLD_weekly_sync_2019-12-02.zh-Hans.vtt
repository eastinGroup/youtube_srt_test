WEBVTT
Kind: captions
Language: zh-Hans

00:00:15.790 --> 00:00:24.080
欢迎大家参加本周的IPL，今天是今天的陷阱

00:00:24.080 --> 00:00:32.300
是的，会议很拥挤，因为我们每周都要经历所做的事情，

00:00:32.300 --> 00:00:36.739
然后讨论我们可能还有的其他项目我本周实际上有一个项目

00:00:36.739 --> 00:00:46.219
它已经在笔记中了，是的，所以让我们首先开始

00:00:46.219 --> 00:00:52.160
是Michael hey是的，所以我上周写的主要内容是

00:00:52.160 --> 00:00:57.860
不久，假期就是这个脚本，它将以CSV格式将其拖入

00:00:57.860 --> 00:01:03.230
然后为基本上看起来像所有数据的数据生成一个IPL be schema

00:01:03.230 --> 00:01:06.770
值，然后弄清楚它们应该是什么类型以及它们是否是

00:01:06.770 --> 00:01:11.869
是否可选，在某些情况下甚至会弄清楚是否需要

00:01:11.869 --> 00:01:17.390
工会，CSB中的语法是，呃，有时候这是疯狂的费用

00:01:17.390 --> 00:01:24.950
做像数组一样的事情，所以实际上无论如何都指向点

00:01:24.950 --> 00:01:30.590
就像它在这里指出的那样，并发现了我们遇到的一些问题

00:01:30.590 --> 00:01:35.750
在我们的某些解析器中，我们实际上假设了一些最佳实践

00:01:35.750 --> 00:01:39.950
现在解析器，因此我们需要将某些东西退回嗯，例如

00:01:39.950 --> 00:01:43.909
您实际上不能在事物名称中使用下划线，并且您必须

00:01:43.909 --> 00:01:48.140
大写它们和类似的东西，当您与其他人一起工作时

00:01:48.140 --> 00:01:51.920
数据，所有您想做的事情就像指向所有引用一样

00:01:51.920 --> 00:01:55.369
一样，所以您可以指向原始数据而不必将其聚集在一起

00:01:55.369 --> 00:01:58.880
保留原始名称并带有下划线变得非常有益

00:01:58.880 --> 00:02:06.110
而不是试图让您知道骆驼，所以使用笔记是很酷的

00:02:06.110 --> 00:02:11.090
很多东西为开放数据集编写了一些解析器，我现在觉得D

00:02:11.090 --> 00:02:14.299
那是很多东西的来源，另一件事是

00:02:14.299 --> 00:02:17.810
罗恩（Ron）撰写了一个非常出色的浏览器测试频道，名为Paul Andina

00:02:17.810 --> 00:02:24.110
所以我一直在慢慢地将某些测试的东西移植到那上面，所以我认为

00:02:24.110 --> 00:02:29.090
块API移到了它，我刚刚合并了从移轴手抄本中获得的完整请求

00:02:29.090 --> 00:02:40.400
还要获得编解码器库，这就是我接下来要讲的很酷的全部

00:02:40.400 --> 00:02:51.140
清单是如此类似，假期与我之前计划的相反

00:02:51.140 --> 00:02:58.790
在一周的其他几天里，我开始做了很多Doc的工作

00:02:58.790 --> 00:03:03.770
最近有更多关于Doc的外部询问，或者也许我才刚开始

00:03:03.770 --> 00:03:08.570
注意到更多知道并且会哭泣的人，我敢肯定你会谈论这个

00:03:08.570 --> 00:03:16.910
提交硬币东西的机会有关，但我们需要更多我开始做的医生

00:03:16.910 --> 00:03:24.380
我还没参加过的其他Doc的比赛，以及与我们的网站进行的实战

00:03:24.380 --> 00:03:28.760
认为我们应该在某个时候做，但我目前不知道我在哪里

00:03:28.760 --> 00:03:34.100
不知道什么样的活化能壁垒需要克服

00:03:34.100 --> 00:03:38.120
在这里实现价值的第一步，所以本周我只填写了一些缺失的内容

00:03:38.120 --> 00:03:41.690
差距和去文档，有一些大的像节点

00:03:41.690 --> 00:03:46.250
界面是宇宙中最核心的东西，没有

00:03:46.250 --> 00:03:51.590
Doc上有很多Doc而不是方法，但是不知道为什么会这样

00:03:51.590 --> 00:03:59.030
开始尝试解决类似问题，因此我也取得了一些进展

00:03:59.030 --> 00:04:06.050
一直在尝试进行代码果酱原型方面的更多工作，并尝试

00:04:06.050 --> 00:04:12.310
特别确保我可以写出需要写的内容

00:04:12.310 --> 00:04:17.930
我一直在寻找Alana的内存摊销东西，我很漂亮

00:04:17.930 --> 00:04:25.040
确定是在运行时中上面不想谈论它，但否则

00:04:25.040 --> 00:04:29.000
事情似乎进展顺利，它非常复杂，以至于我像

00:04:29.000 --> 00:04:34.669
手动制作原型，而不是编写第一稿中运行的代码

00:04:34.669 --> 00:04:36.970
和

00:04:37.670 --> 00:04:42.650
到目前为止，到目前为止，几件事情变得更加冗长，

00:04:42.650 --> 00:04:47.540
共享的代码比我预期的要少，因此仍然可能需要迭代几个

00:04:47.540 --> 00:04:52.490
这些东西，但它真的来了，并保留了很多笔记

00:04:52.490 --> 00:04:58.010
并阅读它的原因，例如为什么这个设计很好，这将来自考古学

00:04:58.010 --> 00:05:04.720
有一天是对的[音乐]

00:05:04.720 --> 00:05:15.500
谢谢你混合我的清单是我自己我没有做太多与保利相关的事情

00:05:15.500 --> 00:05:24.200
大部分是外国的东西，并且与oh yeah开会，这是相关的

00:05:24.200 --> 00:05:29.720
到5/9 ILD，正如Eric所说的那样，我们应该解决一些文档问题

00:05:29.720 --> 00:05:41.230
变得更好，是的，但是正如我所说的那样，到目前为止，没有任何其他相关的东西，是的

00:05:41.230 --> 00:05:47.660
所以对于其他所有硬币，如果我告诉你，如果我告诉你，五个硬币的百分之一

00:05:47.660 --> 00:06:00.230
是不是这样，我名单上的下一个烂掉了，我可以随意告诉我们

00:06:00.230 --> 00:06:09.260
您输入它，是的，可以每周进行一次分散的浏览器测试

00:06:09.260 --> 00:06:20.420
就像迈克尔在笔记中提到波兰inna一样，在笔记中使用了

00:06:20.420 --> 00:06:25.760
一堆地方，能够说出确实令人耳目一新

00:06:25.760 --> 00:06:32.390
这个东西可以在浏览器中工作，而无需进行大量的设置，因此

00:06:32.390 --> 00:06:35.510
现在这很有趣，并尝试将其集成到我的工作流程中

00:06:35.510 --> 00:06:40.540
我将回过头来查看我打算在浏览器中工作的内容，

00:06:40.540 --> 00:06:49.889
现在我知道要么不，要么不，她不容易变，所以

00:06:49.889 --> 00:07:01.050
这是一个很好的补充，我认为其他两件事是一些“一些模式”

00:07:01.050 --> 00:07:08.069
 Michael for CSV的内容Eric我对您的模式进行了ping操作

00:07:08.069 --> 00:07:15.120
JavaScript是他来加沙来传递名字的，所以我们允许我不要

00:07:15.120 --> 00:07:19.860
名称中允许使用小写的第一个字符，但现在是因为Michael

00:07:19.860 --> 00:07:30.870
想要烧毁世界，我也添加了改变，因为我是我

00:07:30.870 --> 00:07:40.590
也没有检查它的属性名称，所以属性可以

00:07:40.590 --> 00:07:45.029
以数字或下划线开头，我不认为我们会在规范中涵盖这一点，因此

00:07:45.029 --> 00:07:50.729
像struct字段和枚举值，我认为我们不会在规范中涵盖它们的内容

00:07:50.729 --> 00:07:54.569
可以有什么字符限制吗，所以我只是应用了相同的规则

00:07:54.569 --> 00:08:00.719
必须以字符开头，然后可以包含字母或数字，以及

00:08:00.719 --> 00:08:07.199
强调，所以即使现在就在那里，如果有人，我们可以稍后进行调整

00:08:07.199 --> 00:08:13.860
出现并说我需要下划线是第一个字符，但我们会看到

00:08:13.860 --> 00:08:27.810
还有其他事情是线程抱歉，他把迈克尔的拉链汽车档案夹住了

00:08:27.810 --> 00:08:34.860
他们将实时数据集放入zip文件中，因为我使用的是JavaScript

00:08:34.860 --> 00:08:39.120
为此写的并不是真正的原始用例不是很大

00:08:39.120 --> 00:08:45.060
用于将块放入其中的文件主要用于测试夹具

00:08:45.060 --> 00:08:51.149
可跨运行时移植，因为我们正在考虑使用

00:08:51.149 --> 00:08:56.310
他们为更大的数据集，我做了一些研究JavaScript

00:08:56.310 --> 00:09:02.160
特别是要提高效率会多么容易，有一些

00:09:02.160 --> 00:09:05.940
在这样做时我要权衡取舍，我做了一些工作，而且似乎

00:09:05.940 --> 00:09:10.259
没关系，我可以制作一个流媒体界面，而不会感到太多痛苦

00:09:10.259 --> 00:09:13.860
我已经习惯了完全分离用于读写的库

00:09:13.860 --> 00:09:20.370
我们不可能把所有的好东西都放在一个地方，但我认为有一些地方

00:09:20.370 --> 00:09:24.899
在浏览器兼容性方面进行权衡，但再次进行浏览器测试是其中之一

00:09:24.899 --> 00:09:29.850
我之前没有做过的事情，所以我需要将其添加为一流的事情

00:09:29.850 --> 00:09:34.319
因为我想拥有可以包含在测试夹具中的测试夹具

00:09:34.319 --> 00:09:41.389
我正在测试东西时也使用浏览器，所以您知道测试的zip文件充满了块

00:09:41.389 --> 00:09:44.730
能够将其放在浏览器环境中并提取

00:09:44.730 --> 00:09:48.509
阻止并对其中的东西进行测试，所以这是目的之一

00:09:48.509 --> 00:09:54.089
这些文件中的所有内容，所以无论如何这就是

00:09:54.089 --> 00:10:01.769
我正在努力谢谢你，其他人还有其他人吗？

00:10:01.769 --> 00:10:10.670
更新或想说些什么

00:10:11.600 --> 00:10:21.899
我只是开始我仍在设置的帐户，是的，很高兴您有

00:10:21.899 --> 00:10:32.550
一个缩放帐户好吧，所以我今天又要提出一个项目，实际上是

00:10:32.550 --> 00:10:40.500
还有什么问题可能是因为我们目前有大麻

00:10:40.500 --> 00:10:47.459
IP LD的规范，并且曾经有一种替代的大麻规范用于

00:10:47.459 --> 00:10:54.540
psycho，我想知道IP LD是否是远景IP的超集，还是

00:10:54.540 --> 00:11:00.240
会有任何差异，或者说，如果您真的知道上帝有任何收入

00:11:00.240 --> 00:11:12.010
在不兼容中还是应该与罗德里兰媲美，你现在告诉我

00:11:12.010 --> 00:11:19.040
他们真的很接近，基本上，关于第一是

00:11:19.040 --> 00:11:24.470
到目前为止，命名称呼是对名称的迷恋

00:11:24.470 --> 00:11:31.970
性格和我的有点像我女儿离开阵列时的冗长

00:11:31.970 --> 00:11:36.340
被称为数据，而我认为在那个被称为D或类似的东西

00:11:36.340 --> 00:11:45.140
另一件事是他们不想在其中包含任何hampt参数

00:11:45.140 --> 00:11:50.000
路由块，因为他们知道上下文并且知道什么参数

00:11:50.000 --> 00:11:56.300
将会成为现实，但我不同意您需要将其包括在内，而我们从不

00:11:56.300 --> 00:11:59.570
从来没有办法调和，尽管有一些建议

00:11:59.570 --> 00:12:02.780
如何调和，但他们真的很亲密，如果有人

00:12:02.780 --> 00:12:10.660
想知道调和他们是否重要，我们可能可以，但是

00:12:10.660 --> 00:12:15.470
是的，但是您可以阅读我写的火腿斑点，然后查看

00:12:15.470 --> 00:12:21.680
一个使用文件硬币的文件，我认为它几乎是相同的

00:12:21.680 --> 00:12:25.100
他们甚至在使用我为之编写的位排序工具

00:12:25.100 --> 00:12:31.850
从位序列中提取索引，这是非常相似的

00:12:31.850 --> 00:12:35.960
在算法上几乎相同，只是在方式上有所不同

00:12:35.960 --> 00:12:42.410
他们正在编码，因为远处的硬币喜欢对某些东西着迷

00:12:42.410 --> 00:12:49.010
不太重要的事情，但是无论如何，如果我们想

00:12:49.010 --> 00:12:53.120
调和它们只是在架构中添加默认值到

00:12:53.120 --> 00:12:57.620
一堆参数，然后添加别名生日不是

00:12:57.620 --> 00:13:03.110
有效地完成所有我们需要做好的事情，如果它们不是我们的别名

00:13:03.110 --> 00:13:06.740
那是MIS的名称或对该属性的误称，它不是别名

00:13:06.740 --> 00:13:11.810
这是一个重命名，所以我们必须采用一个名称，所以我们必须采用

00:13:11.810 --> 00:13:15.740
他们的名字他们的财产名字我不能，我不确定

00:13:15.740 --> 00:13:19.340
他们不是我想的，就像他们在键值数组中那样

00:13:19.340 --> 00:13:23.160
像大写和小写或一些非常奇怪的东西

00:13:23.160 --> 00:13:28.590
有一些奇怪的差异，我只是无法落后，但最好的

00:13:28.590 --> 00:13:31.350
关于重命名功能的事情结束了架构，尽管如此

00:13:31.350 --> 00:13:34.830
您在使用时会担心，例如从

00:13:34.830 --> 00:13:38.310
您仍然可以使用数据作为关键字的架构，只是它没有被编码

00:13:38.310 --> 00:13:45.840
D所以是的，那是您知道我们无论如何都会获得所有的好处，我的意思是我

00:13:45.840 --> 00:13:50.010
很好，我默认他们是乡亲，我的意思是他们可能相对

00:13:50.010 --> 00:13:54.930
从使用案例的默认值开始，如果我们要完全使用默认值，是的

00:13:54.930 --> 00:13:58.590
事实是我们没有关于最佳默认值的良好数据，所以我

00:13:58.590 --> 00:14:03.150
想想如果他们看到他们已经选择了相当合理的产品，实际上他们已经

00:14:03.150 --> 00:14:07.710
在理论上对突变有效的高效选择的那些

00:14:07.710 --> 00:14:10.290
突变，所以我认为他们正在做类似32的分支因子的事情

00:14:10.290 --> 00:14:15.540
这导致非常小的块很多非常小的块，然后

00:14:15.540 --> 00:14:23.490
我认为这些叶块可能更大，因此我实际上不同意

00:14:23.490 --> 00:14:29.580
分支因子为32，但没有数据说这不是一个好选择，我不是

00:14:29.580 --> 00:14:34.200
愿意断言这很强烈，所以愿意让文件代币做一些

00:14:34.200 --> 00:14:39.030
在那里进行实验，弄清楚当您使用时实际上是否有任何好处

00:14:39.030 --> 00:14:46.350
说小方块，小方块在欧洲意味着什么，是的，这是

00:14:46.350 --> 00:14:52.800
一个IP LD东西，我猜是在我的PFS东西中-但是阻止的是

00:14:52.800 --> 00:15:02.190
我们将其编码为散列，因此我们将块识别为可散列的可寻址对象

00:15:02.190 --> 00:15:06.930
包含数据，然后您在块内的路径很棒，我问怎么办

00:15:06.930 --> 00:15:14.070
考虑小，你说很多小是的，所以对于分支因子

00:15:14.070 --> 00:15:27.840
32所有这些都是32个C ID，所以我们正在寻找您知道的1.5

00:15:27.840 --> 00:15:34.650
 K字节，我喜欢，是的，我的意思是，这取决于正确的数据量

00:15:34.650 --> 00:15:37.110
例如，如果您在其中添加了更多数据，则会阻止

00:15:37.110 --> 00:15:41.519
媒体说明会变得更大，不，它们不是暗示，因为您

00:15:41.519 --> 00:15:50.459
这是一个分支因素，所以它只是下一阶段的建议，然后

00:15:50.459 --> 00:15:54.690
那么叶子是用桶的，是的，如果你用叶子的桶

00:15:54.690 --> 00:15:58.380
然后将其乘以水桶的大小，最后得到这些

00:15:58.380 --> 00:16:02.279
很小的中间件，然后是大端的中间件，硬币盒

00:16:02.279 --> 00:16:07.140
虽然就像他们都将它放在链上一样，所以这可能无关紧要

00:16:07.140 --> 00:16:11.670
我认为块的大小很大，所以你不是，你不只是在拉一个

00:16:11.670 --> 00:16:15.240
单个块，并且必须将其发送到网络上，这是我的意思

00:16:15.240 --> 00:16:24.660
在链中，所以我认为文件硬币的尺寸要求和

00:16:24.660 --> 00:16:29.399
对于任何基于区块链的应用程序，我认为它与我们的思维方式不同

00:16:29.399 --> 00:16:32.730
当我们谈论您所在的分布式应用程序时，关于它们的信息

00:16:32.730 --> 00:16:37.680
知道如何共享这些信息，例如NPM或程序包管理器案例

00:16:37.680 --> 00:16:41.070
希望有一个HAMP来解决所有您不需要的软件包

00:16:41.070 --> 00:16:44.550
仅知道您不想向下导航八个不同的块

00:16:44.550 --> 00:16:50.040
来回交换只是为了找到一个包，做三个你会很棒

00:16:50.040 --> 00:16:53.420
知道所以您有一个较高的分支因数，它看起来略大一些

00:16:53.420 --> 00:16:58.529
这样您来回的效率更高，但是当您使用辛烷值时

00:16:58.529 --> 00:17:03.600
您已经拥有了全部，那么它还有一些不同的用例

00:17:03.600 --> 00:17:09.750
我猜您返回的流失更多的是块，但以字节为单位的数据却更少

00:17:09.750 --> 00:17:14.130
关于通过突变权进行垃圾收集的理论和

00:17:14.130 --> 00:17:18.860
这就是法尔科内（Falcone）的目的，因为他们变异了演员的角色

00:17:18.860 --> 00:17:24.059
与地图，这将是很多变异的想法，因为他们正在变异

00:17:24.059 --> 00:17:29.340
当您有更高的分支因子时，它们是很多

00:17:29.340 --> 00:17:36.419
从理论上讲，变异的数据总量和总量较少，但区块更多，因此如果

00:17:36.419 --> 00:17:41.790
您的分支系数为25到50 56，并且您想在

00:17:41.790 --> 00:17:48.660
根目录，那么您必须更改较大的块，以便复制整个块，然后

00:17:48.660 --> 00:17:51.690
只需更改其中的一个元素，然后就可以一直进行

00:17:51.690 --> 00:17:55.230
连锁店，但是如果您有32个会阻止辉瑞的产品，则您正在更改

00:17:55.230 --> 00:18:01.160
较小，而您要在32个元素上更改一个元素，则比

00:18:01.160 --> 00:18:07.800
那么这些巨大的块，如果我只是简单地获取数据，就不像开销是什么

00:18:07.800 --> 00:18:14.280
并根据GC而不是实际数据使用单独的块，因为

00:18:14.280 --> 00:18:20.040
这里有一些东西，就像一堆气相色谱仪实际上相对便宜

00:18:20.040 --> 00:18:25.980
而不是大量数据的块，我不知道那是哪里

00:18:25.980 --> 00:18:30.390
其中有很多，甚至

00:18:30.390 --> 00:18:37.110
我谈论它的方式是基于猜测，而我们没有相关数据

00:18:37.110 --> 00:18:40.860
我开始做的事情是在这里进行权衡

00:18:40.860 --> 00:18:47.100
关于大数据集的一些研究工作什么是什么

00:18:47.100 --> 00:18:52.770
当您具有较大的分支因子来进行突变和

00:18:52.770 --> 00:18:57.240
变小，然后权衡好区块大小，因为在某些情况下

00:18:57.240 --> 00:19:02.340
情况下，块大小很重要，因为您想进行网络传输，也许

00:19:02.340 --> 00:19:05.910
您没有延迟问题，因此您可以进行许多小型传输或

00:19:05.910 --> 00:19:10.590
也许您有较高的延迟，所以更大的块更好，然后有多少个

00:19:10.590 --> 00:19:13.350
因为您的血液分支因子更大，所以阻止了逆转

00:19:13.350 --> 00:19:18.060
遍历的次数越少，您所需要的就越多，因此拥有它会很高兴

00:19:18.060 --> 00:19:21.960
所有这些数据，以便我们可以说嘿，如果您要使用此功能

00:19:21.960 --> 00:19:26.400
然后考虑一下您的应用程序是什么，然后再考虑

00:19:26.400 --> 00:19:31.020
环境，然后根据这些东西选择您的参数

00:19:31.020 --> 00:19:37.470
知道并且已经测量过，即使如此，我们还是在这里丢失了一块

00:19:37.470 --> 00:19:43.140
认为我们可能可以研究一个开放的问题陈述以供研究，而我

00:19:43.140 --> 00:19:46.800
认为即使我们最终解决这个问题只是为了

00:19:46.800 --> 00:19:53.840
量化更加清晰，但是我们需要某种方式来讨论GC成本和

00:19:53.840 --> 00:19:58.950
了解那个DC家伙的不同权衡，因为有话要说

00:19:58.950 --> 00:20:01.620
是的，我们有一个想要围绕节奏提交的数据，但我们甚至没有

00:20:01.620 --> 00:20:04.140
像那种算法将数据推入

00:20:04.140 --> 00:20:08.040
就像我们还没有真正量化那样，潜在的是什么

00:20:08.040 --> 00:20:11.700
开销，并且在运行期间有多个块，让我们只关注范围

00:20:11.700 --> 00:20:15.270
区垃圾收集权，所以摆脱像复制的关注和

00:20:15.270 --> 00:20:17.700
在某些复制下需要获得多少复杂性

00:20:17.700 --> 00:20:20.400
她刚才谈到GC的许多障碍和

00:20:20.400 --> 00:20:24.780
GC的复杂性以及起飞的这些不同杠杆在哪里，因为我们

00:20:24.780 --> 00:20:28.770
甚至没有什么像上限定理那样，我们真的需要

00:20:28.770 --> 00:20:36.360
像彼得这样的东西，我们实际上是这样的

00:20:36.360 --> 00:20:41.100
阿拉伯人说的问题陈述或多或少是我下一个工作计划

00:20:41.100 --> 00:20:45.960
西门子我确实很好，这不是整个三个月，而是差不多

00:20:45.960 --> 00:20:53.130
一月份的大部分时间应该是通过弄清楚

00:20:53.130 --> 00:20:58.680
性能的观点，我想可以看看那里有什么

00:20:58.680 --> 00:21:03.960
在那些测试台上，如果我自己可以使用纳斯卡，但想像

00:21:03.960 --> 00:21:13.580
大型和小型连锁店的成本是多少，因为

00:21:13.580 --> 00:21:19.920
我一直在研究的研究中的参数数量

00:21:19.920 --> 00:21:26.160
在关节之前，每个参数都非常大

00:21:26.160 --> 00:21:36.170
正确的结果量，实际上对于下一次会议的权利，我应该有

00:21:36.170 --> 00:21:40.200
在我已经拥有语料库的数据上准备好图表

00:21:40.200 --> 00:21:44.520
我从字面上完全耗尽了所有

00:21:44.520 --> 00:21:51.540
该算法可能有两个数字，并且显示出不同的结果

00:21:51.540 --> 00:21:58.830
在数量和大小上进行权衡等等，依此类推，如果你们

00:21:58.830 --> 00:22:05.610
如果您可以像这样发送给我，已经有一个很好的类似问题陈述

00:22:05.610 --> 00:22:10.620
我有点不确定我的想法

00:22:10.620 --> 00:22:16.890
X会做什么，我们不太确定为什么要这么做我也正在启动Ashley

00:22:16.890 --> 00:22:20.340
从两个从其他团体那里收集他的钥匙到

00:22:20.340 --> 00:22:27.690
知道要测试什么，然后其余的差不多

00:22:27.690 --> 00:22:33.860
12月下半月，大多数弗吉尼亚州将花费确切的数字来计算

00:22:33.860 --> 00:22:42.480
预定义的尸体根据他们认为您提到的内容

00:22:42.480 --> 00:22:46.350
也不松懈，你也正在看拉宾大块，我认为迈克尔斯

00:22:46.350 --> 00:22:52.500
与您做很多思考，以至于我也肯定会向我展示

00:22:52.500 --> 00:23:00.330
是的，我实际上不知道它如何与工厂一起使用

00:23:00.330 --> 00:23:05.730
他们是否公开，但如果他们和II不知道如何

00:23:05.730 --> 00:23:11.700
我可以把很多东西交给你们，是的，但是基本上

00:23:11.700 --> 00:23:19.650
基本上是从喜欢专门谈论流的观点出发的

00:23:19.650 --> 00:23:25.770
就像您有一个数据流，鉴于我们所知道的，您将如何处理它

00:23:25.770 --> 00:23:32.390
考虑到我们可能会遇到的那种流，所以它并不是真的

00:23:32.390 --> 00:23:37.620
如果您谈论ipfs文件，专门谈论您知道Lippett的外观

00:23:37.620 --> 00:23:45.510
硬币，但它可以尝试记住所有这些，这里有一点

00:23:45.510 --> 00:23:48.390
阿拉伯分块的不同维度是

00:23:48.390 --> 00:23:55.200
重复数据删除的效率提高，因此有可能，因此仅需一点点

00:23:55.200 --> 00:23:57.870
在考虑可能节省多少时会有所不同，因为如果您

00:23:57.870 --> 00:24:01.169
如果您将其散布到许多文件中，那么您还有另一个矢量

00:24:01.169 --> 00:24:04.140
降低了整体存储成本，但我认为这是非常重要的

00:24:04.140 --> 00:24:08.520
在那个用例中，与土方被打扰的人几乎一样，就像大小

00:24:08.520 --> 00:24:14.669
哈希的重要性非常重要，例如，如果您要创建最多1.5个块，并且

00:24:14.669 --> 00:24:18.419
你有一个书呆子好吧，这就是你指的是所有那些

00:24:18.419 --> 00:24:22.590
像您这样的数据块确实增加了整体存储量

00:24:22.590 --> 00:24:26.250
没错，因为我是说他们出来的时候，键值存储也必须

00:24:26.250 --> 00:24:30.870
存储密钥，中间块具有密钥Valley

00:24:30.870 --> 00:24:33.870
在这里的某个点上，像整个方程式一样，您不会

00:24:33.870 --> 00:24:40.020
像任何怀疑的人一样储蓄，并在汉普顿像你这样的手中，你就是

00:24:40.020 --> 00:24:43.020
可以保证您永远不会碰巧进行申请，这

00:24:43.020 --> 00:24:50.550
无论如何，本周的即时笔记沃克，是的，我想参加会议是因为

00:24:50.550 --> 00:24:54.420
差不多结束了，我想从外面和下摆回到原来的问题

00:24:54.420 --> 00:24:58.740
如果我拥有和我Polly之间的规格，我认为这对某种意义

00:24:58.740 --> 00:25:04.380
希望尽可能地靠近，例如

00:25:04.380 --> 00:25:08.880
如果他们使用那些，我们可以使用他们使用的那些重命名或类似的名称

00:25:08.880 --> 00:25:11.850
并且它们发生了变化，但基本上具有这三个名称应该很简单，

00:25:11.850 --> 00:25:16.830
关于在根博客中拥有参数，我认为这完全可以

00:25:16.830 --> 00:25:21.690
终于有道理了，但可能基本上是有文件内容规范

00:25:21.690 --> 00:25:25.860
这说的很好，我们基本上是用这个，我把这个放回去了，但是我们不存储

00:25:25.860 --> 00:25:31.340
根块中透水的根，但是使用固定的参数，像这样

00:25:31.340 --> 00:25:37.350
是的，迈克尔有个主意，我认为值得探讨，

00:25:37.350 --> 00:25:43.080
参数在一个容器中，因此根块是一个容器

00:25:43.080 --> 00:25:45.720
在下面存储参数的地方，以及是否是单独的

00:25:45.720 --> 00:25:49.470
块或在同一块之内，但这是您要走到的东西，所以您已经

00:25:49.470 --> 00:25:53.550
参数，然后通过根块，再通过RHIB块

00:25:53.550 --> 00:25:57.210
只是一个而已，就像其他所有中间块一样，它只是一个链接

00:25:57.210 --> 00:26:02.250
链接数组，这是解决它的一种方法，然后当文件存在时

00:26:02.250 --> 00:26:06.120
投币的用途是他们从那里开始，当我们要使用它时，任何出价

00:26:06.120 --> 00:26:11.370
参数我们开始上一层楼我可能只是您知道它们应该是什么

00:26:11.370 --> 00:26:14.310
我进行了更多的对帐工作我发现与档案硬币打交道真的很困难

00:26:14.310 --> 00:26:18.120
乡亲们，因为它很忙，他们走得很快，而且他们有

00:26:18.120 --> 00:26:21.930
他们自己的需求，就像就像一个压路机就这样走了，所以我们

00:26:21.930 --> 00:26:25.650
与架构及其规范具有相同的含义，因此，如果我们能够参与，

00:26:25.650 --> 00:26:30.450
并得到一些和解，这真的很好，我的意思是

00:26:30.450 --> 00:26:34.260
而且我花更多的时间在从它们生成的类型上

00:26:34.260 --> 00:26:38.760
模式越多，我实际上更喜欢这种容器方法，因为现在

00:26:38.760 --> 00:26:41.940
突然之间，如果我想找到其他默认参数，我不会

00:26:41.940 --> 00:26:47.660
不得不去尝试写一个女性改变他们或有一些像怪异的

00:26:47.660 --> 00:26:52.640
就像将所有这些重置为我将要输入的类型

00:26:52.640 --> 00:26:56.240
本质上是用一堆具有所有数据模型的数据模型实例化一个类型

00:26:56.240 --> 00:26:59.540
值，然后路由块的值之一就是实际值

00:26:59.540 --> 00:27:02.450
解码的路由块，这使得使用它们变得非常容易，并且

00:27:02.450 --> 00:27:06.020
更改默认值（如果需要）或合理设置它们

00:27:06.020 --> 00:27:10.730
如果您想让它们具有通用性，那么它真的很容易

00:27:10.730 --> 00:27:15.650
仅仅引用具有任何特定参数集的任何汉普图

00:27:15.650 --> 00:27:19.820
就像获取编码该路由块的参数然后引用它一样

00:27:19.820 --> 00:27:27.470
是的，是的，我觉得这给了我们两全其美的感觉

00:27:27.470 --> 00:27:35.750
对，嗯，还有什么我们应该讨论的吗，我确实想四舍五入

00:27:35.750 --> 00:27:41.180
与Peter讨论，并只提及他们Michael提到了帽子

00:27:41.180 --> 00:27:45.710
定理，但是为了让Peter受益，我们有一个想法，就是我们一直

00:27:45.710 --> 00:27:50.810
围绕着我们存在的东西，有一个定理，如定理

00:27:50.810 --> 00:27:54.860
在这里进行一些权衡的工作，

00:27:54.860 --> 00:27:59.810
而且您无法拥有所有东西，因此它可以在

00:27:59.810 --> 00:28:03.560
高延迟，存储和GC中的网络，就像所有这些因素一样

00:28:03.560 --> 00:28:08.330
在本质上，您必须在某处进行权衡，无论

00:28:08.330 --> 00:28:11.630
您做出的权衡将取决于您的应用程序环境和您的

00:28:11.630 --> 00:28:16.940
应用程序本身，所以我们最终真正想要的是

00:28:16.940 --> 00:28:20.540
在分区上进行设计并弄清楚是什么，然后能够

00:28:20.540 --> 00:28:24.560
交流一下，并说您必须进行权衡，但这是

00:28:24.560 --> 00:28:26.990
您的选择，这是您可以根据自己的选择

00:28:26.990 --> 00:28:35.510
应用程序，以便在某个时候达到理想状态

00:28:35.510 --> 00:28:44.030
可视化与它们一起带来，所以很酷，然后我告别

00:28:44.030 --> 00:28:50.920
直播，我可以随时待会后再见

