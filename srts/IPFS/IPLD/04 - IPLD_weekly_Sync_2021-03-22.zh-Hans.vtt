WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.610 --> 00:00:04.450
[音乐]

00:00:12.880 --> 00:00:17.119
欢迎大家参加本周的ipld事情会议

00:00:17.119 --> 00:00:25.680
这是2021年3月22日，每周我们都会浏览

00:00:25.680 --> 00:00:30.560
过去一周我们一直在研究和讨论的东西

00:00:30.560 --> 00:00:35.120
是的，有未解决的问题或任何代理项目

00:00:35.120 --> 00:00:39.440
也许还问其他人做了什么

00:00:39.440 --> 00:00:44.559
在ipld世界中，即使我们自己没有做

00:00:44.559 --> 00:00:50.480
所以我从我自己开始，所以我仍然在处理这种js多种格式

00:00:50.480 --> 00:00:58.800
js ipfs中的东西目前有点中断，因为您可能会

00:00:58.800 --> 00:01:02.079
知道目前正在努力

00:01:02.079 --> 00:01:06.560
um type type脚本类型转换为js ipfs

00:01:06.560 --> 00:01:09.600
现在快要完成了，目前

00:01:09.600 --> 00:01:15.840
只是有很大的重叠，所以我停顿一下是很有意义的

00:01:15.840 --> 00:01:20.560
半周，先合并一下，然后我恢复工作

00:01:20.560 --> 00:01:24.400
嗯和[音乐]

00:01:24.400 --> 00:01:28.560
是的，所以我仍然非常希望这个季度我能

00:01:28.560 --> 00:01:34.439
完成适用于新产品的unix fs内容

00:01:34.439 --> 00:01:38.960
多种格式的内容，然后在下个季度

00:01:38.960 --> 00:01:43.040
计划是我制定计划，因为我不会

00:01:43.040 --> 00:01:46.720
可以再用了，因为我是另一个团队的成员，但是我有一个

00:01:46.720 --> 00:01:51.040
计划看起来像是，也估计它有多大

00:01:51.040 --> 00:01:54.720
尽管我不是时间估计的忠实拥护者，所以我可能只会讲

00:01:54.720 --> 00:01:57.680
它有多大而不需要多长时间

00:01:57.680 --> 00:02:03.680
嗯，然后看看这是一个合适的项目吗，是的，

00:02:03.680 --> 00:02:08.640
团队承担责任，否则我们会看到的，但是嗯，我希望这只会是一个

00:02:08.640 --> 00:02:13.120
我所做的工作的摩擦，但目前我也有

00:02:13.120 --> 00:02:16.239
感觉一旦我完成了联合国儿童基金会的工作

00:02:16.239 --> 00:02:19.680
一个好主意，因为要么一切都准备就绪

00:02:19.680 --> 00:02:24.720
或者我发现是的，它只是行不通，需要另外一个时间

00:02:24.720 --> 00:02:29.840
这样做的一年，我希望您能在

00:02:29.840 --> 00:02:32.239
在本季度末，这仍然是我的计划，而我

00:02:32.239 --> 00:02:36.640
是的，我希望能到达那里

00:02:36.640 --> 00:02:41.599
我没有别的了，接下来是埃里克

00:02:44.319 --> 00:02:51.680
所以我可能要在Unix fs土地上谈论一些事情，但不是一吨

00:02:51.680 --> 00:02:55.200
否则我承认我所拥有的悟空的数量

00:02:55.200 --> 00:02:58.400
最近发货的频率降低了

00:02:58.400 --> 00:03:02.840
如今在工作时间内还有很多其他事情要做

00:03:02.840 --> 00:03:08.959
所以最近有人启动了一个项目，试图将Unix的一些概念化

00:03:08.959 --> 00:03:12.480
fs v1的东西作为

00:03:12.480 --> 00:03:17.599
ipld中的adl，因此在其上编写新的库

00:03:17.599 --> 00:03:21.440
基础，以便sv1 Unix的这些关键概念将

00:03:21.440 --> 00:03:27.440
可通过go ipld prime库作为常规节点进行访问

00:03:27.440 --> 00:03:34.080
并且在注释中有一个指向pr的链接，其中包含一个路线图，

00:03:34.080 --> 00:03:39.360
我正在草拟我希望可以进行的工作，因此有一些代码

00:03:39.360 --> 00:03:43.760
已经，但是它是针对一个ADL的，我试图勾勒出多少个ADL

00:03:43.760 --> 00:03:46.799
我认为我们可以在这里使用，我似乎已经提出了

00:03:46.799 --> 00:03:50.480
四五个，这就是我想要的东西

00:03:50.480 --> 00:03:55.680
人们进行评论，但概述基本上是在

00:03:55.680 --> 00:03:59.599
至少一个用于在文件末尾制作文件的adl

00:03:59.599 --> 00:04:03.599
我认为树可能以字节显示

00:04:03.599 --> 00:04:06.000
实际上是其中两个，因为我们有两个不同

00:04:06.000 --> 00:04:11.599
布局策略，我不确定这些策略是否需要完全不同的代码通过

00:04:12.000 --> 00:04:15.840
有一个可以查看未知目录

00:04:15.840 --> 00:04:19.199
使那些看起来像一张地图，还有另外一张

00:04:19.199 --> 00:04:23.759
用于遍历分片表单目录的障碍

00:04:23.759 --> 00:04:27.120
所以现在我们最多三个或四个，然后

00:04:27.120 --> 00:04:32.880
最有趣或最古怪的一个也许是最后一个

00:04:32.880 --> 00:04:36.479
通过目录可以看到

00:04:36.479 --> 00:04:40.000
并跳过元数据到下一个文件

00:04:40.000 --> 00:04:43.600
而这第四或第五，但无论如何最后一个

00:04:43.600 --> 00:04:48.880
是我希望它将使unix fsv1样式路径的那个

00:04:48.880 --> 00:04:56.080
本质上是ipld原生的，所以如果所有这些事情都按照

00:04:56.080 --> 00:05:01.440
梦想它将真的真的很酷，但是是的，我很乐意对此进行评论

00:05:01.440 --> 00:05:03.520
路线图，看看对人们是否有意义

00:05:03.520 --> 00:05:06.720
在这里真正有趣的另一件事是，其中之一

00:05:06.720 --> 00:05:10.720
这些ADL中的大多数将有一个阅读器

00:05:10.720 --> 00:05:16.080
还有作家的一面嗯，最后一个不会

00:05:16.080 --> 00:05:20.560
它永远永远是只读的，不是因为很难实现

00:05:20.560 --> 00:05:23.840
可写的，但是因为它不可能，因为它跳过了一些

00:05:23.840 --> 00:05:28.400
内部的信息，所以您不能拥有对称的权利

00:05:29.840 --> 00:05:33.520
我不知道我希望能解决这个问题，但是如果有人看到问题，请

00:05:33.520 --> 00:05:37.120
让我们在设计过程的早期就知道

00:05:37.120 --> 00:05:40.560
这就是我本周要报告的一切

00:05:40.960 --> 00:05:44.240
谢谢，这真的很酷，因为是的

00:05:44.240 --> 00:05:48.000
ii没想到会如此困难，因为

00:05:48.000 --> 00:05:51.039
正如我在另一次会议上提到的那样，我

00:05:51.039 --> 00:05:55.280
也考虑过将其作为下一步，例如javascript或us

00:05:55.280 --> 00:05:59.759
尝试像我们赢了一样实现联合国儿童基金会

00:05:59.759 --> 00:06:02.639
作为adl，我还没想到会是那样

00:06:02.639 --> 00:06:06.319
困难或喜欢或不那么难像那么多作品

00:06:06.319 --> 00:06:09.680
基本上，所以我想是的，我希望不是

00:06:09.680 --> 00:06:15.440
很难，但有几块是的，希望这些碎片能使它成功

00:06:15.440 --> 00:06:18.960
内部更容易弄清楚，我认为其中一些ADL

00:06:18.960 --> 00:06:21.840
最终将使用其他类似的那个

00:06:21.840 --> 00:06:25.600
为您提供了几乎完全使用以下功能之一的跳转概述

00:06:25.600 --> 00:06:28.880
其他的，然后在末尾增加一些包裹

00:06:28.880 --> 00:06:36.160
希望很酷，嗯，接下来是斯科特

00:06:36.160 --> 00:06:42.720
嘿，真的，对不起，不用担心

00:06:43.840 --> 00:06:50.479
所以我们这群人最后做了很多项目计划

00:06:50.479 --> 00:06:53.919
一周，所以我们在ipld上并没有做太多事情，但是我们又回来了

00:06:53.919 --> 00:07:01.199
这个星期是我们希望去的地方之一

00:07:01.199 --> 00:07:05.759
公开此ipld素数

00:07:05.840 --> 00:07:09.120
在ipfs中，但是我们在

00:07:09.120 --> 00:07:14.000
最近几周，有一组dag命令

00:07:14.000 --> 00:07:17.280
与ipld gag对象进行交互，并且以前具有

00:07:17.280 --> 00:07:21.360
与dag格式的对象进行了交互，我们希望允许它们进行交互

00:07:21.360 --> 00:07:25.680
现在使用ipld prime dag对象代替，依此类推

00:07:25.680 --> 00:07:31.199
我们开始研究如何使api达到最佳状态

00:07:31.199 --> 00:07:33.599
不知何故

00:07:36.400 --> 00:07:40.080
他们在包装中制作了自己的多编解码器小表

00:07:40.080 --> 00:07:44.400
在ipfs中称为core slash core dag，它定义了

00:07:44.400 --> 00:07:51.120
编解码器json作为dag json，柯达seabor作为dagsebor以及编解码器

00:07:51.120 --> 00:07:55.680
dag seaport已标记c4

00:07:56.840 --> 00:07:59.919
嗯，这很酷，因为如果我们尝试

00:07:59.919 --> 00:08:02.800
切换到规范化多编解码器表

00:08:02.800 --> 00:08:07.759
我们现在已经从dag json移回json.json

00:08:07.759 --> 00:08:13.120
不会做以下链接和解释链接的麻烦部分

00:08:13.120 --> 00:08:16.639
我认为我们将使之成为一个突破性的变化，并说

00:08:16.639 --> 00:08:21.520
我们为所有这些编解码器提供了一组规范的名称

00:08:21.520 --> 00:08:24.720
有您自己的四个错误的表

00:08:24.720 --> 00:08:28.080
在某种程度上我们无法支持他们，这看起来很糟糕

00:08:28.080 --> 00:08:33.440
因此，在发行说明中，我们会说您现在应该使用规范名称

00:08:33.440 --> 00:08:37.440
但这确实提出了问题，所以所有的测试和内容都是

00:08:37.440 --> 00:08:40.399
基于json，我们没有json编解码器

00:08:40.399 --> 00:08:44.240
总理，但我提交了一份公关报告

00:08:44.240 --> 00:08:48.800
呃，扩展dag json编解码器以也支持

00:08:48.800 --> 00:08:53.040
非dag变体，只需忽略何时存在链接，然后将其设为

00:08:53.040 --> 00:08:57.760
我认为解码器需要的普通json嗯

00:08:57.760 --> 00:09:01.680
我可能会尝试为um做同样的事情

00:09:01.680 --> 00:09:08.560
因此，我怀疑非dag cbor进口商也很大

00:09:08.560 --> 00:09:11.279
努力量或少量努力

00:09:11.279 --> 00:09:13.600
嗯

00:09:18.640 --> 00:09:25.839
酷，嗯，嗯，我有一条评论

00:09:25.839 --> 00:09:29.519
因为我也很喜欢没有

00:09:29.519 --> 00:09:35.920
一个中央表，但是具有类似的实现，只是定义了它们的

00:09:35.920 --> 00:09:40.480
他们需要的标识符，尽管它们当然应该是正确的，但

00:09:40.480 --> 00:09:42.480
仍然像我想的那样

00:09:42.480 --> 00:09:46.480
或至少像我的意思是，对于我们的图书馆，我认为使用起来很有意义

00:09:46.480 --> 00:09:50.160
只是一个圆锥形的桌子，但我认为是这样

00:09:50.160 --> 00:09:53.360
我想说的是，如果您考虑ipld

00:09:53.360 --> 00:09:58.000
或更大的东西，就像您从应用程序中使用它一样

00:09:58.000 --> 00:10:02.480
认为应该像将库构建在

00:10:02.480 --> 00:10:07.920
人们也可以定义自己的数量的方式

00:10:07.920 --> 00:10:11.839
他们自己的常数在某个地方，仍然使用他们的东西

00:10:11.839 --> 00:10:16.640
而不是像整个表格一样导入，所以我们有点喜欢进行此更改

00:10:16.640 --> 00:10:21.760
在JavaScript中有点像这样，可能只是

00:10:21.760 --> 00:10:28.720
注意，以防万一其他人实现了对的权利，我猜只是在

00:10:28.720 --> 00:10:33.040
多编解码器或多格式的方式是

00:10:33.040 --> 00:10:37.839
在实施中有一个已知编解码器的注册表，

00:10:37.839 --> 00:10:44.560
它们的相关名称，其中包含已知编解码器和名称的列表

00:10:44.560 --> 00:10:50.560
已预先注册并与该ipld prime分开

00:10:50.560 --> 00:10:54.560
已知编码器和解码器的多编解码器注册表

00:10:54.560 --> 00:10:58.480
因此，ipfs中包含的插件是可能的

00:10:58.480 --> 00:11:04.880
为已知编解码器定义其他编码器解码器，或

00:11:04.880 --> 00:11:10.079
定义一个全新的命名编解码器和相关的编码器，以及

00:11:10.079 --> 00:11:12.560
解码器，因此它有些零碎

00:11:12.560 --> 00:11:17.519
感觉，但是如果您要使用那个中的一种

00:11:17.519 --> 00:11:20.480
表um您可能应该使用相同的表

00:11:20.480 --> 00:11:25.440
该表中的名称和代码是正确的，所以这是

00:11:25.440 --> 00:11:28.560
怪异的是因为该表将其定义为

00:11:28.560 --> 00:11:31.760
已知的，有人叫deg.json

00:11:31.760 --> 00:11:35.760
那是在ox-129上，还有另外一个叫做json的

00:11:35.760 --> 00:11:42.399
不是在ox200上dag，然后在ipfs命令行中

00:11:42.399 --> 00:11:45.040
有自己的小地图，上面写着我们将使用字符串

00:11:45.040 --> 00:11:52.560
json并将其映射到ox129而不是ox200的实现

00:11:52.959 --> 00:11:56.639
是的，是的，那些应该完全匹配

00:11:56.639 --> 00:12:03.760
嗯酷嗯其他人有什么吗

00:12:04.399 --> 00:12:08.639
为铁匠铺

00:12:09.440 --> 00:12:16.240
不，那又是一个快速的活动，所以，谢谢大家的参与，

00:12:16.240 --> 00:12:21.920
下周见，大家再见

