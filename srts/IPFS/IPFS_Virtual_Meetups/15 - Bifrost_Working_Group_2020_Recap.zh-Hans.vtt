WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.040 --> 00:00:07.279
我的名字叫乔治，我在ipfs团队工作，我是

00:00:07.279 --> 00:00:13.200
领导ipfs基础架构团队（也正式称为bifrost）

00:00:13.200 --> 00:00:17.119
核心团队由我们三个人组成

00:00:17.119 --> 00:00:21.600
迈克尔·伯恩斯（Michael Burns）和汤米·霍尔（Tommy Hall），但是

00:00:21.600 --> 00:00:27.119
我列出的更多人中最大的人可能是最大的人

00:00:27.119 --> 00:00:30.880
我们团队今年的成就是

00:00:30.880 --> 00:00:38.399
跟上不断增加的um请求，对唯一性和

00:00:38.399 --> 00:00:43.920
流经网关的数据是我们自身成功的受害者

00:00:43.920 --> 00:00:50.079
因为我们很快意识到呃，只是将网关旋转到更大的盒子上

00:00:50.079 --> 00:00:52.320
导致更多的人使用网关

00:00:52.320 --> 00:00:56.879
所以我们不得不稍作停顿，看看我们还可以使用其他哪些旋钮

00:00:56.879 --> 00:01:00.160
我们可以进行调整，这样我们就不必

00:01:00.160 --> 00:01:04.479
只是继续旋转更大的盒子，呃，只是为了给你一个想法

00:01:04.479 --> 00:01:10.080
我们的网关通过bgp anycast在九个地区运行，这意味着我们可以提供服务

00:01:10.080 --> 00:01:14.080
来自多个地区的相同IP地址我们确实部署了

00:01:14.080 --> 00:01:18.960
通过terraform和ansible呃我们使用openresty这是enginex plus

00:01:18.960 --> 00:01:22.799
用于在go ipfs之前将脚本编写为反向代理的lua

00:01:22.799 --> 00:01:27.040
所有网关都有一个800 GB的硬盘驱动器用于缓存

00:01:27.040 --> 00:01:32.880
而且我们观测到的slis大约平均需要150毫秒的时间

00:01:32.880 --> 00:01:38.240
我们今年的字节数和99.97的正常运行时间

00:01:38.240 --> 00:01:44.079
通过对...进行了大量的调整，完成了这些数字。

00:01:44.079 --> 00:01:51.520
 go ipfs uh垃圾回收uh阈值uh操作系统级别uh调整

00:01:51.520 --> 00:01:58.479
例如，我们正在腐烂的微调中，我们发现在

00:01:58.479 --> 00:02:04.000
法兰克福地区基本上让大部分的交通量得到了

00:02:04.000 --> 00:02:08.959
被这个区域吸引了，所以对用户来说不是很好

00:02:08.959 --> 00:02:12.080
体验，因为我们会吸引像亚洲这样的用户来法兰克福

00:02:12.080 --> 00:02:16.879
因为就网络跃点而言，它们最接近该区域，所以我们

00:02:16.879 --> 00:02:19.680
我们已经分配了负载，嗯

00:02:19.680 --> 00:02:22.560
更好，但是是的，我们已经看过了

00:02:22.560 --> 00:02:27.040
唯一身份访问者和网关流量的增加

00:02:27.040 --> 00:02:33.599
嗯，我们要维护的另一件事是我们已扩展的引导程序列表

00:02:33.599 --> 00:02:37.440
从七个节点到12个节点，我们也从

00:02:37.440 --> 00:02:40.000
使用静态ips和go ipf的配置

00:02:40.000 --> 00:02:44.720
使用dns加法器后缀匹配及其工作方式是

00:02:44.720 --> 00:02:48.400
当您解析dnsr.bootstrap.looptp.io时，您会得到一个列表

00:02:48.400 --> 00:02:51.680
也是dns加法器的对等点

00:02:51.680 --> 00:02:56.080
如果您递归解决这些问题，那么您会得到

00:02:56.080 --> 00:03:03.360
多个uh端口，用于同一对等体的多个条目，但描述

00:03:03.360 --> 00:03:06.319
其他协议，这样你就可以

00:03:06.319 --> 00:03:11.200
轻松地让它像一种嵌套的方式

00:03:11.200 --> 00:03:15.040
描述来自同一个dns加法器的多个对等体

00:03:15.040 --> 00:03:18.879
顶级dns加法器嗯，这是我们可以轻松添加的

00:03:18.879 --> 00:03:23.760
支持websockets和快速um

00:03:23.760 --> 00:03:26.959
此外，我们还启动了ipfs扇贝群集um

00:03:26.959 --> 00:03:30.400
这是一个三音符簇，每个簇有80 TB

00:03:30.400 --> 00:03:33.519
现在那里有很大的增长空间

00:03:33.519 --> 00:03:36.959
托管一堆pl网站以及

00:03:36.959 --> 00:03:42.959
猎鹰参数相似的多兆兆字节

00:03:42.959 --> 00:03:46.560
就监控而言，我们没有太多进展

00:03:46.560 --> 00:03:50.959
呃，我们就像普通的ssh一样用来登录并告诉日志

00:03:50.959 --> 00:03:55.120
因此，我们从那时开始煽动了一条监控管道

00:03:55.120 --> 00:03:59.680
我们将prometheus用作我们的指标，而将其用于机器级别的指标，例如

00:03:59.680 --> 00:04:04.159
整体内存使用情况网络cpu使用情况我们使用节点导出程序

00:04:04.159 --> 00:04:08.560
然后ipfs本身以prometheus格式提供指标

00:04:08.560 --> 00:04:13.200
这样我们就可以获得各种各样的好信息，例如同行人数

00:04:13.200 --> 00:04:16.639
比特交换统计信息，呃，快速统计信息，各种非常好的

00:04:16.639 --> 00:04:19.840
好东西，对于http代理来说

00:04:19.840 --> 00:04:27.280
在这种情况下，我们使用mtail打包日志并公开

00:04:27.280 --> 00:04:30.479
成功请求的请求失败请求

00:04:30.479 --> 00:04:38.400
等等，我们过去常常在grafana中发出警报并绘制图形

00:04:38.400 --> 00:04:41.520
我们也是哦，我们也使用pingdom和rain标签

00:04:41.520 --> 00:04:47.360
全局操作类型检查这就是我们如何获得99.97

00:04:47.360 --> 00:04:54.479
正常运行时间，我们希望在明年工作的一些事情是

00:04:54.479 --> 00:04:57.520
显然跟上了不断增长的用户需求

00:04:57.520 --> 00:05:03.919
嗯，这主要意味着扩展ipfs呃实例并与之紧密合作

00:05:03.919 --> 00:05:09.039
Go ipfs小组确定我们可以进行的内存泄漏或调整

00:05:09.039 --> 00:05:12.720
我们可以使我们想公开我们的回购协议

00:05:12.720 --> 00:05:15.759
我们已经基本上提取了大部分

00:05:15.759 --> 00:05:20.080
来自回购的秘密，所以在某个时候我们想做的是

00:05:20.080 --> 00:05:24.560
开源并开始接受捐款

00:05:24.560 --> 00:05:28.400
还有一个大公司一直在简化dmca请求

00:05:28.400 --> 00:05:31.600
因为我们已经得到了很多这样的东西

00:05:31.600 --> 00:05:36.400
我们实际上已经启用了双重哈希拒绝列表，

00:05:36.400 --> 00:05:38.720
可以轻松与其他网关运营商共享

00:05:38.720 --> 00:05:44.880
在某个时候做的很好，我们还必须找到更好的方法

00:05:44.880 --> 00:05:47.600
在部署到所有网关之前测试配置

00:05:47.600 --> 00:05:51.280
现在我们有登台盒，我们将金丝雀部署到它们

00:05:51.280 --> 00:05:57.199
但是有时候，当某些东西仍然不是很明显的时候

00:05:57.199 --> 00:06:02.560
休息，所以我们想有一个呃

00:06:02.560 --> 00:06:06.639
一种更好的方法来测试它们，然后再发布，我们也想

00:06:06.639 --> 00:06:09.840
在kubernetes上大规模运行ipfs进行实验

00:06:09.840 --> 00:06:13.840
kubernetes网络层的主要功能使其成为现实

00:06:13.840 --> 00:06:20.639
充满挑战，但如果我们解决这个问题，确实可以弥补

00:06:20.639 --> 00:06:28.880
跨多个区域的业务流程

