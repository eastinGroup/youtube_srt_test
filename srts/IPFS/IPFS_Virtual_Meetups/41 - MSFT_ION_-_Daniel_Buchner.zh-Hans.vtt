WEBVTT
Kind: captions
Language: zh-Hans

00:00:02.520 --> 00:00:08.760
到底是什么，这是微软开始为之贡献的一个项目

00:00:08.760 --> 00:00:14.459
而且您知道围绕可扩展的去中心化标识符开始了，这是一个

00:00:14.459 --> 00:00:18.720
我们在去中心化身份主体中所做的工作的组成部分

00:00:18.720 --> 00:00:25.170
我们内部拥有的工作，这是一个很大的组成部分，所以什么是di di我看到了

00:00:25.170 --> 00:00:28.619
稍微谈谈Di D设置的级别，这是一个分散的标识符

00:00:28.619 --> 00:00:34.890
这是w3c中即将到来的标准，它编纂了URI之类的字符串

00:00:34.890 --> 00:00:39.930
D ID是代码的字符串已开发，您知道它们的含义是什么

00:00:39.930 --> 00:00:44.700
代表，基本上这就像一个去中心化版本

00:00:44.700 --> 00:00:49.320
如果您想要一个ID，就可以使用类似电子邮件地址或用户名的形式

00:00:49.320 --> 00:00:54.510
具有一个或多个不属于公司或其他实体的ID

00:00:54.510 --> 00:01:00.570
一个div本质上代表了它们，并得到了键和端点的支持，因此

00:01:00.570 --> 00:01:04.680
是的，如果我必须得到一个类比，那就很像今天的DNS，

00:01:04.680 --> 00:01:08.340
域名，然后您拥有DNS区域文件并拥有证书

00:01:08.340 --> 00:01:14.030
安全方面的授权系统，所以我们要做的是删除

00:01:14.030 --> 00:01:19.039
从系统中这些集中的实体和权限，以及

00:01:19.039 --> 00:01:25.319
这非常重要，因为您知道拥有ID的身份确实是关键

00:01:25.319 --> 00:01:29.159
解锁一些分散的网络技术等较酷的部分，以及

00:01:29.159 --> 00:01:34.889
应用程序（如果您的ID由公司拥有），您知道这确实有危害

00:01:34.889 --> 00:01:38.969
在某种程度上，这很有趣，而且游戏很好，您知道自己拥有自己的

00:01:38.969 --> 00:01:42.479
张贴猫的照片或喜欢您在午餐时做的事情或在Facebook上做的事情

00:01:42.479 --> 00:01:47.789
您可以通过您的Facebook ID知道您是否拥有其中一个帐户，但这是

00:01:47.789 --> 00:01:50.669
完全不同的球类游戏，当您开始存储类似数据时

00:01:50.669 --> 00:01:53.249
使用附加到ID的密钥加密

00:01:53.249 --> 00:01:58.200
您通过朋友之间的敏感数据消息了解应用程序，例如和

00:01:58.200 --> 00:02:04.079
如果您要开始，它甚至更像是道德或人权方面的危害

00:02:04.079 --> 00:02:08.310
将与您生活中非常重要的事物相关的证据与之相关联，这就是

00:02:08.310 --> 00:02:12.270
因为确实有两种灾难性的故障模式

00:02:12.270 --> 00:02:15.840
集中式ID（如果您要将所有内容都绑定到电子邮件地址或用户）

00:02:15.840 --> 00:02:19.049
指定公司可以切断您的职位

00:02:19.049 --> 00:02:23.790
知道，因为我们已经看过其中一些社交内容，否则它可能会倒闭

00:02:23.790 --> 00:02:27.450
您知道有人是否正在运行电子邮件服务器吗？

00:02:27.450 --> 00:02:31.530
更强大，更不受审查的系统，还有什么

00:02:31.530 --> 00:02:35.700
ion是所谓的“边树协议”的实现，它是

00:02:35.700 --> 00:02:40.019
比特币之上的区块链分类账不可知协议，它确实包含了

00:02:40.019 --> 00:02:46.230
ipfs是它的关键组成部分，所以我们为什么要做为什么我们不能很好地创建离子呢？

00:02:46.230 --> 00:02:50.310
知道创建D ID方法非常简单，因为他们将它们称为a

00:02:50.310 --> 00:02:56.900
 D ID的实现是最基本的一种超级简单D ID方法是D ID密钥

00:02:56.900 --> 00:03:01.260
基本上只是一个公钥权限，它是您的标识字符串

00:03:01.260 --> 00:03:04.319
无法滚动按键，您无能为力，因为它实际上只是一个

00:03:04.319 --> 00:03:08.040
键，就像您只想要一个燃烧器然后将其扔掉或

00:03:08.040 --> 00:03:11.819
某些不太严重的事情并没有真正使用它，您可以这样做，但是

00:03:11.819 --> 00:03:16.230
如果您想要一个可扩展的D ID系统，该系统具有滚动键和

00:03:16.230 --> 00:03:19.470
你知道改变端点，所有这些东西你都需要一些东西

00:03:19.470 --> 00:03:24.060
更有能力，而且实际上能够承受这样的挑战

00:03:24.060 --> 00:03:28.560
我们希望看到世界采用的规模，所以我们真的面临着

00:03:28.560 --> 00:03:32.609
您知道的这个三难困境是在解决方案中保持分散性的同时

00:03:32.609 --> 00:03:37.560
也实现了可扩展性和安全性这不是您所知道的

00:03:37.560 --> 00:03:41.370
我们已经看到我们几年前开始这项工作时所见过的，所以我们

00:03:41.370 --> 00:03:45.930
我真的想最大限度地利用这三个方面，而你必须看一下

00:03:45.930 --> 00:03:50.159
身份的规模确实存在，您还有其他一些D ID实现

00:03:50.159 --> 00:03:53.760
知道有种轻松的方法，说我们会

00:03:53.760 --> 00:03:57.629
D ID仅适用于公司或政府之类的东西

00:03:57.629 --> 00:04:01.319
我们不需要B tzer拥有ID，因此他们只需拥有钥匙并扔掉它们

00:04:01.319 --> 00:04:05.280
离开并不断流失，没有自己的发言权分散Twitter

00:04:05.280 --> 00:04:08.629
例如处理这样的事情，这不是他们想要做的事情

00:04:08.629 --> 00:04:13.109
这是一种真正方便的方法，可以使您的规模从数十亿到数十亿不等

00:04:13.109 --> 00:04:17.370
数十亿人喜欢数以千万计的人，但我们不想替罪羊

00:04:17.370 --> 00:04:20.909
我们想要真正做到这一点，以便人们可以拥有可以使用的ID

00:04:20.909 --> 00:04:24.300
用于分散社会服务或craigslist之类的东西

00:04:24.300 --> 00:04:28.440
这些实现，因此我们必须考虑可扩展至

00:04:28.440 --> 00:04:31.770
数十亿，这是像微软这样的现实，如果我们

00:04:31.770 --> 00:04:36.210
将其作为GA放出来，这就是它所走的路，你知道我们有

00:04:36.210 --> 00:04:40.640
我们需要数十亿的用户在第一天就能提供这种规模的服务

00:04:40.640 --> 00:04:45.960
但是国防部不仅要针对可能适用于设备或其他设备的人类，

00:04:45.960 --> 00:04:49.290
企业或其他任何您想要的实体

00:04:49.290 --> 00:04:54.720
代表我的ID，那么D ID的要求就是正确而无需说出单词

00:04:54.720 --> 00:04:59.220
区块链，因为您知道需求空间中有很多BS

00:04:59.220 --> 00:05:03.630
是全局不可变的仅追加日志，您需要在某个地方拥有这些日志

00:05:03.630 --> 00:05:07.650
状态会发生变化，例如，如果Alice创建了一个D ID并且她处于一种状态，也许她已经

00:05:07.650 --> 00:05:11.580
她当前的电话上有一个公开密钥，她想将其与她关联

00:05:11.580 --> 00:05:15.480
ID可能表明您知道她完全拥有一些数据的地方

00:05:15.480 --> 00:05:20.130
在系统外部，如果她更改了初始状态，那将是她的初始状态

00:05:20.130 --> 00:05:23.940
她得到了一部新手机，并希望将该密钥转换为一个新的公用密钥，

00:05:23.940 --> 00:05:29.040
助理ID，她需要在某处存在全局日志的地方

00:05:29.040 --> 00:05:33.480
可以看到这可以看到状态变化并且可以有安全意识

00:05:33.480 --> 00:05:38.130
她的国家血统的权利，我们也希望此日志没有任何

00:05:38.130 --> 00:05:42.390
中央提供者或当局，以确保其不受篡改的审查

00:05:42.390 --> 00:05:46.710
因为您知道他是否只想知道一堆运行的服务器

00:05:46.710 --> 00:05:50.910
一些非常简单的拜占庭协议，只是基于

00:05:50.910 --> 00:05:54.840
系统信任验证或否，它只是投票，不是很严格的审查制度

00:05:54.840 --> 00:05:59.310
抵抗力，你知道它可能不会承受那种保证

00:05:59.310 --> 00:06:03.270
我们想要制作的，这正是dpi所需要的，让我们

00:06:03.270 --> 00:06:08.790
看看我们怎么能做到这一点，关键在于问题

00:06:08.790 --> 00:06:14.730
PKI的dpi不同于两次花销，因此您实际上并不是

00:06:14.730 --> 00:06:18.180
需要在本机层进行区块链交易以表示di D

00:06:18.180 --> 00:06:22.500
操作，它和您需要做的有点不同

00:06:22.500 --> 00:06:25.800
理解是有正确的血统，有一个

00:06:25.800 --> 00:06:30.480
一个lat的爱丽丝可能会在一个状态出现的时候被div记录的血统。

00:06:30.480 --> 00:06:37.140
从状态1到状态2到状态3，但是爱丽丝不会在以下情况下花费自己的ID：

00:06:37.140 --> 00:06:42.900
您从系统中删除了这些D ID不是的友好名称的想法

00:06:42.900 --> 00:06:46.680
像你知道的大50字节丑陋的字符串

00:06:46.680 --> 00:06:51.180
而且您做到这一点，以至于您不支持像这样的销售概念

00:06:51.180 --> 00:06:55.830
我是艾莉森，我要卖掉我的D创意，我要让他们从中购买

00:06:55.830 --> 00:06:59.699
我将像您将可以实际使用的加密货币那样进行转移

00:06:59.699 --> 00:07:06.090
处于双重消费证明系统的顶端，并且具有可扩展的功能

00:07:06.090 --> 00:07:13.770
因为它不需要那种级别的保护，所以技术概述

00:07:13.770 --> 00:07:17.220
所以我在这上面运行的是一个公共的无权限覆盖网络

00:07:17.220 --> 00:07:24.000
在比特币之上，并利用称为SCI树和站点树的dpi dpi协议

00:07:24.000 --> 00:07:27.630
是不知所措的，您可以在其他事情上实现它，有一个

00:07:27.630 --> 00:07:32.130
这是在以太坊称为元素的实现上实现的，我相信有一个信任块

00:07:32.130 --> 00:07:35.490
就像您可以在任何基础之上实现的那样，安全密钥已在结构上完成

00:07:35.490 --> 00:07:39.210
分类帐，但只能与您实施它的分类帐一样分散

00:07:39.210 --> 00:07:42.690
因此，还有一些其他系统，您显然知道

00:07:42.690 --> 00:07:45.810
基于信任机构的模型和东西，我们不希望您知道我们

00:07:45.810 --> 00:07:49.979
想要甚至我们都不是可信赖的权威的东西，所以我不

00:07:49.979 --> 00:07:53.880
有任何特殊的协议令牌，没有任何验证器，没有

00:07:53.880 --> 00:07:57.270
您知道签名人实际上拥有任何事情，Microsoft无法控制

00:07:57.270 --> 00:08:00.660
除了我们知道您为它贡献了很多代码这一事实外，那是

00:08:00.660 --> 00:08:03.690
关于它，所以技术上的假设，所以没有

00:08:03.690 --> 00:08:09.750
技术不需要二级共识，事实上，链本身本身就是ipfs中的比特币

00:08:09.750 --> 00:08:14.220
拥有数据确实是唯一必要的共识，所以没有像

00:08:14.220 --> 00:08:18.210
拜占庭协议最重要的一点是节点之间不进行对话并达成协议

00:08:18.210 --> 00:08:23.340
他们在数学上可以达成一致的任何东西，所以没有冲突状态

00:08:23.340 --> 00:08:28.380
允许爱丽丝和鲍勃的ID，你根本不知道像你这样的变化

00:08:28.380 --> 00:08:31.740
他们不能基于您知道一个奇怪的状态而改变彼此的状态，或者

00:08:31.740 --> 00:08:34.709
另一个我的意思是ID不可转让，所以您不能

00:08:34.709 --> 00:08:40.409
您知道交换机ID不能像我之前提到的那样扩展Bob的ID，所以

00:08:40.409 --> 00:08:43.589
离子在系统方面是什么样的，这就是我们要开始的地方

00:08:43.589 --> 00:08:49.470
谈论一点关于IP us的知识，所以基本上任何人都可以在一个IP内运行一个节点

00:08:49.470 --> 00:08:54.209
请注意，实际上有三个主要部分，一个事务编写器和一个处理器

00:08:54.209 --> 00:08:57.059
一些处理逻辑，然后有一个IP FS节点

00:08:57.059 --> 00:09:00.119
以及您所知道的带下划线的链结，就像比特币一样

00:09:00.119 --> 00:09:05.699
因此，如果有人在运行它，比如说节点一，他们可以锚定在其中

00:09:05.699 --> 00:09:10.799
比特币一个或最多10,000个ID操作，因此可能就像创建

00:09:10.799 --> 00:09:15.179
或更新或恢复，或任何适用的OP，适用于所有类型的用户

00:09:15.179 --> 00:09:19.199
现在，如果您希望以这种方式获得最自主权的信任，就可以

00:09:19.199 --> 00:09:23.399
节点，然后您创建一个事务，该事务由一些操作支持

00:09:23.399 --> 00:09:28.229
我将显示的ipfs文件，您将在比特币中锚定该锚定哈希

00:09:28.229 --> 00:09:32.699
如果您仅在自己的批次中添加一项操作，则必须付费

00:09:32.699 --> 00:09:36.419
比特币费用，但是您不必征求任何人的许可，这有点

00:09:36.419 --> 00:09:40.409
像闪电一样，只是一些确定性的协议

00:09:40.409 --> 00:09:45.059
如果您遵循规则，则基本上可以正常工作，但您可能不会

00:09:45.059 --> 00:09:48.569
希望所有人都只为比特币交易付款，也不会

00:09:48.569 --> 00:09:53.419
扩展，因此现实是人们可能会将操作发送到其他节点

00:09:53.419 --> 00:09:57.779
微软现在正在运行，其他几家公司也在运行

00:09:57.779 --> 00:10:00.899
确保您使用永不离开设备的密钥对操作进行签名

00:10:00.899 --> 00:10:04.559
您全资拥有，当您将身份验证发送到另一个节点时，您基本上是

00:10:04.559 --> 00:10:09.419
唯一依靠他们将其分批放入链中并

00:10:09.419 --> 00:10:13.169
就是这样，您可以判断他们是否早开始

00:10:13.169 --> 00:10:17.699
就像可检查的，显然是因为它现在是比特币，您放入的哈希

00:10:17.699 --> 00:10:23.909
比特币是IP FS c ID，其中IP f Scie链接到一个称为acre的文件

00:10:23.909 --> 00:10:27.539
文件和另外两个文件，其中包括实际的详细操作

00:10:27.539 --> 00:10:31.889
数据以及节点2的作用以及站点树中的所有其他节点

00:10:31.889 --> 00:10:36.779
他们正在寻找网络哈希，这些哈希是通过比特币来的

00:10:36.779 --> 00:10:39.929
检查操作回报，他们基本上非常关注这些

00:10:39.929 --> 00:10:46.169
他们想要尽快散列并固定此数据的散列值，因此当

00:10:46.169 --> 00:10:49.979
他们找到了一个他们可以延伸到所有其他节点的节点，这实际上是

00:10:49.979 --> 00:10:54.599
节点相互通信的唯一方法是通过它们寻找的ipfs

00:10:54.599 --> 00:10:58.319
这些数据将支持这些锚定在此处的文件以及何时锚定的文件

00:10:58.319 --> 00:11:02.159
开始流式传输他们将其固定，因此它正在复制一个子集

00:11:02.159 --> 00:11:06.689
基本上是公共网络中s的IP，即这些文件，然后

00:11:06.689 --> 00:11:10.440
他们基本上按照确定性的功能来处理它们

00:11:10.440 --> 00:11:13.740
总是输出相同的东西，所以这是一个强烈的最终

00:11:13.740 --> 00:11:17.730
一致的系统，其获得与节点相同的答案而没有一些

00:11:17.730 --> 00:11:22.950
次要共识看起来像手术的解剖一样

00:11:22.950 --> 00:11:27.420
这是我们在这里谈论比特币内更多的ipfs的地方

00:11:27.420 --> 00:11:32.820
在比特币内部，您知道交易明显嵌入其中

00:11:32.820 --> 00:11:36.330
这些是这些交易哈希，它们是锚文件的ID

00:11:36.330 --> 00:11:39.780
锚文件链接到批处理文件，不同之处在于锚跌落是

00:11:39.780 --> 00:11:42.540
小证明文件，而批处理文件就像大文件

00:11:42.540 --> 00:11:48.690
详细列出PKI操作的详细数据，因此，如果您刚刚存储了锚点

00:11:48.690 --> 00:11:51.840
文件，您将拥有不信任的方式来快速解析文件中的任何D ID

00:11:51.840 --> 00:11:56.130
该系统的节点和节点的大小要小将近两个数量级

00:11:56.130 --> 00:12:00.450
然后，如果您存储两个全部批处理文件，则就像完整节点一样，

00:12:00.450 --> 00:12:04.100
等效的权利是，如果您不修剪，则将获得所有批处理保管库数据的信息

00:12:04.100 --> 00:12:08.070
现在我们正在开发轻节点的东西，因此您可以运行一个小的

00:12:08.070 --> 00:12:12.090
现在的足迹是负离子节点，内部有一个ipfs节点，并完成了比特币的所有交易

00:12:12.090 --> 00:12:17.610
到2017年，我将像我们的目标硬件那样在角落运行

00:12:17.610 --> 00:12:21.930
大约有半个千兆字节的存储空间，您知道大约有四个千兆字节

00:12:21.930 --> 00:12:27.270
您可以在普通设备上运行这些程序，而人们可能最后一次在家运行

00:12:27.270 --> 00:12:33.090
技术幻灯片，以了解我具体使用的是哪个网站ridi ID

00:12:33.090 --> 00:12:37.230
那里基本上是巨型CRT T，如果这个字对您来说很奇怪

00:12:37.230 --> 00:12:42.810
CRT TV重视他们曾经拥有的任何多作家协作应用程序

00:12:42.810 --> 00:12:47.850
像Google Docs一样使用，您知道Docs例如在哪里像喜剧一样

00:12:47.850 --> 00:12:53.670
这些是CRT T，它们基本上吸收了参与者的变化

00:12:53.670 --> 00:12:58.830
有一个协调服务器来进行这些更改，并且它们会递增

00:12:58.830 --> 00:13:03.180
您可以在幻灯片上看到带有整数的基本操作

00:13:03.180 --> 00:13:07.770
过去，他们现在以逻辑和确定性的方式结合在一起

00:13:07.770 --> 00:13:12.960
传统的CRT T使用矢量时钟，您是否相信矢量时钟

00:13:12.960 --> 00:13:16.380
参与者增加他们，然后您相信协调员说Google或

00:13:16.380 --> 00:13:21.270
微软或其他将比特币整合在一起的东西给了我们

00:13:21.270 --> 00:13:25.950
一个大矢量时钟Oracle，它是一个正向计数矢量时钟

00:13:25.950 --> 00:13:29.730
根据其区块进度和交易顺序

00:13:29.730 --> 00:13:33.750
确定性的，因此您可以重播，而无需信任参与者

00:13:33.750 --> 00:13:37.230
向量是什么，因为它是比特币，您不需要信任某人

00:13:37.230 --> 00:13:40.410
组装它是因为它是一根棍子，您知道这是一个确定性的系统

00:13:40.410 --> 00:13:45.210
因此，我们实质上已从发送集中式报告的CR DT系统中删除了

00:13:45.210 --> 00:13:50.730
中介，那么我们将获得怎样的大规模规模，您知道我们在为您服务

00:13:50.730 --> 00:13:53.340
每秒知道多达数万次操作

00:13:53.340 --> 00:13:57.690
在这种敲门声中，大量的DID操作只是为了给您

00:13:57.690 --> 00:14:02.010
每秒一千次操作的规模感相当于获得50次操作

00:14:02.010 --> 00:14:07.290
一年中有十亿个D ID进入系统，所以您知道我们是否能够做到这一点

00:14:07.290 --> 00:14:10.890
认为我们是非常成功的社区500亿国防部

00:14:10.890 --> 00:14:15.750
每个人都在使用它，性价比很高，一万个

00:14:15.750 --> 00:14:19.650
一次比特币交易中的操作意味着我真的不在乎

00:14:19.650 --> 00:14:25.320
有关费用的信息，您知道这是每个操作的一分钱的一分钱，所以不是

00:14:25.320 --> 00:14:29.550
太大的事情了，这是绝对不允许的，我们想尽可能多地摆脱自己

00:14:29.550 --> 00:14:33.570
由此可能，我们不希望微软成为某种形式的守门人

00:14:33.570 --> 00:14:36.720
我们要么想要建立一个可以完全独立于生活的东西

00:14:36.720 --> 00:14:42.690
我们，所以你知道我们专注于什么，我将跳过这一部分，因为只有你

00:14:42.690 --> 00:14:46.350
知道什么更新了我的系统，我们认为通往我们的公交网络的路径

00:14:46.350 --> 00:14:50.280
这是三个阶段，我们将让很多大型组织来运行节点

00:14:50.280 --> 00:14:55.110
因为他们可以立即这样做，并且可以像完整节点一样对所有数据进行miR

00:14:55.110 --> 00:14:59.760
其中包括IP FS数据，然后开始您就知道接起了那条长尾巴

00:14:59.760 --> 00:15:04.770
我们将帮助用户了解所需的ipfs数据的子集

00:15:04.770 --> 00:15:10.080
只是建立一个强大的对等镜像网络，如何参与进来

00:15:10.080 --> 00:15:13.680
我上一张幻灯片的所有工作都是十六进制，实际上发生在分散式

00:15:13.680 --> 00:15:17.220
身份基础站点树和我参与的项目都不在

00:15:17.220 --> 00:15:21.270
微软自己的开放源代码存储库，我们所做的这项工作是对

00:15:21.270 --> 00:15:24.720
社区，我们一直与ipfs人员紧密合作，

00:15:24.720 --> 00:15:29.190
组件，并希望将任何您知道的更改或我们能做的任何事情带到上游

00:15:29.190 --> 00:15:33.840
知道他们在那里会有所帮助，是的，只是参加像

00:15:33.840 --> 00:15:39.489
跳入您知道的运行离子，您知道ipfs和ion的测试部分并帮助使其运行

00:15:39.489 --> 00:15:43.720
对于这两个项目都更好，谢谢您有使用此计划的计划

00:15:43.720 --> 00:15:52.299
是Windows中的技术，所以我们计划将生态系统中的D类ID优先用于

00:15:52.299 --> 00:15:56.379
它们就像Microsoft支持的任何其他ID一样

00:15:56.379 --> 00:16:00.009
像我们这样的实例支持社交登录到我们的应用程序，您知道所有

00:16:00.009 --> 00:16:04.359
通过帮助寻找其他东西以及MSA之类的Microsoft帐户

00:16:04.359 --> 00:16:08.350
东西，但我们要确保以相同的方式支持D ID

00:16:08.350 --> 00:16:13.299
您最终可以使用Open ID登录Windows应用程序和类似的东西

00:16:13.299 --> 00:16:18.129
Connect，您拥有发行人的基于D ID的Open ID Connect版本

00:16:18.129 --> 00:16:22.660
对，中间没有IDP，我们打算在我们的支持中

00:16:22.660 --> 00:16:31.329
产品非常酷，下一个问题是否可以共享D ID

00:16:31.329 --> 00:16:34.919
默认情况下，在所有侧边对待的区块链实现中

00:16:34.919 --> 00:16:40.509
不，不，现在您不喜欢您不喜欢创建广告ID，这是我想的

00:16:40.509 --> 00:16:43.660
很多事情是对的，我很想很久以前就做到了，但是

00:16:43.660 --> 00:16:49.539
您无法创建本质上扎根于一个或全部链中的D ID

00:16:49.539 --> 00:16:53.410
他们的问题实际上是相对论的，就像你没有

00:16:53.410 --> 00:16:58.059
真正知道一条链或另一条链上的交易是否在什么时候发生

00:16:58.059 --> 00:17:03.220
因此，您需要像Oracle那样的鸟来实质上对齐所有这些状态

00:17:03.220 --> 00:17:06.549
和抢七，了解所有这些事情，我不是说这就像我没有

00:17:06.549 --> 00:17:09.730
知道这不是完全不可能的，但肯定是

00:17:09.730 --> 00:17:16.179
我无法弄清楚这真的很有趣

00:17:16.179 --> 00:17:22.959
哦，最后一个问题很好奇，如果ion有任何即将来临的里程碑和功能

00:17:22.959 --> 00:17:28.419
需要从ipfs启用这些里程碑，是的，所以我知道我们的下一个

00:17:28.419 --> 00:17:32.830
Beta之后的里程碑将使这件事变得不知所措，您知道并且

00:17:32.830 --> 00:17:36.820
并完全完成了v1的最终版本，您知道将网络扩展出来了，显然

00:17:36.820 --> 00:17:40.330
对于Microsoft，您知道那对我们来说意味着我们正在运行节点

00:17:40.330 --> 00:17:44.110
显然，它是规模化的，但我们想帮助更大，更广泛的生态系统

00:17:44.110 --> 00:17:48.250
所有节点都达到了强化基础代码的地步，您知道

00:17:48.250 --> 00:17:51.780
经过战斗考验，我们认为可能还需要一些时间

00:17:51.780 --> 00:17:56.910
但我们当然希望在本日历年中，就ipfs可以做到这一点

00:17:56.910 --> 00:18:02.730
帮助我们现在做，我们正在使用JSI PFS，所以拥有您知道的本地语言将是很棒的

00:18:02.730 --> 00:18:07.590
您了解JSI pia ipfs中实现的DHT以及其他一些功能

00:18:07.590 --> 00:18:12.840
您知道的Ingo ipfs所存在的其他东西

00:18:12.840 --> 00:18:20.760
也许还存在于jess ipfs中，是的，太好了，我想我们肯定是在找

00:18:20.760 --> 00:18:26.130
希望能够尽快完成DHT的规范，然后再利用该规范

00:18:26.130 --> 00:18:30.240
从已经完成的事情中去，并逐步加强与Jas的合作，并希望起床

00:18:30.240 --> 00:18:35.940
可以交付到未来几个月，基于不同的离子网络

00:18:35.940 --> 00:18:40.320
区块链与迪克伤口互操作，所以我不称其为离子

00:18:40.320 --> 00:18:43.710
网络，所以离子就是比特币实例化，我会称呼它们为

00:18:43.710 --> 00:18:47.370
打电话给他们的网络，例如决定根据定理实施

00:18:47.370 --> 00:18:51.720
现在它被称为元素，它是一个独立的网络，它们是独立的，所以如果

00:18:51.720 --> 00:18:55.140
您在元素中有一个D ID，而您知道它们可以解决这些问题的DI

00:18:55.140 --> 00:19:00.630
各自的结构，从某种意义上讲，它们之间不可能互操作

00:19:00.630 --> 00:19:04.110
D ID文档冒犯了他们，并且它们的工作方式是相同的

00:19:04.110 --> 00:19:08.940
因为它们之间有80％的共享代码，但它们是截然不同的

00:19:08.940 --> 00:19:15.780
网络，它们唯一的共同点实际上是ipfs，因此

00:19:15.780 --> 00:19:19.950
同一网络如果区块链被破坏会带来什么后果

00:19:19.950 --> 00:19:25.770
关于离子的有趣事情，这实际上是我们刚刚做出的更改

00:19:25.770 --> 00:19:31.650
从比特币比特币的意义上说，离子是隐窝具有量子抗性

00:19:31.650 --> 00:19:34.919
受sha-256保护，我们认为有一个合理的程度

00:19:34.919 --> 00:19:39.870
哈希函数显然比EC Grover算法更安全

00:19:39.870 --> 00:19:44.700
只会给你增加一倍，就像它只会使难度减半

00:19:44.700 --> 00:19:48.840
您将需要更正以能够反向散列，否则这就是想法

00:19:48.840 --> 00:19:53.760
是的，所以我们在您预先提交的地方在I中执行称为预先承诺的事情

00:19:53.760 --> 00:19:57.360
到一个作为连接显示方案的密钥，有点像beta脚本beta密钥

00:19:57.360 --> 00:20:02.990
哈希在比特币R中，您实际上并没有透露您的下一个更新密钥，因此

00:20:02.990 --> 00:20:07.200
你基本上会知道如果发生量子断裂

00:20:07.200 --> 00:20:12.450
在某种类型的ECC基础加密基础上，您将滚动密钥并

00:20:12.450 --> 00:20:16.320
迅速签署，然后针对某种承诺做出承诺

00:20:16.320 --> 00:20:20.700
晶格加密或在其上具有量子抗性的东西

00:20:20.700 --> 00:20:24.600
签名方如此，但是历史上的网络本身几乎是安全的

00:20:24.600 --> 00:20:31.890
全部由sha-256组成，因此相当耐压，确定您是否有任何阻滞剂

00:20:31.890 --> 00:20:39.270
看到未来在IP巨星技术功能方面，我的意思是天哪

00:20:39.270 --> 00:20:43.110
所以我知道我们还没有探索过的一件事，但是我真的

00:20:43.110 --> 00:20:47.010
想看看我们是否可以利用发布/订阅的东西，我知道

00:20:47.010 --> 00:20:50.910
传统上，您知道我在Microsoft之前曾在Mozilla工作过，而您

00:20:50.910 --> 00:20:54.810
知道某些纯技术的泛滥存在传统问题

00:20:54.810 --> 00:20:59.460
您知道当您打开查找子时，您只会受到某些攻击，但是如果我们

00:20:59.460 --> 00:21:04.020
可能很难，并且不能使用它来执行某些ping操作

00:21:04.020 --> 00:21:08.130
D ID的使用，使轻型节点更容易，就像我会做一些事情

00:21:08.130 --> 00:21:12.290
在我们可以处理的pub sub上

