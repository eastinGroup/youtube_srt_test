WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.120 --> 00:00:05.920
我一直在与protocollabs的一些人一起工作

00:00:05.920 --> 00:00:12.240
在一些优化工作上，我在其中共享ipfs节点

00:00:12.240 --> 00:00:19.119
嗯，这将是一个简短的速成课程

00:00:19.119 --> 00:00:22.960
传统的网络浏览器倾向于期望所有数据都将

00:00:22.960 --> 00:00:28.480
通过一个服务器场向他们汇聚了

00:00:28.480 --> 00:00:33.360
效率很高，效果很好，但是如果您有缺点的话

00:00:33.360 --> 00:00:36.320
也试图获得相同结果的多个设备

00:00:36.320 --> 00:00:40.160
数据，即使他们在同一个房间里，他们仍然必须走

00:00:40.160 --> 00:00:46.000
通过该服务器场获取ipfs的工作原理与

00:00:46.000 --> 00:00:48.640
它通常会创建很多网络

00:00:48.640 --> 00:00:52.559
连接呃，然后尝试与这些同行交谈

00:00:52.559 --> 00:00:55.440
直接，所以如果您在浏览器中使用jsipfs

00:00:55.440 --> 00:01:00.640
该演示简要说明了这是如何工作的

00:01:00.640 --> 00:01:04.239
但是，如果您看一下幕后的内容，可能会遇到一些问题

00:01:04.239 --> 00:01:07.920
呃，发生了很多事，有很多联系

00:01:07.920 --> 00:01:12.000
数据正在处理，所以所有这些加起来，尤其是因为它运行

00:01:12.000 --> 00:01:16.880
在主线程中，浏览器非常忙于在主线程上执行内容

00:01:16.880 --> 00:01:23.439
所以至少在我的Macbook Air机器上，我通常会达到6.3

00:01:23.439 --> 00:01:28.799
浏览器中每个选项卡的兆字节使用量

00:01:28.799 --> 00:01:32.000
我不知道有多少个网络连接，但是一旦你

00:01:32.000 --> 00:01:35.520
打开另一个选项卡

00:01:35.520 --> 00:01:38.720
使您使用的内存量加倍，连接数加倍

00:01:38.720 --> 00:01:41.759
即使共享相同的数据也可以创建

00:01:41.759 --> 00:01:44.000
店铺

00:01:44.320 --> 00:01:48.720
而且这个数字一直在线性增长

00:01:48.720 --> 00:01:52.159
乘以您已打开的标签页数是因为

00:01:52.159 --> 00:01:55.360
我们不一定要分享商店以外的任何东西

00:01:55.360 --> 00:02:01.680
在浏览器标签之间，还有一些其他问题

00:02:01.680 --> 00:02:05.040
之所以会这样，是因为他们最终共享了

00:02:05.040 --> 00:02:07.600
他们最终共享相同的对等ID的相同数据源

00:02:07.600 --> 00:02:10.879
然后网络有点混乱，因为

00:02:10.879 --> 00:02:14.319
您结束时会有多个具有相同ID的同伴，并且

00:02:14.319 --> 00:02:17.680
通常只有其中一个真正建立联系

00:02:17.680 --> 00:02:24.239
所以再次像如果您只是使用ipfs打开10个标签页我向您展示的相同应用

00:02:24.239 --> 00:02:31.200
将拥有约64 MB的内存使用量，但我们可以做得更好，而这

00:02:31.200 --> 00:02:36.720
是我一直在这里所做的工作，我们正在尝试做一些ipfs节点

00:02:36.720 --> 00:02:39.360
共享，因此您会看到相同的示例应用程序

00:02:39.360 --> 00:02:44.319
但是这个使用共享节点

00:02:45.360 --> 00:02:49.840
这里发生的改变不是直接连接到网络，而是

00:02:49.840 --> 00:02:53.040
在浏览器中有一个共享工作器，这就是

00:02:53.040 --> 00:02:57.920
ipfs节点在哪里运行，并且在连接到

00:02:57.920 --> 00:03:01.200
网络，如果您查看的内存配置文件

00:03:01.200 --> 00:03:05.280
这对于单个选项卡用例来说会稍差一些，因为我们

00:03:05.280 --> 00:03:10.920
周围的工人占用了大约6兆字节

00:03:10.920 --> 00:03:15.280
2.3通过主线程

00:03:15.440 --> 00:03:22.000
但是，当您最终创建更多标签时，您会开始看到

00:03:22.000 --> 00:03:26.720
即使有两个选项卡，您也会受益，您突然会改变方程

00:03:26.720 --> 00:03:30.640
在共享工作程序中仍使用相同的6兆字节，但

00:03:30.640 --> 00:03:34.480
然后两个不同的应用将连接到该应用，它们各自使用

00:03:34.480 --> 00:03:39.519
2.3兆字节的内存，甚至更好的东西是呃

00:03:39.519 --> 00:03:42.400
我们不再遇到网络连接问题，因为它们是

00:03:42.400 --> 00:03:44.799
共享，所以我们不增加网络连接

00:03:44.799 --> 00:03:48.319
以及所有后续选项卡，它们不需要引导节点，因为它们都

00:03:48.319 --> 00:03:53.439
份额和数量的增加，就像我们看

00:03:53.439 --> 00:03:56.640
在相同数量的10个标签上，您将具有相同的终端连接

00:03:56.640 --> 00:04:00.640
您将拥有约30 MB的内存使用量，大约是一半

00:04:00.640 --> 00:04:07.040
就像您可能会觉得更奇怪的是cpu负载

00:04:07.040 --> 00:04:10.319
嗯，我有点不知道我的电话号码

00:04:10.319 --> 00:04:14.239
在这里是正确的，但我在此演示中看到了我尝试剖析10

00:04:14.239 --> 00:04:17.440
铬上的标签大约需要18个

00:04:17.440 --> 00:04:22.479
我的CPU负载的百分比呃，然后我尝试了使用的演示

00:04:22.479 --> 00:04:26.000
一个共享节点并带有4 40个选项卡

00:04:26.000 --> 00:04:30.800
如果您想知道大约2个CPU

00:04:30.800 --> 00:04:34.880
如何使用它或今天开始使用它？

00:04:34.880 --> 00:04:40.080
 npm，它是github igs ipfs repo的一部分

00:04:40.080 --> 00:04:44.080
有两部分，一个是客户端，另一个是服务器，因此客户端非常类似于

00:04:44.080 --> 00:04:49.360
http客户端如何工作，您可以产生一个worker

00:04:49.360 --> 00:04:53.759
与服务器呃，其中有js ipfs，然后您就可以

00:04:53.759 --> 00:04:59.040
通过消息端口连接到客户端，然后客户端实现

00:04:59.040 --> 00:05:03.759
ipfs api，因此您可以添加文件和读取文件并执行类似的操作

00:05:03.759 --> 00:05:07.280
在服务器端，您只需创建一个服务器

00:05:07.280 --> 00:05:12.880
并将其传递给js ipfs实例，并将其提供给所有客户端

00:05:12.880 --> 00:05:17.360
嗯，那边有很多补丁

00:05:17.360 --> 00:05:21.360
仍然在即将到来的管道中，这将减少一些开销

00:05:21.360 --> 00:05:25.280
当前执行的所有内容

00:05:25.280 --> 00:05:28.720
目前，所有这些工作都集中在跨服务器的共享节点上。

00:05:28.720 --> 00:05:32.160
相同的浏览器起源，让它正常工作

00:05:32.160 --> 00:05:34.240
跨越多个起源需要更多的工作

00:05:34.240 --> 00:05:39.120
所以这就是下一步

00:05:39.120 --> 00:05:42.800
确定了一些可能有意义的东西

00:05:42.800 --> 00:05:46.240
像ipld和ipfs网络这样的东西，

00:05:46.240 --> 00:05:50.320
现在叫它dag服务吧，因为那似乎是

00:05:50.320 --> 00:05:53.759
我们与之交谈的大多数用户正在使用的api子集

00:05:53.759 --> 00:05:58.960
CS4我想对所有帮助实现这一目标的人说谢谢

00:05:58.960 --> 00:06:04.319
既可以在ipl fs内部使用，也可以对不起协议实验室使用或在外部使用

00:06:04.319 --> 00:06:08.479
特别是三本关于纺织轨道和甩脂的书籍对

00:06:08.479 --> 00:06:14.880
提供反馈外观，并分享他们使用的方式，以便我们能够

00:06:14.880 --> 00:06:22.639
这样我们就可以为您校准工作

