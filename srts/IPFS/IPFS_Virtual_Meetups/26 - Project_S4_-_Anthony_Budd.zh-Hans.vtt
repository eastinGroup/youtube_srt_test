WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.600 --> 00:00:05.680
嗯，大家好，我叫安东尼鸟

00:00:05.680 --> 00:00:12.160
um s4的开发人员um我对我有点了解um我还没去过

00:00:12.160 --> 00:00:14.880
自从我离职以后就开始进行Web开发

00:00:14.880 --> 00:00:19.119
学校，我一直在做php node.js，视频直播

00:00:19.119 --> 00:00:21.760
嗯，我也做了很多工作

00:00:21.760 --> 00:00:24.640
wordpress在我的整个职业生涯中都做出了贡献，但是

00:00:24.640 --> 00:00:28.880
我倾向于不谈论太多，我是前苹果开发人员

00:00:28.880 --> 00:00:33.840
嗯，我还开发了一个名为vipfs的项目，您可能会也可能不会

00:00:33.840 --> 00:00:36.960
听说过它在um ipfs上做得很好

00:00:36.960 --> 00:00:41.200
Reddit um，是的，我是ida io的开发人员

00:00:41.200 --> 00:00:44.640
我有点想创建自己的aws um版本

00:00:44.640 --> 00:00:48.879
像纯粹的替代技术一样使用

00:00:48.879 --> 00:00:53.840
有点挑战，我经营一家名为Teleport的送货公司

00:00:53.840 --> 00:00:56.640
我现在马上要讲一下，因为um teleport真的是

00:00:56.640 --> 00:01:00.559
资助了um s4 um所以基本上我经营着一家快递公司

00:01:00.559 --> 00:01:03.920
嗯，在奥斯汀德克萨斯大学，我们如您所见，我们有一个

00:01:03.920 --> 00:01:06.640
少数有相当大的客户，基本上

00:01:06.640 --> 00:01:10.080
我从中产生的所有收入都是我的495，这是我的

00:01:10.080 --> 00:01:12.799
这就是我每天要做的事情，这确实使我能够

00:01:12.799 --> 00:01:18.400
首先制作s4和vip之类的项目，那里有个小插件，非常好，所以

00:01:18.400 --> 00:01:22.320
什么是s4 um s4设计为与100兼容

00:01:22.320 --> 00:01:27.680
s3对tor的存储访问和使用ipfs分发

00:01:27.680 --> 00:01:34.560
嗯，它与S3及其所有现有的SDK兼容，是100恩

00:01:34.560 --> 00:01:37.200
嗯，这是去中心化匿名的，它是

00:01:37.200 --> 00:01:43.680
显然是永久的，因为ipfs，所以我很快接触了该体系结构

00:01:43.680 --> 00:01:47.520
所以我设计s4 um的方式

00:01:47.520 --> 00:01:50.960
几种设计规格，嗯，我希望不要

00:01:50.960 --> 00:01:54.320
需要任何第三方或中介，这意味着

00:01:54.320 --> 00:01:57.759
使用典型的http域不在桌面上

00:01:57.759 --> 00:02:01.680
嗯，因为那将需要我们向第三方注册域名

00:02:01.680 --> 00:02:05.759
嗯，所以sotor在整个过程中都被大量使用

00:02:05.759 --> 00:02:11.360
um数据通过Tor进入s4服务器，可以通过以下方式完成

00:02:11.360 --> 00:02:15.280
仅由标准用户或您的代码提供的浏览器

00:02:15.280 --> 00:02:19.040
可以写可以写数据到我这一部分

00:02:19.040 --> 00:02:24.560
到s4服务器，然后在将数据写入服务器时

00:02:24.560 --> 00:02:27.760
您是否可以像s3中一样创建存储桶

00:02:27.760 --> 00:02:30.959
您的每个水桶都与一个水桶配对

00:02:30.959 --> 00:02:36.080
键入ipfs以及每次更新存储桶中的数据时

00:02:36.080 --> 00:02:39.599
呃，桶将使用该密钥发布

00:02:39.599 --> 00:02:42.640
这意味着您可以创建可以处理任何内容的地址

00:02:42.640 --> 00:02:47.200
使用这种类型的URL存储在您的s4服务器上

00:02:47.200 --> 00:02:50.879
应该是水桶的钥匙，那么这将是

00:02:50.879 --> 00:02:55.120
您存储在存储桶中的文件，所以我想一个很大的问题是

00:02:55.120 --> 00:02:59.040
问起来有点困难或复杂

00:02:59.040 --> 00:03:03.440
是的，所有这类促销活动都与此s4服务器进行通信

00:03:03.440 --> 00:03:08.400
语言，那么我们如何实现这一目标，这是通过sidecar容器实现的

00:03:08.400 --> 00:03:10.480
所以你在这里看到的这张幻灯片

00:03:10.480 --> 00:03:16.000
代表使用um s4的示例应用程序，因此，如果我们有一个应用程序

00:03:16.000 --> 00:03:19.120
我在这里有一个节点示例，我为它命名了我的应用

00:03:19.120 --> 00:03:22.480
我们有一个节点um应用程序，我们想存储数据

00:03:22.480 --> 00:03:26.799
嗯，我们必须在s4而不是s3上存储说图像um

00:03:26.799 --> 00:03:30.400
我们该怎么做，所以我们运行我们的两个容器

00:03:30.400 --> 00:03:35.840
我们的node.js uh容器和我们的s4客户端（充当小车）

00:03:35.840 --> 00:03:40.400
将代码存储在um内

00:03:40.400 --> 00:03:43.120
您一定要使用的节点应用程序

00:03:43.120 --> 00:03:44.879
能够在这里识别很多这样的代码

00:03:44.879 --> 00:03:49.760
我们导入了官方的awson aws sdk，甚至实例化了s3类

00:03:49.760 --> 00:03:56.000
其中，但请注意，此处的终点指向我们的本地s4客户端，

00:03:56.000 --> 00:04:00.480
您可以在这里看到这个容器吗？

00:04:00.480 --> 00:04:05.040
访问密钥和秘密uh秘密访问密钥，以及

00:04:05.040 --> 00:04:09.040
我们可以使用所有现有的um aws方法

00:04:09.040 --> 00:04:12.799
sdk完全为我们提供了没有其他修改的必要

00:04:12.799 --> 00:04:17.519
用过，但是当我把这个物体放进水桶中时，它会越过s4和

00:04:17.519 --> 00:04:20.959
然后发布到ipfs

00:04:22.320 --> 00:04:25.360
因此，在读取数据时，我们如何读取数据

00:04:25.360 --> 00:04:30.160
再次从s4 um开始，我对如何制作有一些说明

00:04:30.160 --> 00:04:33.360
这项工作嗯，就是我不想的事实

00:04:33.360 --> 00:04:36.880
有不想不想使用javascript的人

00:04:36.880 --> 00:04:40.160
um s4的优点在于，数据被请求通过

00:04:40.160 --> 00:04:42.960
http网关意味着如果您不想使用

00:04:42.960 --> 00:04:45.600
javascript，而您只想拥有一个普通图像标签

00:04:45.600 --> 00:04:49.199
您可以有一个普通图像标签，该图像将被加载

00:04:49.199 --> 00:04:54.080
使用公共网关在s4上运行，这也允许人类可读的文件路径

00:04:54.080 --> 00:04:58.080
嗯，这个存储桶，这个哈希仅引用存储桶

00:04:58.080 --> 00:05:03.120
因此，所有内容都是人类可读的，如您在此处看到的

00:05:03.680 --> 00:05:07.440
所以我在那儿说了很多，让我们尝试做一个现场演示

00:05:07.440 --> 00:05:11.360
实际创建一个s4服务器um，如果有人对以下内容感兴趣的话

00:05:11.360 --> 00:05:15.759
有了这个，您可以转到这个网址，在这里idea inc正斜杠s4和

00:05:15.759 --> 00:05:17.840
您可以按照它只需要四个

00:05:17.840 --> 00:05:24.639
恩命令实际启动服务器，让我们去吧

00:05:24.639 --> 00:05:28.560
因此，如果我们转到github，这里是s4 github存储库

00:05:28.560 --> 00:05:34.880
我只会在这里获取网址和我的临时目录，

00:05:34.880 --> 00:05:39.919
将要运行命令uh clean

00:05:40.240 --> 00:05:42.800
 s4

00:05:43.919 --> 00:05:49.520
然后我们将CD放入s4存储库，一旦您进入存储库，呃

00:05:49.520 --> 00:05:53.919
我们要做的第一件事是我们必须为我们的服务器创建一个洋葱地址

00:05:53.919 --> 00:05:56.720
必须有一个私钥，所以我们可以做到这一点

00:05:56.720 --> 00:05:59.759
在这里再次使用此命令，所有这些都在

00:05:59.759 --> 00:06:03.280
回购的自述文件，因此几乎可以复制并粘贴

00:06:03.280 --> 00:06:08.960
如果我们执行该命令，那么发生的大事就是洋葱

00:06:08.960 --> 00:06:13.440
现在在这里地址这个洋葱地址是引用或

00:06:13.440 --> 00:06:16.000
这是我们当地人喜欢的洋葱裙

00:06:16.000 --> 00:06:19.520
我现在将在docker中运行的s4服务器

00:06:19.520 --> 00:06:24.160
然后要启动项目，只需运行命令docker

00:06:24.160 --> 00:06:26.880
作曲家

00:06:29.199 --> 00:06:32.800
很棒，看起来一切都从这里开始

00:06:32.800 --> 00:06:40.160
所以我们在这里做了什么，我们现在已经完全在以下位置设置了s4服务器

00:06:40.160 --> 00:06:43.120
这四个命令就这么简单

00:06:43.120 --> 00:06:46.960
所以我给它一点启动时间，看起来好像tor已经启动了

00:06:46.960 --> 00:06:52.880
正确，所以如果我打开浏览器

00:06:57.759 --> 00:07:02.400
可能需要一秒钟，因为该域需要发布，并且诸如

00:07:02.400 --> 00:07:06.240
但大约五分钟后，该网址

00:07:06.240 --> 00:07:10.160
您刚创建的将成为工具浏览器的棋盘

00:07:10.319 --> 00:07:19.919
因此，请稍等片刻，让该负载

00:07:21.680 --> 00:07:24.800
嗯，这可能要花一秒钟，所以我们要做的就是继续其余的工作

00:07:24.800 --> 00:07:28.400
演示文稿的内容，所以让我们现在有

00:07:28.400 --> 00:07:31.840
这个s4服务器设置好了，或者现在它正在我的服务器上运行

00:07:31.840 --> 00:07:35.520
在我的笔记本电脑上，我们可以继续进行操作，并假设这是某台服务器，

00:07:35.520 --> 00:07:40.560
显然，在这个星球上的某个地方，实际的IP地址是未知的，因为

00:07:40.560 --> 00:07:44.080
它正在使用tor，所以我们的应用程序实际上如何

00:07:44.080 --> 00:07:49.039
写数据，所以我给一个简单的例子

00:07:49.840 --> 00:07:54.720
在s4存储库的根目录中有一个名为example的目录

00:07:54.720 --> 00:07:58.160
这个示例目录就是我在演示中刚刚给出的示例

00:07:58.160 --> 00:08:03.599
演示与官方AWS SDK一起使用的S4

00:08:04.160 --> 00:08:10.840
首先，让我们纳米，我们必须快速更新环境，

00:08:10.840 --> 00:08:13.840
给

00:08:14.080 --> 00:08:21.520
它是我们的s4地址，然后退出，然后运行命令docker compose

00:08:21.520 --> 00:08:27.840
减去d，我会弹出

00:08:28.639 --> 00:08:32.399
好，所以现在正在启动呃，那会是什么

00:08:32.399 --> 00:08:38.080
这就像一个可能在生产中编写ss的应用程序

00:08:38.839 --> 00:08:44.560
所以让我们实际测试一下，看看我们的数字是否

00:08:44.560 --> 00:08:46.880
我们可以

00:08:47.040 --> 00:08:50.399
呃，现在我们要在这里运行这段代码，希望我们能够

00:08:50.399 --> 00:08:55.040
在服务器上创建存储桶并将文件上传到该服务器，以便

00:08:55.040 --> 00:08:57.760
我将运行命令

00:08:57.839 --> 00:09:02.959
同样，所有这些命令都位于存储库um的自述文件中

00:09:02.959 --> 00:09:06.000
看起来我们已经成功创建了口袋，并且可以访问

00:09:06.000 --> 00:09:11.040
将文件上传到该存储桶中，所以这代表了我们可以

00:09:11.040 --> 00:09:13.760
将应用程序中的内容上传到s4

00:09:13.760 --> 00:09:17.440
现在，此pdf文件示例将pdf文件上传到

00:09:17.440 --> 00:09:21.600
希望现在可以进入s4

00:09:21.600 --> 00:09:28.309
通过ipfs，所以让我们看看这是否是[音乐]

00:09:34.839 --> 00:09:37.839
发生了

00:09:51.279 --> 00:09:57.040
在这里，我们开始吧，minio就像是um aws的开源版本

00:09:57.040 --> 00:10:00.480
s3 um都是api方法

00:10:00.480 --> 00:10:03.760
与s3兼容，所以我只想尝试登录

00:10:03.760 --> 00:10:06.800
现在，希望我们必须在那找到我们的文件

00:10:06.800 --> 00:10:10.000
然后我还向您展示了如何实际访问该文件，对不起

00:10:10.000 --> 00:10:19.839
超过ipfs，所以我们已经登录了

00:10:25.600 --> 00:10:33.839
谢谢你

00:10:38.160 --> 00:10:42.079
我们去了[音乐]

00:10:42.079 --> 00:10:45.760
我现在正在执行的操作相当于登录到f4服务器

00:10:45.760 --> 00:10:47.600
如您所见，这是示例

00:10:47.600 --> 00:10:53.440
我刚刚使用示例通过示例上传了um文件

00:10:53.440 --> 00:10:56.000
示例代码最明显的问题是我该怎么办

00:10:56.000 --> 00:11:01.040
通过ipfs访问此文件现在有滴水还有水桶

00:11:01.040 --> 00:11:07.279
没有发布称为系统的ipfs，并且在系统目录中所有

00:11:07.279 --> 00:11:12.079
这些文件的哈希值可在此文件中访问，因此

00:11:12.079 --> 00:11:15.680
这个这个哈希表示的是关键

00:11:15.680 --> 00:11:19.680
该存储桶是根据其含义发布的

00:11:19.680 --> 00:11:23.440
如果我去ipfs.io

00:11:26.839 --> 00:11:29.839
 ipns这显然不会立即加载

00:11:29.839 --> 00:11:32.640
因为嗯，因为要花一点时间

00:11:32.640 --> 00:11:35.519
实际上找到了那个桶，但是发生了一次

00:11:35.519 --> 00:11:38.880
之后，将这些存储段通过ipfs网络进行传播

00:11:38.880 --> 00:11:42.000
您将可以导航到该网址，也可以导航

00:11:42.000 --> 00:11:48.320
到正斜杠考试pull.ppf，然后将其加载

00:11:48.320 --> 00:11:53.920
然后通过ipfs网络上传文件um，这允许我们存储

00:11:53.920 --> 00:11:57.200
ipfs上的数据，而无需开发人员执行以下操作

00:11:57.200 --> 00:12:00.079
实际更改他们的代码嗯，我认为有很多很棒的功能

00:12:00.079 --> 00:12:03.920
目前在ips社区中提供产品，但我认为它的规模不大

00:12:03.920 --> 00:12:07.200
期望大型大型公司和

00:12:07.200 --> 00:12:12.000
开发团队要更改呃来更改他们的数量来更改他们的

00:12:12.000 --> 00:12:16.399
某种程度上适合ipfs的代码，这对我们来说更有意义

00:12:16.399 --> 00:12:20.000
进行ipfs并扩充任何必要的更改

00:12:20.000 --> 00:12:23.360
嗯，这就是我使用这种边车设法做到的

00:12:23.360 --> 00:12:25.680
容器系统，这使开发人员可以保留他们的

00:12:25.680 --> 00:12:30.560
现有代码，但实际上将数据写入后台的ipfs

00:12:30.560 --> 00:12:33.760
无需对其代码进行任何更改

00:12:33.760 --> 00:12:38.800
所以我今天几乎就是恐怖主义

00:12:38.800 --> 00:12:40.880
你

