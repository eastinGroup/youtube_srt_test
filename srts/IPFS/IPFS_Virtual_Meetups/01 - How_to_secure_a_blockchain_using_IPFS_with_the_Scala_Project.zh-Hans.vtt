WEBVTT
Kind: captions
Language: zh-Hans

00:00:09.280 --> 00:00:12.719
大家好，我是策划者

00:00:12.719 --> 00:00:16.400
显然不是我的真实姓名，嗯，我是一个应用程序

00:00:16.400 --> 00:00:21.199
我在scala的开发人员与hazam一起也是一名开发人员

00:00:21.199 --> 00:00:26.960
区块链开发人员和donovan都是scala的开发人员，我们非常

00:00:26.960 --> 00:00:31.439
很高兴与您今天一起介绍我们的项目以及我们如何

00:00:31.439 --> 00:00:36.480
在我们的生态系统中使用ipfs技术

00:00:36.880 --> 00:00:40.800
演讲将分为三个部分

00:00:40.800 --> 00:00:45.440
首先，多诺万将介绍我们的lib ipfs库

00:00:45.440 --> 00:00:52.079
允许我们在应用程序中使用ipfs，然后hazam将出现在

00:00:52.079 --> 00:00:56.239
我们计划如何使用ipfs的一种具体方式

00:00:56.239 --> 00:00:59.600
保护我们的区块链免受潜在攻击

00:00:59.600 --> 00:01:03.039
最后，我将介绍ipfs的其他一些用户

00:01:03.039 --> 00:01:05.920
在我们的项目中

00:01:06.799 --> 00:01:10.080
但首先让我介绍scala和

00:01:10.080 --> 00:01:16.159
我们是我们现在所做的，我们的首要目标是将隐私作为

00:01:16.159 --> 00:01:21.840
我们这样做的首要任务是为什么我们在

00:01:21.840 --> 00:01:24.400
第一名并提供打包区块链

00:01:24.400 --> 00:01:28.560
不可追踪的付款不可链接的交易和区块链分析

00:01:28.560 --> 00:01:34.799
抵制我们的愿景是为每个人分配财富

00:01:34.799 --> 00:01:38.479
我们想要成为人们的硬币和

00:01:38.479 --> 00:01:42.240
为了实现这一目标，我们专注于实施以下解决方案：

00:01:42.240 --> 00:01:48.000
移动友好且非常节能

00:01:48.000 --> 00:01:52.240
世界上大约有40亿台移动设备，我们希望

00:01:52.240 --> 00:01:56.399
确保我们的生态系统将这一点考虑在内

00:01:56.399 --> 00:02:00.560
也需要很多时间来改善用户体验

00:02:00.560 --> 00:02:05.040
这样任何人都可以轻松使用我们的应用程序

00:02:05.040 --> 00:02:12.319
最后，我们的目标之一就是以一种明显的方式解决现实世界中的问题

00:02:12.319 --> 00:02:16.640
对于该项目在经济上可行并维持我们的

00:02:16.640 --> 00:02:19.040
生长

00:02:19.840 --> 00:02:28.560
嗯，所以现在我要离开，我要让多诺万继续下一部分

00:02:28.959 --> 00:02:32.720
是的，谢谢你，这是我们项目的目标之一

00:02:32.720 --> 00:02:36.000
一直是像

00:02:36.000 --> 00:02:40.080
我们可以做到，我们永远都不想进入我们所处的位置

00:02:40.080 --> 00:02:43.200
所谓的链中央机构，我们

00:02:43.200 --> 00:02:47.040
可以操纵事物，当我们开始研究

00:02:47.040 --> 00:02:52.239
保护我们的区块链，我们知道ipfs确实可以实现

00:02:52.239 --> 00:02:55.840
凭着这一愿景，我相信这使我们成为

00:02:55.840 --> 00:02:59.200
使用ipfs的第一个项目之一

00:02:59.200 --> 00:03:03.360
以某种方式可以真正影响到

00:03:03.360 --> 00:03:06.959
区块链以aizam将在其中解释的方式

00:03:06.959 --> 00:03:10.720
在下一节中，我们项目的另一个目标

00:03:10.720 --> 00:03:14.239
就像刚才提到的那样是为了易于使用

00:03:14.239 --> 00:03:18.000
我们希望使任何人都能尽可能简单地参与其中，

00:03:18.000 --> 00:03:22.000
因此，我们知道我们的ipfs集成

00:03:22.000 --> 00:03:27.280
需要成为我们核心软件包的一部分，并且不需要任何其他依赖项

00:03:27.280 --> 00:03:30.879
要安装或进行任何其他下载，以及

00:03:30.879 --> 00:03:35.280
在各地进行注册，因此请牢记

00:03:35.280 --> 00:03:41.200
我们探讨了我们的选择，我们的主要菱形可以在服务器上的客户端计算机上运行

00:03:41.200 --> 00:03:45.599
与内置在cnc plus plus中的交易所，但是

00:03:45.599 --> 00:03:49.440
ipfs是用go编写的，当时我们

00:03:49.440 --> 00:03:52.720
开始看这个大概一年多以前了

00:03:52.720 --> 00:03:56.480
现在没有实现可使用

00:03:56.480 --> 00:04:01.040
直接从c plus plus获得的ipfs，而无需独立运行

00:04:01.040 --> 00:04:05.760
ipfs运行并使用http api

00:04:05.760 --> 00:04:11.519
所以go的好处之一显然是您可以链接go

00:04:11.519 --> 00:04:16.000
库添加到C加代码中，这使其真正成为

00:04:16.000 --> 00:04:21.120
我们采取ipfs并将其拉入我们主要产品的可能性

00:04:21.120 --> 00:04:25.120
守护程序，然后从那里我们称之为lib ipfs

00:04:25.120 --> 00:04:29.840
诞生了，我们与ipfs的最初集成实际上是

00:04:29.840 --> 00:04:33.520
如果我可以的话，那是相当低的水平

00:04:33.520 --> 00:04:37.520
我们的库将设置初始化并从中运行ipfs

00:04:37.520 --> 00:04:43.440
在我们自己的代码中，我的意思是，我们使用了

00:04:43.440 --> 00:04:47.840
您可以在标准ipfas中找到很多启动逻辑

00:04:47.840 --> 00:04:52.320
守护程序本身，我们在我们的库中运行了它

00:04:52.320 --> 00:04:56.560
最棒的是，它使我们可以进行很大程度的控制

00:04:56.560 --> 00:05:00.000
我们从什么开始和不从什么开始

00:05:00.000 --> 00:05:04.560
我们一开始就禁用了http api，因为我们不需要它

00:05:04.560 --> 00:05:08.080
另一个原因是加密货币交换

00:05:08.080 --> 00:05:13.039
通常不需要核心网络工具以外的任何东西，因为它们

00:05:13.039 --> 00:05:17.680
不需要额外的开销，尤其是那些实际上没有的较小的交易所

00:05:17.680 --> 00:05:23.280
一种平衡的设置来操作这些链

00:05:23.280 --> 00:05:28.800
因此，在该级别上进行集成的另一个很棒的事情是，我们

00:05:28.800 --> 00:05:32.960
可以通过包装将不同的ipfs功能直接暴露给我们的守护程序

00:05:32.960 --> 00:05:36.880
简单的c plus通话功能

00:05:36.880 --> 00:05:43.680
该测试的第一个版本是在第四专业中完成的

00:05:43.680 --> 00:05:46.639
我们的软件修订版大概是

00:05:46.639 --> 00:05:51.440
一年半以前，它获取了一些种子节点

00:05:51.440 --> 00:05:55.039
以及需要启动的一些核心网络数据

00:05:55.039 --> 00:06:00.160
从ipfs升级，令我们惊讶的是几乎没有问题

00:06:00.160 --> 00:06:04.400
除了一些运行非常严格的用户

00:06:04.400 --> 00:06:06.960
网络设置中，其中一些呼叫被阻止，但

00:06:06.960 --> 00:06:10.880
除此之外，它真的很好用

00:06:10.880 --> 00:06:14.000
快进几个月后，我们回顾了

00:06:14.000 --> 00:06:18.479
我们的整合，我们发现依赖管理

00:06:18.479 --> 00:06:22.080
从长远来看将是非常棘手的

00:06:22.080 --> 00:06:27.360
那段时间去的那个尴尬的空间是没有真正拥有

00:06:27.360 --> 00:06:32.000
像现在这样的官方依赖项管理系统，与go模块一起使用

00:06:32.000 --> 00:06:36.080
一些项目正在使用govender，我相信ipfs拥有gx

00:06:36.080 --> 00:06:39.840
其他一些人无话可说

00:06:39.840 --> 00:06:43.840
很明显，因为我们的集成水平很低

00:06:43.840 --> 00:06:48.479
ipfa分数的任何变化都会不成比例地影响我们

00:06:48.479 --> 00:06:52.560
整合显然需要花费时间

00:06:52.560 --> 00:06:57.280
主要焦点是加密货币，因此要克服这一点

00:06:57.280 --> 00:07:01.759
我们最近采取了一些我们仍然需要的更高层次的方法

00:07:01.759 --> 00:07:06.080
我们仍然需要围绕ipfs进行go包装，以便我们可以从c开始创建菱形

00:07:06.080 --> 00:07:09.360
加号加号，但没有完成所有工作

00:07:09.360 --> 00:07:12.720
初始化网络并进行连接，所有这些

00:07:12.720 --> 00:07:20.240
我们打包一个已编译的ipfs二进制文件，并将其嵌入到我们的库中

00:07:20.240 --> 00:07:24.800
使用名为escape或esc的工具

00:07:24.800 --> 00:07:29.039
守护程序启动时，它将调用函数以提取该程序包

00:07:29.039 --> 00:07:32.720
启动ipfs守护程序，我们可以进行通信

00:07:32.720 --> 00:07:37.039
然后使用效果很好的http api

00:07:37.039 --> 00:07:41.520
再说一次这种方法的好处是我们可以在命令行中添加命令行标志

00:07:41.520 --> 00:07:47.840
加上代码以禁用该功能进行交流，从而保持

00:07:47.840 --> 00:07:50.960
他们很高兴，我们仍然达到了没有

00:07:50.960 --> 00:07:54.000
用户将要安装的其他软件

00:07:54.000 --> 00:07:58.000
我们从中得到一个，这样我们就不必担心

00:07:58.000 --> 00:08:01.840
依赖关系，我们就可以利用所有新的ipfs

00:08:01.840 --> 00:08:06.560
通过将二进制文件重新打包到我们的程序中就可以使用它的功能

00:08:06.560 --> 00:08:10.560
代码，这是对我们如何进行概述

00:08:10.560 --> 00:08:14.879
在较低的级别上执行此操作，我现在将转至阴霾，这将

00:08:14.879 --> 00:08:17.599
解释所有这些如何真正融合在一起

00:08:17.599 --> 00:08:23.280
确保我们的区块链安全您好，每个人都希望您一切都好，我要

00:08:23.280 --> 00:08:27.360
首先提出一个问题，嗯，我们为什么需要

00:08:27.360 --> 00:08:31.680
区块链的工业安全性是否不应该与生俱来

00:08:31.680 --> 00:08:36.000
无需免费的第三方应用程序即可安全

00:08:36.000 --> 00:08:40.240
我会说这是一个非常棘手的问题

00:08:40.240 --> 00:08:43.680
诸如比特币之类的东西不是必需的

00:08:43.680 --> 00:08:46.800
因为他们有很多矿工和模式以及所有这些东西

00:08:46.800 --> 00:08:50.080
抵御大多数常见的攻击

00:08:50.080 --> 00:08:54.160
我们的问题很利基，我们的解决方案也很利基

00:08:54.160 --> 00:08:57.440
主要适用于不具有相同水平的项目

00:08:57.440 --> 00:09:02.160
诸如比特币之类的去中心化，然后再跳进去

00:09:02.160 --> 00:09:05.519
嗯，跳进他们的形象是怎么回事，让我们

00:09:05.519 --> 00:09:08.399
看一下针对区块链的一些常见的网络级攻击

00:09:08.399 --> 00:09:12.720
特别的分布式拒绝服务攻击

00:09:12.720 --> 00:09:15.680
这些天在区块链上它们很常见

00:09:15.680 --> 00:09:17.600
因为如果你是一个小项目，特别是

00:09:17.600 --> 00:09:20.959
没有很多主持链的玩家，很容易带走

00:09:20.959 --> 00:09:23.760
那些会造成很大破坏的好东西

00:09:23.760 --> 00:09:27.120
我会说的下一种攻击是网络攻击

00:09:27.120 --> 00:09:31.040
最近，monero对一堆假装成的节点进行了这种非常具体的攻击

00:09:31.040 --> 00:09:33.839
说实话，并试图找到某些人的起源

00:09:33.839 --> 00:09:36.959
交易非常复杂，最终可以

00:09:36.959 --> 00:09:41.920
传递许多问题，现在转移到主要攻击类型

00:09:41.920 --> 00:09:45.760
导致最多的问题

00:09:45.760 --> 00:09:50.560
行业是51％，如果不诚实的领域足够

00:09:50.560 --> 00:09:52.880
计算出超买了大部分

00:09:52.880 --> 00:09:54.800
网络将在这里荣耀

00:09:54.800 --> 00:09:59.120
我基本上基本上是多次花相同数量的点

00:09:59.120 --> 00:10:01.600
你们之前都听说过这个问题

00:10:01.600 --> 00:10:06.079
可能是毁灭性的，特别是对于中小型项目，

00:10:06.079 --> 00:10:09.519
可能会给交易所造成大量损失

00:10:09.519 --> 00:10:13.200
并且有很多现有的方法可以保护

00:10:13.200 --> 00:10:18.480
区块链抵御攻击，特别是51次攻击和呃

00:10:20.240 --> 00:10:24.720
嗯，是市场上最好的硬币之一，很多硬币都在积极使用

00:10:24.720 --> 00:10:30.480
Komodo的延迟工作证明，实际上也很聪明

00:10:30.480 --> 00:10:33.200
使用呃比特币区块链来存储任意

00:10:33.200 --> 00:10:37.519
在这种情况下，数据将阻止明天要尝试使用的网络的哈希

00:10:37.519 --> 00:10:40.880
保护，这被认为是

00:10:40.880 --> 00:10:43.519
目前针对许多项目的解决方案

00:10:43.519 --> 00:10:47.680
特别受欢迎的忍者广场火变

00:10:47.680 --> 00:10:51.040
用于专业理论和也很受欢迎的另一种解决方案

00:10:51.040 --> 00:10:53.920
最近就像眼镜检查站一样

00:10:53.920 --> 00:10:59.040
基本上他们只是不允许组织的任何过去

00:10:59.040 --> 00:11:02.399
过去的信封实际上可能会导致很多

00:11:02.399 --> 00:11:06.959
就像他们已经想到的那样发出问题，但是有

00:11:06.959 --> 00:11:09.600
没有其他选择

00:11:12.320 --> 00:11:15.839
所以现在我们看了一些现有情况，让我们来

00:11:15.839 --> 00:11:20.640
看看我们称为dr的解决方案，从本质上讲，它的工作原理与uh非常相似

00:11:20.640 --> 00:11:23.839
kmd的创意作品，而不是使用

00:11:23.839 --> 00:11:28.800
比特币区块链可以存储我们使用ipfs的机会，因为它便宜很多

00:11:28.800 --> 00:11:32.079
即使比特币有很多

00:11:32.079 --> 00:11:34.880
它背后的计算和安全性仍然

00:11:34.880 --> 00:11:38.959
容易受到51次攻击，所以如果有人有很多攻击

00:11:38.959 --> 00:11:42.880
计算他们可以战胜链条，他们

00:11:46.480 --> 00:11:51.360
某些始终采用块缓存的节点

00:11:51.360 --> 00:11:55.680
网络中的区块，然后将这些区块散列与

00:11:55.680 --> 00:11:59.920
将高度和其他一些参数放到ipfs上，然后再ipip上

00:11:59.920 --> 00:12:05.519
以便客户端区块链恶魔可以解决它并获取检查点和

00:12:05.519 --> 00:12:10.800
然后将其添加到其本地数据库中，然后我们选择这些负载的方式

00:12:10.800 --> 00:12:14.320
维护者每年举行一次选举，这使人们

00:12:14.320 --> 00:12:17.839
有机会成为这个二级网络的一部分

00:12:17.839 --> 00:12:20.880
并分散了这些注释所具有的某些功能，因为

00:12:20.880 --> 00:12:25.920
他们有很多力量，他们也受到代币的激励

00:12:25.920 --> 00:12:30.079
来自网络，因此他们没有动机进行网络攻击

00:12:30.079 --> 00:12:33.200
然后大约25％的区块链现在

00:12:33.200 --> 00:12:38.399
去我们网络上的位置，所以本质上这是一个解决方案

00:12:38.399 --> 00:12:41.920
非常非常简单的术语，嗯，我实际上写了一个简单的

00:12:41.920 --> 00:12:46.480
Web应用程序，以显示此操作的效果，只是旁注，呃，我们现在在

00:12:46.480 --> 00:12:49.680
希望在未来的公共数据中使用私有数据

00:12:49.680 --> 00:12:53.839
几个星期和

00:13:00.720 --> 00:13:04.800
是的，这是我一直在谈论的事情，基本上，你可以看到三个

00:13:04.800 --> 00:13:08.880
它们在这里的节点正在从标量中提取块哈希

00:13:08.880 --> 00:13:12.720
现在将区块链添加到ipfs中，以便

00:13:12.720 --> 00:13:16.320
网络中的其他节点将从此处影响这些哈希并将其添加为

00:13:16.320 --> 00:13:20.160
永久封锁，因此不会有任何组织

00:13:20.160 --> 00:13:24.000
过去的世界，这很酷，嗯，我会

00:13:24.000 --> 00:13:28.160
说最新的更新，它的确是非常快，我的意思是

00:13:28.160 --> 00:13:33.120
ipns解析度过去最多只需要三分钟

00:13:33.120 --> 00:13:36.720
最多最多10到15秒，这真的很酷，因为您

00:13:36.720 --> 00:13:40.959
知道它避免了很多ddos路径以及所有这些东西，所以是的

00:13:40.959 --> 00:13:45.040
我将控制权交还给策划者

00:13:45.040 --> 00:13:50.560
感谢您提供的机会，希望大家度过愉快的一天

00:13:50.800 --> 00:13:58.320
好的，谢谢你，嗯，所以我现在介绍一下

00:13:58.320 --> 00:14:02.720
嗯，我们的演讲结束了其他一些ips用户

00:14:02.720 --> 00:14:06.160
我们项目中的ipfs

00:14:06.320 --> 00:14:10.639
首先，我们的官方网站托管在ipfs上

00:14:10.639 --> 00:14:16.000
这使得分散式可扩展性和维护成本更低

00:14:16.000 --> 00:14:19.120
您可以在scalabproject.io上访问它，如果您

00:14:19.120 --> 00:14:24.160
如果您想了解有关我们建设的更多信息

00:14:24.160 --> 00:14:28.000
此外，我们还开发了工作量证明算法

00:14:28.000 --> 00:14:31.680
这使得在移动设备上进行挖掘成为可能

00:14:31.680 --> 00:14:36.880
所以我们最近发布了scala矿机

00:14:36.880 --> 00:14:42.720
允许在该应用程序提供的任何Android设备上进行挖掘的应用程序

00:14:42.720 --> 00:14:46.639
详细的仪表板以跟踪所有采矿活动

00:14:46.639 --> 00:14:50.959
以及两层温度控制以保护您的设备免受

00:14:50.959 --> 00:14:56.000
过热我们使用ipns dns链接

00:14:56.000 --> 00:15:01.040
使用ipfs网关获取矿池列表的地址

00:15:01.040 --> 00:15:05.199
确保最大程度的服务可用性

00:15:05.199 --> 00:15:11.040
您可以从mobileminer.scalaproject.io下载该应用程序

00:15:11.040 --> 00:15:14.240
最后，我们目前正在研究幻影

00:15:14.240 --> 00:15:17.519
嗯，正在开发中，这是一个内容

00:15:17.519 --> 00:15:22.320
分发分布式内容分发网络CDN

00:15:22.320 --> 00:15:27.519
您好，我们可以为我们的用户提供安全且

00:15:27.519 --> 00:15:31.040
利用我们的ipfs进行分散式文件托管

00:15:31.040 --> 00:15:36.560
公证节点，显然是我们的移动生态系统

00:15:36.560 --> 00:15:40.160
所以，如果您有任何问题，就可以在scala上使用

00:15:40.160 --> 00:15:43.680
见面会结束时随时问他们

00:15:43.680 --> 00:15:52.480
谢谢大家

