WEBVTT
Kind: captions
Language: zh-Hans

00:00:08.720 --> 00:00:12.880
是的，谢谢你让我，是的，我想谈谈高

00:00:12.880 --> 00:00:17.600
保真网络归档并快速演示一些工具

00:00:17.600 --> 00:00:22.240
那我一直在努力，所以我会我们继续前进，并且

00:00:22.240 --> 00:00:26.640
开始吧，所以我想谈谈

00:00:26.640 --> 00:00:30.160
所以我从事一个叫做网络录像机的项目，呃

00:00:30.160 --> 00:00:34.079
网络录像机的想法是

00:00:34.079 --> 00:00:38.640
呃，座右铭是所有网站的存档，所以这个主意是

00:00:38.640 --> 00:00:44.000
允许任何人创建与您在浏览器中看到的完全一样的Web存档

00:00:44.000 --> 00:00:50.000
并以最高保真度将其存档嗯，等等，只是非常简短

00:00:50.000 --> 00:00:52.079
网络录像机的目标是什么

00:00:52.079 --> 00:00:55.520
是的，基本上是专注于

00:00:55.520 --> 00:01:01.440
尽可能精确地捕获和重播以及存档内容

00:01:01.440 --> 00:01:04.559
可能所有工具都是完全开源的

00:01:04.559 --> 00:01:07.600
当然，另一个主要目标是

00:01:07.600 --> 00:01:13.600
通过分散式技术实现网络存档更易访问

00:01:13.600 --> 00:01:19.680
恩，所以恩，某种开始

00:01:19.680 --> 00:01:24.560
Web归档以及实际保存页面并稍后查看它是什么意思

00:01:24.560 --> 00:01:28.320
所以您可能会认为

00:01:28.320 --> 00:01:31.920
一些从呃开始的明显方法，包括

00:01:31.920 --> 00:01:38.640
嗯，例如浏览器将页面另存为呃，所以每个浏览器都有该页面，您可以

00:01:38.640 --> 00:01:43.920
转到页面，然后尝试保存页面

00:01:43.920 --> 00:01:47.520
嗯，如果您实际上是在任何页面上执行此操作

00:01:47.520 --> 00:01:52.159
那不是呃，大部分只是带有html的静态文档

00:01:52.159 --> 00:01:56.240
嗯，您很快就会发现，您实际保存的内容通常不起作用

00:01:56.240 --> 00:01:59.600
很好，当您尝试将其加载回去时

00:01:59.600 --> 00:02:04.560
一部分原因是它不会保存呃

00:02:04.960 --> 00:02:08.800
它不会节省使您达到这一点的网络流量

00:02:08.800 --> 00:02:12.959
保存静态快照，但不保存任何状态，并且

00:02:12.959 --> 00:02:18.160
javascript，通常是现代网页，

00:02:18.160 --> 00:02:21.920
真的很复杂的应用程序并没有真正起作用

00:02:21.920 --> 00:02:24.560
从本地文件加载时

00:02:24.560 --> 00:02:29.520
系统另一种经常尝试的方法是

00:02:29.520 --> 00:02:32.720
有点简单的爬行和刮擦你

00:02:32.720 --> 00:02:38.080
可以实际使用wget，您可以将其指向某个网站

00:02:38.080 --> 00:02:42.400
并检索该html，然后提取所有链接

00:02:42.400 --> 00:02:46.400
它会递归地重复，但是再次没有

00:02:46.400 --> 00:02:53.040
没有JavaScript运行呃，你会发现，你会得到

00:02:53.040 --> 00:02:56.239
站点中的静态资产，但已加载的任何内容

00:02:56.239 --> 00:02:59.040
动态地通过加载的任何东西

00:02:59.040 --> 00:03:05.920
javascript通常无法正常运行，因此这些有点

00:03:05.920 --> 00:03:09.519
我称之为低保真度的网络归档方法

00:03:09.519 --> 00:03:14.400
高保真度的网络归档正试图将您的档案完全存档

00:03:14.400 --> 00:03:19.840
在浏览器中看到和听到并执行操作，本质上是捕获

00:03:19.840 --> 00:03:24.720
网站互动体验，同时保持网站互动性，因此

00:03:24.720 --> 00:03:28.560
由于现代网站仍然由

00:03:28.560 --> 00:03:32.080
基本上是一种HTTP网络请求

00:03:32.080 --> 00:03:36.000
我们试图捕捉什么

00:03:36.000 --> 00:03:43.840
例如，如果我们看着一个呃，我会

00:03:44.000 --> 00:03:47.360
因此，如果我们看一个像Twitter这样的网站

00:03:47.360 --> 00:03:53.120
嗯，那是非常动态的呃，你知道如果你看着

00:03:53.120 --> 00:03:58.560
例如开发工具，我们会在加载uh时看到

00:03:58.560 --> 00:04:02.000
推特呃，尽管它就是所有正在加载的东西

00:04:02.000 --> 00:04:06.720
被送达呃，你实际上可以看到那种

00:04:06.720 --> 00:04:09.840
网络请求来自devtools等

00:04:09.840 --> 00:04:14.159
嗯，浏览器已经明显具有此功能，以便

00:04:14.159 --> 00:04:18.799
创建页面，如果我们能够捕获所有这些网络流量怎么办

00:04:18.799 --> 00:04:23.040
然后稍后再创建它，基本上就是这个想法

00:04:23.040 --> 00:04:31.280
拥有高保真度的网络归档功能，为此，我们拥有一个浏览器扩展程序

00:04:31.280 --> 00:04:35.759
嗯，它在存档网页上可用，因此很容易记住，您可以

00:04:35.759 --> 00:04:41.120
如果您使用的是

00:04:41.120 --> 00:04:45.120
基于Chrome的浏览器，它将带您进入chrome网站商店

00:04:45.120 --> 00:04:48.720
您也可以将其下载为桌面应用

00:04:48.720 --> 00:04:55.280
并以这种方式运行，因此此扩展程序的作用是

00:04:55.280 --> 00:04:58.400
本质上存档正在加载的确切网络流量

00:04:58.400 --> 00:05:03.520
浏览器，所以在我展示之前

00:05:03.520 --> 00:05:11.680
嗯，我很快就会掩盖的，所以

00:05:11.680 --> 00:05:14.800
它的工作方式是将

00:05:14.800 --> 00:05:18.639
通过uh chrome调试协议的所有流量

00:05:18.639 --> 00:05:22.880
嗯，这也是devtools所使用的，它将数据存储在浏览器中

00:05:22.880 --> 00:05:26.560
indexeddb，然后它可以将该数据序列化为

00:05:26.560 --> 00:05:29.440
格式，然后变成文件格式

00:05:29.440 --> 00:05:32.160
可下载或可以真正存储的格式

00:05:32.160 --> 00:05:35.520
包括ipfs在内的任何地方

00:05:36.840 --> 00:05:40.000
以及存储后可以做什么

00:05:40.000 --> 00:05:44.960
那数据当然是要重播它们，然后重播

00:05:44.960 --> 00:05:48.720
网站实际上要比实际捕获要难得多

00:05:48.720 --> 00:05:52.400
重写URL，你必须模仿呃

00:05:52.400 --> 00:05:56.479
真的是javascript环境，这基本上是

00:05:56.479 --> 00:06:00.080
基本上是一个微型呃一个小型的回溯机，

00:06:00.080 --> 00:06:03.600
完全在您的浏览器中运行，因此您没有时间涵盖所有内容

00:06:03.600 --> 00:06:08.319
嗯，这是这个背后的想法

00:06:08.319 --> 00:06:16.319
嗯，嗯，我将继续进行快速演示嗯，

00:06:16.720 --> 00:06:20.000
所以说我在这里的推特页面上，我有这个

00:06:20.000 --> 00:06:23.680
安装了扩展程序，所以我可以去呃

00:06:23.680 --> 00:06:31.919
我可以创建，我将在此处创建一个新的演示，即demo2

00:06:31.919 --> 00:06:38.000
我将点击“开始”，您会看到这个呃尺寸计数器

00:06:38.000 --> 00:06:42.479
这样实际上就是所有网络流量中的全部

00:06:42.479 --> 00:06:46.800
在devtools中看到被存档到浏览器中，等等

00:06:46.800 --> 00:06:51.520
随着更多的东西在这个推特页面上加载

00:06:51.520 --> 00:07:00.560
您会看到这个尺寸计数器上升，而当呃

00:07:00.560 --> 00:07:03.599
基本上，扩展名告诉您

00:07:03.599 --> 00:07:06.800
如果正在加载更多请求或已完成

00:07:06.800 --> 00:07:10.319
所以当它像这样的绿色时，那就意味着那是呃

00:07:10.319 --> 00:07:13.520
它不再加载其他任何东西，所以我可以

00:07:13.520 --> 00:07:17.520
向下滚动，然后它将开始加载其他内容和大小

00:07:17.520 --> 00:07:22.080
计数器会上升，嗯，因为它正在使用调试

00:07:22.080 --> 00:07:25.280
协议，它告诉我，存档网页正在调试

00:07:25.280 --> 00:07:32.000
浏览器这是一种铬，基于铬的呃

00:07:32.000 --> 00:07:35.599
安全设置，因此它始终存在

00:07:35.599 --> 00:07:39.599
嗯，我也可以点击另一页，假设我可以点击

00:07:39.599 --> 00:07:45.680
网路记录器的首页，然后也会将该页面归档为

00:07:45.680 --> 00:07:50.319
嗯，所以可以说我已经完成了归档，我可以

00:07:50.319 --> 00:07:55.840
单击停止，然后我可以去浏览档案，这向我展示了两个

00:07:55.840 --> 00:08:00.800
我刚刚存档的页面和

00:08:01.759 --> 00:08:10.319
然后，我可以单击每个按钮，现在我正在加载twitter.com

00:08:10.400 --> 00:08:14.400
完全来自存储在浏览器中的网络请求

00:08:14.400 --> 00:08:20.400
我基本上可以再说一次，存档的正是

00:08:20.400 --> 00:08:23.199
加载了什么，所以我可以向下滚动到我

00:08:23.199 --> 00:08:27.840
在我不让我做之前

00:08:28.400 --> 00:08:31.599
它可能会在某个时候停止，因为我只走了那么远

00:08:31.599 --> 00:08:39.519
我也可以点击这个网站，哦，好吧，那可能没有用

00:08:39.519 --> 00:08:42.560
因为有重定向，但我也可以单击它

00:08:42.560 --> 00:08:46.320
像这样并以这种方式加载主页

00:08:46.320 --> 00:08:50.320
因此，您也注意到，当我查看此页面时

00:08:50.320 --> 00:08:59.240
我以自己的身份登录，所以这是我的观点

00:08:59.240 --> 00:09:02.480
twitter.comrobacore.io只是一个网络记录器的Twitter页面，但是

00:09:02.480 --> 00:09:06.839
它以我的身份登录，所以呃，这是

00:09:06.839 --> 00:09:12.320
网络，如果其他人转到此网址

00:09:12.320 --> 00:09:16.080
他们会看到一些不同的东西，因为它不会以他们的身份登录，或者

00:09:16.080 --> 00:09:20.480
它不会以我的身份登录，所以

00:09:20.959 --> 00:09:24.080
此扩展程序确实可以让您准确地存档您在

00:09:24.080 --> 00:09:26.880
浏览器以及您自己独特的视图

00:09:26.880 --> 00:09:31.279
当然是大多数社交媒体网站或许多社交网站使用的网络

00:09:31.279 --> 00:09:37.440
每个人的网站都是完全不同的

00:09:37.440 --> 00:09:44.000
嗯，所以我们还有的是共享选项，这是

00:09:44.000 --> 00:09:48.959
我可以实际去哪儿，然后单击“开始”

00:09:48.959 --> 00:09:54.480
分享，现在

00:09:54.480 --> 00:10:00.560
这个档案已经写到ipfs了，我会介绍那个，我可以

00:10:00.560 --> 00:10:04.800
其实我为什么不继续

00:10:04.800 --> 00:10:11.680
嗯，将链接粘贴到聊天室中，这样可能会花费很多时间

00:10:11.680 --> 00:10:16.160
花一点时间，所以我就继续吧

00:10:16.320 --> 00:10:19.839
让我们看看这里

00:10:21.440 --> 00:10:25.440
我将停止分享一秒钟并粘贴此链接

00:10:25.440 --> 00:10:29.600
可能要花点时间

00:10:29.760 --> 00:10:33.839
加载，与此同时，我将继续进行介绍

00:10:36.000 --> 00:10:40.399
这里发生了什么，所以再次的想法是

00:10:40.399 --> 00:10:44.399
您可以与他人分享您对网络的独特看法

00:10:44.399 --> 00:10:48.640
等等

00:10:50.640 --> 00:10:54.079
那么如何将这些数据实际序列化到ipfs

00:10:54.079 --> 00:10:58.160
嗯，我们有一个叫做蜡质的格式，代表

00:10:58.160 --> 00:11:02.880
Web存档集合已压缩，它是基于zip的格式

00:11:02.880 --> 00:11:06.959
在它里面，它存储数据的另一种格式叫做work

00:11:06.959 --> 00:11:10.160
这是互联网档案库创建的标准格式

00:11:10.160 --> 00:11:16.800
它也将原始索引呃存储到数据中，所以我基本上有

00:11:16.800 --> 00:11:20.160
http请求赞助商流量和索引以查找该流量

00:11:20.160 --> 00:11:24.880
还有页面列表和清单

00:11:24.880 --> 00:11:28.480
包含所有文件和此格式的关键属性

00:11:28.480 --> 00:11:32.959
是因为它是一个zip文件，所以可以随机访问

00:11:32.959 --> 00:11:39.600
所以，这个想法是，即使您的档案很大

00:11:39.600 --> 00:11:43.040
您不必一次全部加载所有内容，这很关键

00:11:43.040 --> 00:11:47.600
这项工作的要求，所以实际写的是什么

00:11:47.600 --> 00:11:51.200
到idpfs呃，写的实际上是四个

00:11:51.200 --> 00:11:59.519
文件，索引，呃，服务工作者sw.js

00:11:59.519 --> 00:12:03.279
和一个ui文件ui.js，然后是实际的存档

00:12:03.279 --> 00:12:10.959
该蜡质格式还作为multihash的一部分存储在其中，并且

00:12:10.959 --> 00:12:13.680
所以我在那分享的是

00:12:13.680 --> 00:12:17.920
频道基本上是指向刚刚创建的multihash的链接

00:12:17.920 --> 00:12:22.800
直接在浏览器中，呃，想法是，所以我

00:12:22.800 --> 00:12:28.800
共享了指向http网关um的链接

00:12:28.800 --> 00:12:33.279
那是一种加载数据的方法，实际上

00:12:33.279 --> 00:12:37.360
多种方式

00:12:37.440 --> 00:12:43.120
共享选项包括在内，这基本上是

00:12:43.120 --> 00:12:48.240
扩展名，所以它基本上可以让您

00:12:48.240 --> 00:12:51.680
得到刚刚共享的multihash

00:12:51.680 --> 00:12:58.560
通过另一个网站的重播网页获取可共享的URL

00:12:58.560 --> 00:13:04.079
托管的文件，然后将使用jsipfs加载该哈希

00:13:04.079 --> 00:13:07.360
或者你可以只获得一个https网关链接

00:13:07.360 --> 00:13:11.279
也许是我说的最兼容的，但不一定是最快的

00:13:11.279 --> 00:13:17.200
嗯，在这里，嗯，最重要的是状态，就像你可能

00:13:17.200 --> 00:13:22.480
注意到我使用的是勇敢的浏览器，其原因是勇敢的

00:13:22.480 --> 00:13:25.120
对go ipfs具有本机支持，这确实是

00:13:25.120 --> 00:13:30.399
太好了，这样我就可以连接到

00:13:30.399 --> 00:13:35.839
正在运行的本机go ipfs守护程序已经

00:13:35.839 --> 00:13:39.839
由勇敢开始，目前是这样运作的

00:13:39.839 --> 00:13:44.320
是我已经必须勇敢地启用它

00:13:44.320 --> 00:13:48.320
手动，然后我实际上检查哪个端口

00:13:48.320 --> 00:13:51.920
嗯ipfs嗯api服务器正在运行，它是

00:13:51.920 --> 00:13:55.519
这些预定义端口之一上的um（取决于是否为uh）

00:13:55.519 --> 00:13:58.800
勇敢的夜晚或勇敢的呃生产发布

00:13:58.800 --> 00:14:02.560
嗯，最终我想拥有它，以便

00:14:02.560 --> 00:14:06.399
这可以通过api和

00:14:06.399 --> 00:14:10.079
勇敢实际上有这个api chrome.ipfs

00:14:10.079 --> 00:14:14.160
扩展名的呃，但目前仅对ipfs伴侣可用

00:14:14.160 --> 00:14:18.480
所以我正在与勇敢者一起工作，他们正在努力使这一点变得更多

00:14:18.480 --> 00:14:21.839
其他扩展也可以更通用地访问，这将使

00:14:21.839 --> 00:14:25.920
这有点简单，所以

00:14:25.920 --> 00:14:29.199
分享和勇敢的想法可能会起作用

00:14:29.199 --> 00:14:33.519
最好你也可以在电子应用程序中分享

00:14:33.519 --> 00:14:37.199
我没有显示，但基本上有

00:14:37.199 --> 00:14:43.440
将存档下载为具有基本相同ui的应用程序

00:14:43.519 --> 00:14:49.440
并且这个应用程序呃启动了本地所需的pfs守护程序节点，所以它

00:14:49.440 --> 00:14:53.680
连接到本地正在运行的实例um和

00:14:53.680 --> 00:14:58.000
当然，通常情况下效果也很好

00:14:58.000 --> 00:15:01.440
更一般的用例是如果您在chrome中使用它

00:15:01.440 --> 00:15:06.240
嗯，当然还有一些问题需要解决

00:15:06.240 --> 00:15:12.000
chrome中没有直接的pdp连接，所有内容

00:15:12.000 --> 00:15:16.959
必须通过websocket进行服务，因为我是

00:15:16.959 --> 00:15:22.800
使用服务人员，因此它连接到

00:15:22.800 --> 00:15:29.040
基本上可以连接到ipfs

00:15:29.040 --> 00:15:33.120
在chrome作品中，基本上是

00:15:33.120 --> 00:15:36.399
在没有本机支持的浏览器中

00:15:36.399 --> 00:15:44.399
通过连接到预加载节点，该节点然后加载整个哈希

00:15:45.680 --> 00:15:51.120
本质上是一种代理，可能会出现问题

00:15:51.120 --> 00:15:54.880
如果您的档案很大，那么它将使它成为可能

00:15:54.880 --> 00:15:58.160
很难，所以本质上必须同步

00:15:58.160 --> 00:16:03.680
我刚刚通过该Websocket存档的所有内容

00:16:03.680 --> 00:16:06.880
以及为随机存取而设计的格式蜡

00:16:06.880 --> 00:16:10.240
而预加载不是，所以是

00:16:10.240 --> 00:16:13.759
当前的一些局限性一分钟警告

00:16:13.759 --> 00:16:18.079
总结一下，我认为目前有一些

00:16:18.079 --> 00:16:23.360
系统的局限性是，基本上预加载还没有

00:16:23.360 --> 00:16:26.959
加载时像我希望的那样可靠地工作

00:16:26.959 --> 00:16:31.600
通过网关偶尔会有超时，因为呃

00:16:31.600 --> 00:16:35.600
因为它发出了很多小范围的请求

00:16:35.600 --> 00:16:40.480
恩，使用重播网页时还需要预加载服务器

00:16:40.480 --> 00:16:43.600
嗯，就是这样，嗯

00:16:43.600 --> 00:16:51.279
也许我也会分享呃我会很快分享另一个呃

00:16:51.279 --> 00:16:54.399
所以这是另一个存档

00:16:54.399 --> 00:16:59.040
嗯，我会把它放在聊天中

00:17:00.240 --> 00:17:06.160
是的，那基本上就是这个主意

00:17:06.160 --> 00:17:08.640
是您可以直接在浏览器中创建档案

00:17:08.640 --> 00:17:12.240
嗯，然后与他人分享

00:17:12.240 --> 00:17:16.000
呃，如果您使用勇敢，如果您使用chrome，它会很好地工作

00:17:16.000 --> 00:17:19.839
希望我们将来能更好地工作

00:17:19.839 --> 00:17:33.679
这样您就可以共享您独特的网络视图

