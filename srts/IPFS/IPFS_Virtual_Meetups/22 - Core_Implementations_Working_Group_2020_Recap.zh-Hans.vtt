WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.439 --> 00:00:05.440
嗨，我今天要谈论核心

00:00:05.440 --> 00:00:07.520
希望大家都能看到实现

00:00:07.520 --> 00:00:12.400
看到我的萤幕嗯，这已经是令人毛骨悚然的一年了

00:00:12.400 --> 00:00:18.800
嗯dht那里显然是一件大事，但是还有很多其他事情在继续

00:00:18.800 --> 00:00:22.240
回过头来，通过阅读博客来看看我们在哪里

00:00:22.240 --> 00:00:28.720
我意识到，像今年早些时候一样，让我们​​看一下异步权重重构

00:00:28.720 --> 00:00:32.000
登陆javascript这是一项艰巨的任务

00:00:32.000 --> 00:00:37.840
在2019年花费了很长时间，可用性非常大

00:00:37.840 --> 00:00:41.280
javascript对我来说最大的事情之一

00:00:41.280 --> 00:00:44.640
个人认为可调试性有助于改善

00:00:44.640 --> 00:00:48.000
嗯，我不知道您是否曾经在javascript环境中工作过

00:00:48.000 --> 00:00:54.000
在js之前，我ipfs或lippy to p您可能已经看到过这些像噩梦

00:00:54.000 --> 00:00:57.199
嗯，堆栈跟踪试图调试正在发生的事情

00:00:57.199 --> 00:01:02.000
仅仅因为这里的重构而改善了很多，

00:01:02.000 --> 00:01:05.360
好的是在该版本的一部分中

00:01:05.360 --> 00:01:10.640
我们对进行大型重构需要做什么进行了深刻的思考

00:01:10.640 --> 00:01:14.240
这是我们做错了什么，所以您可以查看该博客文章

00:01:14.240 --> 00:01:19.040
在今年早些时候alan发布的关于大型重构的文章上，

00:01:19.040 --> 00:01:22.799
尽量避免将来做这些大事

00:01:22.799 --> 00:01:27.680
嗯，但是我们绝对想确保我们在进行重构

00:01:27.680 --> 00:01:31.119
从那里开始，还有一个大目标

00:01:31.119 --> 00:01:35.280
上半年除开发人员外，还着手改进开发人员

00:01:35.280 --> 00:01:40.000
改善dht或开发人员支持以及js的功能之一

00:01:40.000 --> 00:01:44.399
ipfs今年做得非常好，正在简化发布流程

00:01:44.399 --> 00:01:49.920
所以现在所有合并到master都在rc中，所以您可以npm install next

00:01:49.920 --> 00:01:53.040
并始终获取最新和最出色的信息并进行测试

00:01:53.040 --> 00:01:56.880
有了这个，我们也真的有了这个讨厌的思维导图

00:01:56.880 --> 00:02:02.960
在这里进行的存储库操作就像在获得功能更改一样

00:02:02.960 --> 00:02:06.479
有时出门可能会使多个存储库中的公关人员流连忘返，

00:02:06.479 --> 00:02:08.000
这些都必须降落在一起

00:02:08.000 --> 00:02:11.920
这真是一场噩梦，我们真的已经将其中的许多内容合并在一起

00:02:11.920 --> 00:02:16.560
使它更容易在ipfs仓库中使用，现在我们已经能够

00:02:16.560 --> 00:02:19.760
释放大量的依赖关系，一起迁移到

00:02:19.760 --> 00:02:22.000
所有这些东西的monorepo

00:02:22.000 --> 00:02:25.360
分开是不是真的有意义

00:02:25.360 --> 00:02:29.599
然后是dht和bit swap的改进，所以实际上所有这些东西

00:02:29.599 --> 00:02:34.800
从0.5到0.7，我们做了很多工作，

00:02:34.800 --> 00:02:39.040
 dhc性能改进多一点，然后bitswap也好

00:02:39.040 --> 00:02:42.720
但这是一项艰巨的任务，

00:02:42.720 --> 00:02:47.200
从第一季度到第二季度，然后我们开始滴滴滴答

00:02:47.200 --> 00:02:50.800
从那以后的更新，所以谈一点

00:02:50.800 --> 00:02:57.920
dht和bit swap的改进，所以dht的权利是

00:02:57.920 --> 00:03:01.120
表现不太好，我会逐步介绍其中的一些内容

00:03:01.120 --> 00:03:03.360
指标，所以我们要做的是与

00:03:03.360 --> 00:03:06.560
测试场，因为正在建造测试场，我们有点

00:03:06.560 --> 00:03:10.800
并行地做这些事情，这真是巨大的嗯，在这里您可以看到

00:03:10.800 --> 00:03:14.400
一些呃测试基准

00:03:14.400 --> 00:03:17.920
我们将其放置在适当的位置，因此这些都不基于此中的实时网络

00:03:17.920 --> 00:03:20.400
这就是我们直接从测试现场提取的所有内容

00:03:20.400 --> 00:03:28.080
所以我们从ipfs0423到ipfs 0.5有了巨大的收获

00:03:28.080 --> 00:03:31.519
并且持续不断地变得如此重要

00:03:31.519 --> 00:03:34.640
那里的改进，所以很多工作，很多好处。

00:03:34.640 --> 00:03:38.720
看着这些美好的时光真的很棒

00:03:38.720 --> 00:03:43.760
随着时间的流逝，就像在网络上查找内容一样，我们回到ipfs0423

00:03:43.760 --> 00:03:46.959
嗯，您可能很难在这里看到，但是在

00:03:46.959 --> 00:03:53.519
95％的发现时间是45秒，所以这是

00:03:53.519 --> 00:03:58.400
就像我们正在运行此程序一样，我们的指标是在实时网络上收集的

00:03:58.400 --> 00:04:01.760
嗯，我们要做的是，我们有一份cron工作，我们将

00:04:01.760 --> 00:04:05.120
旋转一些节点，我们将提供一些内容，我们将查询该内容

00:04:05.120 --> 00:04:08.239
这就是我们来自实时网络的地方

00:04:08.239 --> 00:04:10.560
目前还没有从其他人的查询中撤出

00:04:10.560 --> 00:04:16.799
时间，因为隐私是的，所以在ipfs 0.5中，这是一个

00:04:16.799 --> 00:04:20.000
从45秒到平均的巨大收益

00:04:20.000 --> 00:04:25.520
我们继续每周以0.6的速度每周约5.4秒

00:04:25.520 --> 00:04:28.720
进行调整和改进，并像人一样

00:04:28.720 --> 00:04:33.199
刚刚将网络升级，就像这里的巨大收益从0.6升级到0.7

00:04:33.199 --> 00:04:36.880
从5.4到3.8到1.5秒，就像我们

00:04:36.880 --> 00:04:40.880
持续观察1.5秒和100秒

00:04:40.880 --> 00:04:47.360
美好时光的成功嗯，这仅仅是因为人们正在升级

00:04:47.360 --> 00:04:51.520
从o4 23到0.6和0.7，所以告诉你所有

00:04:51.520 --> 00:04:55.440
朋友升级可获得最新的um bit swap

00:04:55.440 --> 00:04:58.400
改进也是与之合作的一部分

00:04:58.400 --> 00:05:00.880
netflix我们的其中一名工程师dirk正在工作

00:05:00.880 --> 00:05:05.840
与他们一起在他们内部传输数据

00:05:05.840 --> 00:05:10.320
转移容器，所以我们进行了位交换

00:05:10.320 --> 00:05:13.680
进行改进以提高能力

00:05:13.680 --> 00:05:17.840
多个播种机，因此在左侧，您可以看到一些图形

00:05:17.840 --> 00:05:24.080
以前在master中的各个级别，这是我们的旧位交换和

00:05:24.080 --> 00:05:27.919
然后现在就可以播放的POC，您会看到

00:05:27.919 --> 00:05:31.280
当您有更多的播种机时，它会变得更加有效，这真的是

00:05:31.280 --> 00:05:35.680
很棒，另外在jsipf中像这样

00:05:35.680 --> 00:05:39.120
像您正在看的那样，在数据传输速度方面取得了巨大的进步

00:05:39.120 --> 00:05:42.639
您知道那里的吞吐量提高了50％以上

00:05:42.639 --> 00:05:46.160
只是做了一些小的调整，所以真的很棒

00:05:46.160 --> 00:05:50.560
莫莉谈了一些关于加强硬化的事情，这显然是今年的重点

00:05:50.560 --> 00:05:54.080
大型网络eth2今年推出

00:05:54.080 --> 00:05:57.120
Filecoin今年像这样发布对他们来说非常重要

00:05:57.120 --> 00:06:00.240
这些网络具有很多完整性，因此

00:06:00.240 --> 00:06:06.400
为此，我们在这里做了两项工作，其中一项是八卦第一节，所以我们花了

00:06:06.400 --> 00:06:09.600
一段时间后，

00:06:09.600 --> 00:06:14.160
 P2P小团队我们的研究团队与我们的合作伙伴一起找出

00:06:14.160 --> 00:06:20.720
你知道我们该怎么做才能使它变得更坚硬

00:06:20.720 --> 00:06:25.600
um并确保网络安全，因此请再次与测试场地一起使用

00:06:25.600 --> 00:06:30.240
测试攻击以通过各种强化技术

00:06:30.240 --> 00:06:32.319
您可以在博客文章中了解更多信息

00:06:32.319 --> 00:06:35.759
那里有很多改进，我们都能够在两者中实现

00:06:35.759 --> 00:06:40.160
和javascript，感谢在javascript中安全登陆的人

00:06:40.160 --> 00:06:45.440
所以那是巨大的巨大的DHT强化，您可以阅读一下

00:06:45.440 --> 00:06:49.360
这篇博文，但我们有些研究人员伸出援手

00:06:49.360 --> 00:06:52.240
今年早些时候，就像嘿，我们发现了一些漏洞

00:06:52.240 --> 00:06:56.319
我们与他们合作um的o.5版本

00:06:56.319 --> 00:07:00.319
实际上，过去很容易使一个节点黯然失色并将人们赶出

00:07:00.319 --> 00:07:04.400
路由表，现在再难得多了

00:07:04.400 --> 00:07:07.680
利用测试场来做这个，我们实际上跑了一些

00:07:07.680 --> 00:07:10.560
例如24小时对我们自己的袭击

00:07:10.560 --> 00:07:14.880
引导节点，没有任何低端后果

00:07:14.880 --> 00:07:17.919
驱逐率真的非常好

00:07:17.919 --> 00:07:22.080
那里很棒的东西

00:07:22.160 --> 00:07:27.120
然后噪音更快，更多，所以是的，我们用噪音代替secio

00:07:27.120 --> 00:07:31.039
 lippy的所有七个实现都是标准

00:07:31.039 --> 00:07:34.880
以太网工作协议以及那里的大赢家

00:07:34.880 --> 00:07:38.400
切换到快速模式已为我们节省了往返行程，这就是为什么您看到了

00:07:38.400 --> 00:07:42.639
另外，在dht查询时间方面有一些改进，只是减少了

00:07:42.639 --> 00:07:44.639
我们拥有骨干网的延迟量

00:07:44.639 --> 00:07:49.199
连接um，然后是其他一系列自定义dac格式和jsi的东西

00:07:49.199 --> 00:07:53.680
bfs，您现在可以在go ipfs中对等节点

00:07:53.680 --> 00:07:57.280
对于集群来说非常有价值

00:07:57.280 --> 00:08:00.319
最后但并非最不重要的一点是我们现在正在研究的东西

00:08:00.319 --> 00:08:03.360
um jsipfest已经发布了此固定的改进

00:08:03.360 --> 00:08:06.400
因此将固定从数据存储中移出dag

00:08:06.400 --> 00:08:09.840
嗯，您可以在此图中看到jsi所在的位置

00:08:09.840 --> 00:08:14.560
pfs曾经是顶部的蓝线，您拥有的引脚越多，速度越慢，

00:08:14.560 --> 00:08:18.080
 ipfs变慢的是中间的黄线

00:08:18.080 --> 00:08:25.360
修复js达到um级和go ipfs 0.8 rc后

00:08:25.360 --> 00:08:29.599
是本周刚推出的，所以如果您想测试固定

00:08:29.599 --> 00:08:33.839
服务性能，请尽我所能，以确保它是充分的

00:08:33.839 --> 00:08:37.200
在完全释放之前运行以确保一切顺利

00:08:37.200 --> 00:08:40.080
完成了对我们服务的测试

00:08:40.080 --> 00:08:43.519
我们希望在那里进行尽可能多的测试，然后

00:08:43.519 --> 00:08:46.959
我认为Lida稍后可能会在um上谈论这一点，但很遥远

00:08:46.959 --> 00:08:50.560
固定服务将要登陆，这将是非常有价值的

00:08:50.560 --> 00:08:54.720
适用于希望利用诸如彩陶罐或

00:08:54.720 --> 00:08:57.920
Infuria可以卸载说嘿

00:08:57.920 --> 00:09:00.959
坚持为我，您将可以配置

00:09:00.959 --> 00:09:06.000
go ipfs和js ipfs中的远程固定服务也将

00:09:06.000 --> 00:09:09.200
用这个发布，那会让你做的是那些

00:09:09.200 --> 00:09:12.640
然后，服务可以代表您固定它，而您可以这样做

00:09:12.640 --> 00:09:18.399
直接来自ipfs客户端，所以再次出现在ipfs 1.8 rc中

00:09:18.399 --> 00:09:22.160
嗯，随便玩吧，

00:09:22.160 --> 00:09:26.480
我认为就是0.8到来时不要忘了更新不要忘了要升级

00:09:26.480 --> 00:09:34.320
升级，谢谢大家

