WEBVTT
Kind: captions
Language: zh-Hans

00:00:03.439 --> 00:00:06.399
我要谈论的是dag jose项目

00:00:06.399 --> 00:00:08.639
过去几周我一直在努力的事情

00:00:08.639 --> 00:00:13.360
嗯，我已经得到了uh协议代理ethereum的资助，并且一直在工作

00:00:13.360 --> 00:00:16.160
与uh Textile的乡亲和三本书一起完成了这项工作

00:00:16.160 --> 00:00:21.760
所以um dag jose代表ipld中的dag，然后jose是json对象

00:00:21.760 --> 00:00:24.880
签名和加密，所以很难，但每个人似乎都在说

00:00:24.880 --> 00:00:30.720
乔斯，所以这就是我的发音

00:00:30.720 --> 00:00:33.760
什么是诊断，它要解决的问题是什么，我要

00:00:33.760 --> 00:00:36.480
介绍一下，然后我要谈一点

00:00:36.480 --> 00:00:39.600
关于我们如何解决这个问题，然后专门

00:00:39.600 --> 00:00:43.360
关于go api，然后，如果有时间，我将讨论实现

00:00:43.360 --> 00:00:45.920
去吧，所以其中一些将是非常技术上的呃

00:00:45.920 --> 00:00:52.239
我希望它仍然很有趣，所以我看到它的方式ipld

00:00:52.239 --> 00:00:55.920
和ipfs一般而言是关于数据互操作性的

00:00:55.920 --> 00:01:01.760
这是我们在使用公共数据时遇到的问题之一，因此ipfs网络是

00:01:01.760 --> 00:01:06.320
一般而言，我们要对数据进行签名或加密

00:01:06.320 --> 00:01:09.680
目前，每个应用程序最终都编写了自己的应用程序

00:01:09.680 --> 00:01:12.960
小型迷你格式，用于描述数据的处理方式

00:01:12.960 --> 00:01:16.799
经过身份验证或加密，从而降低了它的互操作性

00:01:16.799 --> 00:01:19.360
使得编写通用的代码变得更加困难

00:01:19.360 --> 00:01:22.640
如何验证或加密某些内容

00:01:22.640 --> 00:01:26.080
所以图表说这是解决这个问题的一种尝试

00:01:26.080 --> 00:01:30.000
这是用于经过身份验证的加密数据的互操作性标准

00:01:30.000 --> 00:01:33.759
嗯，乔塞（Jose）本身实际上是针对

00:01:33.759 --> 00:01:36.960
Web um上经过身份验证和加密的数据

00:01:36.960 --> 00:01:43.840
它基本上是用于uh身份验证的标准json表示形式

00:01:43.840 --> 00:01:47.280
加密嗯，一般来说有两个

00:01:47.280 --> 00:01:50.560
我们关心json网络签名或jws的两个对象

00:01:50.560 --> 00:01:55.280
和JSON网络加密，这是真正的Web开发人员通常会

00:01:55.280 --> 00:01:59.399
以json网络令牌的形式遇到这些，这是用于以下目的的jws形式

00:01:59.399 --> 00:02:03.040
针对Web API进行身份验证，因此存在一个现有的

00:02:03.040 --> 00:02:06.479
处理这些事情的图书馆生态系统

00:02:06.479 --> 00:02:09.599
这个想法只是考虑到这一点，并在iplp中使用它

00:02:09.599 --> 00:02:12.080
已经存在的生态系统周围有很多标准

00:02:12.080 --> 00:02:17.040
熟悉它，所以这些对象看起来像这样

00:02:17.040 --> 00:02:21.920
jws是什么样子，所以您有某种有效载荷

00:02:21.920 --> 00:02:25.200
是您的任意二进制数据

00:02:25.200 --> 00:02:28.080
签名，然后进行一系列签名

00:02:28.080 --> 00:02:34.959
是该数据的签名以及这些签名的元素

00:02:34.959 --> 00:02:38.560
这样您就拥有了签名本身，它只是签名的一种设备

00:02:38.560 --> 00:02:42.080
然后你有一些呃元素的头

00:02:42.080 --> 00:02:46.560
和受保护的标头，可有效表示有关该签名的元数据

00:02:46.560 --> 00:02:50.959
哪些实现可以用来确定签名的制作方式

00:02:50.959 --> 00:02:55.920
并验证它，那就是经过身份验证的数据

00:02:55.920 --> 00:03:00.400
然后对于非常相似的加密数据um，您有一组

00:03:00.400 --> 00:03:05.040
定义的键，然后您拥有的关键部分是

00:03:05.040 --> 00:03:10.560
密文，无论您拥有什么加密数据

00:03:10.560 --> 00:03:17.519
然后收件人是一系列特定于每个收件人数据的呃

00:03:17.519 --> 00:03:21.360
可用于解密数据，因此在两种情况下

00:03:21.360 --> 00:03:24.400
这些物体的实际形状的细节并不一定是

00:03:24.400 --> 00:03:26.879
这次谈话很重要，主要是

00:03:26.879 --> 00:03:29.280
这些对象的布局方式的标准格式

00:03:29.280 --> 00:03:36.319
嗯，它必须是网址安全的json，所以所有内容都是以base64网址编码的

00:03:36.319 --> 00:03:41.040
嗯，这些通常都得到很好的支持

00:03:41.040 --> 00:03:46.239
还有这些的不同的序列化，所以这两个

00:03:46.239 --> 00:03:49.120
此处的表格称为一般序列化，其中有一个

00:03:49.120 --> 00:03:52.560
如果只有一个，可以在哪里进行序列化

00:03:52.560 --> 00:03:56.000
例如，这里的收件人，或者如果您只有一个

00:03:56.000 --> 00:03:58.720
在jws中签名，您可以吊起

00:03:58.720 --> 00:04:00.799
收件人的签名现在进入顶层

00:04:00.799 --> 00:04:04.640
然后是一个紧凑的序列化，专门用于url

00:04:04.640 --> 00:04:08.319
但是呃，我们并不特别在乎那些我们可以编码的通用

00:04:08.319 --> 00:04:12.080
序列化相当有效，因为我们使用的是cbor而不是json

00:04:12.080 --> 00:04:15.120
嗯，我们可以在

00:04:15.120 --> 00:04:18.320
图书馆，所以我们只使用一般文明

00:04:18.320 --> 00:04:22.240
嗯，所以我想这里的第一个问题是

00:04:22.240 --> 00:04:26.000
我们实际上在ipld um中表示这些jose对象吗？

00:04:26.000 --> 00:04:30.080
这是针对此的规范，这是我刚刚发布的链接

00:04:30.080 --> 00:04:35.199
嗯，这很简单，实际上我们有一个多编解码器

00:04:35.199 --> 00:04:38.960
表示cid引用了一些jose数据

00:04:38.960 --> 00:04:44.080
um，然后实际编码jws或jwe的jose对象

00:04:44.080 --> 00:04:50.240
进入iprd，我们只是将其编码为siebel而不是json，

00:04:50.240 --> 00:04:54.240
因为我们在cbor中有一个字节类型，所以我们直接使用它而不是

00:04:54.240 --> 00:04:58.240
base64 url​​编码任何有效载荷数据，然后我们将其添加

00:04:58.240 --> 00:05:01.280
我将在稍后讨论的两个额外要求是

00:05:01.280 --> 00:05:04.000
如果是jws，则有效载荷为字节

00:05:04.000 --> 00:05:08.880
cid的意思，如果是jwe，则密文为

00:05:08.880 --> 00:05:12.960
解密cid的字节，呃，这似乎是一个奇怪的要求，我会

00:05:12.960 --> 00:05:15.120
回到它，但只是使它具体

00:05:15.120 --> 00:05:21.520
如果我们要看这个jws在iprb中对这个uh进行编码，我们会对其进行编码

00:05:21.520 --> 00:05:24.960
在cbor中到处都可以看到base64 url​​，基本上

00:05:24.960 --> 00:05:27.919
替换那个字节

00:05:29.280 --> 00:05:34.080
那为什么我们要对有效载荷和密文使用cids

00:05:34.080 --> 00:05:38.160
所以几乎任何规格的东西之一

00:05:38.160 --> 00:05:42.720
处理加密或身份验证将要做的是定义一些

00:05:42.720 --> 00:05:47.440
一种编码uh json或任何您的数据结构的规范方法

00:05:47.440 --> 00:05:53.600
以便验证者可以重现它

00:05:53.600 --> 00:05:57.120
以与签名者相同的方式，以便他们可以

00:05:57.120 --> 00:06:00.960
他们可以验证数据结构，这很复杂

00:06:00.960 --> 00:06:05.360
嗯，但我们可以避免这样做，因为我们已经有了ipld

00:06:05.360 --> 00:06:09.440
作为编码任意数据的一种方式，所以我们只使用

00:06:09.440 --> 00:06:12.800
嗯，还有应用程序（如果他们正在使用此功能）

00:06:12.800 --> 00:06:16.720
他们已经拥有用于反序列化和

00:06:16.720 --> 00:06:19.680
序列化为ipod数据，以便它们可以重复使用

00:06:19.680 --> 00:06:23.520
这样，说您必须签署身份证或

00:06:23.520 --> 00:06:27.199
您必须加密一个cid我们不需要我们不必担心

00:06:27.199 --> 00:06:32.639
指定数据的结构方式以及对此的明显反对

00:06:32.639 --> 00:06:35.360
有两个是说您要下载

00:06:35.360 --> 00:06:39.360
在jws中，您必须获取jws对象

00:06:39.360 --> 00:06:43.600
从airpfs，然后您必须喜欢解码cid

00:06:43.600 --> 00:06:47.360
有效负载，然后执行另一个网络请求以获取该对象

00:06:47.360 --> 00:06:51.280
嗯，或者甚至更令人担忧的是，如果您有

00:06:51.280 --> 00:06:55.120
如果是纯文本，则为加密对象

00:06:55.120 --> 00:06:59.520
是一个cid，那么这似乎意味着您正在放置

00:06:59.520 --> 00:07:02.639
网络上某处的纯文本，您进行的所有加密操作都是

00:07:02.639 --> 00:07:08.560
是它的哈希值，但我们可以使用身份多播来

00:07:08.560 --> 00:07:13.280
避免这个问题，如果您使用的CID是

00:07:13.280 --> 00:07:17.360
身份多哈希然后这意味着字节

00:07:17.360 --> 00:07:20.080
cid所指对象的

00:07:20.080 --> 00:07:22.240
实际上，我们根本不对它们进行哈希处理

00:07:22.240 --> 00:07:28.240
直接将字节包括在cid um中，这意味着我们可以

00:07:28.240 --> 00:07:31.440
为我们的jws或jwe创建一个身份多重哈希

00:07:31.440 --> 00:07:35.680
并将其直接包含在下载的对象中

00:07:35.680 --> 00:07:38.800
这意味着我们在博客中，这意味着我们不必

00:07:38.800 --> 00:07:40.960
这些额外的网络请求，这意味着我们不必简单地

00:07:40.960 --> 00:07:46.319
发短信到网络um上的jw e，这有点

00:07:46.319 --> 00:07:51.759
规范说明我们如何编码此作品的概述

00:07:51.759 --> 00:07:56.560
我一直在努力的是在此之前的实现

00:07:56.560 --> 00:08:00.319
所以你可以在这个链接上找到我，我想在聊天中也有一个链接

00:08:00.319 --> 00:08:04.479
这个库处理的所有内容都是与json之间的序列化

00:08:04.479 --> 00:08:07.759
到ipld之间，还有其他一些非常成熟的库

00:08:07.759 --> 00:08:12.080
可以处理的可以用于处理加密货币um，因此

00:08:12.080 --> 00:08:13.919
这只是关心的主要事情是

00:08:13.919 --> 00:08:18.080
一个非常简单的api，可以与json ipod相互转换

00:08:18.080 --> 00:08:26.080
所以这是阅读犹太人的样子，所以我们创建了一个cid，使用go

00:08:26.080 --> 00:08:28.319
 ipod Prime库，这是我想

00:08:28.319 --> 00:08:31.280
合理的新库，可与ipld数据进行交互

00:08:31.280 --> 00:08:37.599
在go um中，所以我们创建了cid um，我们假设已经有一些

00:08:37.599 --> 00:08:39.919
cid指向网络上的数据

00:08:39.919 --> 00:08:44.560
那是dag有一个jws对象um

00:08:44.560 --> 00:08:48.320
然后是有趣的代码段，我猜想是这个库的入口点

00:08:48.320 --> 00:08:52.160
在页面中间，您会看到此图表。load有一个

00:08:52.160 --> 00:08:55.839
函数，所以它的第一个参数是我们刚创建的cid

00:08:55.839 --> 00:08:59.600
嗯，这两个上下文参数对此并不是特别有趣

00:08:59.600 --> 00:09:05.279
嗯，然后第四个参数是嗯。it.loader的实现

00:09:05.279 --> 00:09:08.800
基本上是任何知道如何从ipfs中获取数据的东西

00:09:08.800 --> 00:09:13.040
嗯，这是呃，这是任何使用ipl prime的人的东西

00:09:13.040 --> 00:09:19.519
图书馆已经有手头了，所以我们从中得到的结果

00:09:19.519 --> 00:09:23.519
函数是jws和jw的并集

00:09:23.519 --> 00:09:26.560
对象，因为规范无法确定并不能说明

00:09:26.560 --> 00:09:31.440
我们知道cid中存在哪种物体，我们知道它要么是

00:09:31.440 --> 00:09:35.519
jws或jwe，所以我们将其作为jws方法

00:09:35.519 --> 00:09:39.200
如果对象是jdbs，则将返回not nil，并且

00:09:39.200 --> 00:09:41.519
如果不是犹太人，那还有另外一个

00:09:41.519 --> 00:09:45.279
叫做jwe，然后在底部我们可以看到这里我们只是打印出来

00:09:45.279 --> 00:09:49.519
jws的一般json序列化，因此您可以在其中

00:09:49.519 --> 00:09:52.240
与第三方库的集成点可以这样

00:09:52.240 --> 00:09:56.399
您可以然后通过该常规序列化并执行jose，或者您可以

00:09:56.399 --> 00:10:00.240
自己传递或交给其他任何第三方服务

00:10:00.240 --> 00:10:07.920
可以处理jws对象um，而书写看起来大致相似um

00:10:07.920 --> 00:10:13.279
您说您已经使用go jose库签署了一些数据

00:10:13.279 --> 00:10:16.720
然后，您就拥有了该序列的一般json序列化

00:10:16.720 --> 00:10:21.200
jws您可以使用纸尿裤a传递它，这样首先

00:10:21.200 --> 00:10:27.920
线是这里的入口点，然后是第五行中的这个

00:10:27.920 --> 00:10:33.440
得到了这个骰子构建jose链接方法，这是有效的

00:10:33.440 --> 00:10:37.120
go ipod prime周围的包装器以链接构建器

00:10:37.120 --> 00:10:40.640
嗯，重要的是最后两个参数

00:10:40.640 --> 00:10:44.079
第一个是我们将jws转换为jose对象

00:10:44.079 --> 00:10:47.680
出于同样的原因，我们不得不压低um，当我们给它一个

00:10:47.680 --> 00:10:51.040
知道如何存储原始ipfs blob数据的实现

00:10:51.040 --> 00:10:54.480
在网络上um的结果是呃

00:10:54.480 --> 00:10:59.839
是一个cid呃，我们可以做任何想做的事情

00:10:59.839 --> 00:11:03.519
这就是我一直在努力的图书馆的api

00:11:03.519 --> 00:11:07.760
相当简单，我正在使用一个帮助程序库

00:11:07.760 --> 00:11:12.640
它处理诸如um之类的事情

00:11:13.120 --> 00:11:16.560
在身份多哈希um中编码事物

00:11:16.560 --> 00:11:20.240
以及各种实用程序功能，可以使加密解密

00:11:20.240 --> 00:11:25.279
用户体验会更容易一些，我希望能参与其中

00:11:25.279 --> 00:11:28.720
实施细节，但要到第二季度了，所以我认为

00:11:28.720 --> 00:11:33.120
我可能会停在那儿，尽管在这最后一周我

00:11:33.120 --> 00:11:35.600
猜猜我正在做的事情很有趣和令人兴奋

00:11:35.600 --> 00:11:38.959
是把所有东西都绑在一起了吗？

00:11:38.959 --> 00:11:43.839
确保我们可以使用存储jose对象um

00:11:43.839 --> 00:11:48.640
通过陶瓷的Powergate，这是一个项目，三本书正在研究中

00:11:48.640 --> 00:11:56.880
实际上是通过javascript实现愤怒地使用这些东西

