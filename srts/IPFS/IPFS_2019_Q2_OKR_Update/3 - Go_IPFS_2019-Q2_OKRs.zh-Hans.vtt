WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.060 --> 00:00:05.430
每个人都是NGO ipfs工作组的Eric，我要走了

00:00:05.430 --> 00:00:11.700
在我们首先看到的电子表格中了解我们的提示以使我们的提示正确

00:00:11.700 --> 00:00:15.870
好的，我们的一套与支持他们的善良的软件包管理器有关

00:00:15.870 --> 00:00:21.390
有点明显，因为它们都与速度和可伸缩性有关

00:00:21.390 --> 00:00:26.369
支持打包的大量数据和大量流量

00:00:26.369 --> 00:00:31.590
ipfs上运行的项目经理或项目经理将需要

00:00:31.590 --> 00:00:36.750
第一个是可以同步到ipfs的，有两个

00:00:36.750 --> 00:00:40.079
主动性与主动性相邻，一个是可写的性能导火索

00:00:40.079 --> 00:00:47.870
实施和一个改进的FS和主宰这一点

00:00:47.870 --> 00:00:53.070
下一个是继续进行改进提供者策略的工作，有很多

00:00:53.070 --> 00:00:56.489
提供者策略的不同选择，我们将需要

00:00:56.489 --> 00:01:01.859
基本上在添加和提供时更有效地使用DHT

00:01:01.859 --> 00:01:07.500
第三大数据集是当连接到全球互联网IP时，

00:01:07.500 --> 00:01:11.159
的解决方案不到一秒钟的时间，因此正在采取一些措施

00:01:11.159 --> 00:01:19.860
IP NS / DNS的改进，然后IP NS / pub / sub的第七个改进是ipfs

00:01:19.860 --> 00:01:24.270
下载足够大时，我认为饱和度是100兆位链接

00:01:24.270 --> 00:01:27.869
数据集，当您需要能够传输大量数据时，这一点很重要

00:01:27.869 --> 00:01:33.210
很快，下一个与它并驾齐驱ipfs最多有十个

00:01:33.210 --> 00:01:36.390
下载大数据集时的开销百分比，我们不想全部使用

00:01:36.390 --> 00:01:44.850
吞吐量的开销，因此我们希望位交换明显有效

00:01:44.850 --> 00:01:50.549
我们必须发送控制信息并发出请求以发送我们的通缉犯

00:01:50.549 --> 00:01:55.079
阻碍了我们的同行，但我们想有效利用我们拥有的带宽

00:01:55.079 --> 00:02:00.570
第九个可用的IP FS具有对mod x和其他版本的实验性支持

00:02:00.570 --> 00:02:08.700
元数据，这意味着这是UNIX FSB-mod x对程序包管理器很重要

00:02:08.700 --> 00:02:14.379
能够更新其内容而无需更改，然后有一种方法可以提取

00:02:14.379 --> 00:02:19.030
文件和ipfs快速处理非常大的文件，很多很多小文件

00:02:19.030 --> 00:02:25.659
认为主要与魔术当前在街区上所做的工作有关

00:02:25.659 --> 00:02:33.849
存储以及使用of来存储数据和ipfs和魔术已提交了

00:02:33.849 --> 00:02:36.610
我认为他们正在修复的几个重要漏洞最近才badge出

00:02:36.610 --> 00:02:41.260
就在最近的几天里，这很好，这意味着badge将成功

00:02:41.260 --> 00:02:49.359
GC，并希望在四分之一r的过程中，魔术会测试一个

00:02:49.359 --> 00:02:54.190
电池将显示出它的可靠性，并且在大多数情况下都具有很高的性能

00:02:54.190 --> 00:03:03.220
ipfs的存储盒okrs的第二组第二部分围绕支持

00:03:03.220 --> 00:03:08.470
最佳营地用户的IP可以通过网关可靠地找到内容，这很重要

00:03:08.470 --> 00:03:14.349
要工作的八天时间，并为ipfs训练营做好

00:03:14.349 --> 00:03:18.940
顺利地涉及到很多东西，这与go ipfs和

00:03:18.940 --> 00:03:24.250
有些在盖子p2p一侧，实际上就像其他OTR在这里一样，

00:03:24.250 --> 00:03:29.620
与ipfs camp准备的一个伟大的研讨会有关，这就是Stephan

00:03:29.620 --> 00:03:36.480
他将在base 32中为IP NS PID密钥ID创建一个车间支持

00:03:36.480 --> 00:03:42.069
这些很有趣，这些会很好，它们可以简化一些

00:03:42.069 --> 00:03:47.530
研讨会期间将要进行的ipfs的信息和使用

00:03:47.530 --> 00:03:52.629
是另一种，使用时默认切换到基数32

00:03:52.629 --> 00:04:00.389
 cid v1有一个命令行开关可启用cid v1的使用，请参阅ID和

00:04:00.389 --> 00:04:05.620
现在，它将为您提供基本的58个C IDs mmm，并且对

00:04:05.620 --> 00:04:10.229
表以使其返回基于32个C的ID，存在一些我们可能会破坏的风险

00:04:10.229 --> 00:04:14.140
有些刺痛你知道有人在依赖

00:04:14.140 --> 00:04:19.690
关于现有的行为，所以这些都在第三节中进行审查

00:04:19.690 --> 00:04:25.150
改善ipfs或go ipfs贡献者的经验第一个是我认为

00:04:25.150 --> 00:04:35.620
改变ipfs许可和我们产生的代码的广泛倡议

00:04:35.620 --> 00:04:40.840
第二个是维护重要的非kr任务的精选列表，就像

00:04:40.840 --> 00:04:43.450
工作组，我们意识到，我们还有其他的东西不在

00:04:43.450 --> 00:04:48.250
我们的kr我们有一个KRS的地方，显然当github

00:04:48.250 --> 00:04:53.430
问题，但我们需要另一件事，这是我们所有问题的子集

00:04:53.430 --> 00:04:58.770
重要的是要完成并取得进步，但他们不会累积到K的屁股

00:04:58.770 --> 00:05:03.700
与护理相关的举措进入了第二季度的里程碑，这不仅仅只是问题

00:05:03.700 --> 00:05:06.970
与护理有关，但是我们想跟踪里程碑发布的里程碑，我们

00:05:06.970 --> 00:05:11.590
想要基本上汇总我们的或其他问题以及github或功能到

00:05:11.590 --> 00:05:14.260
以便我们大致了解每个发行版现在要拍摄的内容

00:05:14.260 --> 00:05:17.590
就像是应用程序中的内容，我们决定何时认为它是

00:05:17.590 --> 00:05:20.560
是发布的好时机，这并不是世界上最糟糕的事情，但我们

00:05:20.560 --> 00:05:23.260
想知道我们是否对自己的东西有更多的严格要求会更好

00:05:23.260 --> 00:05:29.260
在角落的尽头，想去ipfs上的500个开放问题

00:05:29.260 --> 00:05:31.930
我们有九千一千三百四十个空位

00:05:31.930 --> 00:05:35.919
问题，直到ipfs令新开发人员或新贡献者望而却步，或者我

00:05:35.919 --> 00:05:40.900
我不认为他们只是被吓走了，所以实际上有很多有价值的东西

00:05:40.900 --> 00:05:43.930
这些问题中的信息很多，其中很少是

00:05:43.930 --> 00:05:47.169
虚假的或不再适用的其中许多是好的功能构想，但我们

00:05:47.169 --> 00:05:51.130
必须弄清楚如何处理它们，并使其脱离主流

00:05:51.130 --> 00:05:58.120
设置了ipfs问题，因此这些问题变得有用，而不仅仅是令人生畏的

00:05:58.120 --> 00:06:01.030
使用Go ipfs的开发人员必须以各种方式

00:06:01.030 --> 00:06:06.220
处理这个问题，但是对于参加项目的人来说，您可能是一个

00:06:06.220 --> 00:06:10.810
有点疯狂，嗯，这是我们处理它的方法之一

00:06:10.810 --> 00:06:14.110
开始使用一个特殊的标志来处理和中断我们意识到的事情

00:06:14.110 --> 00:06:17.710
我们有很多问题只是很多问题需要很长时间才能

00:06:17.710 --> 00:06:21.250
认为其中一些人真的很想如果有人要完成的话

00:06:21.250 --> 00:06:23.010
必须要做的事，但其中一些对

00:06:23.010 --> 00:06:26.580
核心团队立即接手，我们将使用中断标签并

00:06:26.580 --> 00:06:31.140
在我们的每周中谈论他们并进行社交或在我们的广播中播出

00:06:31.140 --> 00:06:37.350
IRC，以便人们知道有新事物出现，尽管这

00:06:37.350 --> 00:06:42.630
本节的最后一个是创建将go ipfs使用go I的计划。

00:06:42.630 --> 00:06:51.650
感觉很好，然后第四部分就可以支持IPF用户了

00:06:51.650 --> 00:06:56.240
文件硬币为解决深图问题提供了长期解决方案

00:06:56.240 --> 00:07:00.780
之所以这样做，是因为Hana的移动ipfs团队在

00:07:00.780 --> 00:07:06.360
图形接收器，并且该工作将在某个时候折回到go ipfs中，但是

00:07:06.360 --> 00:07:11.360
大概在那之前，也许在那之前，文件硬币团队会使用它

00:07:11.360 --> 00:07:16.530
支持使用quarry api构造函数创建自定义的娱乐

00:07:16.530 --> 00:07:23.280
ipfs按照我们实际构建ipfs节点的方式构建魔术

00:07:23.280 --> 00:07:27.090
允许人们基本上打包自己的ipfs节点并配置

00:07:27.090 --> 00:07:33.240
他们想要的方式，具体来说就是将ipfs容器化所需的推断

00:07:33.240 --> 00:07:39.480
在基本上是容器化的基础架构中运行，因此我们将提供支持

00:07:39.480 --> 00:07:45.210
他们的努力，然后审核ipfs api确保它是kuba

00:07:45.210 --> 00:07:49.200
我认为他已经开始了，所以大概是这个季度的最后一个季度

00:07:49.200 --> 00:07:55.350
季度，就是这样，如果您有任何疑问，您一定可以达到

00:07:55.350 --> 00:08:00.990
我也可以，我们也可以像所有工作组一样

00:08:00.990 --> 00:08:06.350
我认为这是从主列表实际链接到的PR的问题

00:08:06.350 --> 00:08:11.850
您可以去检查一下并添加评论，它会做出回应，非常感谢

00:08:11.850 --> 00:08:13.970
很多

