WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.080 --> 00:00:04.400
所以我想让我向您展示一些基准测试

00:00:04.400 --> 00:00:09.679
我们已经在ipfs land的um ipld中做完了

00:00:09.679 --> 00:00:15.040
嗯，请稍等一下，我想将其设置为正确，每个人都可以

00:00:15.040 --> 00:00:19.199
看这个屏幕是的也许也许不是

00:00:19.199 --> 00:00:25.599
很棒，很酷，所以今天，嗯，所以这实际上是

00:00:25.599 --> 00:00:31.760
关于您如何开始在协议实验室中进行工作的故事

00:00:31.760 --> 00:00:35.760
一个地区可能对其他人超级有用

00:00:35.760 --> 00:00:40.480
嗯，这个故事的主角实际上不是我

00:00:40.480 --> 00:00:47.760
大概是六个月前，我是阿方索·乌姆

00:00:47.760 --> 00:00:54.160
嗯，用于研究工作um与bitswap中的传输速度有关

00:00:54.160 --> 00:00:57.199
开始在bitswap框架之外进行此工作

00:00:57.199 --> 00:01:00.480
基本上变成了普遍的呃

00:01:00.480 --> 00:01:04.000
衡量数据传输的基准框架

00:01:04.000 --> 00:01:10.400
几乎在任何平台上都几乎没有任何种类，所以这始于

00:01:10.400 --> 00:01:14.000
有点交换基准，嗯，后来又添加了图同步

00:01:14.000 --> 00:01:17.759
嗯，它添加了一个可以运行整个ipfs堆栈的版本

00:01:17.759 --> 00:01:25.360
嗯，然后嗯，就在几天前，嗯，基本上是嗯

00:01:25.360 --> 00:01:29.360
所有的实时p2p协议都添加了http

00:01:29.360 --> 00:01:32.960
它具有http overlimp p2p，具有原始的奥林匹亚

00:01:32.960 --> 00:01:39.280
因此，我们现在流式传输各种内容，嗯，我们都流式传输各种类似非ipfs的内容

00:01:39.280 --> 00:01:44.560
协议在这里嗯，我们在这个

00:01:44.560 --> 00:01:48.240
um仓库也有类似的机制

00:01:48.240 --> 00:01:52.320
生成文件um传输实际数据传输

00:01:52.320 --> 00:01:56.399
目录um，所以这是一种非常酷的方法

00:01:56.399 --> 00:01:59.520
做这些床基准，它

00:01:59.520 --> 00:02:03.759
你知道它有点像所有主要步骤，像um和a

00:02:03.759 --> 00:02:06.320
我们系统中的传统传输工作流程

00:02:06.320 --> 00:02:09.759
存在将文件添加到系统的过程，在这种情况下，

00:02:09.759 --> 00:02:13.599
像ipfs一样意味着将它们转换为unix fs转换

00:02:13.599 --> 00:02:18.959
他们到um，你知道ipld到数据，然后um

00:02:18.959 --> 00:02:22.560
传输然后序列化回平面文件

00:02:22.560 --> 00:02:26.239
嗯，这真的很酷

00:02:26.239 --> 00:02:30.879
嗯，工具套件，嗯，我几乎觉得它已经超出了它的名称

00:02:30.879 --> 00:02:35.599
嗯，嗯，目前我相信点火团队一直在使用它

00:02:35.599 --> 00:02:39.040
嗯做一些基准测试，为他们的一些做准备

00:02:39.040 --> 00:02:44.480
解决f3问题，使文件硬币超快，当您放uh时，

00:02:44.480 --> 00:02:50.640
将数据传输到文件硬币中，然后我们团队最近

00:02:50.640 --> 00:02:53.680
我们想要让您知道数据系统团队

00:02:53.680 --> 00:03:01.040
一直以来，我们基本上一直在尝试使用ipld素数，这是

00:03:01.040 --> 00:03:04.159
我们的品牌是假的和新的，呃，我不是这个新品牌

00:03:04.159 --> 00:03:09.040
要点，但这是我们的，这是我们的新功能，超棒的新功能。

00:03:09.040 --> 00:03:13.200
 ipld的版本，而不是旧的和破旧的库

00:03:13.200 --> 00:03:17.440
嗯，我们一直在努力让它们遍及ipfs，以便我们拥有所有

00:03:17.440 --> 00:03:21.519
ipld在ipfs um中的功能，但这需要一大堆

00:03:21.519 --> 00:03:25.360
更改我们的堆栈um，我们要确保当我们

00:03:25.360 --> 00:03:30.799
发货我们不会破坏ipfs um，所以我们一直在使用这个基准测试

00:03:30.799 --> 00:03:34.400
而我们要做的就是基本上

00:03:34.400 --> 00:03:38.080
基准以运行我们当前主版本的版本

00:03:38.080 --> 00:03:40.879
ipfs的当前发布的ipfs版本

00:03:40.879 --> 00:03:45.120
并拥有它，嗯，您基本上知道添加文件会将它们传输到另一个节点，并且

00:03:45.120 --> 00:03:49.200
然后嗯，然后将它们作为常规文件放回去，

00:03:49.200 --> 00:03:55.360
然后我们设置一个在um中运行的版本，该版本在ipl中与我们的分支一起运行uh

00:03:55.360 --> 00:03:59.760
 g prime和ipfs，这些早期版本实际上只是兼容性

00:03:59.760 --> 00:04:04.239
我们找到了在ipld prime中共享shim的方法，而没有真正

00:04:04.239 --> 00:04:06.159
利用其功能或

00:04:06.159 --> 00:04:10.720
围绕它进行优化，嗯，但是我们运行了这些基准测试，而

00:04:10.720 --> 00:04:14.239
我们已经得到了一些结果，基准测试是基准

00:04:14.239 --> 00:04:17.840
基准测试本质上就像我要运行基准测试一样

00:04:17.840 --> 00:04:21.440
我会尽我所能，就像我们有一些

00:04:21.440 --> 00:04:24.639
现在是um，我们的目录为

00:04:24.639 --> 00:04:28.960
ipld和ipfs um我们有一个基准，我们有一个

00:04:28.960 --> 00:04:32.880
组成um的新版本um之一

00:04:32.880 --> 00:04:37.280
关于测试场的很酷的事情是，如果我要超级去，你可以后悔

00:04:37.280 --> 00:04:41.600
这里速度很快，但嗯，您基本上可以建立

00:04:41.600 --> 00:04:45.600
基准与这些呃

00:04:45.600 --> 00:04:48.639
这些合成文件，我不知道你们是否都能看到，这可能

00:04:48.639 --> 00:04:51.280
对那些不是呃的人没有任何意义

00:04:51.280 --> 00:04:54.720
谁不与Testron合作，但在这里我在做什么，我是

00:04:54.720 --> 00:04:58.400
实际用不同的uh commit shell替换ipfs

00:04:58.400 --> 00:05:03.120
这使我可以运行针对ipld prime和ipfs更新的版本

00:05:03.120 --> 00:05:06.479
嗯，还有其他一些小东西，就像选择器一样，

00:05:06.479 --> 00:05:10.240
允许我们从本质上传递Build标签

00:05:10.240 --> 00:05:12.880
超级酷，我今天早上才学会了如何使用它

00:05:12.880 --> 00:05:16.240
嗯，因为它允许您使用构建标签并喜欢

00:05:16.240 --> 00:05:19.520
使用界面版本发生重大变化的不同版本

00:05:19.520 --> 00:05:22.639
实际上，我们必须交付的最新产品是

00:05:22.639 --> 00:05:26.800
用嗯嗯图形做，所以就像我不知道二

00:05:26.800 --> 00:05:30.320
我觉得特斯拉好吧，我可以整天唱测试架，我觉得

00:05:30.320 --> 00:05:34.080
它是与协议无关的最酷的产品之一

00:05:34.080 --> 00:05:37.520
分布式网络本身，但仍然是一个了不起的产品

00:05:37.520 --> 00:05:40.960
无论如何，嗯，如果我想运行这个

00:05:40.960 --> 00:05:44.560
我想知道我在这里演奏我的作品吗

00:05:44.560 --> 00:05:51.840
嗯，让我们来测试一下地面成分吧，我的天哪，显然是ii

00:05:51.840 --> 00:05:54.160
失去了键入人们正在观看的内容的能力

00:05:54.160 --> 00:06:01.120
嗯是的，这样就开始了，然后我在那边，我有我的

00:06:01.120 --> 00:06:04.880
测试Brown damon um，它实际上是在处理请求并启动

00:06:04.880 --> 00:06:08.960
呃，但是我并不是那么笨拙，以至于无法尝试进行测试。

00:06:08.960 --> 00:06:12.880
在进行um缩放测试时进行测试，让大家都在等待

00:06:12.880 --> 00:06:16.000
所以不用担心这些都已经运行了

00:06:16.000 --> 00:06:22.479
所以一旦我们得到了结果，昨天，我把一个可观察到的

00:06:22.479 --> 00:06:27.440
嗯，仓库我不知道你怎么称呼这些仓库页面

00:06:27.440 --> 00:06:31.520
嗯，我们能够比较一些

00:06:31.520 --> 00:06:34.880
呃，现在您可以看到旧版本和新版本

00:06:34.880 --> 00:06:38.960
嗯，我们这里有时间来增加时间来获取并输入输出

00:06:38.960 --> 00:06:42.800
嗯，您会发现我们在所有方面都还不完全相同

00:06:42.800 --> 00:06:45.600
但是例如按时添加，我们做得很好

00:06:45.600 --> 00:06:50.400
嗯，嗯，要及时提取以输出，我们需要一点时间

00:06:50.400 --> 00:06:54.880
幸运的是，我们做了一些工作

00:06:54.880 --> 00:06:58.479
到发生了什么事，呃，为什么

00:06:58.479 --> 00:07:00.720
那些事情可能会慢一点

00:07:00.720 --> 00:07:04.000
我对这些是什么有预感

00:07:04.000 --> 00:07:07.360
好吧，我已经知道了，但是无论如何，嗯嗯

00:07:07.360 --> 00:07:11.039
您可以在此处看到此文件加载了一些初始文件，但是

00:07:11.039 --> 00:07:14.960
您可以上传自己的结果以基本上自动更新此结果

00:07:14.960 --> 00:07:17.520
图，所以我已经继续并更早地运行了

00:07:17.520 --> 00:07:23.840
嗯，我在这里分开跑了嗯，我相信就是这样哦

00:07:23.840 --> 00:07:25.599
天哪，我希望这是正确的版本

00:07:25.599 --> 00:07:31.759
让我们找出我不记得我最近一次跑步是什么

00:07:31.759 --> 00:07:34.560
叫我应该叫我应该给它起个名字

00:07:34.560 --> 00:07:38.319
还有，我们是的，所以事实证明

00:07:38.319 --> 00:07:42.240
那个，现在我们在提取中看到了一些不寻常的结果，我们很确定

00:07:42.240 --> 00:07:44.160
只是在运行垃圾回收，因为我们

00:07:44.160 --> 00:07:47.280
通过我们在此处传输的方式传输大量数据

00:07:47.280 --> 00:07:51.599
100 MB的uh目录，就像xkcd存档

00:07:51.599 --> 00:07:54.639
嗯，我就像一个演示一样下了github

00:07:54.639 --> 00:07:57.840
嗯，这可能只是垃圾回收运行，所以我们看到了一些

00:07:57.840 --> 00:08:01.199
不寻常的结果突然之间，我们喜欢

00:08:01.199 --> 00:08:04.879
在一次运行中胜过正常版本，但是我们

00:08:04.879 --> 00:08:07.680
在其他人身上表现不佳，我很确定这是垃圾

00:08:07.680 --> 00:08:09.680
与收藏有关，但您可以同时看到

00:08:09.680 --> 00:08:14.800
我们将时间输出到平面文件的时间变得越来越好了，

00:08:14.800 --> 00:08:20.879
这里的区别是嗯，这实际上与嗯有关

00:08:20.879 --> 00:08:27.360
基本上有一个额外的um呃块的um哈希

00:08:27.360 --> 00:08:31.520
在ipld prime um的默认版本中，所以我们基本上是

00:08:31.520 --> 00:08:33.839
我们从我们拥有的区块存储中读取区块

00:08:33.839 --> 00:08:38.000
没有这种类似的东西，没有这种东西，我们添加了

00:08:38.000 --> 00:08:42.240
嗯，我们正在对代码块进行额外的哈希处理以验证cid的确是

00:08:42.240 --> 00:08:44.959
很棒，如果您关心信任您的数据

00:08:44.959 --> 00:08:47.440
但是在我们要卸载自己的硬盘的情况下

00:08:47.440 --> 00:08:51.040
我们之前写过的我们可能仍然相信该数据

00:08:51.040 --> 00:08:54.399
嗯，所以我们不需要重新整理cid，所以当您

00:08:54.399 --> 00:08:58.000
传输大量数据um，这样您就可以知道您知道我们做了

00:08:58.000 --> 00:09:01.920
我们在这里赢得了巨大的胜利

00:09:01.920 --> 00:09:05.279
修复了这个问题，是的，我们非常酷

00:09:05.279 --> 00:09:10.320
就像我，你知道我只是在嗯，我们确实有一个

00:09:10.320 --> 00:09:15.680
嗯，在我们这个嗯中，一个悬而未决的问题

00:09:15.680 --> 00:09:23.440
嗯，我们的广告结果有六个结果

00:09:23.440 --> 00:09:27.920
嗯，因为我们一直在和其他人玩耍

00:09:27.920 --> 00:09:31.519
我们的节点的protobuf库，我们想使用一个

00:09:31.519 --> 00:09:34.640
真正兼容并且非常符合规范，但看起来像我们

00:09:34.640 --> 00:09:37.120
有一些优化工作要做

00:09:37.120 --> 00:09:40.320
所以无论如何，虽然能够运行这些程序还是很酷的

00:09:40.320 --> 00:09:44.160
基准测试，并喜欢立即获得这些，您知道获得了这些，真是棒极了，

00:09:44.160 --> 00:09:47.279
立即比较，您会了解各种不同的

00:09:47.279 --> 00:09:52.320
嗯，我们已经跑了，你知道我们写了一天，我希望把这一切

00:09:52.320 --> 00:09:54.959
这样您就可以像

00:09:54.959 --> 00:09:58.800
服务，并希望它会立即提取最新结果的网址

00:09:58.800 --> 00:10:01.600
那里还有几件事要做，但是

00:10:01.600 --> 00:10:06.320
仍然非常有用，所以无论如何这是我的演示

00:10:07.120 --> 00:10:10.880
很酷，你有点跟后面的故事讲了，但是

00:10:10.880 --> 00:10:13.920
是什么激发了阿方索最初从事的工作的动力，我忘记了

00:10:13.920 --> 00:10:17.680
是六个月前的名字，是的，所以这是

00:10:17.680 --> 00:10:21.839
我最初的意思是最初将其设计为用于进行研究的存储库

00:10:21.839 --> 00:10:25.760
基本上是在呃上做实验

00:10:25.760 --> 00:10:31.440
更改为bitwap right um或更改ipfs的常规传输堆栈

00:10:31.440 --> 00:10:36.160
嗯和嗯，就像你看到的那样，实际上还有这个rfc

00:10:36.160 --> 00:10:41.279
目录，其中包含所有这些想法，用于改善bitswap和um，您可以

00:10:41.279 --> 00:10:43.120
甚至有一些像

00:10:43.120 --> 00:10:45.680
实施方式，有一种方法可以

00:10:45.680 --> 00:10:48.880
运行这些实验，所以它超级酷

00:10:48.880 --> 00:10:53.440
嗯，但我们发现像那样是他建造的，然后像

00:10:53.440 --> 00:10:56.480
持续了几个月，当我在做ipfs工作时，我们

00:10:56.480 --> 00:11:00.160
最终做了很多重构工作，使其能够支持几乎所有

00:11:00.160 --> 00:11:02.640
在任何情况下运输um，现在我们

00:11:02.640 --> 00:11:05.040
只是在那里进行一对一转移，但是就像

00:11:05.040 --> 00:11:08.160
您可以将所有事情弄糟，可以将等待时间弄糟

00:11:08.160 --> 00:11:11.760
您可以弄乱的带宽知道您的磁盘存储是否在

00:11:11.760 --> 00:11:15.440
记忆或像badge一样，你可能会搞砸多少

00:11:15.440 --> 00:11:18.800
您正在多少个传输节点之间进行传输

00:11:18.800 --> 00:11:21.440
很酷，就像我的意思是，我不知道它已经成为

00:11:21.440 --> 00:11:24.640
目前对于许多团队来说是相当可观的资源

00:11:24.640 --> 00:11:27.440
嗯耶

00:11:29.279 --> 00:11:35.519
是的，很酷，很酷，呃，我要问问题

00:11:36.079 --> 00:11:43.839
任何人，任何人，杀手feel

00:11:45.120 --> 00:11:49.040
不错哦，是的，而且还可以进行一般测试，这太棒了，我想每个人

00:11:49.040 --> 00:11:51.040
这就是感动它发现它非常有用

00:11:51.040 --> 00:11:56.160
嗯，那太好了，嗯，所以我们的最后一个

