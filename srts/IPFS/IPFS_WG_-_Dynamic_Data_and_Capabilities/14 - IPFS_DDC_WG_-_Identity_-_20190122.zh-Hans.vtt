WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.060 --> 00:00:04.280
好吧，我想吉米已经来了

00:00:04.490 --> 00:00:11.550
好的，所以开始记录人是的，好的

00:00:11.550 --> 00:00:19.590
所以在这里，我们再次成为大家，大家好，我们在这里讨论一些

00:00:19.590 --> 00:00:27.420
几个我的意思是该实体的一个主题，即愿望或第一个yadi

00:00:27.420 --> 00:00:31.790
拥抱的方法非常重要，我们需要提出

00:00:31.790 --> 00:00:38.510
在这些问题上做出决定，因为我们将无法接受

00:00:38.510 --> 00:00:43.739
第一种或两种或三种指导方法，因为它会

00:00:43.739 --> 00:00:48.300
需要做更多的工作，所以我们需要做出决定，这对我们来说非常重要

00:00:48.300 --> 00:00:55.890
就第一个采用的方法而言，感到安全，因此第一个第一个

00:00:55.890 --> 00:01:02.850
我们需要考虑的是，我们有三个候选人，而我已经

00:01:02.850 --> 00:01:08.130
进入议程，所以这是第一个主题，在

00:01:08.130 --> 00:01:14.610
讨论决定了我们拥有IP的第一要素，即您进行港口运输和封锁

00:01:14.610 --> 00:01:20.280
堆栈，非常抱歉，请对此快速提问或记笔记

00:01:20.280 --> 00:01:25.530
您是否要我做笔记或其他人，是的，如果有人可以，请

00:01:25.530 --> 00:01:31.049
志愿者记笔记，如果您有任何人，如果

00:01:31.049 --> 00:01:35.520
每个人都不知道要记笔记吗，我们可以在以后记笔记

00:01:35.520 --> 00:01:45.329
观看视频，是的，我及时回来做笔记，好吧，所以在

00:01:45.329 --> 00:01:51.210
三个候选IP ID的术语是基于IP FS的ID方法更多

00:01:51.210 --> 00:01:57.420
具体来说，它使用IP ns来增加可变性，因此

00:01:57.420 --> 00:02:01.829
本质上，您拥有D ID和D ID，我将在此处作为示例

00:02:01.829 --> 00:02:09.450
您知道ID将类似于ID ID ID和your和your hash

00:02:09.450 --> 00:02:14.170
进入Kanis条目或您的出现后，您的公钥的数量

00:02:14.170 --> 00:02:21.580
因此，这是基于由创建的IP ID规范

00:02:21.580 --> 00:02:27.910
约翰尼（Johnny）紧缩，这很简单，基本上，您指出用户图钉必须

00:02:27.910 --> 00:02:33.010
指向ID文档的不同版本，并指向人们的文档

00:02:33.010 --> 00:02:43.480
还不知道我可以在这里举一个简短的例子，所以我们有一个

00:02:43.480 --> 00:02:56.280
公众名单不是真的那样，而是想像这样的事情，

00:02:56.280 --> 00:03:01.510
你也有一个重要的领域，叫做身份验证，我认为那是

00:03:01.510 --> 00:03:09.760
正确的属性，例如您可以说他是否在与他人交流

00:03:09.760 --> 00:03:15.480
这个和这个不能或可能用于身份验证，所以

00:03:15.480 --> 00:03:21.100
本质上，此数据方法基于ffs的开放性，并且在您需要时

00:03:21.100 --> 00:03:24.610
需要成熟到您创建文档的文档，将其放在

00:03:24.610 --> 00:03:28.630
首先你有这个ID，然后你说好，这些是阴茎入口，现在指向

00:03:28.630 --> 00:03:33.370
新的Sally基本上就是这样

00:03:33.370 --> 00:03:42.600
的方法，这是阴茎钥匙的要点之一，基本上被妥协了

00:03:42.600 --> 00:03:52.769
由于密钥实际上是D ID本身的一部分，因此可以使保修得到恢复

00:03:52.769 --> 00:04:01.540
另一个是ID本身会有所不同，因此我们可以真正恢复主人

00:04:01.540 --> 00:04:07.420
关键，让我们安装那样的设备，但是在此之前需要先安装

00:04:07.420 --> 00:04:16.390
一个决定，我们见面了，我们也有Newports收件箱标签，您的端口是

00:04:16.390 --> 00:04:26.370
这是一个项目，它在这里使用日期

00:04:27.250 --> 00:04:31.900
味道不错，但很抱歉，您要切出切出而不是切开

00:04:31.900 --> 00:04:34.440
末端基台，我认为它们是关于ID文件的

00:04:34.440 --> 00:04:37.550
[音乐]

00:04:37.910 --> 00:04:47.460
我的提法有点滞后，我认为还可以

00:04:47.460 --> 00:04:57.410
也许你和我可以你关闭我，我会关闭我的视频

00:04:58.600 --> 00:05:05.580
好的，抱歉，现在可以听到我的枕头了吗，好的

00:05:05.580 --> 00:05:09.690
所以我不关MA

00:05:10.690 --> 00:05:18.729
我们也有您的派对盒技术，并且通过协商达成共识

00:05:18.729 --> 00:05:25.930
但是他们基本上是使用区块链来发布DNA的变化

00:05:25.930 --> 00:05:31.229
文档，我认为文档实际上存储在ipfs上，我不确定，但是

00:05:31.229 --> 00:05:36.069
我最确定的是，他们每个人都只是在区块链上存储了

00:05:36.069 --> 00:05:40.779
指向存储在维权人士中的D ID文档的指针，我们还有

00:05:40.779 --> 00:05:52.319
也是比特币网络的区块堆叠，也是无限的金属

00:05:52.319 --> 00:06:01.360
但是好吧，如果我们要去玩摇滚游戏，我们需要了解我在玩

00:06:01.360 --> 00:06:08.110
DI使用IP NS，我们需要一个阴茎来稳定，可靠并保持

00:06:08.110 --> 00:06:13.899
表现，并通过与一些人讨论脂质的存在，以及

00:06:13.899 --> 00:06:19.409
FS项目在性能等主题上提出了一些担忧

00:06:19.409 --> 00:06:27.039
不稳定，因此我们邀请Fusco参加此讨论，它对LEP有所贡献

00:06:27.039 --> 00:06:35.709
在JavaScript方面，所以如果拼图瓦斯科，你可以给你

00:06:35.709 --> 00:06:42.849
反馈和对性能和可靠性问题的潜在解决方案

00:06:42.849 --> 00:06:50.009
IP IG @ip NS目前拥有的

00:06:51.330 --> 00:06:59.409
是的，好的，您能听到我的声音吗，是的，所以在当前状态下的更新很小

00:06:59.409 --> 00:07:06.099
IP嵌套在下一个发行选项ffs中，希望是0到35

00:07:06.099 --> 00:07:10.419
迪克·切尼（Dick Cheney）默认使用后，也可能打断了创意节

00:07:10.419 --> 00:07:17.919
这实际上是您使用i钢琴家必不可少的，但是我的阴茎是

00:07:17.919 --> 00:07:25.180
仍然不是性能，最大的瓶颈是我们在

00:07:25.180 --> 00:07:31.779
团队合作中的脂质是DHT在摄取时的表现，但我们

00:07:31.779 --> 00:07:35.440
目前没有多少的基准

00:07:35.440 --> 00:07:40.270
我们采取的时间是我们希望在不久的将来要做的事情之一

00:07:40.270 --> 00:07:47.229
但是，现在是将来在JavaScript中使用Ibanez的最有效方法，

00:07:47.229 --> 00:07:54.490
奥斯汀（Austin）的目标是通过网络实现自我，并且仅将DHT用于

00:07:54.490 --> 00:08:00.940
持久性，这可能是您开始使用钢琴演奏家的一种方式

00:08:00.940 --> 00:08:09.910
并且在我们有关ID的未来计划中-将主要致力于

00:08:09.910 --> 00:08:16.870
作为ipfs当前列表，首先要在2019年改进其两个主要方面

00:08:16.870 --> 00:08:23.770
支持我们也将在JSON中实现流API

00:08:23.770 --> 00:08:28.660
希望在本季度，当我们将代码库迁移到接收器时，

00:08:28.660 --> 00:08:35.830
作家，如果您决定在我的任务中优先考虑HT中的钢琴家

00:08:35.830 --> 00:08:43.419
苦苦挣扎，然后在达到这个短期目标以改善高

00:08:43.419 --> 00:08:52.330
根据我们在团队周的决定，管理我们旨在默认的论坛

00:08:52.330 --> 00:08:58.029
关于我们所有DSD问题的意愿，其中一些确实是

00:08:58.029 --> 00:09:04.110
至关重要，尽管对于发射前的任何事情来说都是如此

00:09:04.110 --> 00:09:11.320
在本季度的第二季度中，我们计划制定一个如何改善的计划

00:09:11.320 --> 00:09:18.580
DHT，有了这个计划，我们倾向于在第二季度进行操作，但是我们没有说

00:09:18.580 --> 00:09:25.750
尚未执行该计划，所以我们不确切知道需要多长时间，但是目前

00:09:25.750 --> 00:09:31.870
关键是要拥有IP NS / DHT和更高性能的DHT

00:09:31.870 --> 00:09:35.550
在第二季度末

00:09:36.339 --> 00:09:43.360
是的，如果有任何问题，让我们创建一个场景，让我们创建

00:09:43.360 --> 00:09:47.470
现在最好的情况是，比如说我有一个

00:09:47.470 --> 00:09:51.760
良好的联系，我已经与很多同龄人建立联系，因此我决定

00:09:51.760 --> 00:09:58.050
改变我的观点世纪，指向另一个世纪

00:09:58.050 --> 00:10:03.430
就目前的状态而言，您现在有某种基准吗？

00:10:03.430 --> 00:10:07.600
实施的毫秒数是多少

00:10:07.600 --> 00:10:14.290
进行更改需要尝试传播我们目前没有的更改

00:10:14.290 --> 00:10:21.580
基准，但根据我的测试经验，我们是否具备HTN能力

00:10:21.580 --> 00:10:27.760
我们正在运行守护程序一段时间，因为它的信号越来越多

00:10:27.760 --> 00:10:33.160
我们最终携带的连接我至少不知道两三分钟

00:10:33.160 --> 00:10:41.170
发布解决方案，我认为这很适合您的伪装，所以您说

00:10:41.170 --> 00:10:44.220
分钟正确

00:10:44.700 --> 00:10:48.950
你说两到三分钟是的

00:10:48.950 --> 00:10:56.190
很好，所以很多，您知道提取操作的速度

00:10:56.190 --> 00:11:04.110
我可以阅读操作，是否也需要那么多时间，是的，但是我是

00:11:04.110 --> 00:11:10.650
经历过床上的开放性，所以那是我说那是最好的

00:11:10.650 --> 00:11:14.580
开始的方式，因为最后我一直是小偷单球

00:11:14.580 --> 00:11:18.300
对酒吧诚实，所以基本上您将订阅想要的主题

00:11:18.300 --> 00:11:24.590
您将实时收到更新，因此您正在订阅

00:11:24.590 --> 00:11:29.580
幸福的所有改变都会在第一时间记录下来

00:11:29.580 --> 00:11:33.960
因为它将需要从DHD中获取它，但是之后您可以获取它

00:11:33.960 --> 00:11:40.530
只要您愿意，它就会在本地保存该攻击的本地记录-密钥

00:11:40.530 --> 00:11:48.560
在笔记中，但是是的，您需要为此启用pubsub

00:11:48.890 --> 00:11:54.720
发生了，但是发布将需要很多时间-如果您需要的话，您在说的是

00:11:54.720 --> 00:11:58.140
如果我们准备好了，解析速度会更快，

00:11:58.140 --> 00:12:02.460
过去的发布已经花了相同的两到三分钟

00:12:02.460 --> 00:12:13.350
最好的听众是对的，我不确定它是如何实现的

00:12:13.350 --> 00:12:16.920
JavaScript方面，我们正在讨论Vasco和我正在谈论的问题

00:12:16.920 --> 00:12:22.590
在旅途中他们有流式实施，所以我的方法是

00:12:22.590 --> 00:12:27.270
作品是基本上去尝试获取16岁左右的东西

00:12:27.270 --> 00:12:34.410
整个DHT中密钥的不同副本，这就是为什么它需要

00:12:34.410 --> 00:12:37.380
这么长的时间，但流媒体的想法

00:12:37.380 --> 00:12:41.760
协议是，当它们进入时，它将一一返回给您

00:12:41.760 --> 00:12:45.990
而不是等待所有十六个人的到来，所以如果我们使用流式传输，那么

00:12:45.990 --> 00:12:53.520
应该快很多，是的，这将是我们的第一个方法，希望我们能

00:12:53.520 --> 00:13:04.470
由Q的Jane为q1提供给您，但即使使用

00:13:04.470 --> 00:13:11.990
开放集市上的家伙只对Goering进行了一次修改

00:13:11.990 --> 00:13:18.930
DHT记录速度更快，但也存在同步和同步问题

00:13:18.930 --> 00:13:25.890
如果我们最终提供了流API，则还应考虑到

00:13:25.890 --> 00:13:31.140
在您身边，您将需要确定哪个将是最好的记录

00:13:31.140 --> 00:13:36.780
是的，我想是最新的，这是一个好主意

00:13:36.780 --> 00:13:42.420
这显然是在信心或安全性与

00:13:42.420 --> 00:13:45.720
当您在将新区块放入区块链时，您必须

00:13:45.720 --> 00:13:53.220
等一会儿再决定你觉得它有多安全，是的，我会说

00:13:53.220 --> 00:13:59.340
在安全性和性能之间的权衡方面，我们更加

00:13:59.340 --> 00:14:06.150
倾向于安全方面，因为我们正在与您打交道，但您知道该ID不是

00:14:06.150 --> 00:14:10.350
获得一定意义上我们不能真正失去的文件

00:14:10.350 --> 00:14:14.220
信息，或者至少要努力不丢失信息，所以让我们

00:14:14.220 --> 00:14:20.220
考虑一个方案场景，其中有两个公用密钥指向您的D ID

00:14:20.220 --> 00:14:29.190
记录一下计算机或设备是否更新了s记录中的类型，但是

00:14:29.190 --> 00:14:35.280
指向没有完整的先前密钥的D ID文档

00:14:35.280 --> 00:14:40.080
一个问题，所以我们必须考虑到现在，也许还有其他

00:14:40.080 --> 00:14:45.810
我们可以在其中实现的字符串API之上的解决方案或其他额外步骤

00:14:45.810 --> 00:14:51.750
为了使其更安全和性能更好，这就是我们来这里的原因

00:14:51.750 --> 00:15:01.530
讨论伊朗有关安全本身的问题，我认为

00:15:01.530 --> 00:15:07.440
如果我是，apenas的实现会始终对飞机进行身份验证

00:15:07.440 --> 00:15:14.220
如果我错了也没错，请更正我有关安全性的问题，自拍照更多

00:15:14.220 --> 00:15:20.699
安全性，从某种意义上说，您等待的时间越长，最后一次等待的时间就越长

00:15:20.699 --> 00:15:26.490
您有过时的陈旧文档的概率，您不会告诉

00:15:26.490 --> 00:15:31.230
你不知道的那个版本是正确的

00:15:31.230 --> 00:15:38.069
但是是的，这是正确的，您已经全部通过了身份验证，但是最终您可以

00:15:38.069 --> 00:15:43.230
有过时的记录，所以我们去了其中的十六个，并检查我们是否有一个

00:15:43.230 --> 00:15:47.970
验证哪一个是最好的并且仅返回最好的函数

00:15:47.970 --> 00:15:52.940
也问一个关于阴茎向上的内部运作的问题，所以我

00:15:52.940 --> 00:15:58.769
认为该记录具有Latinas记录具有正确的序号，

00:15:58.769 --> 00:16:06.209
往往是单调的，它在每次更新时增加一个，但这是对的

00:16:06.209 --> 00:16:14.069
如果您使用的是同一台设备，则在两个不同的设备上确实具有相同的密钥，

00:16:14.069 --> 00:16:18.240
在两个不同的设备上拥有相同的幸福感，并同时进行抛光，您最终将获得

00:16:18.240 --> 00:16:27.449
带有菜碟同步权，是的，我们目前或多或少地支持该类型

00:16:27.449 --> 00:16:34.040
用例，您可以共享密钥，因为我们没有工作，并且

00:16:34.040 --> 00:16:40.110
规范它，因为因为从现在起我们还没有至少一种安全的方法

00:16:40.110 --> 00:16:45.839
在同between之间交换同we，我们至少没有正式支持

00:16:45.839 --> 00:16:51.149
并且可能会有一些未命中的行为，这将是其中之一

00:16:51.149 --> 00:16:56.490
因为当我们发布新出版物时，我们基本上会检查我们的本地

00:16:56.490 --> 00:17:01.649
数据存储区是我们发布的最新根目录，基本上

00:17:01.649 --> 00:17:07.110
增加序列号，这样它将在两个正确的设备中失败，这是

00:17:07.110 --> 00:17:13.799
还与Dirk长期以来所做的工作保持同步

00:17:13.799 --> 00:17:20.790
在同等基础上的请求，例如多作者，我可以像仿真一样

00:17:20.790 --> 00:17:33.880
对，所以也有一些我不会说的解决方法，但是如果有的话

00:17:33.880 --> 00:17:42.920
两个同伴有权使用同一个我的钢琴家琴键，可能会有某种合并的方式

00:17:42.920 --> 00:17:49.910
这些并发的变化在一起，是的，我会建议是否

00:17:49.910 --> 00:17:54.560
可以考虑等等解决方案，我将解决根e

00:17:54.560 --> 00:18:00.590
包含并发更新的编写器场景，非常类似于我们所处的事物

00:18:00.590 --> 00:18:07.520
与慈善机构等或甲板甲板指针处理，它将解决

00:18:07.520 --> 00:18:17.930
关于我们存在的问题，我想说一下，我们可能

00:18:17.930 --> 00:18:24.140
可能会引发一个问题，您可能知道在IP和方面，从那里我们

00:18:24.140 --> 00:18:29.300
也可以和斯大林讨论，因为我前一阵子和他谈过

00:18:29.300 --> 00:18:34.880
现在我们得出的结论是，我们从未像现在这样

00:18:34.880 --> 00:18:41.210
为此的具体用例，我们最终推迟了对我们将如何考虑的思考。

00:18:41.210 --> 00:18:50.990
解决这个问题，您对此有像侧链一样的想法吗？

00:18:50.990 --> 00:18:57.290
就像考虑将ans类型视为一个区块链一样

00:18:57.290 --> 00:19:02.240
真相的来源，但是很慢，依此类推。

00:19:02.240 --> 00:19:10.400
套件和/或侧链，我们可以在以下方面更加实时

00:19:10.400 --> 00:19:16.100
肽段，不会有任何冲突，然后我们将其抛光至IP

00:19:16.100 --> 00:19:23.620
 NS条目及其合并的结果

00:19:24.730 --> 00:19:35.830
我认为自ipfs ipfs周末以来我们一直在讨论此问题

00:19:35.830 --> 00:19:44.470
在格拉斯哥，我来回走了一些，所以我认为共识是

00:19:44.470 --> 00:19:51.809
幸福并不是将自己设计为多设备或多多对等的，所以

00:19:51.809 --> 00:20:01.210
是的，在此之上，我们必须拥有任何解决方案

00:20:01.210 --> 00:20:07.780
记得那些关于多井状态的对话

00:20:07.780 --> 00:20:12.370
知道你不在那儿，但是你一直在做一些事

00:20:12.370 --> 00:20:17.980
你的想法也许你的答案是前一阵子，我认为基本上

00:20:17.980 --> 00:20:22.870
您和我Pedro谈论的解决方案更像是

00:20:22.870 --> 00:20:26.860
在事实发生之后检测是否有碰撞，然后就知道了

00:20:26.860 --> 00:20:35.230
最终，如果我们使用CRT CITT类型的模型，它应该全部收敛，但是它

00:20:35.230 --> 00:20:44.500
是的，坦白说，这感觉不像是一个绝妙的解决方案，因此

00:20:44.500 --> 00:20:50.140
还可以，是的，是的，我想，所以我记得现在你会有一个

00:20:50.140 --> 00:20:58.480
领导者和共享该ipsp的两个同行之一将在

00:20:58.480 --> 00:21:04.150
任何给定的更新时间，即使您每个设备都有一条侧链

00:21:04.150 --> 00:21:10.090
对等体中的一个将是显式或隐式的，就像

00:21:10.090 --> 00:21:18.970
使用友好的领导者，例如领导者选举或隐式领导者

00:21:18.970 --> 00:21:25.380
任务，而那个领导者将负责更新幸福

00:21:25.380 --> 00:21:35.710
带有正式版本的条目，您是否在其中处理了分裂统治情景

00:21:35.710 --> 00:21:38.370
Inglis解决方案

00:21:41.240 --> 00:21:45.660
确实认为我们已经讨论过德克问题，我认为会有一个问题

00:21:45.660 --> 00:21:53.690
一直没有完全讨论我们一直在评估它的持久性

00:21:53.690 --> 00:21:59.340
慈善事业本身的持久性，但我认为问题是一样的

00:21:59.340 --> 00:22:05.610
您的大脑裂开了，将会出现很多情况

00:22:05.610 --> 00:22:12.570
我想我们将描述其中一些场景Dirk是的，所以我们有点

00:22:12.570 --> 00:22:16.890
在你所说的持久性的背景下思考它，所以我们有点

00:22:16.890 --> 00:22:21.840
像在上面加了一层，这是要进行领导选举，所以很明显，如果

00:22:21.840 --> 00:22:26.520
你只有一个领导者，那就是你的单个作家，所以

00:22:26.520 --> 00:22:31.110
只需一名作家，就可以适应IP ns的情况，但随后您

00:22:31.110 --> 00:22:36.840
正如你所说的，安德烈（Andre）有一个问题

00:22:36.840 --> 00:22:40.830
领导者可以开始互相覆盖，因此有可能发现

00:22:40.830 --> 00:22:45.210
当发生这种情况时，因此，如果您检测到其中一个回退，

00:22:45.210 --> 00:22:50.580
最终你会进入一个一致的状态，所以我认为最终

00:22:50.580 --> 00:22:59.490
我们在这里降落了一切，所以只是为了进一步并重视这一点

00:22:59.490 --> 00:23:04.620
甚至我的意思是这个问题，我们拥有像

00:23:04.620 --> 00:23:13.980
情况不仅与ENS紧密相关，而且对IP广告也很抱歉，因为

00:23:13.980 --> 00:23:21.390
我们讨论了有关身份配置文件，如果我们选择使用IP，

00:23:21.390 --> 00:23:26.010
 FS以存储身份配置文件，依此类推，我们还将拥有

00:23:26.010 --> 00:23:32.340
多个设备中的II之类的问题可以编辑我的个人资料，我们将处理

00:23:32.340 --> 00:23:38.160
多作者场景和冲突等等，这可能会使

00:23:38.160 --> 00:23:45.710
在某种程度上以某种不可知的方式或低级库解决此问题的意识

00:23:45.710 --> 00:23:53.100
我们称之为在此和此中使用的用户-IP ID方法以及其他用途

00:23:53.100 --> 00:23:56.970
正如您所说的那样，在纯低音持久性方面表现出色

00:23:56.970 --> 00:24:08.040
而且在让人们归档上是否有意义，是的，我猜是这样

00:24:08.040 --> 00:24:14.490
使得在较低层上解决它当然是有意义的

00:24:14.490 --> 00:24:19.559
冲突冲突解决，您可以使用执行操作来自动完成

00:24:19.559 --> 00:24:28.920
自动使用酸度，然后您可以将视图公开

00:24:28.920 --> 00:24:37.440
策略，作为GID文档本身到我想知道的上层

00:24:37.440 --> 00:24:46.410
对于第一种情况，这种机制是否很好

00:24:46.410 --> 00:24:53.870
我们应该需要这个使这个多作家多作家

00:24:53.870 --> 00:25:04.260
能力还是我们希望默认为类似的功能（如果我们通过意愿将其检测到的话）

00:25:04.260 --> 00:25:09.120
检测到冲突，然后我们警告用户或其他原因，因为用户将

00:25:09.120 --> 00:25:14.730
是同一用户权限，这将是同一个人正确正确

00:25:14.730 --> 00:25:20.730
是的，在这种情况下，它的重点更加突出，我们可以得出更具体的结论

00:25:20.730 --> 00:25:27.300
解决这些冲突的方法，的确是，您知道它不是用户友好的，但是

00:25:27.300 --> 00:25:34.500
是的，您可以做出让步，因为例如，如果在设备中检测到

00:25:34.500 --> 00:25:39.240
具有相同序号且具有不同beta的两个并发版本

00:25:39.240 --> 00:25:47.429
他们是不同的数据，那么我们可以服从用户来解决

00:25:47.429 --> 00:25:56.880
其中之一很好，您可以随时将其存储为慈善机构，它会自动

00:25:56.880 --> 00:26:03.050
所有事情的合并是，我们

00:26:03.190 --> 00:26:10.870
GID文档本身不会，除非我错了，否则LED文档

00:26:10.870 --> 00:26:16.420
本身就是CR DT，实际上是一个复杂的数据结构，不是

00:26:16.420 --> 00:26:23.080
身份证件，因此不符合GID规范以及您是否开始理智

00:26:23.080 --> 00:26:28.870
他们不会为以后的冲突解决感到不满，因此不会

00:26:28.870 --> 00:26:35.070
有你知道这将是不适合在比赛的人之前表现出来的

00:26:35.070 --> 00:26:39.670
使用PL D导航或使用绝对检查器

00:26:39.670 --> 00:26:44.860
例如，他们将无法检查不是

00:26:44.860 --> 00:26:52.510
问题至少是规范说的是ID方法的解析器必须

00:26:52.510 --> 00:26:56.230
返回值加了一个大的，实际上有很多本机方法

00:26:56.230 --> 00:27:03.610
使用一种更实际的操作策略不是真的，而是相似的

00:27:03.610 --> 00:27:09.400
您正在使用基于ETA的Shipper di D方法探索的实例

00:27:09.400 --> 00:27:14.830
他们在使用智能事件功能的意义上使用

00:27:14.830 --> 00:27:20.890
签订合同以重建整个Yeley文档，因此无需存储di D

00:27:20.890 --> 00:27:26.620
在您刚刚存储问题的每个操作中记录圣文件

00:27:26.620 --> 00:27:31.480
就像我添加了这个公钥一样，我已经删除了这些身份验证密钥

00:27:31.480 --> 00:27:37.900
依此类推，然后他们做的是，他们阅读了整个事件，

00:27:37.900 --> 00:27:43.780
智能合约并基于这些事件重建ID文档，因此它

00:27:43.780 --> 00:27:53.560
如果您最终采用这种方法，那将类似于这种感觉，好吧，

00:27:53.560 --> 00:27:57.820
解析器的条款，它将返回正确的元素，但实现

00:27:57.820 --> 00:28:04.960
本身不完整，必须错过所有查询的所有标签节点

00:28:04.960 --> 00:28:14.020
依此类推，法律对吗，是的，我认为在DHT中改善

00:28:14.020 --> 00:28:19.760
性能提高对我来说似乎是一个高贵的计划

00:28:19.760 --> 00:28:26.270
描述得很好，我的问题是解析器如何找到所有

00:28:26.270 --> 00:28:33.190
是的，所以基本上让我们这就像一个可能的实现，所以

00:28:33.190 --> 00:28:40.940
基本上，您会说我会在快速平移的文档中看到

00:28:40.940 --> 00:28:46.970
它像神圣的30一样打开，您拥有ID ID ID，然后拥有IPS

00:28:46.970 --> 00:28:52.250
公钥，因此基本上它不会查询键入s的密钥，它将为您提供

00:28:52.250 --> 00:28:59.870
而不是ID文档，而是指向工具的CID或一组C ID。

00:28:59.870 --> 00:29:05.600
具有最后一个操作且支腿节点本身指向的甲板节点

00:29:05.600 --> 00:29:11.840
之前的操作等等，然后我们基本上要做的就是解决

00:29:11.840 --> 00:29:18.920
所有那些像甲板节点根据其部分顺序，然后像

00:29:18.920 --> 00:29:26.060
决胜局或类似的事情会打断领带，让您最终大放异彩

00:29:26.060 --> 00:29:33.920
标记的节点（如操作）的集合，最后您拥有ID

00:29:33.920 --> 00:29:39.110
基于这些操作的文档基本上可以做到，但是

00:29:39.110 --> 00:29:42.200
我认为您仍然有相同的问题，必须找出解决方法

00:29:42.200 --> 00:29:45.800
指向链的末端，是的，您可能最终知道了

00:29:45.800 --> 00:29:49.970
覆盖自己的目标，是的，我看到阴茎和多对偶的情况，

00:29:49.970 --> 00:29:52.880
问题他根本解决不了这个问题

00:29:52.880 --> 00:29:58.220
就像只是自己实施，我们现在需要仍然需要解决

00:29:58.220 --> 00:30:05.780
多作家场景，所以是的，我们需要喜欢多作家场景

00:30:05.780 --> 00:30:10.910
面对这样一个事实，我们可能拥有多顶帽子，我们必须

00:30:10.910 --> 00:30:17.240
可靠地存储它们，以便我们在进行并行操作时不会丢失任何广告

00:30:17.240 --> 00:30:19.420
更新

00:30:22.400 --> 00:30:31.170
所以总结一下，如果您想出了这将起作用的方式会这样

00:30:31.170 --> 00:30:37.050
他们的并发与分歧授权并发两个并发

00:30:37.050 --> 00:30:44.730
通过查询DHT可以得到两个Vig文档的两个版本

00:30:44.730 --> 00:30:53.400
并发版本，然后您将它们正确合并，因此我们必须

00:30:53.400 --> 00:31:00.420
使用后您会清楚地知道如何可靠地存储指针或指针的头部

00:31:00.420 --> 00:31:04.850
对角线并发让这是一个不同的问题

00:31:04.850 --> 00:31:11.190
假设我离线或部分离线，并且在另一台设备上

00:31:11.190 --> 00:31:16.560
我已经完全在线，可以进行更改，就像我在两个设备上都批准了一个设备一样

00:31:16.560 --> 00:31:22.560
和其他设备都将指向一个新的头部，我们必须将其写入

00:31:22.560 --> 00:31:29.250
IP NS损伤的权利，我们该如何处理，是的，现在的阴茎是一个

00:31:29.250 --> 00:31:37.530
作家赢了好吧，或-或-或随机，所以发生了什么，我们不知道该怎么办

00:31:37.530 --> 00:31:41.970
新的工作非常愉快，但是任何节点如何处理存储两个

00:31:41.970 --> 00:31:50.880
并发版本，因此，例如，如果有版本5，那么它将获得一个

00:31:50.880 --> 00:31:56.790
来自某人的更新，哦，这实际上是版本5，

00:31:56.790 --> 00:32:01.950
我们现在有两个并发，所以不会更新，是的

00:32:01.950 --> 00:32:12.840
基本上，您出版的实体我也将阴茎记录下来，所以除了

00:32:12.840 --> 00:32:17.700
将其发送到网络，并将其也存储在本地数据存储中

00:32:17.700 --> 00:32:23.340
基本上有两种情况应该保留

00:32:23.340 --> 00:32:29.510
本地和另一个用于路由的目的是为了

00:32:29.510 --> 00:32:35.550
每次都能理解什么是最后一次发布的信息，但只有

00:32:35.550 --> 00:32:42.130
因此，如果我们在网络中查找密钥，密钥将有所不同

00:32:42.130 --> 00:32:48.960
来自本地的记录，Pires并不知道该记录是否为

00:32:48.960 --> 00:33:01.750
由另一个同行发布或不行，我认为也许唯一的解决方案是

00:33:01.750 --> 00:33:08.470
让我们进行另一种操作，让我们想象一下它是DHT，

00:33:08.470 --> 00:33:11.590
在DHT中，我们拥有权利和读取操作，而我们真正需要的是

00:33:11.590 --> 00:33:14.550
合并操作

00:33:22.480 --> 00:33:29.480
但要反对合并操作不会在本地存储中写入

00:33:29.480 --> 00:33:34.000
之前发布数据的啤酒

00:33:34.000 --> 00:33:38.750
好吧，我在想的是，它将想像一下任何新的变化

00:33:38.750 --> 00:33:43.309
您可以跟踪并发头的方式，然后可以解决它们，因此

00:33:43.309 --> 00:33:48.080
现在的问题是，您不能总是覆盖那里的内容吗？

00:33:48.080 --> 00:33:51.559
而不是查看其中存在的内容并将其合并到其中，这样您就可以

00:33:51.559 --> 00:34:00.140
跟踪有意义的并发头，我不确定，因为DHD

00:34:00.140 --> 00:34:07.880
本身并不了解IP NS中使用的技术，因为

00:34:07.880 --> 00:34:14.869
DHT刚收到脚踩推杆并进入Myr，最终合并，但是

00:34:14.869 --> 00:34:21.800
它是以前从IP NS模块和所有Ibanez收到的想象中收到的

00:34:21.800 --> 00:34:26.869
模块也将其放入本地数据存储中，就像在另一个

00:34:26.869 --> 00:34:34.669
从DHT放置，但是HT如何处理样式更新（例如）

00:34:34.669 --> 00:34:39.379
确保我知道离线一段时间不会尝试

00:34:39.379 --> 00:34:48.379
当您查询DHT时，基本上覆盖一个条目就可以了

00:34:48.379 --> 00:34:56.330
网络上的那16条记录，它作为选择哪个记录的功能

00:34:56.330 --> 00:35:02.330
16条记录中最好的一项是最好的，如果存在，从那里开始

00:35:02.330 --> 00:35:05.900
如果他们不同，没关系，这是最好的

00:35:05.900 --> 00:35:10.760
我现在将广播这两个告诉我他们的剩余啤酒

00:35:10.760 --> 00:35:18.380
有记录，但是已经过时了，所有人都更新了新记录，一个记录就可以了

00:35:18.380 --> 00:35:27.920
问题是如果没有60个纯对等点，这是我认为的操作文件

00:35:27.920 --> 00:35:37.700
我不确定是否可以，因此基本上可以为我们提供一定的保证

00:35:37.700 --> 00:35:44.990
如果新的对等方确实落后，并尝试更新记录，并且

00:35:44.990 --> 00:35:48.890
新记录有一个内部攻击者实际上是新记录

00:35:48.890 --> 00:35:53.839
而是正确地发布，因此在操作之后，对等方可以再次查询

00:35:53.839 --> 00:35:58.430
在获取记录方面，以及是否与他发布的记录有所不同

00:35:58.430 --> 00:36:07.750
表示他已经过时，而且他的操作有点否认正确

00:36:08.780 --> 00:36:11.359
我不确定我是否理解你的问题

00:36:11.359 --> 00:36:17.960
我可以找到，所以假设我们的A和B对等体具有相同的I

00:36:17.960 --> 00:36:23.089
钢琴家我想在阴茎上演奏相同的音色，所以我们说

00:36:23.089 --> 00:36:29.930
第一年很冷，相对于

00:36:29.930 --> 00:36:35.150
整个网络现在都处于离线状态，而核新

00:36:35.150 --> 00:36:41.270
第二个人发行了新唱片，过了一段时间我喜欢

00:36:41.270 --> 00:36:46.339
一个月后，第一杯啤酒重新上线并立即尝试发布

00:36:46.339 --> 00:36:55.310
新的Hecker没问题，有新记录成立或被否决了

00:36:55.310 --> 00:37:01.190
因为第二个同行实际上是在发布之前的东西

00:37:01.190 --> 00:37:05.780
我们不知道的第一个经历了一切

00:37:05.780 --> 00:37:12.319
所以如果我没记错的话，我认为在实现中很糟糕

00:37:12.319 --> 00:37:19.750
他们实际上是在写入网络之前获取序列号

00:37:19.790 --> 00:37:26.900
而且我认为我们不会在JavaScript中做到这一点，但我无法撼动

00:37:26.900 --> 00:37:32.090
问题是它的速度很慢，是的，所以你说的是

00:37:32.090 --> 00:37:36.980
co实现实际上获取了死的单调增量数

00:37:36.980 --> 00:37:43.430
或递增编号，如果不匹配，则可以正确支付文件

00:37:43.430 --> 00:37:47.690
它会增加它，所以它会去获取最新的数据，包括

00:37:47.690 --> 00:37:54.380
序列号，那么它将覆盖任何您知道的增量（如果是C）

00:37:54.380 --> 00:38:01.300
这是从他们去的消费者中可见的东西，我们p2p

00:38:01.300 --> 00:38:08.030
因为我们知道增量信息不是实现

00:38:08.030 --> 00:38:13.040
像我说的那样是单调的两次，那么我们可能会认为还可以

00:38:13.040 --> 00:38:17.000
这是并发更新，所以我必须做其他事情

00:38:17.000 --> 00:38:25.369
需要获取以前的版本，并出现，如可见的那样可能

00:38:25.369 --> 00:38:31.490
做这样的事情，我们一直在想是否可以使用这样的事情

00:38:31.490 --> 00:38:42.380
解决CR DT部分的同等方法，然后我们发布发布到的内容

00:38:42.380 --> 00:38:50.500
键入s记录将是序列值I的结果

00:38:50.500 --> 00:39:01.040
不知道这对于解决解决方案是否合理是

00:39:01.040 --> 00:39:06.020
这就是我试图通过持久性协议实现的目标，因此

00:39:06.020 --> 00:39:11.330
那当然也是我的想法，我想院长可能有一些

00:39:11.330 --> 00:39:18.970
对他想去哪里有一些清晰的想法，好吧

00:39:18.970 --> 00:39:27.590
好吧，基本上从DS撤出就是vasco希望看看他是否

00:39:27.590 --> 00:39:33.060
可以改善IP IE的性能，我很高兴

00:39:33.060 --> 00:39:39.090
抱歉，我们可能还需要为多作者提供解决方案

00:39:39.090 --> 00:39:45.420
场景中有一些候选人，我认为我们需要

00:39:45.420 --> 00:39:52.770
你知道你想起它是同步的，也许

00:39:52.770 --> 00:39:58.140
对正在解决的问题发表评论，提出一些解决方案，因为我们需要在那里

00:39:58.140 --> 00:40:02.160
还有其他一些我们需要解决的问题，我们有

00:40:02.160 --> 00:40:08.160
大约50分钟，我想解决另一个我担心的问题

00:40:08.160 --> 00:40:16.320
我们还有另一个IP ID问题，这基本上是因为您的ID是

00:40:16.320 --> 00:40:22.070
由您的公钥的哈希组成，这意味着如果您的私钥是

00:40:22.070 --> 00:40:27.110
损害了使用更新记录的人以某种方式受到损害

00:40:27.110 --> 00:40:31.170
本质上说，您是IDS，整个身份都受到了损害，您可以

00:40:31.170 --> 00:40:37.230
真正恢复它，因为ID本身包含私钥，因此您可以

00:40:37.230 --> 00:40:41.760
解决公钥，因此这意味着您可以简单地发布另一个

00:40:41.760 --> 00:40:48.480
因为rdid会有所不同，这对任何人都有意义吗，所以我们

00:40:48.480 --> 00:40:53.580
都在同一页上，所以我一直在想

00:40:53.580 --> 00:40:59.670
关于这个问题的一些解决方案，我们有第一个解决方案

00:40:59.670 --> 00:41:07.140
我在这里列出了这不是真正的解决方案，更像是

00:41:07.140 --> 00:41:12.030
我们基本上强迫两个用户，因为这是一个问题

00:41:12.030 --> 00:41:17.520
表示有最干净的私钥，用来播放的私钥

00:41:17.520 --> 00:41:23.070
输入s记录需要保持安全并远离设备，因此

00:41:23.070 --> 00:41:28.830
实际上，在第一次使用用户ID M时，我们构造了私钥，

00:41:28.830 --> 00:41:34.850
这是Vasko的另一个问题，我们可以私下建造阴茎吗？

00:41:34.850 --> 00:41:39.810
自己，还是内置的东西，我们真的没有

00:41:39.810 --> 00:41:46.070
创建它的选项基本上是，如果您

00:41:46.070 --> 00:41:52.580
至少在CLI中启动我认为HTTP如果启动，则应该是相同的

00:41:52.580 --> 00:41:59.510
具有新密钥的恶魔，例如，如果您使用ipfs密钥生成并

00:41:59.510 --> 00:42:05.210
生成自己的密钥，然后启动恶魔，然后像这样映射

00:42:05.210 --> 00:42:10.820
您要使用的键是死键，而不是句点单元格中的键

00:42:10.820 --> 00:42:15.980
正确，那么就可以使用它了，因为我的解决方案是使用Shamu

00:42:15.980 --> 00:42:22.760
秘密夏琳，所以基本上我们有12个词可以用来重建

00:42:22.760 --> 00:42:28.670
私钥，因此基本上这些设备都不会拥有阴茎阴茎的私钥

00:42:28.670 --> 00:42:35.810
几乎永远也不需要它，因为它是最不需要的

00:42:35.810 --> 00:42:41.150
更新神文件，我们要求其中一些单词以便

00:42:41.150 --> 00:42:46.190
重建私钥会临时发布有关在服务器上找到的DNA的更新

00:42:46.190 --> 00:42:50.210
记录在阴茎记录上，然后将其删除，所以这有点

00:42:50.210 --> 00:42:55.130
像暂时的想象一样，在用户界面方面，您会被引导到

00:42:55.130 --> 00:42:59.360
在创建您的身份的整个过程中，最后一步是

00:42:59.360 --> 00:43:04.040
像okay这样的东西，您必须存储这些单词才能恢复您的

00:43:04.040 --> 00:43:10.070
身份，请确保您将这些文字写在某个地方，

00:43:10.070 --> 00:43:16.370
安全地存储，因为它们将被删除，并且一旦用户单击它，它就会被删除

00:43:16.370 --> 00:43:20.540
将会再次提示您进行确认，然后我们执行此操作，因此这基本上是

00:43:20.540 --> 00:43:27.650
解决方案第一，这是否有意义或是否有任何疑问，这是

00:43:27.650 --> 00:43:32.930
我认为从技术上讲，这部分不是很合理

00:43:32.930 --> 00:43:38.110
友好，是的，问题就在于每当您需要添加新设备时

00:43:38.110 --> 00:43:45.470
或撤消您需要提示输入某个百分比的设备

00:43:45.470 --> 00:43:50.410
我们看到的十二个单词中的百分比不是很容易Frank Lloyd Wright

00:43:50.410 --> 00:44:00.140
有一些事情要考虑，那就是您的次数

00:44:00.140 --> 00:44:05.380
添加新设备和移除设备我们移动设备的频率并不高

00:44:05.380 --> 00:44:09.800
但我仍然不使用朋友，所以我一直在考虑另一个

00:44:09.800 --> 00:44:16.640
解决方案和第二个解决方案，这是一个分层的关键解决方案，所以让

00:44:16.640 --> 00:44:21.950
我尝试解释一下并记住，可能要花一些时间

00:44:21.950 --> 00:44:25.910
在中心，但我会尽力解释，从本质上讲，它类似于

00:44:25.910 --> 00:44:31.730
从我们拥有控制记录的私钥的意义上讲，一种解决方案-

00:44:31.730 --> 00:44:36.530
记录，但该apenas记录并不指向首长或DA

00:44:36.530 --> 00:44:45.470
发展本身，它指向另一个IP NS记录权，而第二个

00:44:45.470 --> 00:44:53.720
记录由第2层IPS私钥控制，这是第二次公开

00:44:53.720 --> 00:44:58.820
记录实际上指向头部或指向D ID文档，这些是什么

00:44:58.820 --> 00:45:06.320
给我们的是，我们可以让设备之间共享第二层密钥，以便

00:45:06.320 --> 00:45:13.250
我们可以轻松地将新设备添加到该列表中，因为我们处于控件中

00:45:13.250 --> 00:45:20.000
关于单位电池的概念，但是每当我们需要真正预订新设备时，我们

00:45:20.000 --> 00:45:27.950
需要基本生成一个新层来打开分发给所有用户的密钥

00:45:27.950 --> 00:45:34.280
除我们要踢出的设备以外的设备，以及

00:45:34.280 --> 00:45:39.860
最后，我们将第1层P指向第二个第二个

00:45:39.860 --> 00:45:44.270
层到键，因此从用户友好性的角度来看，添加新值非常容易

00:45:44.270 --> 00:45:49.820
设备想象甚至连添加新设备也可能像简单地配对

00:45:49.820 --> 00:45:52.780
与我们的代码的关键，因为我们可以利用

00:45:52.780 --> 00:45:59.860
EFS和pub / sub x12假设您正在创建新设备，或者

00:45:59.860 --> 00:46:05.420
说在新设备上设置IDM，而另一台设备上已经有IDM

00:46:05.420 --> 00:46:11.510
设备，您可以选择要从哪个设备导入或设置，以及

00:46:11.510 --> 00:46:16.760
您点击该设备，我们需要扫描该QR码和

00:46:16.760 --> 00:46:21.830
第二层密钥将被加密并传递到新设备，因此它将

00:46:21.830 --> 00:46:27.380
将在设备之间共享，现在有意义，因为它相当

00:46:27.380 --> 00:46:29.800
复杂的

00:46:31.970 --> 00:46:39.410
有没有人有任何疑问或好吗，我想我认为我决定是的，没事

00:46:39.410 --> 00:46:44.460
因此，关键点是在您不需要的意义上更安全

00:46:44.460 --> 00:46:50.360
您需要延迟一键，而当我们在步行时，您通常只需要一键

00:46:50.360 --> 00:46:56.610
而且我们仍然拥有，而且它对用户更友好，因为您可以扫描

00:46:56.610 --> 00:47:03.060
您可以随时要求提供护理代码，以求将十二个单词从巢穴变成关键

00:47:03.060 --> 00:47:08.490
当您在设备中使用Perry时，您知道这对用户体验有好处，但是

00:47:08.490 --> 00:47:15.270
当您挑衅设备时，您需要提示输入这十二个单词或在

00:47:15.270 --> 00:47:21.810
至少占单词总数的百分比，所以这是另一种解决方案

00:47:21.810 --> 00:47:24.950
一般考虑一下

00:47:26.769 --> 00:47:36.809
我必须考虑一下，还有一些时间可以帮助离线吗

00:47:36.809 --> 00:47:46.769
是的，是的，多层多层按键I [音乐]

00:47:46.769 --> 00:47:55.479
想想，但是什么时候您只想存储第二层

00:47:55.479 --> 00:48:00.969
撤销是合理的，是的，所以忙的是第一层

00:48:00.969 --> 00:48:07.749
密钥不会存储在设备上，它实际上是暂时存储的，直到您

00:48:07.749 --> 00:48:12.819
支持它，像在IBM中想象的那样，您有一个警告标志，嘿，您

00:48:12.819 --> 00:48:17.289
需要备份您的这些令人不安的单词，或者也要在完成时那样

00:48:17.289 --> 00:48:23.319
这样一键就完成了，您只需由您开始，或者您甚至可以

00:48:23.319 --> 00:48:29.849
将单词传播给您的朋友，依此类推，然后延迟输入密码是

00:48:29.849 --> 00:48:36.359
实际上存储在设备上的内容是为了轻松拥有新设备

00:48:36.359 --> 00:48:44.979
基本上这也是主密钥和设备的概念

00:48:44.979 --> 00:48:49.749
密钥和会话密钥基本相同，主密钥由

00:48:49.749 --> 00:48:54.849
一个两层的设备密钥在IDM的概念中仍然存在

00:48:54.849 --> 00:48:59.799
以此类推，它与我们在这里讨论的内容不混在一起

00:48:59.799 --> 00:49:06.640
万能钥匙万能钥匙是一个两层方法套件基本上还可以

00:49:06.640 --> 00:49:12.279
因此，当您解析密钥时，您需要进行两次IPS查找

00:49:12.279 --> 00:49:16.809
正确正确，这就是为什么我问到您了解性能的原因

00:49:16.809 --> 00:49:22.539
操作，因为它可能会影响解决方案，因此，如果需要花费四个时间，

00:49:22.539 --> 00:49:30.940
分钟的时间从中读取记录，我知道有和没有，但醒来的却是

00:49:30.940 --> 00:49:36.999
基本上，这基本上让我这边好吧，我们不会去做这艘船

00:49:36.999 --> 00:49:40.450
好吧，可能还不算太糟，因为正如您所说，您不会

00:49:40.450 --> 00:49:47.230
经常更改第一层密钥，您知道这一点，因为我说的是您可以

00:49:47.230 --> 00:49:51.099
使用pub / sub有点像一旦将它钓鱼一次，那么您就可以

00:49:51.099 --> 00:49:58.390
密切关注它，它将实时更新，您知道的，然后我们有一个

00:49:58.390 --> 00:50:05.109
老实说，我对解决方案树不太了解

00:50:05.109 --> 00:50:11.829
是由一个团队提出的，但我的意思是我确实确实喜欢过几次，

00:50:11.829 --> 00:50:17.440
我真的不明白他在风俗习惯中是什么意思

00:50:17.440 --> 00:50:22.000
验证器等等，如果您能帮助我了解什么

00:50:22.000 --> 00:50:27.390
我们尝试他想要表达的东西，那会很棒

00:50:35.340 --> 00:50:37.400
你

00:50:44.880 --> 00:50:46.940
你

00:50:48.549 --> 00:50:50.609
你

00:51:02.309 --> 00:51:06.080
你你

00:51:09.070 --> 00:51:11.130
你

00:51:12.040 --> 00:51:19.190
你我想这是在说

00:51:19.190 --> 00:51:25.640
就像您可以标记某种已经存在的某种方式

00:51:25.640 --> 00:51:30.200
无效，因此，如果您检查此键，并且该键上是否有值

00:51:30.200 --> 00:51:33.320
表示您认为有效的内容不再有效

00:51:33.320 --> 00:51:39.080
我认为这就是说的没问题，但是它如何解决它们

00:51:39.080 --> 00:51:44.930
就我用于AppliTrack工作的私钥而言，妥协密钥是

00:51:44.930 --> 00:51:50.480
妥协了如何解决这个问题，因为公众的哈希值

00:51:50.480 --> 00:51:57.830
关键是您的D ID，所以您可能真的不知道我认为这也是一种工具

00:51:57.830 --> 00:52:04.940
一个关键的场景，这只是延迟了被泄露的密钥，是的，我

00:52:04.940 --> 00:52:10.010
也想到了他可能想说的话

00:52:10.010 --> 00:52:16.160
自定义验证器是指是否指向某个层密钥或诸如此类的东西

00:52:16.160 --> 00:52:26.000
验证那些场景，但这不是我的意思，仍然不是很清楚

00:52:26.000 --> 00:52:32.090
我们正在录制hepcidin可以澄清她尝试过的内容

00:52:32.090 --> 00:52:41.770
稍后再解释，因此整个主题是

00:52:41.770 --> 00:52:47.540
确定第一年的方法，我们已经讨论了一些问题

00:52:47.540 --> 00:52:53.330
IP ID，还有另一个重要的可能性

00:52:53.330 --> 00:53:00.020
大头钉我不会去块堆栈，因为虽然他们很好，但他们

00:53:00.020 --> 00:53:05.510
从技术上讲正在使用ID方法，或者对不起他们在技术上

00:53:05.510 --> 00:53:13.430
从技术上讲，他们实际上并没有真正遵守标准

00:53:13.430 --> 00:53:19.640
现在和第二次当我尝试它的规格时，他们没有暴露

00:53:19.640 --> 00:53:23.630
ID本身会记录文档，特别是它们的库

00:53:23.630 --> 00:53:29.480
供应并不意味着真的可以让我们对此进行控制

00:53:29.480 --> 00:53:35.029
相反，Newport有一个核心库，基本上他们在

00:53:35.029 --> 00:53:40.450
他们的移动应用和其他场景，因此通常拥有所有创建工具

00:53:40.450 --> 00:53:49.369
您认为您的港口身份和许多打过的网球，所以我们仍然

00:53:49.369 --> 00:53:59.089
仍然面对这两种情况，例如您的端口或IP ID，您

00:53:59.089 --> 00:54:05.210
对于您是否应该在整个PD中保持真实状态有很强的见解，或者

00:54:05.210 --> 00:54:15.319
纽波特解决方案是第一种雪人方法还是不太理想，我猜我猜你

00:54:15.319 --> 00:54:23.210
对您的端口有一些经验，这是使用您的端口的专业人士

00:54:23.210 --> 00:54:30.549
猜想我的PID不是很复杂，除非您开始使用多设备

00:54:30.549 --> 00:54:37.549
问题，所以如果您想一开始就攻击多设备问题，我想

00:54:37.549 --> 00:54:42.849
您的端口为此做了更充分的准备

00:54:43.450 --> 00:54:48.410
否则，如果您不想从多功能设备开始，我会

00:54:48.410 --> 00:54:55.489
从没有凯西开始，因为这很简单，锻炼身体会很好

00:54:55.489 --> 00:55:03.430
锻炼我的P＆S本身很好，但是如果我想很好的话，很难改变

00:55:03.430 --> 00:55:14.059
普通的Nyepi ID使用多层密钥方法

00:55:14.059 --> 00:55:26.630
迁移到某种多层密钥或方法的成本，我不是

00:55:26.630 --> 00:55:31.339
确保它取决于用例的权利，因为例如比特币

00:55:31.339 --> 00:55:35.299
你知道，如果你失去了你的钥匙，你只是失去了你知道一百万美元或在我

00:55:35.299 --> 00:55:41.059
案例十美元，但是人们会学会接受那种特定的

00:55:41.059 --> 00:55:44.820
用例，所以也许可以将其开发为

00:55:44.820 --> 00:55:48.060
起点，如果很简单，只是针对特定用例，其中

00:55:48.060 --> 00:55:52.410
没有密钥复制或其他任何东西，然后创建更复杂的

00:55:52.410 --> 00:55:58.730
身份更进一步我同意是否可以，如果可以的话

00:55:58.730 --> 00:56:04.590
像您这样的身份拥有设备身份，我知道您已经

00:56:04.590 --> 00:56:08.250
对此进行了很多思考，因此设备密钥，然后是会话密钥，然后是

00:56:08.250 --> 00:56:13.800
万能钥匙，但如果您可以根据他们的

00:56:13.800 --> 00:56:18.750
您可以像存在设备密钥一样分层构建软件架构

00:56:18.750 --> 00:56:24.180
如果您失去了它自己的幸福，那么您就是设备受损了，以后如果

00:56:24.180 --> 00:56:31.770
您想拥有一个可以将这些人聚集在一起的主人身份

00:56:31.770 --> 00:56:41.430
可以稍后再添加，是的，我的意思是根据解决方案一来考虑一下

00:56:41.430 --> 00:56:48.240
与解决方案2相比，通过执行解决方案1，我们并不是真的在说

00:56:48.240 --> 00:56:52.740
我们将来将有解决方案，因为这些都是我们不断发展的

00:56:52.740 --> 00:57:00.840
规格，我们实际上可以拥有规格，因此本质上是

00:57:00.840 --> 00:57:08.340
IP IP ID可以发展，代码本身可以并且应该处理的软件

00:57:08.340 --> 00:57:14.010
不同的版本，假设我们解析这些IP ID的时间就是ID

00:57:14.010 --> 00:57:19.560
指着我付了高等法院费用我已经去了一个周期，我应该能够看到

00:57:19.560 --> 00:57:25.410
版本，并查看版本，我应该购买，这样我就可以叉连接Forks

00:57:25.410 --> 00:57:31.500
处理这些不同情况的代码条款，因此我们可以从

00:57:31.500 --> 00:57:35.790
有一个非常简单的解决方案，它没有很多

00:57:35.790 --> 00:57:41.400
我们将要讨论的问题，但请记住，解决方案1有一些问题

00:57:41.400 --> 00:57:46.320
对Y和X的影响，因为实际上拥有任何新设备

00:57:46.320 --> 00:57:50.820
麻烦的是，这对用户而言并不是很简单

00:57:50.820 --> 00:57:55.110
经验，你甚至必须输入类似的单词和东西

00:57:55.110 --> 00:58:03.550
现在我在说的是，是的，我了解，但是是一种新设备

00:58:03.550 --> 00:58:10.990
会在你和由纪之间，你的身份不是，那不是很好，但是如果

00:58:10.990 --> 00:58:17.250
和并且没有什么要考虑的，但是如果您可以分层的话

00:58:17.250 --> 00:58:24.160
使其不会损害未来的多级设备

00:58:24.160 --> 00:58:32.260
像第一个解决方案，首先您只有设备密钥，从侧面看，所以首先

00:58:32.260 --> 00:58:41.650
有播放器，我添加了iPhone X，以后您可以干一个，有多个

00:58:41.650 --> 00:58:49.680
设备，因为演示多设备问题或撤销了

00:58:49.680 --> 00:59:00.330
设备还是一个复杂的非常复杂的问题，好吧，我们应该

00:59:00.330 --> 00:59:05.970
是的，我的意思不是那么复杂，只是规格

00:59:05.970 --> 00:59:12.390
吊销列表或被吊销的公钥具有一定的灵活性

00:59:12.390 --> 00:59:17.220
因为他们并没有为此特别指定这种类型的结构，但是

00:59:17.220 --> 00:59:23.160
特别是在技术方面，我们要做的是

00:59:23.160 --> 00:59:28.410
采取或假设我们已经有针对多作者场景的解决方案

00:59:28.410 --> 00:59:35.460
但我们可能要做的就是-记录文档版本的更新

00:59:35.460 --> 00:59:42.390
它不包含公钥，并且已被泄露，并且还会使

00:59:42.390 --> 00:59:46.320
它在那里不耐烦地可用，所以如果我随身携带的话

00:59:46.320 --> 00:59:51.300
在版本列表中，也将被斩首，将密钥添加到该列表中

00:59:51.300 --> 00:59:58.440
该列表以及在此之前所做的所有签名均有效，并且所有

00:59:58.440 --> 01:00:05.640
此后所做的签名将无效或被丢弃，并且还会更改

01:00:05.640 --> 01:00:13.200
被撤销的P发生这种情况的想法将基本上会失败，因此

01:00:13.200 --> 01:00:18.600
这并不是很复杂，只是多作者场景以及

01:00:18.600 --> 01:00:25.340
主键是执行此操作所必需的，可以理解

01:00:25.610 --> 01:00:29.400
基本上，每当您需要获取文档时，就需要

01:00:29.400 --> 01:00:36.180
万能钥匙就可以了，但是有一些巧妙的技巧，例如第二层或

01:00:36.180 --> 01:00:41.970
对于misaki的两层方法，可以将主密钥分发给

01:00:41.970 --> 01:00:49.290
节流阀设备，因为您确实有不得已撤消的私钥

01:00:49.290 --> 01:00:55.110
基本上所有其他人，并重新获得飞行员的控制权，是的

01:00:55.110 --> 01:01:00.230
可能有帮助的是，此公开个人资料中的内容

01:01:00.230 --> 01:01:06.430
因为如果只是加密材料，公众手中

01:01:06.430 --> 01:01:12.260
您是免费的，我们不需要经常在添加新内容时使用applet

01:01:12.260 --> 01:01:24.280
设备或移除设备的权利，其余的全部单独存储

01:01:24.280 --> 01:01:31.160
就像那边的酱汁，每个人都可以控制哪些聚会

01:01:31.160 --> 01:01:41.030
接收那些接收那些证书，所以星期五的凭据

01:01:41.030 --> 01:01:47.660
但是是的，这就像是一个单独的事物，虽然它是相关的，但是可以

01:01:47.660 --> 01:01:52.310
分别考虑，我算出您将需要多久使用一次新的

01:01:52.310 --> 01:01:57.560
更新这些文档，仅在您添加新设备或撤消这些文档时

01:01:57.560 --> 01:02:07.130
任何设备，也许如果您以后再更改，例如说咖啡馆一样或身份具有

01:02:07.130 --> 01:02:12.230
想要与您的身份相关联的服务，您可能还需要

01:02:12.230 --> 01:02:18.560
主密钥，以便您的父亲文档具有称为服务的属性，该属性可以

01:02:18.560 --> 01:02:24.589
那里有指向您的咖啡馆或身份的条目的点

01:02:24.589 --> 01:02:30.830
实例上帝，所以当你想添加一个好吧，是F还是唤起

01:02:30.830 --> 01:02:36.230
基本上，每当您需要兼任副总裁时，我都没有来找我做，并且需要

01:02:36.230 --> 01:02:43.300
您的主密钥变得正确，这是您知道的，这不是很常见

01:02:43.300 --> 01:02:51.580
爱我，你说拥有纸质史诗还不错

01:02:51.580 --> 01:02:56.510
第一人称视角是的，是的，我的意思是我们可以作为第一个版本来做到这一点

01:02:56.510 --> 01:03:02.300
这样我们就不会真正陷入复杂的解决方案中，以此类推

01:03:02.300 --> 01:03:08.000
关于什么时候一切正常，我的意思是想法和具有我们的信誉

01:03:08.000 --> 01:03:14.360
以及身份信息和IDM本身，我们可能会认为

01:03:14.360 --> 01:03:21.640
通过thule方法改进到像第2版一样

01:03:21.640 --> 01:03:28.310
我们可以在加拿大，但我的意思是多作者仍然是两个方面的问题

01:03:28.310 --> 01:03:36.380
之所以会出现这种情况，是因为因为您的密钥需要更新文档

01:03:36.380 --> 01:03:41.450
但是如果您知道有冲突，可能会有一些冲突

01:03:41.450 --> 01:03:47.120
并发更新，例如，每当您使用任何M酒进行更改时

01:03:47.120 --> 01:03:52.910
某事或批准有关此事的设备，然后您还批准了

01:03:52.910 --> 01:04:00.550
订单设备上的设备，并且无论如何我们并发应用都是正确的

01:04:02.470 --> 01:04:08.980
我猜一个多写作家还不错，因为该规范没有

01:04:08.980 --> 01:04:13.450
如果您可以启动Jenny文档，则要求您存储Jenny文档的纯文本

01:04:13.450 --> 01:04:22.380
可以稍后合并到边缘的差异，我认为问题可能是

01:04:22.380 --> 01:04:30.369
缓解了，因为最终结果就像设备离线一样

01:04:30.369 --> 01:04:34.270
脱机时进行更改，可能会发生一些并发更改

01:04:34.270 --> 01:04:38.680
但他会检测到它将合并，将创建一个新条目，然后循环

01:04:38.680 --> 01:04:46.000
重复一遍又一次，直到我们得到最终得到错综复杂为止

01:04:46.000 --> 01:04:52.810
当然会进入持久状态，所以我想那会是的，是的，我

01:04:52.810 --> 01:04:58.590
可能将是我们将使用的解决方案，并且我们可以利用

01:04:58.590 --> 01:05:04.240
连接性之类的更简单的解决方案之类的东西，因为每当您

01:05:04.240 --> 01:05:09.760
您可以像这样更新您的批准设备，就可以了，我们可以

01:05:09.760 --> 01:05:15.640
利用一些用户界面语言说“嘿，您没有同步此设备”

01:05:15.640 --> 01:05:23.500
您需要在线以使其同步有用的东西是什么时候

01:05:23.500 --> 01:05:29.530
当他们有多个设备时，您要添加一个设备

01:05:29.530 --> 01:05:37.000
是的关于配对或同步状态的信息

01:05:37.000 --> 01:05:41.050
复制您需要身份配置文件，然后就可以了

01:05:41.050 --> 01:05:45.280
我们将在星期五讨论，但本质上是所有身份信息

01:05:45.280 --> 01:05:50.200
您的名字，您的照片以及他们所有的个人信息

01:05:50.200 --> 01:05:56.349
你必须包括你的社会证明

01:05:56.349 --> 01:06:01.119
同步并复制，因此无论何时设置新设备并进行攻击

01:06:01.119 --> 01:06:07.839
十二个单词中的六个，您知道有一个新设备正在工作，您需要

01:06:07.839 --> 01:06:12.730
复制该东西网，这是我们必须做到的一个过程

01:06:12.730 --> 01:06:21.079
直观的用户等等，好吧好吧，天哪，我必须运行

01:06:21.079 --> 01:06:28.490
是的，我也很好，所以这是首先要满足的结果，我们可能需要

01:06:28.490 --> 01:06:33.410
讨论使用CR等问题，对不起，我们可能要使用gr DET解决

01:06:33.410 --> 01:06:39.650
多作家场景，我将讨论我们是否需要您使用期间

01:06:39.650 --> 01:06:48.200
与此类似，CR DT本身也很喜欢合并分辨率

01:06:48.200 --> 01:06:53.960
真正要存储在腿节点上的D上的全部内容

01:06:53.960 --> 01:07:00.849
文档或只是添加，然后我们有一个解析部分，就它们而言

01:07:00.849 --> 01:07:06.740
有一两个或三个解决方案，我们将坚持第一个解决方案

01:07:06.740 --> 01:07:13.069
现在是纸上的钥匙，稍后我们将对规格进行改进，以使其成为

01:07:13.069 --> 01:07:26.359
在右前方更安全正确，我添加了那些音符，消除了所有这些音符

01:07:26.359 --> 01:07:32.569
对我来说就足够了，因为我知道可以专注于解决方案之一，

01:07:32.569 --> 01:07:37.099
无论是在代码方面还是在用户体验方面，并从多方面编写一个

01:07:37.099 --> 01:07:42.380
场景中，我将考虑您如何利用这一现实，以及如何

01:07:42.380 --> 01:07:47.390
如果状态是完整的Jason或仅仅是

01:07:47.390 --> 01:07:52.390
操作，无论如何，我都会在起床时提出错误的建议，我们会

01:07:52.390 --> 01:07:59.480
讨论这些似乎与正确地同步是正确的慈善

01:07:59.480 --> 01:08:04.250
如果您想了解谁在做什么，请向慈善机构简单说明一下

01:08:04.250 --> 01:08:08.510
例如，您可能会在什么时候结束基于

01:08:08.510 --> 01:08:13.339
是的，如果您只想合并阶段，则可能会遇到一个状态

01:08:13.339 --> 01:08:20.029
基于慈善的我认为除非您愿意使用接收矛的基础东西

01:08:20.029 --> 01:08:29.580
提供用于应用程序层的网络，以免为此而被网罗

01:08:29.580 --> 01:08:33.960
因为您知道每当添加设备时都需要存储以下内容的列表

01:08:33.960 --> 01:08:38.310
设备，因为无论何时您转到其他设备和您的好友

01:08:38.310 --> 01:08:44.070
启动并同步，您将看到列出的相同两个设备

01:08:44.070 --> 01:08:49.200
在两个设备中都是正确的，而且您永远不会所有人都看不到所有设备

01:08:49.200 --> 01:08:53.520
该新设备应该具有实时性，并且将进行复制

01:08:53.520 --> 01:08:56.280
协议，这是相同的，因为它是配置文件

01:08:56.280 --> 01:09:02.190
每当您读到它时，例如您的名字之类的东西都应该被复制

01:09:02.190 --> 01:09:06.810
在所有设备之间进行加密，还有一些事情

01:09:06.810 --> 01:09:13.350
我们还需要在周五讨论权衡这一安全性的问题

01:09:13.350 --> 01:09:19.770
很棒，但是我的意思是很好，因为我已经对此做出了一些决定，

01:09:19.770 --> 01:09:28.140
也许还有，如果我们走的路去追根溯源，

01:09:28.140 --> 01:09:32.820
你知道解决食物的选择也许对

01:09:32.820 --> 01:09:40.350
用versamark提取诊断和解决部分的内容。

01:09:40.350 --> 01:09:45.210
或抽象模块中，这样我就可以在这里使用它，现在可以颠覆了

01:09:45.210 --> 01:09:50.340
用它来解决版本麦克风的特定方式

01:09:50.340 --> 01:10:01.350
这是一件非常容易的事，它要团结一致，在同一时间要当心，然后

01:10:01.350 --> 01:10:05.520
动机很好，如果您需要分开进行操作，我将每个条目的内容剥离

01:10:05.520 --> 01:10:09.690
的操作，或者如果您只是想像一个大个子，我将

01:10:09.690 --> 01:10:15.480
不断变化的条目包含整个州，是的，并且通过

01:10:15.480 --> 01:10:21.330
替代方法您可以使用我们的BTB

01:10:21.330 --> 01:10:28.920
还有一个是使用X的P的另一件事，我们只需要讨论一下

01:10:28.920 --> 01:10:34.920
会评论您对此的了解，也许您可​​以将其集中于

01:10:34.920 --> 01:10:42.300
CR DT和通知协议解决方案特定的解决方案

01:10:42.300 --> 01:10:47.400
买家已经或几分钟也可以，谢谢

01:10:47.400 --> 01:10:54.210
非常感谢您的光临，她很快就谈到了我要我录制的视频

01:10:54.210 --> 01:10:58.650
发布，是的，如果可以的话，请擦亮它，然后将其

01:10:58.650 --> 01:11:04.830
带有链接的注释，添加和其他人观看将非常棒

01:11:04.830 --> 01:11:11.750
该视频将正常运行，谢谢大家再见

