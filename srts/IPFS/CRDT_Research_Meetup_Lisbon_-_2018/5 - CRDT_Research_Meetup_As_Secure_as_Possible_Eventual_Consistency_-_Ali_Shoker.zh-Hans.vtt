WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.030 --> 00:00:08.220
早上好，所以我很震惊，我是基于Delta的T的合著者之一

00:00:08.220 --> 00:00:14.040
我在布拉加工作时所基于的奇数和纯运算

00:00:14.040 --> 00:00:19.350
一起在我们为anezka技术工作，这是一个联合实验室

00:00:19.350 --> 00:00:27.539
搜索俱乐部，拥有很多类似安全性的学科，并且具有正式的系统

00:00:27.539 --> 00:00:40.890
甚至像企业家精神行业机器人之类的方法，所以我们大约有1,000名

00:00:40.890 --> 00:00:48.480
研究人员，我们是我们的团队，就像在布拉加一样，我们致力于

00:00:48.480 --> 00:00:53.820
发展以纯运营为基础的慈善机构和三角洲素食主义者

00:00:53.820 --> 00:00:59.879
关于您提到的有关垃圾收集的所有内容

00:00:59.879 --> 00:01:08.220
效率，所有这些东西，迁移以及所有这些，所以我的演讲

00:01:08.220 --> 00:01:14.880
今天将尽可能确保最终的安全性，基本上

00:01:14.880 --> 00:01:18.509
万一，我将重点关注权威机构，例如使用Shorty's

00:01:18.509 --> 00:01:23.549
最终的一致性，以尽可能安全地解决冲突

00:01:23.549 --> 00:01:28.409
有时会使用容错功能，所以您可能知道这是一个流行词

00:01:28.409 --> 00:01:35.820
最近因为有区块链，所以我在BFD社区长大，做了博士学位

00:01:35.820 --> 00:01:45.000
在2009年，我的演讲将稍微谈谈我所使用的系统

00:01:45.000 --> 00:01:49.799
要描述该系统的概述，在15中涵盖非常复杂

00:01:49.799 --> 00:01:56.549
分钟，所以我应该承认这项工作已经完成了三

00:01:56.549 --> 00:02:01.350
将无墨水的轻骨料投影到欧洲的项目和技术中，以实现增长

00:02:01.350 --> 00:02:06.780
国家项目，这些是我的合著者，没有声音团队

00:02:06.780 --> 00:02:13.770
我的博士生和卡尔·斯派克勒（Carl Spackler）哦，你从沙特阿拉伯认识他，所以对我来说

00:02:13.770 --> 00:02:20.760
或4D对话，所以我们所有人都看到此评论，以便在什么时候看到此类消息

00:02:20.760 --> 00:02:26.580
系统失败，但消息是这不是，这不再是可以接受的

00:02:26.580 --> 00:02:31.260
在这个错误中，我们不能接受这种事情，我们现在应该做什么

00:02:31.260 --> 00:02:37.680
修复这些问题的原因还可以，所以我认为许多工程师

00:02:37.680 --> 00:02:42.720
主要是因为这个行业，所以他们不知道或不知道拜占庭4

00:02:42.720 --> 00:02:48.090
从现在开始，我认为这开始趋于平稳，但以前他们

00:02:48.090 --> 00:02:51.990
没有，我认为我们需要这种文化来教育工程师

00:02:51.990 --> 00:02:56.730
关于购买一些条款用语，因为如果我们考虑

00:02:56.730 --> 00:03:07.050
调度员，所以谁熟悉花些时间刺，所以让我尝试

00:03:07.050 --> 00:03:11.940
描述问题所在以及我将提供的解决方案

00:03:11.940 --> 00:03:17.460
所以首先让我们假设这部分是最终一致的系统，我们有一个

00:03:17.460 --> 00:03:23.280
几个服务器最终是一致的服务器，它们是副本，它们是

00:03:23.280 --> 00:03:26.970
通过可靠的因果广播或之间的因果广播进行通信

00:03:26.970 --> 00:03:34.290
他们和客户通常访问每个节点，他们得到答复

00:03:34.290 --> 00:03:37.620
立即进行同步，而不会与其他人同步

00:03:37.620 --> 00:03:42.870
背景是系统的奇数模型

00:03:42.870 --> 00:03:48.930
以这种方式，就像我要说的那样，已知是在声称该系统

00:03:48.930 --> 00:03:54.270
将与此收敛，并且它实际上不会取决于故障模型

00:03:54.270 --> 00:03:59.730
您正在使用的所有当前系统都假定故障恢复

00:03:59.730 --> 00:04:05.450
方法模型故障，但假设例如这些

00:04:05.450 --> 00:04:11.130
服务器是否正确地应用了该操作，无论它是一个操作

00:04:11.130 --> 00:04:16.799
递增递减添加删除或沉浸在服务器是可以的。

00:04:16.799 --> 00:04:24.180
表现不好，您将永远无法收敛，所以我们正在做的是

00:04:24.180 --> 00:04:34.050
我们通过集群将其集成在一起，我们创建了一个50代理

00:04:34.050 --> 00:04:41.160
每个服务器，我们推送，我们将操作历史记录推送到VFD

00:04:41.160 --> 00:04:45.780
群集以验证它们并获得证书以发送给客户端，因此

00:04:45.780 --> 00:04:52.050
我们现在要做的是验证历史记录，这在所有情况下都是通用的

00:04:52.050 --> 00:04:56.880
这些服务器还可以，因此在此我们保证我们正在

00:04:56.880 --> 00:05:07.139
后端，我们不是在前端创建任何一致性，所以我

00:05:07.139 --> 00:05:10.349
会花一点时间或简短地介绍一下宽容，最终

00:05:10.349 --> 00:05:14.250
保持一致，基本上如何工作，我会在这里很快讲，因为您知道

00:05:14.250 --> 00:05:21.000
他们和我们的协议，我们称之为PI Zack，但我们希望能改个更好的名字

00:05:21.000 --> 00:05:27.150
比我要展示的取舍，讨论，讨论和未来

00:05:27.150 --> 00:05:33.150
工作，所以花一些时间来容忍，所以买些时间光子是

00:05:33.150 --> 00:05:38.280
实际上是最强的故障模型，因为有时玩家可以

00:05:38.280 --> 00:05:43.050
任何事情，我认为您可以想象的还可以，所以我不在节点蜡烛中

00:05:43.050 --> 00:05:49.729
我可以删除内存并添加可以正常运行的东西，甚至可以正常运行

00:05:49.729 --> 00:05:58.320
所以通常是这样，然后是为游客打彩

00:05:58.320 --> 00:06:03.570
记录了这样的历史场景，例如82甚至更早于Lambert's

00:06:03.570 --> 00:06:09.539
纸，因此通常使用状态机复制方法

00:06:09.539 --> 00:06:15.900
多数人的共识是，如果您了解税收，这是一种类似的税收，因此

00:06:15.900 --> 00:06:20.880
想法是为您喜欢的每个数据提供一种复制品

00:06:20.880 --> 00:06:27.199
三个四个副本，然后我们应该保证正确的列和

00:06:27.199 --> 00:06:33.449
阅读列重叠好，所以这实际上是发生了什么

00:06:33.449 --> 00:06:39.539
在类似的系统中，例如税收或木筏之类的东西是正确的，但是在

00:06:39.539 --> 00:06:42.840
情人节论坛，您需要将交叉点设为数字

00:06:42.840 --> 00:06:50.699
随时都可以，所以不仅只有一个路口还不够，所以

00:06:50.699 --> 00:06:56.250
这就是为什么如果您假设自己有

00:06:56.250 --> 00:07:01.470
一台拜占庭式服务器，您将需要三台F加一台，这样一台服务器

00:07:01.470 --> 00:07:07.460
服务器总共需要四台服务器，以确保服务器之间发生一个故障，并且

00:07:07.460 --> 00:07:15.990
最著名的协议是Castro和Lisco在2000年提出的pbft devil

00:07:15.990 --> 00:07:20.250
其中有很多协议，我开发了其他协议，但这是

00:07:20.250 --> 00:07:26.220
真的是最健壮和最著名的一个，那是他们想要第一个

00:07:26.220 --> 00:07:31.500
其实你可以考虑开创性的工作是一样的实际

00:07:31.500 --> 00:07:36.440
第一个和最后一个

00:07:37.169 --> 00:07:41.250
因此，关于此模型中的挑战，为什么它与其他模型不同

00:07:41.250 --> 00:07:45.330
模型，因为不可能区分拜占庭节点和

00:07:45.330 --> 00:07:51.690
一个缓慢的节点，您可以想象有多少确实有意义

00:07:51.690 --> 00:07:57.270
仅在互联网平台上，也无法区分

00:07:57.270 --> 00:08:05.130
从正确的节点运行拜占庭节点，这样服务器就可以正常工作

00:08:05.130 --> 00:08:10.969
喜欢很长时间以正确的方式，所以你可能永远无法抓住他，

00:08:10.969 --> 00:08:15.900
最近的失败，最后是失败的独立，因此您可以假设独立

00:08:15.900 --> 00:08:20.370
在欧洲失败的原因还可以，但是他们应该表现得很好

00:08:20.370 --> 00:08:29.069
确定性的，这是一种争议，因此通常这项工作可行，因此，如果您知道

00:08:29.069 --> 00:08:33.029
在这种情况下进行反向编程，因此您可以实现相同的功能

00:08:33.029 --> 00:08:38.399
具有不同操作系统和不同编程语言的协议，您

00:08:38.399 --> 00:08:43.829
安装不同的压力系统，使用不同的硬木，因此您可以转到

00:08:43.829 --> 00:08:48.779
极端，但通常我不认为这是实际操作

00:08:48.779 --> 00:08:53.760
因为这很昂贵，所以这些基本上是最终的挑战

00:08:53.760 --> 00:08:57.000
一致性，我将假设您了解更多

00:08:57.000 --> 00:09:02.310
或更少应该是什么将有助于理解正在发生的事情

00:09:02.310 --> 00:09:06.930
基本上，您拥有我所拥有的服务器，并且在您拥有服务器之前已经进行了解释

00:09:06.930 --> 00:09:12.720
它们和客户端出租车之间的可靠复制副本可以访问

00:09:12.720 --> 00:09:21.509
立即服务器，并在没有同步的情况下将回复取回

00:09:21.509 --> 00:09:24.540
假设你会遇到一些冲突

00:09:24.540 --> 00:09:28.649
您可能会使用以下方法解决它们，例如，在我们的案例中，请参见

00:09:28.649 --> 00:09:36.990
您想要并且应用程序应该接受水手，这是可以的，或者可以阅读过去，所以

00:09:36.990 --> 00:09:44.040
为什么不仅仅使用pbft作为PFD协议呢？

00:09:44.040 --> 00:09:50.870
一致性好吧，答案可能首先显而易见，因为pbft正在阻止

00:09:50.870 --> 00:09:58.889
这意味着来自客户的任何请求都需要喜欢访问所有

00:09:58.889 --> 00:10:05.730
集群中的服务器以返回对客户端和服务器的答复

00:10:05.730 --> 00:10:11.759
第二件事是假设节点是确定性的，并且需要总计

00:10:11.759 --> 00:10:18.720
可以，所以在最终的一致性模型中，您有一个非

00:10:18.720 --> 00:10:24.300
阻塞或没有协议，因此您实际上可以在服务器上立即执行操作

00:10:24.300 --> 00:10:29.189
然后我们考虑如何解决好，这样就引起了争议，您

00:10:29.189 --> 00:10:32.790
您有部分订单，而您没有总订单，这意味着您有

00:10:32.790 --> 00:10:37.230
例如，您可以同时应用并发操作

00:10:37.230 --> 00:10:40.500
可能同时在不同服务器上执行不同的操作

00:10:40.500 --> 00:10:46.139
确定性好吧，因为您实际上是在执行执行

00:10:46.139 --> 00:10:52.199
不同的操作，所以在这里这可能会造成混淆，因此副本是

00:10:52.199 --> 00:10:57.600
是确定性的，但实际上您的输入是不同的，好吧

00:10:57.600 --> 00:11:03.449
应用不同的操作，因为它们是并发的，所以这就是为什么

00:11:03.449 --> 00:11:08.279
不能像不能简单地使用pbft那样被使用，所以我们的方法是

00:11:08.279 --> 00:11:14.999
这件事，这就是微软某人写的一篇论文，我猜他写了

00:11:14.999 --> 00:11:21.420
一个博客，并抱怨协议的复杂性，我们

00:11:21.420 --> 00:11:30.360
的确是这样，但是我们不应该去那个地区，所以这就是

00:11:30.360 --> 00:11:35.790
走错了路，我们从美国这些家伙那里得到了一些经验

00:11:35.790 --> 00:11:40.970
他们也尝试实现这一点并更改协议以使其更容易

00:11:40.970 --> 00:11:47.610
最终一致的协议58协议，他们注意到，由于

00:11:47.610 --> 00:11:55.110
他们无法实现它的复杂性，甚至规范也无法实现

00:11:55.110 --> 00:12:01.800
我们在这里采用Zek提出的另一种方法，尝试保持不同的层次

00:12:01.800 --> 00:12:06.540
模块化层我们保留了事件抵抗层，而我们只是

00:12:06.540 --> 00:12:10.259
插入拜占庭的公差层及其工作方式

00:12:10.259 --> 00:12:15.839
像往常一样可以正常工作，然后我们仅处理拜占庭断层

00:12:15.839 --> 00:12:24.059
对日志的唯一历史记录的容忍度，您知道未完成

00:12:24.059 --> 00:12:27.420
为了容忍，我们已经说过，您应该有一个总订单级别的水平

00:12:27.420 --> 00:12:33.600
因此，这意味着您应将相同的消息推送至位于的拜占庭集群

00:12:33.600 --> 00:12:39.509
任何时候，这意味着您需要在此处保持一致的偏移量HSN

00:12:39.509 --> 00:12:44.759
好的，所以实际上您有一个日志，因此日志的顶部将有所不同。

00:12:44.759 --> 00:12:52.500
跨副本，但在子目录中的某些历史记录上存在一些偏移

00:12:52.500 --> 00:12:57.600
锁中的历史记录应该相同，即使顺序为

00:12:57.600 --> 00:13:03.779
不同，但是如果您执行相同的操作（即使顺序不同），也会不同

00:13:03.779 --> 00:13:11.550
您会得到相同的答复还是相同的状态，因为这是

00:13:11.550 --> 00:13:18.540
您的职责是做什么，因为它们是可交换的，所以这基本上是

00:13:18.540 --> 00:13:22.779
我们已经发展起来的想法，最后一件事是

00:13:22.779 --> 00:13:27.670
它是模块化的，因为它易于测试和维护，因此这是其中之一

00:13:27.670 --> 00:13:32.290
很好的隐式复杂度不是容忍的时间，测试它并不容易

00:13:32.290 --> 00:13:38.379
系统以及集成，因此在这种系统中更加实用

00:13:38.379 --> 00:13:43.689
就像您拥有正在运行的系统一样，您继续运行，然后将其插入

00:13:43.689 --> 00:13:48.220
并对其进行了测试，因此您无需更改所使用的协议

00:13:48.220 --> 00:13:53.319
运行新服务器好吧，只需插入这些服务器，然后对它们进行测试，然后

00:13:53.319 --> 00:13:59.560
删除它们，前景中的系统运行正常，并且

00:13:59.560 --> 00:14:07.389
我现在还要讨论其他选择，所以为什么要购买卓越的产品

00:14:07.389 --> 00:14:13.389
因为您关心安全性，但是您不能放弃可用性，所以您不能

00:14:13.389 --> 00:14:18.699
使用pbft是因为它非常一致，所以您需要

00:14:18.699 --> 00:14:24.399
您真的很在意可用性，但也很在意安全性

00:14:24.399 --> 00:14:32.649
因为这是一个问题或辩论，所以如果您给

00:14:32.649 --> 00:14:39.339
客户历史上的证书，那么它将如何帮助客户而不是

00:14:39.339 --> 00:14:47.139
确保安全，所以这就是为什么我们说它尽可能安全，这就是

00:14:47.139 --> 00:14:51.970
因为不能影响可用性，所以您能做的最好的事情是什么

00:14:51.970 --> 00:14:56.769
这不是您的选择，第一个选择是可用性，然后您在乎

00:14:56.769 --> 00:15:02.439
最终一致性的原因为何，因为内部本身就是服务本身

00:15:02.439 --> 00:15:06.970
他们希望系统不希望这种怪异现象收敛，如果某些

00:15:06.970 --> 00:15:13.059
复制品到了某个时候，所以我可以举一个例子，您也有一个柜台

00:15:13.059 --> 00:15:21.819
是的，状态为2，操作增量为1，答案应该为

00:15:21.819 --> 00:15:30.930
是3明显，服务器可以给出5 ok，所以最初要对此建模

00:15:32.710 --> 00:15:37.730
是，具有很多资格的数字签名是数字签名

00:15:37.730 --> 00:15:43.850
拜占庭人只能审查某些行动，如果它们是积极的

00:15:43.850 --> 00:15:48.170
改变，那么他们将不得不审查因果历史的整个链条，但是他们

00:15:48.170 --> 00:15:54.500
是不能伪造或改变国家的，是的，但是我不是在说

00:15:54.500 --> 00:16:00.050
关于建立状态，我说的是执行操作，这不是

00:16:00.050 --> 00:16:04.730
状态，因为此模型中的最终表示模型

00:16:04.730 --> 00:16:08.540
他们不同步他们只是在状态上的不同副本

00:16:08.540 --> 00:16:14.150
传播操作，每个人都像您一样信任每个人都可以执行

00:16:14.150 --> 00:16:20.150
操作，如果执行正确，我们知道所有副本

00:16:20.150 --> 00:16:24.470
不会收敛，因为在这种情况下，因为交换状态

00:16:24.470 --> 00:16:27.640
是的

00:16:33.150 --> 00:16:40.030
我们可以跳过一个操作，那是伪造的操作吗？

00:16:40.030 --> 00:16:50.920
我可以签字，这样您就不用了，所以您的问题是

00:16:50.920 --> 00:16:58.210
客户端（如果客户端正在向其他副本中的其他副本发出请求）

00:16:58.210 --> 00:17:01.930
以不同的方式，我想也许困惑再次出现在模型中

00:17:01.930 --> 00:17:06.699
想到所有客户都说是副本，所以客户

00:17:06.699 --> 00:17:12.040
他们签署了操作，并将操作传播到可靠的广播中，是的

00:17:12.040 --> 00:17:19.510
因此，仅在此模型中，服务器的保留状态即这些状态和服务器

00:17:19.510 --> 00:17:23.500
在这种情况下，可能就像许多服务器最终保持一致

00:17:23.500 --> 00:17:29.950
对于，但可以像100台服务器正常还是代理服务器，或者如果您想要

00:17:29.950 --> 00:17:36.640
浏览器还可以，但客户端最终客户端仅对中的感兴趣

00:17:36.640 --> 00:17:43.390
像读此状态一样回复，没关系，客户端不需要

00:17:43.390 --> 00:17:48.760
保持状态，这只是他们的计划，所以一切都在发生

00:17:48.760 --> 00:17:57.600
副本我回答了您的问题，您的猜测是什么

00:17:59.590 --> 00:18:04.240
所以，您关心您的旧系统，这就是我们所说的重点

00:18:04.240 --> 00:18:11.380
您仍然可以在系统上运行并且测试新插件

00:18:11.380 --> 00:18:18.190
可能在线上，如果您想要的话，并且您实际上在乎您的客户

00:18:18.190 --> 00:18:24.910
这样，我们就决定了，就像我在复制品中告诉您的那样，所以

00:18:24.910 --> 00:18:29.050
基本方法是将历史上的证书种类的证书推送到

00:18:29.050 --> 00:18:33.670
现在的客户端，例如某些客户端可能具有不同的安全级别

00:18:33.670 --> 00:18:37.510
一些客户说我知道我不需要任何安全保护

00:18:37.510 --> 00:18:42.520
我希望像现在这样的基本最终KCC模型现在可以使用，我不在乎为什么

00:18:42.520 --> 00:18:48.970
有时还可以，所以您可以喜欢忘记证书，您可以始终

00:18:48.970 --> 00:18:53.680
阅读任何内容，您会忘记证书，这是一个非常保守的客户

00:18:53.680 --> 00:18:58.750
说不，我每次操作都需要证书

00:18:58.750 --> 00:19:04.930
我希望每个操作都正确无误，所以我们在这里像你一样

00:19:04.930 --> 00:19:10.870
可以调节，有一个旋钮可以调节每个客户可以要求的特定水平，或者

00:19:10.870 --> 00:19:16.120
例如证书，我可以接受没有证书的1000次操作

00:19:16.120 --> 00:19:23.200
我总是不能接受更好的选择，所以我可以容忍1000次操作的日志

00:19:23.200 --> 00:19:29.470
可能是可疑的好吧，例如，每个客户都处于这种状态

00:19:29.470 --> 00:19:34.750
有一个不同的选择，所以您甚至仍然可以使用事件模型

00:19:34.750 --> 00:19:41.650
有了这个插件，即使没有问题，您仍然可以使用拜占庭故障模型

00:19:41.650 --> 00:19:44.950
如果您非常保守，就好像您正在使用购买时间

00:19:44.950 --> 00:19:52.450
对于协议还可以，它们之间的频谱之间也需要权衡取舍

00:19:52.450 --> 00:19:57.370
例如在这里，客户需要容忍一些我们所说的历史

00:19:57.370 --> 00:20:02.080
如果您最关心的是可用性，那么这就是您可以做的最好的事情

00:20:02.080 --> 00:20:07.870
也不允许客户与多个客户交谈，因此在任何时候

00:20:07.870 --> 00:20:12.550
客户端只能与一台服务器或一个副本进行对话

00:20:12.550 --> 00:20:18.700
但即使在错误或缓慢的情况下也可以切换到其他人，但是在这种情况下

00:20:18.700 --> 00:20:25.450
将与服务器进行协商，然后您具有BFG假设

00:20:25.450 --> 00:20:34.290
传统的方法，如失败的独立性，我认为就是这样

00:20:34.290 --> 00:20:42.220
基本上是在这个模型中，所以我们有一个保留下来的系统

00:20:42.220 --> 00:20:47.050
可用性的优先级，并且仍然为您提供了一些安全保证

00:20:47.050 --> 00:20:54.490
而不包含可用性的背景，并且基本上您可以

00:20:54.490 --> 00:20:58.660
仍然在一定程度上为最终的成功而努力，并且您有一些基础知识和

00:20:58.660 --> 00:21:02.980
游客可以测试系统在系统上运行的时间，而这只是插件

00:21:02.980 --> 00:21:14.350
玩的还可以，就是这样，这是我想做的另一件事

00:21:14.350 --> 00:21:30.700
宣布，但如果您有任何疑问，III可以为您解答

00:21:30.700 --> 00:21:38.490
例如，f型假定系统中存在错误，这是一种情况

00:21:38.490 --> 00:21:43.030
另一件事，因为例如在此系统中，您可能拥有

00:21:43.030 --> 00:21:46.090
您有两个不同的操作系统，因此您有两个不同的实现

00:21:46.090 --> 00:21:52.510
可能有这个错误，这是您的共同主题，也可能有一个

00:21:52.510 --> 00:21:58.030
从外部发起攻击以破坏一台服务器，这样您就可以

00:21:58.030 --> 00:22:04.410
得到不同的数字，以便您将一个版本与另一个版本一起放置

00:22:05.770 --> 00:22:10.820
试图证明证书是由四个人签名的

00:22:10.820 --> 00:22:17.210
最终由所有副本组成的副本，因此现在可以确保每个副本

00:22:17.210 --> 00:22:27.470
每个人都同意相同的价值，好吧，等到墙上的水

00:22:27.470 --> 00:22:34.580
之所以声明，是因为在这种情况下，我们的客户没有保持团结或保持良好状态，因此

00:22:34.580 --> 00:22:41.940
他们只读[掌声]

