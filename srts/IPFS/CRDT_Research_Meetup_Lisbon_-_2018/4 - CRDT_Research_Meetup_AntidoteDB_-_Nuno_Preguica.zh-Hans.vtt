WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.030 --> 00:00:03.750
今天，我将一直讨论直到TB，这是一个开源数据库，

00:00:03.750 --> 00:00:07.830
正在建设中，所以在开始之前只是给你一个

00:00:07.830 --> 00:00:14.790
快速介绍我们要去的地方，所以我们在北大学

00:00:14.790 --> 00:00:20.189
里斯本在河的另一边，所以我们差不多是一年，所以我们

00:00:20.189 --> 00:00:24.150
位于河的另一边，大学很大

00:00:24.150 --> 00:00:30.840
大学与几所医学院的科技法学

00:00:30.840 --> 00:00:35.780
您可能会想到的一所大学里有很多典型的学校

00:00:35.780 --> 00:00:43.680
科学技术学校有28,000名学生，大约9,000名学生

00:00:43.680 --> 00:00:51.030
学生，在我们的研究中心，我们的计算系统Krister /中心

00:00:51.030 --> 00:00:57.320
大约20名教职员工和博士后，我们大约有20名博士生和许多

00:00:57.320 --> 00:01:03.539
硕士生总是和我们一起工作，所以研究中心分为

00:01:03.539 --> 00:01:07.439
四个领域的软件系统，多式联运系统，计算机系统和

00:01:07.439 --> 00:01:12.600
基于知识的系统，所以我们在计算机cyst计算机系统中工作，因此

00:01:12.600 --> 00:01:17.909
研究实体是他们所看到的或多或少的广泛研究中心

00:01:17.909 --> 00:01:22.290
关于计算机系统的主题，所以今天我将谈论一些

00:01:22.290 --> 00:01:29.159
解毒剂以及其他与CRD相关的项目，在新颖的链接处只是为了给您

00:01:29.159 --> 00:01:33.960
指出如果您想在那之后与我交谈，那么在下午我会

00:01:33.960 --> 00:01:42.659
因此，我们将知道笑话应用程序将继续存在，然后

00:01:42.659 --> 00:01:47.970
在一致性和可用性之间需要权衡取舍，如果您查看

00:01:47.970 --> 00:01:53.399
如果我们在第一波中看到的话，记录已经创建的存储

00:01:53.399 --> 00:01:58.770
像Cassandra这样的云存储接收器，并且基本上对这些数据存储做出反应

00:01:58.770 --> 00:02:04.439
最终保持一致的数据存储正常，他基本上可以保证

00:02:04.439 --> 00:02:09.060
就是会在Cassandra中融合，事情会由作家来融合

00:02:09.060 --> 00:02:12.790
胜利的反应有所改善

00:02:12.790 --> 00:02:17.980
他们看到了奇特的事物，但语义仍然很小

00:02:17.980 --> 00:02:22.390
的一致性非常重要，因此，如果您看一下第二次云存储浪潮，

00:02:22.390 --> 00:02:29.350
诸如cosmos DB扳手Google扳手之类的东西，看来我们已经完全搬家了

00:02:29.350 --> 00:02:34.300
到另一端，每个人都希望拥有强大的

00:02:34.300 --> 00:02:44.110
一致性以及对数据的非常非常非常有力的保证

00:02:44.110 --> 00:02:52.050
但是即使在可以得到良好支持的扳手上也要提供这些

00:02:52.050 --> 00:02:57.760
等待时间仍然是我，如果有问题，如果有问题

00:02:57.760 --> 00:03:07.450
您仍然可能会阻塞网络分区，所以这不是应该的，但是

00:03:07.450 --> 00:03:13.960
基本上直到OTV成为我们对这种双向频谱的答案

00:03:13.960 --> 00:03:18.130
我们试图回答的是，有可能我相信我会

00:03:18.130 --> 00:03:23.530
可用并且仍然提供强大的语义，我们所说的“强大”是什么意思

00:03:23.530 --> 00:03:33.070
语义，这就是II会向您解释的含义，那么什么是

00:03:33.070 --> 00:03:37.300
搁浅的男人需要我们想要的，所以让我们考虑一下FFF银行应用程序

00:03:37.300 --> 00:03:42.460
所以那时我已经有这张幻灯片了，所以我还没有适应，但是你可以想到

00:03:42.460 --> 00:03:48.820
之前在这里给出的例子，所以我们想要的第一件事

00:03:48.820 --> 00:03:53.850
在应用程序中，一般来说我们希望所有副本都收敛，当然

00:03:53.850 --> 00:03:58.210
对于这些，我们有大家都知道的并发更新问题

00:03:58.210 --> 00:04:04.660
您可以进行的交易对同时执行的操作很敏锐，然后您就可以决定

00:04:04.660 --> 00:04:09.190
发生了什么，为了解决这些问题，我们正在做每个人都在做的事情

00:04:09.190 --> 00:04:14.950
我们正在使用CR DT，所以现在什么都没有了，所以让我们

00:04:14.950 --> 00:04:21.100
看事情要复杂一点，所以在银行的银行应用程序中如果

00:04:21.100 --> 00:04:27.610
您只有转账，我们基本上希望您的余额能

00:04:27.610 --> 00:04:35.470
等于初始余额加上存款-提取可以，所以让我们

00:04:35.470 --> 00:04:41.590
让我们看看发生了什么，假设我们有两个帐户，而我的帐户开始了

00:04:41.590 --> 00:04:48.910
在B帐户中有五个帐户是不错的选择，然后我们开始看看

00:04:48.910 --> 00:04:52.900
余额f i + b余额fi加B为6

00:04:52.900 --> 00:04:58.360
好吧，进出一个帐户时，我们有五个合一帐户，所以我们有六个，所以

00:04:58.360 --> 00:05:03.400
现在假设我们要将三个从A转移到B好吧

00:05:03.400 --> 00:05:09.190
现在来了，事情变得有些复杂了，所以如果我们在这里拥有一切

00:05:09.190 --> 00:05:15.820
在DC中，我们可以立即进行急诊手术，我将与两个人和B

00:05:15.820 --> 00:05:22.240
将等待，因为我们正在将三个从A转移到B，所以

00:05:22.240 --> 00:05:29.470
现在出现问题是因为通常在这些系统中通常在这些系统中

00:05:29.470 --> 00:05:35.260
当通过递减来更新对象a时，我将必须执行两个操作

00:05:35.260 --> 00:05:43.870
3和另外两个应用于对象B，使对象B递增三个，所以又如何

00:05:43.870 --> 00:05:50.919
如果此操作到达此处，并且我将A应用于此B，则现在发生

00:05:50.919 --> 00:05:59.950
仍然是1，发生的是，如果现在我尝试查看余额

00:05:59.950 --> 00:06:06.460
在我之间，我要得到三个，而我不应该得到三个，因为我

00:06:06.460 --> 00:06:12.370
进行传输可以，所以当我使用某些API时，余额应该仍然是

00:06:12.370 --> 00:06:18.970
问题他们仍然有六个，但我不只有三个，我有这个，因为我

00:06:18.970 --> 00:06:24.460
已经在两个操作的中间执行了该操作，这是一个

00:06:24.460 --> 00:06:28.660
您想要的许多应用程序中发生的问题

00:06:28.660 --> 00:06:33.100
发出要分为两个操作的操作，而您不会

00:06:33.100 --> 00:06:37.460
希望中间的状态可见

00:06:37.460 --> 00:06:44.810
我们为这些基本实现的解决方案是什么

00:06:44.810 --> 00:06:49.940
这些方法是使用我们称为“我住的”的东西

00:06:49.940 --> 00:06:54.740
交易还可以，还有其他其他系统可以做到这一点，并且

00:06:54.740 --> 00:06:59.780
几种协议可以做到这一点，但是我们的数据购买了所谓的宜居者

00:06:59.780 --> 00:07:02.540
交易我们交易的价值是什么

00:07:02.540 --> 00:07:08.090
基本上有交易可以，当您阅读时，您会从

00:07:08.090 --> 00:07:14.090
当您将快照作为一组操作进行操作时，所有这些操作都保持一致

00:07:14.090 --> 00:07:19.370
是原子可见的，或者它们不可见，例如，当您看到

00:07:19.370 --> 00:07:24.380
这些副本中的这些更新这些是板，我们将在

00:07:24.380 --> 00:07:29.960
第二个执行而不是之前执行，这保证了我们看到

00:07:29.960 --> 00:07:36.680
始终保持一致状态就可以，并且可以每周完成一次

00:07:36.680 --> 00:07:41.780
一致的方式，因此我们不必在数据之间进行协调

00:07:41.780 --> 00:07:49.430
中心可以做到这一点，所以这是第一个额外的有力保证

00:07:49.430 --> 00:07:54.700
我们给的我将继续进行交易，而第二次交易是

00:07:54.700 --> 00:08:01.010
好的，所以有时候似乎东西在中间消失了，所以让我给

00:08:01.010 --> 00:08:08.030
您是一个示例，因此请回到本示例，以便在三分之三后到达a和

00:08:08.030 --> 00:08:14.210
B好的，我说好的，我假设客户C看到了转账

00:08:14.210 --> 00:08:20.240
已经完成，决定写一些其他对象好吧，我正在

00:08:20.240 --> 00:08:24.200
这里有一个日志，但可能更复杂一些，我想转移已经完成了

00:08:24.200 --> 00:08:31.730
现在可以在这些每周可用的系统中复制该对象了

00:08:31.730 --> 00:08:37.370
通常，对象是按对象同步的，因为它们没有全局

00:08:37.370 --> 00:08:42.170
同步每个对象本身使其自己同步，因此可以将这个徽标对象

00:08:42.170 --> 00:08:49.250
同步之前，这些同步，现在如果客户端来

00:08:49.250 --> 00:08:54.410
并阅读我们将基本看到的作品

00:08:54.410 --> 00:08:58.790
看到锁大小受让人，但值是

00:08:58.790 --> 00:09:06.320
仍然初始值还可以，所以我们基本上可以解决这个问题

00:09:06.320 --> 00:09:13.580
通过加强因果一致性，可以再次增强宇宙抵抗力

00:09:13.580 --> 00:09:21.350
没有数据中心之间的协调就没有了，这也给

00:09:21.350 --> 00:09:31.520
对应用程序的另一组保证还可以，所以最后，

00:09:31.520 --> 00:09:37.730
符号有时似乎是最复杂的，所以我有一个帐户

00:09:37.730 --> 00:09:43.130
平衡此银行应用程序，然后我不希望该帐户成为

00:09:43.130 --> 00:09:48.800
非负好吧，让我们假设我们从

00:09:48.800 --> 00:09:58.040
一个5点的帐户还可以，如果第一个客户同时拥有这3个帐户

00:09:58.040 --> 00:10:02.959
复制副本似乎一切正常，因为我仍然是2，但如果同时进行

00:10:02.959 --> 00:10:09.980
另一个带有锈迹的复制品，例如此复制品中的4好，看来一切

00:10:09.980 --> 00:10:16.700
很好，因为我的值仍然是1，所以一切似乎都还可以

00:10:16.700 --> 00:10:22.279
当您同步时出现问题

00:10:22.279 --> 00:10:28.610
基本上，您会看到该值将为负2，因为当您

00:10:28.610 --> 00:10:32.870
传播将两个更新合并在一起的更新，最终结果为负2

00:10:32.870 --> 00:10:38.899
所以这似乎是一种情况，在这种情况下，您确实

00:10:38.899 --> 00:10:44.300
必须协调直到现在，我们提供了更多的保证，但是您

00:10:44.300 --> 00:10:49.190
没有协调，但是在这种情况下，您需要协调是的，我们

00:10:49.190 --> 00:10:54.320
需要协调，但我们可以将协调移到执行之外

00:10:54.320 --> 00:11:02.540
在很多情况下，路径可以吗，我们该怎么做，但基本上我们可以这样做

00:11:02.540 --> 00:11:07.340
假设我们有五个还可以，我们选这五个，然后拆分

00:11:07.340 --> 00:11:11.840
这两个副本之间的这五个副本，我们说这第一个副本中的三个

00:11:11.840 --> 00:11:17.480
这第二个副本-好的，这三个副本可以使用这三个副本

00:11:17.480 --> 00:11:22.930
在不与其他副本协调的情况下，该副本可以使用这两个副本

00:11:22.930 --> 00:11:29.090
没有与其他副本协调，所以如果现在很紧急，我知道

00:11:29.090 --> 00:11:34.130
操作安静的人来了解操作Twittersphere很好

00:11:34.130 --> 00:11:38.930
我有三年可以使用okay，所以我可以确定我可以说没有

00:11:38.930 --> 00:11:45.740
没有复制品的kulhanek如果另一个，如果另一个，会发生什么

00:11:45.740 --> 00:11:50.900
忘了尝试画四个，好吧，我来到这里我看到我只有

00:11:50.900 --> 00:11:55.970
两个，此刻我有两个可以与其他副本协调

00:11:55.970 --> 00:12:02.540
晚上，我看到我已经没有空了，我将归档什么

00:12:02.540 --> 00:12:12.260
关键是这里的例子非常接近极限

00:12:12.260 --> 00:12:18.860
但是，如果您认为在示例中启动它，例如1000 ok，那么我们

00:12:18.860 --> 00:12:24.020
将这500个数除以一个，就可以使用脚本进行大量操作，而不必

00:12:24.020 --> 00:12:28.340
协调您只需要协调真正的我们和您

00:12:28.340 --> 00:12:34.490
非常接近极限，好吧，所以我们发布了一些

00:12:34.490 --> 00:12:41.690
我们在这里将bonnet计数器称为DT，可以解决此问题，如果

00:12:41.690 --> 00:12:45.890
您看或多或少都遵守了您使用此书时获得的诺言

00:12:45.890 --> 00:12:50.410
保税柜台还可以，大多数操作都非常快

00:12:50.410 --> 00:12:59.330
有时你必须协调，然后你的时间会很高，所以，

00:12:59.330 --> 00:13:04.850
我们也可以做其他推论我不会在其他事件中详细介绍

00:13:04.850 --> 00:13:11.960
但是，如果您愿意的话，我可以和你们谈谈，基本上我们正在建立

00:13:11.960 --> 00:13:17.360
这个解毒的结核病数据库是开源的，这很可笑

00:13:17.360 --> 00:13:21.590
复制不会看到很酷的数据，这就是这波交易的浪潮

00:13:21.590 --> 00:13:26.630
理论上它是用于转换的。

00:13:26.630 --> 00:13:33.260
数值不变量，我们正在构建一个续集接口

00:13:33.260 --> 00:13:38.000
在我们所使用的数据库上自动强制执行后继不变式

00:13:38.000 --> 00:13:47.140
github上也有初步版本，供那些想尝试的人使用，所以

00:13:47.140 --> 00:13:52.790
在我结束之前，我将为您简要概述与父亲有关的现实

00:13:52.790 --> 00:13:59.450
我们正在Empanada链接上运行的项目，所以其中之一是

00:13:59.450 --> 00:14:03.260
我们称之为非均匀CID T或非Infinix的东西

00:14:03.260 --> 00:14:09.080
应用程序，所以基本上在这项工作中，我们试图回答这个问题

00:14:09.080 --> 00:14:13.550
问题，所以当您考虑复制时，似乎所有副本

00:14:13.550 --> 00:14:18.020
即使内部演示文稿是

00:14:18.020 --> 00:14:24.650
不同的总体状态似乎总是相同，但是

00:14:24.650 --> 00:14:30.620
这是必要的，答案是没有想到例如关于领导者的想法

00:14:30.620 --> 00:14:35.420
如果您要维持排行榜，而您只展示前十名，

00:14:35.420 --> 00:14:42.310
定位为什么您需要佩戴所有不需要的所有副本中的所有列表

00:14:42.310 --> 00:14:48.620
好吧，这是我们正在构建的东西，我们也有see的版本

00:14:48.620 --> 00:14:53.510
在github上这些事情的怪异之处是有吹笛者

00:14:53.510 --> 00:14:59.810
您可以阅读它我们正在研究的第二件事是

00:14:59.810 --> 00:15:05.300
隐私保护常识见怪异，所以回答的问题是

00:15:05.300 --> 00:15:11.750
我们试图在这里回答是这样，假设你不，你不信任

00:15:11.750 --> 00:15:18.620
您希望即使数据失真也要保持数据的私密性

00:15:18.620 --> 00:15:26.149
在服务器上可以建立共享吗，这是可以做到的。

00:15:26.149 --> 00:15:34.850
他们可以合并的操作他们可以的操作是全新的紧急操作，但是所有数据

00:15:34.850 --> 00:15:44.120
是保持加密，基本上我们正在建立这些允许的保留

00:15:44.120 --> 00:15:50.269
加密时我们使用的两种基本方法

00:15:50.269 --> 00:15:55.550
一些C添加剂的功能，我们需要妈妈或小说的，而我们不需要

00:15:55.550 --> 00:16:02.180
需要我们可以使用轻得多的东西，并且我们正在使用测试

00:16:02.180 --> 00:16:08.480
描述环境CSS中的关注问题基本上是两两行

00:16:08.480 --> 00:16:21.069
解决这个问题的方法，所以我们正在计划的下一个计划是

00:16:21.069 --> 00:16:26.149
一切具有多种语义的ER都可以，那么问题是什么

00:16:26.149 --> 00:16:31.699
如果大家都知道共享，那是您设置的时间，您可以在建立共享时

00:16:31.699 --> 00:16:35.480
应用程序，您可以在他的场景中有一个埃德温剧院，但

00:16:35.480 --> 00:16:39.949
有时在某些应用程序中，我希望此操作能够进行高级操作

00:16:39.949 --> 00:16:46.430
在此操作中将其删除，并且无法执行此操作，因此我们

00:16:46.430 --> 00:16:51.769
是解决这个问题的一种方法，我们已经设计好了，可以看到成套的添加剂

00:16:51.769 --> 00:17:00.230
同时拥有埃德温（Edwin）和删除（Remove）的装置还可以，我们正在

00:17:00.230 --> 00:17:05.630
设计可以看到通用的奇数，以便程序员可以指定什么是奇数

00:17:05.630 --> 00:17:10.520
该政策及其运作正常，何时提交大小限制我想要我的

00:17:10.520 --> 00:17:15.559
操作要先进，这是删除插件，所以它们要多一点

00:17:15.559 --> 00:17:23.110
这是一个复杂的步骤，但这有点棘手，但这是关键思想

00:17:23.110 --> 00:17:27.200
接下来，这些这些部分是我们所没有的

00:17:27.200 --> 00:17:31.460
完成了，但是你们你们都是这些，我已经在此添加了一张幻灯片

00:17:31.460 --> 00:17:37.310
这是访问控制的问题，我们保持一致，这是这一方

00:17:37.310 --> 00:17:44.630
这项工作是由BN净用户和Matthias Weber共同完成的，

00:17:44.630 --> 00:17:49.670
基本上，他们一直在尝试解决每次访问的问题

00:17:49.670 --> 00:17:54.530
控制何时发生一致性系统事件，那么什么是

00:17:54.530 --> 00:18:00.920
问题，所以问题是基本上有两个问题

00:18:00.920 --> 00:18:05.570
第一个问题是您可以同时修改访问控制规则，因此您

00:18:05.570 --> 00:18:11.390
必须合并那些访问控制规则，为此，我们需要这个

00:18:11.390 --> 00:18:15.860
维持访问控制规则并合并访问控制的酸性

00:18:15.860 --> 00:18:20.720
规则第二个问题是访问控制之间的交互

00:18:20.720 --> 00:18:25.700
在对象中执行的规则和凹陷，因为您可能

00:18:25.700 --> 00:18:31.000
确保撤消对对象的访问并同时执行的操作

00:18:31.000 --> 00:18:37.370
某人正在访问该对象，所以基本上他们拥有这个

00:18:37.370 --> 00:18:43.820
设计了一个协议来解决这个问题，这个协议是在解毒剂上实现的，因此

00:18:43.820 --> 00:18:49.160
他们拥有交易以及所有这些东西，他们会很好很多，我们

00:18:49.160 --> 00:18:54.410
目前基本上也正在解决这个问题，但是

00:18:54.410 --> 00:18:59.720
在病变中拉扯什么是病变，所以基本上病变是

00:18:59.720 --> 00:19:05.510
用于构建扩展的Web应用程序的JavaScript框架

00:19:05.510 --> 00:19:10.310
是crd的资料库，我们称之为Delta CR疾病，但事实并非如此

00:19:10.310 --> 00:19:17.120
它们或多或少与Delta C接近，但确实很小

00:19:17.120 --> 00:19:27.980
微小的差异，你们你们可以接触到病变，所以我们有

00:19:27.980 --> 00:19:37.310
一个网页，我们在那里您可以在其中进行演示，所以这些这些

00:19:37.310 --> 00:19:45.800
客户在这里有多年的职责，我认为这是可见的，所以

00:19:45.800 --> 00:19:52.400
Web浏览器中的客户端通过Web RTC连接

00:19:52.400 --> 00:19:58.250
基本上您可以执行并发操作和合并，我们在这里

00:19:58.250 --> 00:20:13.070
这个演示，让我回到我的演示，所以这是一个这是一个

00:20:13.070 --> 00:20:17.330
我们有今年的DTC JavaScript库，所以这可能很有趣

00:20:17.330 --> 00:20:22.670
对于秘鲁来说，这将主要通过两个

00:20:22.670 --> 00:20:29.720
见怪异的版本，以及您怎么知道那是什么，所以我们工作了

00:20:29.720 --> 00:20:34.040
一点点，所以我刚刚在演示文稿之前添加了

00:20:34.040 --> 00:20:38.300
我当时看到的是Pettis演示文稿，例如，迅捷云中的迅捷云

00:20:38.300 --> 00:20:44.390
我们看到了奇怪的地方，您基本上可以进入海底LED灯，

00:20:44.390 --> 00:20:50.810
要求提供给定的CR DT版本或检查所有给定的压力

00:20:50.810 --> 00:20:58.130
一些客户的帮助，所以我们为此做了一些工作，因此

00:20:58.130 --> 00:21:13.280
是我完成我的演示文稿，不知道是否有任何问题，如果不是

00:21:13.280 --> 00:21:16.450
会的

00:21:17.450 --> 00:21:25.639
保护隐私的慈善机构，是的，现在我们没有任何工作，我们没有任何工作

00:21:25.639 --> 00:21:31.850
我们已经出版了，所以我们正在为这些葡萄牙会议写论文

00:21:31.850 --> 00:21:38.870
这是我们的现状的一种先行理解，但我很乐意谈

00:21:38.870 --> 00:22:02.029
大概是这样，所以基本上，问题是我们是否需要foo a

00:22:02.029 --> 00:22:08.600
变形加密，或者我们可以使用比加密更轻的东西

00:22:08.600 --> 00:22:15.799
形态的，这是针对某些可以使用的数据类型的，您可能不会使用

00:22:15.799 --> 00:22:20.269
全副武装的非晶合金，例如，如果您想在哪里可以代替

00:22:20.269 --> 00:22:27.500
有一个词是，除了你对一个概率集有一个很好的理解之外，

00:22:27.500 --> 00:22:32.690
例如，您可以使用布隆过滤器来记录

00:22:32.690 --> 00:22:36.769
深处的杏仁就足够了，例如用于资产

00:22:36.769 --> 00:22:56.990
对其他人来说可以，对其他人来说也可以，我想所以在这是

00:22:56.990 --> 00:23:04.039
工作正常，因此在因果链接结构中，这很棒，让我想起了

00:23:04.039 --> 00:23:11.720
就像帽子一样，运输中的因果链很久以前就完成了

00:23:11.720 --> 00:23:18.500
是很好的研究领域，我很好奇当某些

00:23:18.500 --> 00:23:24.320
这些很多的COTC设置比我们的客户端要少一些

00:23:24.320 --> 00:23:28.850
在我们拥有数百万个副本的地方评估设置，因为我们想要

00:23:28.850 --> 00:23:34.160
例如面向客户的事情，这些因果链变得非常混乱

00:23:34.160 --> 00:23:38.240
很好奇您是否评估过这些理事会设置或大多数设置

00:23:38.240 --> 00:23:47.419
你们知道低副本数，所以我们不限制

00:23:47.419 --> 00:23:52.730
客户数量我们可以根据需要拥有任意数量的客户，但是您知道我们的客户数量

00:23:52.730 --> 00:23:59.419
我们假设存在因果关系的服务器和网络

00:23:59.419 --> 00:24:04.000
基本上，在我介绍的这一件作品上，我们有两件作品，我们假设有

00:24:04.000 --> 00:24:10.280
骨干网和所有通过

00:24:10.280 --> 00:24:13.760
背景好吧背景是多个

00:24:13.760 --> 00:24:18.620
复制多个服务器，但仍然有数量有限的骨干网

00:24:18.620 --> 00:24:25.039
副本的客户端数量，但客户端数量可以根据需要设置为任意数量

00:24:25.039 --> 00:24:33.289
我们是我们，我们还有其他工作，我们假设

00:24:33.289 --> 00:24:39.919
客户可以直接同步，对于那些基本上我们可以为

00:24:39.919 --> 00:24:46.630
保持因果关系，我可以和你谈谈更多细节

00:24:47.980 --> 00:24:51.470
[掌声]

