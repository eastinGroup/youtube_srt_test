WEBVTT
Kind: captions
Language: zh-Hans

00:00:21.680 --> 00:00:27.210
好的，你好，我告诉你自己

00:00:27.210 --> 00:00:40.890
回声让我们选择我的名字叫Portia，如果您愿意的话，欢迎参加ipfs每周电话

00:00:40.890 --> 00:01:16.530
你在这里听到回音很棒，你能听到我说的吗，好极了

00:01:16.530 --> 00:01:24.090
因此，再次欢迎您参加ipfs每周会议，今天我们将从

00:01:24.090 --> 00:01:34.670
公告，然后我们将深入到我们的现场演示中哦建立回声

00:01:37.670 --> 00:01:39.729
你

00:01:44.549 --> 00:01:50.159
我不确定回声在哪里

00:01:51.240 --> 00:01:56.030
一切都好极了

00:01:56.580 --> 00:02:02.950
是的，第一个问题解决了，所以我们再次

00:02:02.950 --> 00:02:09.750
将以公告开始，然后我们将进入演示并

00:02:09.750 --> 00:02:15.310
最终，我们将有五到十分钟的时间提问和回答问题

00:02:15.310 --> 00:02:20.380
和答案，你能不能请问我一个问题并发表评论，如果你

00:02:20.380 --> 00:02:25.660
可以在聊天中提出您的问题和评论，我会根据您的电话给您打电话

00:02:25.660 --> 00:02:28.870
名字和聊天会很棒，我会让事情变得更有条理

00:02:28.870 --> 00:02:40.630
让我们从公告开始，如果谁有公告，谁来发布

00:02:40.630 --> 00:02:45.450
公告，我认为Michael确实请举手

00:02:46.210 --> 00:02:50.410
也许现在有些永恒

00:02:51.530 --> 00:02:59.870
哦，好的公告，好的，Michael Mike，请

00:02:59.870 --> 00:03:04.660
嗯，给你宣布

00:03:12.730 --> 00:03:14.790
你

00:03:26.930 --> 00:03:34.079
嘿，抱歉，现在人们可以看到我的屏幕吗？

00:03:34.079 --> 00:03:38.579
延迟变焦给我带来了一些麻烦，所以我想做一个

00:03:38.579 --> 00:03:41.940
真的很简短的公告，但是它已经足够广泛了，它有一些

00:03:41.940 --> 00:03:47.159
幻灯片，我叫Mike Gelser，我是盖子p2p的工作组队长

00:03:47.159 --> 00:03:52.530
整个盖子p2p项目的数量，我们已经将其整合在一起

00:03:52.530 --> 00:03:57.239
就像你们一样，创建一个路线图的过程远比您走得更远

00:03:57.239 --> 00:04:02.819
我们目前处于um状态，但我们将第一种

00:04:02.819 --> 00:04:08.970
我们需要外部利益相关者反馈的主要草案，或者我的意思是

00:04:08.970 --> 00:04:16.260
利益相关者，特别是ipfs工作组的负责人

00:04:16.260 --> 00:04:23.400
谁的工作取决于Lib p2p，我将在文档链接中发布该链接

00:04:23.400 --> 00:04:31.169
如果我还没有的话，请注意，我们基本上只是把这个

00:04:31.169 --> 00:04:34.380
一起记录文档我不会尝试浏览我只想要的全部内容

00:04:34.380 --> 00:04:38.639
解释它所处的状态，然后您如何才能帮助我们

00:04:38.639 --> 00:04:43.590
现在，该文档只是由

00:04:43.590 --> 00:04:49.800
Lib p2p团队在接下来的五年中我们可以做的事情是

00:04:49.800 --> 00:04:54.419
从诸如改进文档之类的战术方面到真正超出他们想法的范围，例如

00:04:54.419 --> 00:05:00.630
制作令人耳目一新的p2p硬件设备，然后人们将其安装在家里，所以我

00:05:00.630 --> 00:05:06.690
意味着这只是这些想法的巨大汇编，而不是其中的路线图

00:05:06.690 --> 00:05:11.820
没有日期的感觉，没有任何类型的物品

00:05:11.820 --> 00:05:17.639
优先顺序，它的意思是um，而我们在这一点上还没有承诺

00:05:17.639 --> 00:05:22.050
对于这些事情中的任何一个，它们只是一个角色，我报名参加了大部分

00:05:22.050 --> 00:05:27.479
技术部分最后我做了大部分产品，但我们所有人

00:05:27.479 --> 00:05:31.229
所做的就是将所有现有想法融合在一起，而我们的目标是

00:05:31.229 --> 00:05:36.659
这个星期是为了让社区中的人们和像ipfs这样的下游用户

00:05:36.659 --> 00:05:40.980
向我们反馈他们关心的事情，您会

00:05:40.980 --> 00:05:48.570
会将其用于优先级排序，因此这是您和我们的主要要求

00:05:48.570 --> 00:05:53.400
特别适用于ipfs船长工作组，例如您是否有依赖关系

00:05:53.400 --> 00:05:57.930
在某些东西和lib p2p上，它没有反映在该路线图中的任何地方

00:05:57.930 --> 00:06:00.900
应该告诉我们像在码头上发表评论

00:06:00.900 --> 00:06:05.790
是的，我也会创建一个github问题，但最好是在

00:06:05.790 --> 00:06:11.970
如果您认为在文档中看到的内容是

00:06:11.970 --> 00:06:16.250
对您特别重要，您应该+1，这样有助于我们了解

00:06:16.250 --> 00:06:21.210
关于我们可能还没有了解好的依赖关系

00:06:21.210 --> 00:06:31.070
所以我要停止分享屏幕了谢谢您的时间谢谢

00:06:31.070 --> 00:06:37.210
嗯，在我们继续之前有任何快速问题

00:06:40.050 --> 00:06:51.010
好的，非常感谢迈克，哦，我们的演讲是

00:06:51.010 --> 00:06:58.000
叫做ipfs live-streaming，它是由你的女孩Ilan提出的，然后

00:06:58.000 --> 00:07:03.970
非常感谢您抽出宝贵时间参加本届城市ipfs每周会议

00:07:03.970 --> 00:07:15.460
我们很期待它，所以让我们开始吧，等我坚持你

00:07:15.460 --> 00:07:22.660
表示这是ipfs实时流式传输，这是我们在

00:07:22.660 --> 00:07:31.090
永恒的网络会议在2018年，所以我们的网络很小

00:07:31.090 --> 00:07:35.140
会议刚刚在多伦多开始，这是第二年了

00:07:35.140 --> 00:07:40.210
大约有一百位参与者，它基本上是在谈论社区

00:07:40.210 --> 00:07:46.300
网络网状网络具有这种性质的事物更多地集中在人们方面

00:07:46.300 --> 00:07:52.300
尽管那里也有很多技术，所以实况转播

00:07:52.300 --> 00:07:56.800
会议我们的预算基本上是一百块钱，那不是东西。

00:07:56.800 --> 00:08:02.100
原本计划在发生，但

00:08:02.250 --> 00:08:07.990
基本上我自己是伊兰，我们在谈论如何制作视频

00:08:07.990 --> 00:08:13.240
ipfs上的流媒体播放和一些乐观的人说嘿我们为什么不住

00:08:13.240 --> 00:08:21.660
通过ipfs直播会议，我们旨在进行内容分发

00:08:21.660 --> 00:08:28.480
易于扩展，使其可斥责其他类似规模的会议和狗食

00:08:28.480 --> 00:08:32.919
对于去中心化文本，基本上测试了限制，看看我们能做什么，看看什么

00:08:32.919 --> 00:08:38.169
我们无法做这种性质的事情，因此该项目开始的第一个提交是May

00:08:38.169 --> 00:08:44.020
会议是7月13日的19日，回首是两个月

00:08:44.020 --> 00:08:49.770
尽管我们已经有了概念证明，但还是以某种方式使她脱胎换骨

00:08:49.770 --> 00:08:55.629
他们仍然问过，但是尽管如此，我们还是做到了

00:08:55.629 --> 00:09:00.040
这样做，所以在我们开始之前，我先说说

00:09:00.040 --> 00:09:03.129
堆栈很抱歉，所以我们在网络上的堆栈

00:09:03.129 --> 00:09:07.059
会议基本上是一些视听HDMI采集卡

00:09:07.059 --> 00:09:13.990
我们曾使用OBS工作室来管理实际流的硬件等

00:09:13.990 --> 00:09:17.519
前提是我们使用Open VPN进行身份验证和发布

00:09:17.519 --> 00:09:24.399
digitalocean是主机，而DNS是管理主机以及所有nginx和rtmp模块

00:09:24.399 --> 00:09:29.139
用来将流量代理到实时服务器ffmpeg，它们都是

00:09:29.139 --> 00:09:35.709
编码为HLS ipfs进行了存储和分发视频j / s，我们将其用作

00:09:35.709 --> 00:09:41.589
网站和terraform的播放器是我们过去制作它的一种手段

00:09:41.589 --> 00:09:47.259
可复制且易于部署，因此我将向您展示

00:09:47.259 --> 00:09:54.009
演示如何实际部署它，因此我们将从克隆git开始

00:09:54.009 --> 00:10:01.749
所有用于所有人使用的存储库，然后我们将

00:10:01.749 --> 00:10:05.920
一点配置，所以我们要设置一个域名，我们要把它放在

00:10:05.920 --> 00:10:10.300
现在我们要托管它，我们将为我们设置一个API电子邮件地址

00:10:10.300 --> 00:10:20.920
加密，我们将为SSH会话生成一个公共密钥，

00:10:20.920 --> 00:10:26.170
被放入digitalocean的密钥和一个指纹被添加并谈到

00:10:26.170 --> 00:10:32.459
凝胶海洋，我们将需要向其发布内容，因此有一个API密钥，

00:10:32.459 --> 00:10:38.019
因为这是一个现场演示，所以我要把实际的公钥放在私钥中

00:10:38.019 --> 00:10:45.870
在那里，那么我们将要安装terraform，以便快速获取

00:10:45.870 --> 00:10:58.660
解压缩并初始化，这样就可以准备terraform然后再进行terraform

00:10:58.660 --> 00:11:04.059
 apply实际上会占用整个堆栈并将其部署在我自己的服务数字平台上

00:11:04.059 --> 00:11:08.970
海洋飞沫，这需要十到四十分钟的时间

00:11:08.970 --> 00:11:13.650
截至昨晚，我们将时间降到了十分钟，我们发现了正在发生的事情，但是

00:11:13.650 --> 00:11:16.770
我们将继续进行演示并检查它，以便让它运行

00:11:16.770 --> 00:11:23.250
之后，让我们讨论一下我们在网络上所做的事情，所以这

00:11:23.250 --> 00:11:28.200
是如何处理我们的网络流媒体的地图

00:11:28.200 --> 00:11:33.120
基本上有两个供稿器，一个是来自主持人笔记本电脑的，另一个是来自笔记本电脑的HDMI供稿器。

00:11:33.120 --> 00:11:40.350
摄像机，然后将其放入运行OBS的笔记本电脑中，然后OBS会发布

00:11:40.350 --> 00:11:44.850
通过Internet上的VPN连接流到rtmp服务器，这是一个

00:11:44.850 --> 00:11:49.440
堆栈产生的液滴的数量，因为我们不知道这是否会

00:11:49.440 --> 00:11:54.330
rtmp服务器实际上以两种不同的方式托管文件的工作

00:11:54.330 --> 00:12:03.540
流ipfs流和纯净的旧式HTTP流，因此我们

00:12:03.540 --> 00:12:08.910
将会失败，我们仍然拥有旧的另一个，因此IP FS端包括

00:12:08.910 --> 00:12:13.050
IP FS服务器，实际上在创建IP FS方面承担了繁重的工作

00:12:13.050 --> 00:12:16.860
哈希和类似性质的东西，然后镜像实际上将托管

00:12:16.860 --> 00:12:26.850
文件等等，让我们来谈谈IP FS和视频，以便

00:12:26.850 --> 00:12:31.290
将视频放在IP FS上非常简单，这与任何视频都非常相似

00:12:31.290 --> 00:12:36.330
其他类型的内容，您可以录制视频，然后对其进行哈希处理，然后将其放在IP上

00:12:36.330 --> 00:12:42.450
FS，然后将哈希值发布给所有人，但是如果您想

00:12:42.450 --> 00:12:50.190
散列尚未发生的事情，我的意思是这是问题，所以我们

00:12:50.190 --> 00:12:53.220
在看我们看过一种叫做HLS的东西，很多网站都有

00:12:53.220 --> 00:12:57.120
由于各种原因一直在使用，因此HLS由Apple开发，并已发布

00:12:57.120 --> 00:13:00.420
在2009年，它的繁殖基本上打破了潮流

00:13:00.420 --> 00:13:05.760
分成小块，小块，这个块的顺序实际上

00:13:05.760 --> 00:13:09.930
组成流，HLS会执行什么操作，实际上创建了一个播放列表

00:13:09.930 --> 00:13:16.620
描述序列是什么，例如，有一个m3u8列表

00:13:16.620 --> 00:13:20.140
客户端下载不同的块，然后客户端开始

00:13:20.140 --> 00:13:25.350
单独下载每个块并进行播放

00:13:25.350 --> 00:13:33.070
所以我们提出的问题是，如果我们仅散列每个单独的块，那

00:13:33.070 --> 00:13:39.550
这就是我们所做的，因此视频源来自我们使用ffmpeg的rtmp服务器

00:13:39.550 --> 00:13:45.610
实际创建HLS块的视频小片段，然后我们只是

00:13:45.610 --> 00:13:50.130
等到创建块后再创建块，我们将其添加到ipfs中

00:13:50.130 --> 00:13:57.610
云，并将该新哈希存储在某个位置，以便我们可以重写m3u8

00:13:57.610 --> 00:14:05.680
列表，然后冲洗并重复一次，因此我们创建了一个看起来有点像的日志文件

00:14:05.680 --> 00:14:12.580
基本上这样，它只是具有哈希值，文件名时间戳和

00:14:12.580 --> 00:14:18.010
哈希，当我们重写HLS文件时，看起来就像我们在

00:14:18.010 --> 00:14:22.030
基本上指的是具有正确块的IP FS网关，并且

00:14:22.030 --> 00:14:32.380
信息，现在我们有了发布播放列表所需的顺序

00:14:32.380 --> 00:14:38.440
播放列表是它的更改，它大约每20秒更改一次，具体取决于

00:14:38.440 --> 00:14:44.580
你创造了多少个房子大块

00:14:45.750 --> 00:14:51.520
网络视频播放器可以通过网关播放吗，这样

00:14:51.520 --> 00:14:55.060
视频播放器实际上并不需要进行修改，或者仅仅是HTTP和

00:14:55.060 --> 00:14:58.990
您知道任务已经完成，我们将其发布到IP中，因为它是

00:14:58.990 --> 00:15:03.220
可变格式的视频播放器可以播放

00:15:03.220 --> 00:15:09.820
他们说错了，他们说计算机科学字幕中只有两件事

00:15:09.820 --> 00:15:16.000
验证命名的事情可以尽快回拨和一键关闭错误

00:15:16.000 --> 00:15:22.990
打他们所有缓存无效，试图找出为什么流

00:15:22.990 --> 00:15:27.310
IP ns停滞不前需要两分钟才能发布四次流

00:15:27.310 --> 00:15:31.570
假设您有30秒的块无法正常工作，速度会变慢

00:15:31.570 --> 00:15:37.380
然后，IP NS需要大约两分钟的时间来解决，这又是行不通的

00:15:37.380 --> 00:15:42.130
所以我用DHT的阴茎花了太长时间，因为我们被告知有办法

00:15:42.130 --> 00:15:46.900
NAT后面的人太多了，幸运的是，如果您要

00:15:46.900 --> 00:15:51.880
是否得到快速解决，所以他查看了IP和发布的pub / sub

00:15:51.880 --> 00:15:59.140
事情进展得非常快，而且在大多数情况下都很好，所以我当时是怎么回事

00:15:59.140 --> 00:16:02.980
解决方案很好，因为我们希望它能起作用，因为我们希望这能成为一个解决方案

00:16:02.980 --> 00:16:07.270
概念验证，我们为会议取消了IP和s，只是主持了

00:16:07.270 --> 00:16:12.960
HTTP上的一个小的六百七百个字节的文件，它不会破坏任何东西

00:16:12.960 --> 00:16:17.560
很好地命名事情，如果ffmpeg重新启动，它将启动一个

00:16:17.560 --> 00:16:22.720
从头开始编号，并在日志文件中复制名称，以便

00:16:22.720 --> 00:16:26.500
当您尝试替换它们时，哈希值不匹配，并且所有内容

00:16:26.500 --> 00:16:34.840
只是中断，所以我们的解决方案不是替换m3u8文件中的文件，而是

00:16:34.840 --> 00:16:39.430
刚刚创建了自己的数据库，我们就拥有了同步所需的所有信息

00:16:39.430 --> 00:16:47.670
回调我们依赖于一系列事件来使这种情况首先发生

00:16:47.670 --> 00:16:53.740
事情是ffmpeg IP FS无进程脚本，因此每个脚本都在各自的脚本中运行

00:16:53.740 --> 00:17:02.260
线程可能会出错的地方，所以我们的解决方案是创建自我恢复

00:17:02.260 --> 00:17:06.610
意识到每次循环都无法正常工作的措施

00:17:06.610 --> 00:17:16.630
只是为了使事情正常运行，所以HLS序列有一个错误，即

00:17:16.630 --> 00:17:22.480
如果错误地订购了它们中的时间码，则客户端拖延重写它们

00:17:22.480 --> 00:17:27.880
时间码导致非常有限的成功，但是当我们看着这个时

00:17:27.880 --> 00:17:31.960
问题，我们发现HLS有更好的解决方案，实际上HLS中有一个标签

00:17:31.960 --> 00:17:35.770
表示新序列的开始，我们将其应用于

00:17:35.770 --> 00:17:40.750
开始工作，所以您知道我们现在经历了所有这些事情

00:17:40.750 --> 00:17:45.520
让我们看看我们的构建会发生什么，不幸的是我们的构建仍在

00:17:45.520 --> 00:17:49.420
建筑，但你知道我们要做什么

00:17:49.420 --> 00:17:59.640
玛莎·斯图尔特（Martha Stewart）在这里，看看已经旋转的星团，

00:18:03.270 --> 00:18:07.500
您放置在计算机上的配置文件连接了VPN，我们使用

00:18:07.500 --> 00:18:11.190
作为一种身份验证机制，Open VPN的优点还在于

00:18:11.190 --> 00:18:17.520
它将其包装在TCP链接中，因此UDP数据包通常不会丢弃实时流

00:18:17.520 --> 00:18:24.030
正在使用UDP数据包，因为如果丢失了一些数据包，您不想

00:18:24.030 --> 00:18:27.210
关心您是否要继续，但是因为包装中有一些延迟

00:18:27.210 --> 00:18:32.160
TCP实际上创建了更好的流而没有太多延迟，所以我要停止

00:18:32.160 --> 00:18:35.820
立即分享和Ilana，如果您想共享自己的屏幕，那么我们就让我们直播

00:18:35.820 --> 00:18:47.100
没事，所以我们将使用我提到的OBS将内容流式传输到

00:18:47.100 --> 00:19:00.210
活点网状世界，所以我们要选择输出流

00:19:00.210 --> 00:19:06.600
在自述文件中，我们将把服务器的IP地址放在

00:19:06.600 --> 00:19:16.080
始终使用10 10 10 1斜线的VPN，并正常设置我们的OBS，

00:19:16.080 --> 00:19:25.740
开始流式传输，所以我要在这里做一个视频文件，所以现在

00:19:25.740 --> 00:19:32.330
发生的是OBS实际上是在将该视频流的内容发送到

00:19:32.330 --> 00:19:40.380
服务器好了，几秒钟后，我们应该

00:19:40.380 --> 00:19:49.920
能够看到我们仍然看到最后一个的结尾需要一些哦，不，我们

00:19:49.920 --> 00:19:53.810
这里有问题BPM需要重新连接

00:19:54.470 --> 00:20:01.400
再试一次，所以停止流式传输再重新启动

00:20:05.210 --> 00:20:10.499
那里每秒有30帧每秒零丢帧

00:20:10.499 --> 00:20:15.330
现在可以正常工作，因此让它大约有30秒的时间可以在背面启动

00:20:15.330 --> 00:20:27.440
结束，聊天中发布了一个链接，您可以查看一下

00:20:27.440 --> 00:20:33.149
此直播流，因此您可能会得到我们尝试过的流的尾端

00:20:33.149 --> 00:20:38.369
昨天是因为我们在录制这一首歌方面还没有真正走得很远

00:20:38.369 --> 00:20:50.029
但稍等片刻，因此该型号的设计存在一些延迟，因为

00:20:50.029 --> 00:20:54.570
正如我说的那样，您不能哈希实时事件，因此在等待块之间

00:20:54.570 --> 00:21:02.700
创建它，然后在ipfs上发布，实际上是最后一个客户端

00:21:02.700 --> 00:21:07.349
下载适当的块，依此类推，会有一点延迟

00:21:07.349 --> 00:21:14.970
关于这一点，但是当我们在会议上进行流式传输时，我们有大约16个人的观点

00:21:14.970 --> 00:21:20.220
它和小河工作得很好，然后一旦我想了大约半秒钟，它就会掉下来

00:21:20.220 --> 00:21:28.919
第二，我们真的很棒，所以现在几点了

00:21:28.919 --> 00:21:37.769
快速演示，是的，非常快速的演示，好的，我将向您展示，这真的是

00:21:37.769 --> 00:21:41.489
我们所做的就是拿起堆栈，然后使用以下命令将其压缩到Raspberry Pi上

00:21:41.489 --> 00:21:50.570
Raspberry Pi相机，所以我要在这里分享我的屏幕一秒钟，

00:21:50.570 --> 00:21:59.849
在这里获取一些链接，我的链接去了哪里，所以我要直接去本地IP

00:21:59.849 --> 00:22:07.019
仅仅因为它更好地解决了问题，所以这是Raspberry Pi相机所针对的

00:22:07.019 --> 00:22:15.330
延伸到窗外，如您所见，它在本地窗口中的播放效果非常好

00:22:15.330 --> 00:22:21.750
IP地址，如果我们想要没有转发端口，则有

00:22:21.750 --> 00:22:31.020
事实并非如此，这是VMware与第三方VMware的第三次竞争

00:22:31.020 --> 00:22:37.050
您所看到的是同一位玩家，然后是另一件事

00:22:37.050 --> 00:22:41.810
这样做是因为这是Raspberry Pi相机连接到Raspberry Pi的原因，

00:22:41.810 --> 00:22:45.570
所以我们在说我们还能做什么呢，可能是一些很酷的事情

00:22:45.570 --> 00:22:54.510
因此，我们要做的是让我们看一下是否加载了该产品，我们选择了Raspberry Pi，

00:22:54.510 --> 00:23:02.790
将其连接到软件定义的收音机，将其调谐到FM频率，现在我们

00:23:02.790 --> 00:23:08.040
有IP FS上的互联网广播，所以我将把它们扔到聊天室中

00:23:08.040 --> 00:23:16.140
找出我的聊天方式，让大家看看，这只是

00:23:16.140 --> 00:23:18.650
运行时，您会看到溪流将停滞，而这种性质的东西

00:23:18.650 --> 00:23:23.970
不幸的是，这是我们在ipfs中运行时遇到的问题

00:23:23.970 --> 00:23:28.590
有些事情需要清理，修复和加快，但是这个概念

00:23:28.590 --> 00:23:57.540
的工作，我们将这些链接放到了所有人的聊天室中，现在好了

00:23:57.540 --> 00:24:12.480
安静的掌声的时间，这真是令人兴奋，它真的很棒

00:24:12.480 --> 00:24:18.150
我们实际上遇到的所有问题实际上都是

00:24:18.150 --> 00:24:21.510
我们所处的位置，因为我们在Mozilla蜂巢中，我们不得不使用一些

00:24:21.510 --> 00:24:26.250
黑客实际上将其放入我们的笔记本电脑，因此我们遇到了一些音频同步问题

00:24:26.250 --> 00:24:30.110
诸如此类的东西，但都不是因为这个堆栈，而是因为

00:24:30.110 --> 00:24:36.860
只是非常短的时间，我们不得不准备它，但是是的

00:24:36.860 --> 00:24:49.080
非常感谢您的介绍和死胡同，我们现在有时间

00:24:49.080 --> 00:24:55.559
对于问题，我们将多花五分钟来解决问题，因此

00:24:55.559 --> 00:25:14.070
如果您有任何问题，可以将它放在聊天栏中

00:25:14.070 --> 00:25:24.450
乔尼（Jonnie）的紧缩问题我想只是嗯，那里有一个

00:25:24.450 --> 00:25:28.080
阈值，就可以击中的人数而言，我想是因为您是

00:25:28.080 --> 00:25:34.110
使用不应该是问题的网关，所以像您这样的一个名叫花花公子的家伙

00:25:34.110 --> 00:25:38.490
负载测试很好，我们有16个人参与其中

00:25:38.490 --> 00:25:43.590
我们能够承受的负载的数量，我们可能会做更多的事情，

00:25:43.590 --> 00:25:49.470
基本上通过运行此命令限制了可能出错的事情的数量

00:25:49.470 --> 00:25:56.299
我们所有的服务器都关闭了，所以我们的网关我们的rtmp服务器我们的IP FS服务器等等

00:25:56.299 --> 00:26:02.519
但是，我们已经做了一些尝试，特别是在使用ipfs的情况下

00:26:02.519 --> 00:26:09.269
Chrome和Firefox插件的模块，理论上我们应该是

00:26:09.269 --> 00:26:14.700
实际上，如果每个人都可以更快地将内容传播到周围

00:26:14.700 --> 00:26:19.679
在使用该模块，所以我的意思是理论上是否一切都按计划进行

00:26:19.679 --> 00:26:30.480
我的意思是，如果一切正常，那么可扩展性根本就不是问题。

00:26:30.480 --> 00:26:34.529
内部脚本存储库，有一个变量可以控制

00:26:34.529 --> 00:26:38.820
你可以旋转多少个镜子，所以如果我们期望像一千个人一样

00:26:38.820 --> 00:26:45.059
观看它，我们可以从一开始就旋转起来，就像巧克力一样

00:26:45.059 --> 00:26:47.360
镜子，每个镜子也拥有自己的镜子

00:26:47.360 --> 00:26:52.760
网关，但是我拥有的镜像越多，PFS知道的就越多，

00:26:52.760 --> 00:26:59.890
那么它将通过ipfs进行分发

00:27:01.160 --> 00:27:12.300
嗨，黛比，这真的很棒，是的，我非常兴奋尝试这个

00:27:12.300 --> 00:27:21.300
有一个问题，如果您要导出，就像我不知道的那样

00:27:21.300 --> 00:27:26.430
不可能，但我认为您已经在其他地方进行了分块

00:27:26.430 --> 00:27:32.910
那不是捕手正在做的地方，有可能

00:27:32.910 --> 00:27:36.870
就像进行转码一样，就像将其编码为多种分辨率一样

00:27:36.870 --> 00:27:42.150
就像魔术一样，您以4k进行流式传输，我想以1080p和720进行流式传输，

00:27:42.150 --> 00:27:47.250
如此类推，就像AB，我的阴茎指针指向所有

00:27:47.250 --> 00:27:51.990
那些链条，如所有在多种分辨率下的时钟链，

00:27:51.990 --> 00:27:57.000
然后设备是否按照客户决定的正确分辨率进行选择

00:27:57.000 --> 00:28:01.320
哦，我想遵循这一酸性标准，因为我的设备是一部电话，但我没有

00:28:01.320 --> 00:28:07.050
需要更多类似的东西，是的，所以HLS就是HLS的力量之一

00:28:07.050 --> 00:28:10.380
是您可以执行多种解决方案，然后决定您知道什么

00:28:10.380 --> 00:28:15.090
我落后于我，请让我们降低分辨率，这是因为

00:28:15.090 --> 00:28:20.280
它只是假设网络拥塞，是的，您不能这样做，这只是其中的一部分

00:28:20.280 --> 00:28:24.240
HLS，但您现在可能遇到的问题之一是我们没有这样做

00:28:24.240 --> 00:28:28.140
但是首先查看它，您将分发多个

00:28:28.140 --> 00:28:33.090
不同的视频流，因此如果您正在考虑将视频流推向多个

00:28:33.090 --> 00:28:35.280
大量的观众，您实际上必须推出

00:28:35.280 --> 00:28:39.330
如果您实际上将拆分方式，它们将是多个不同的流

00:28:39.330 --> 00:28:42.480
许多节点具有您实际上正在观看的流，但是另一个问题

00:28:42.480 --> 00:28:48.960
您还会遇到的是，HLS的滞后不一定是aa

00:28:48.960 --> 00:28:52.980
带宽问题了，因为还有很多其他因素导致IP NS

00:28:52.980 --> 00:28:58.260
正确更新是否ipfs具有您正在寻找的哈希等

00:28:58.260 --> 00:29:03.330
所以虽然绝对可以看一下，但一定要

00:29:03.330 --> 00:29:10.100
确实必须在HLS方面完成工作以处理这些不同的变量

00:29:10.160 --> 00:29:16.350
是的，在一个潜在的用例中，绝对是这样

00:29:16.350 --> 00:29:22.050
即使是接收者也正在做转码，所以如果我有一个

00:29:22.050 --> 00:29:25.920
笔记本电脑在家里，我正在看一些流媒体视频，而我的设备中还有其他设备

00:29:25.920 --> 00:29:29.160
我也喜欢尝试观看同一视频流的家，我可以成为这台机器

00:29:29.160 --> 00:29:33.570
负责进行重新编码，然后，因为

00:29:33.570 --> 00:29:39.180
它再次丢失，因此设备可以像获取这些经过重新编码的设备一样

00:29:39.180 --> 00:29:43.710
直接从我的机器中阻止，但就像使用相同的指针一样

00:29:43.710 --> 00:29:53.220
只是我想这是一个主意，我们尝试了很多，是的，有一个问题

00:29:53.220 --> 00:29:59.280
与D网络上的视频供稿一起，我们尝试从YouTube提取视频流并推送

00:29:59.280 --> 00:30:02.970
不幸的是，它进入了ipfs

00:30:02.970 --> 00:30:07.050
 YouTube，因此尽管理论上可行，但实际上并没有真正解决

00:30:07.050 --> 00:30:12.300
任何问题，因此您可以肯定地知道如何吸引并重新体验

00:30:12.300 --> 00:30:19.110
对其进行编码，然后再进行有趣的事情，好了，我们要

00:30:19.110 --> 00:30:27.270
在这里结束，非常感谢您的奔忙Ben和Ilan与您分享和分享

00:30:27.270 --> 00:30:38.640
我们，嘿，在您走之前，我相信我们的每周新闻通讯的链接

00:30:38.640 --> 00:30:46.830
评论，我要感谢Leto服用兴奋剂，今天过得很愉快，我

00:30:46.830 --> 00:30:57.860
下周见。拜拜，拜拜，谢谢，拜拜

