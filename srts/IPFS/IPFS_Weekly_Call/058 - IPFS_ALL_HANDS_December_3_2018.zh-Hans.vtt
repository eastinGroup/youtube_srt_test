WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.120 --> 00:00:02.179
你

00:00:04.110 --> 00:00:06.170
你

00:00:07.080 --> 00:00:09.140
你

00:00:15.519 --> 00:00:21.370
一个很好的快速问题，有人知道是否

00:00:21.370 --> 00:00:26.960
我们修复了sprint机器人，并确定了这些调用是否存在问题

00:00:26.960 --> 00:00:35.660
因为本周所有链接的链接都出了问题，所以我们可以对其进行修复

00:00:35.660 --> 00:00:40.100
我我还没有解决它，但至少我们正在这样做

00:00:40.100 --> 00:00:43.790
手动，我们可以提供正确的链接，因此感谢您将其引入我们的网站

00:00:43.790 --> 00:00:51.080
注意耶，你好，好吧，让我们开始

00:00:51.080 --> 00:00:57.610
你好，我叫波蒂亚，欢迎参加ipfs每周电话

00:00:57.610 --> 00:01:03.550
这是一个电话，我们可以找出正在发生的所有有趣的事情

00:01:03.550 --> 00:01:10.380
ipfs社区我们通常如何进行这些调用是从

00:01:10.380 --> 00:01:20.790
公告，然后我们进入主要演示文稿，并完成问答

00:01:20.790 --> 00:01:27.530
所以我们正在寻找议程让我们来看看你

00:01:29.189 --> 00:01:33.740
所以Argenta通常在这里

00:01:34.140 --> 00:01:42.120
啊，谢谢，谢谢，罗伯，在我们开始之前，我还要感谢阿里

00:01:42.120 --> 00:01:48.810
今天做笔记，谢谢大家，我们有什么吗？

00:01:48.810 --> 00:01:52.430
我们想要开始的公告

00:01:55.440 --> 00:02:01.460
我有一个公告，请确保我的屏幕

00:02:01.460 --> 00:02:05.060
你你

00:02:05.440 --> 00:02:07.500
你

00:02:09.920 --> 00:02:19.550
所以明天我将为开源ipfs日做一个贡献

00:02:19.550 --> 00:02:25.370
从6:30到9，这是人们潜入ipfs的绝佳机会

00:02:25.370 --> 00:02:31.709
代码库和贡献，所以这是实际事件

00:02:31.709 --> 00:02:38.879
以及您是否是维护者，以及您是否对我们在此期间的工作感兴趣

00:02:38.879 --> 00:02:46.069
活动我简要概述了三个不同的贡献途径

00:02:46.069 --> 00:02:54.060
我之前去参加过各种活动，在很多情况下，我无法

00:02:54.060 --> 00:02:59.670
实际做出了贡献，或者我没有达到那个水平，所以为了没有那个

00:02:59.670 --> 00:03:06.599
令到来的人们感到沮丧我把这个事件分解成

00:03:06.599 --> 00:03:12.720
三个事件，我的意思是三个轨道，所以我将介绍什么是ipfs

00:03:12.720 --> 00:03:16.919
到目前为止我们一直在做的事情，然后我将其分为三个部分

00:03:16.919 --> 00:03:22.290
不同的曲目对初学者来说是什么，所以这是我正在尝试的B

00:03:22.290 --> 00:03:27.389
使这对初学者尽可能的友好

00:03:27.389 --> 00:03:34.049
不熟悉我们的项目，它是ipfs，我如何使用它，即使对于

00:03:34.049 --> 00:03:39.030
没有能力的人将能够理解什么是

00:03:39.030 --> 00:03:46.919
ipfs，并查看一些使用ipfs和用于

00:03:46.919 --> 00:03:52.049
其他所有人，我将添加更多链接，但我对ipfs有所贡献

00:03:52.049 --> 00:03:59.310
第一个问题，包括贡献准则，还包括问题

00:03:59.310 --> 00:04:06.840
标记为简单，所以如果您有的话，我的意思是如果您是ipfs的维护者

00:04:06.840 --> 00:04:12.209
项目，您需要一些帮助，可以在此处将其提交问题。

00:04:12.209 --> 00:04:18.599
在对开源项目ipfs的贡献下，我们将尝试吸引一些人

00:04:18.599 --> 00:04:23.490
明天看这个项目，希望能有所贡献，希望能登陆

00:04:23.490 --> 00:04:26.270
在提交中

00:04:27.700 --> 00:04:38.240
嗯，就是我，其他人有吗，是6:30到9 CET

00:04:38.240 --> 00:04:41.990
其他人在我们开始之前有任何公告

00:04:41.990 --> 00:04:47.470
如果你这样做，你会举起你的手

00:04:47.470 --> 00:04:53.230
让我们看看我没有看到民兵娜娜（Nana）教给我的波西亚（Portia）如果

00:04:53.230 --> 00:04:57.040
对于不在柏林的人，有任何方式可以采取

00:04:57.040 --> 00:05:02.220
您为完成此活动而进行的所有工作的优势

00:05:02.860 --> 00:05:08.320
我会的，这是第一个事件，我们不会直播

00:05:08.320 --> 00:05:12.970
说我们要发布我所学的内容的演示文稿

00:05:12.970 --> 00:05:20.380
等等，适合从事je ipfs或go ipfs的人们

00:05:20.380 --> 00:05:25.090
如果您只想看一些拉取请求，然后再看一遍，

00:05:25.090 --> 00:05:30.460
看看您是否真的可以提交，这对我们下次活动很有帮助

00:05:30.460 --> 00:05:36.900
试图弄清楚我们实际直播活动是否可行

00:05:39.300 --> 00:05:42.300
惊人的

00:05:42.740 --> 00:05:49.850
好吧，我看到这个问题不是公开的，所以我会找到一个地方做这个

00:05:49.850 --> 00:05:53.630
公开发行，以便每个人都可以实际查看并实际放入

00:05:53.630 --> 00:06:01.120
评论等，因此，谢谢您Matt其他任何评论或公告

00:06:01.270 --> 00:06:08.229
在画廊视图中，周末知道已经谢谢了，我们将

00:06:08.229 --> 00:06:12.669
从杰克（Jake）进入我们的主要演讲，他将向我们展示一些

00:06:12.669 --> 00:06:19.660
他一直在使用实时p2p JavaScript API进行出色的工作，所以请杰克

00:06:19.660 --> 00:06:22.259
把它拿开

00:06:23.600 --> 00:06:26.710
共享屏幕

00:06:30.550 --> 00:06:37.450
是的，所以大约两个星期前，我们发布了Jaya slip ptb哦24，所以我们只是

00:06:37.450 --> 00:06:41.140
回顾一下该发行版中的主要内容是什么

00:06:41.140 --> 00:06:43.990
大量的错误修复和稳定性改善

00:06:43.990 --> 00:06:49.590
但我们将介绍高级内容，看看是否有人有疑问

00:06:49.590 --> 00:06:54.730
因此，与之相关的重大事情最终被委派给了同行，

00:06:54.730 --> 00:07:00.010
内容路由我之前在ipfs All Hands中进行过演示，因此我们不会进行演示

00:07:00.010 --> 00:07:03.550
今天，但我在演示文稿中有链接，这些链接将分享给大家

00:07:03.550 --> 00:07:07.300
你可以去看看，在Jay的Lib PTP中有一个可行的例子，所以你可以看一下

00:07:07.300 --> 00:07:13.120
在那把它拉下来玩，我们也有电路继电器已经

00:07:13.120 --> 00:07:18.010
默认情况下启用了点亮的p2p和Lapidus，它们现在是状态机，然后

00:07:18.010 --> 00:07:30.070
CAD DHT现在可以使用ipfs的Interop了，所以我们来谈谈这些吧

00:07:30.070 --> 00:07:34.240
委托路由，例如我们要完成的任务，因为

00:07:34.240 --> 00:07:37.630
很多时候，我们可以使用DHT，我们从DHT中得到了很多

00:07:37.630 --> 00:07:42.670
带有DHT的盒子，但在某些情况下DHT无法让我们

00:07:42.670 --> 00:07:48.070
一切，因此有几个方案是资源不足的节点节点

00:07:48.070 --> 00:07:53.380
可能位于物联网设备中或限制了浏览器空间，而这些设备实际上并没有

00:07:53.380 --> 00:07:59.020
用于维护DHT的资源，这支持该可用性或低可用性

00:07:59.020 --> 00:08:03.610
节点，这对于浏览器来说可能是很常见的事情

00:08:03.610 --> 00:08:07.360
他们是您知道您打开时创建的内容，无论是纯垫还是纯内容

00:08:07.360 --> 00:08:11.290
类似的事情，您创建了一个新的键盘，然后关闭了浏览器

00:08:11.290 --> 00:08:14.470
现在关闭您的笔记本电脑，没有人能够再获取该内容

00:08:14.470 --> 00:08:18.840
pure pad正在像固定服务一样来解决这个问题，但这也

00:08:18.840 --> 00:08:24.580
为我们提供方法让另一个节点提供我们的内容，因此当我们

00:08:24.580 --> 00:08:29.170
注册为提供者，我们实际上有另一个节点来获取我们的内容，

00:08:29.170 --> 00:08:33.669
然后自己服务，这对于网关节点来说是一件很棒的事情

00:08:33.669 --> 00:08:38.560
每个人都有很多人与之联系，我们可以利用他们作为

00:08:38.560 --> 00:08:42.580
潜在的提供商让他们提取我们的内容，然后如果我们正在创建

00:08:42.580 --> 00:08:45.550
内容比较板或我们知道的很好用的东西

00:08:45.550 --> 00:08:51.160
在其他地方，当我们关闭笔记本电脑然后进行自定义书写时，

00:08:51.160 --> 00:08:56.380
很有可能会是越来越多的人开始使用IP FS，让他们使用p2p

00:08:56.380 --> 00:09:05.260
在提供内容和寻找同伴方面有不同的需求，他们可能

00:09:05.260 --> 00:09:10.570
可能有特定的业务需求，而Lib p2p却是

00:09:10.570 --> 00:09:14.560
委托路由器都是自定义对等方和内容路由的一部分，因此

00:09:14.560 --> 00:09:18.820
人们将能够为此创建自己的东西，然后提供这些东西，我们将

00:09:18.820 --> 00:09:27.550
贯穿其中的许多内容来投放该内容，因此有一个示例

00:09:27.550 --> 00:09:31.839
github，我将快速弹出此打开的真实内容，以便您可以看到它在J中

00:09:31.839 --> 00:09:38.260
asleep p2p repo它具有所有可以在那里运行的代码，非常简单

00:09:38.260 --> 00:09:47.200
现在要工作的一件事要注意，这取决于对ipfs的更新

00:09:47.200 --> 00:09:52.149
它正在等待它与正在运行的网关节点一起工作，但它将正常工作

00:09:52.149 --> 00:09:56.290
开箱即用，只要您将其指向支持以下功能的IP FS节点即可：

00:09:56.290 --> 00:10:03.279
 Jas ipfs API当前不支持端点，因为我们没有引用

00:10:03.279 --> 00:10:07.480
内置和引用是实际注册另一个人所需的

00:10:07.480 --> 00:10:12.339
提供您的内容，所以如果您去说嘿，请为我提供此内容

00:10:12.339 --> 00:10:16.930
无法自动喜欢去获取和拉取您的内容，因此

00:10:16.930 --> 00:10:22.779
在那里，我们需要更改其工作方式或向JSI PFS引入引用

00:10:22.779 --> 00:10:26.410
代理模块，用于对等和内容路由，它们已经在NPM上，您可以

00:10:26.410 --> 00:10:34.470
去用它们将它们拉下来是的，所以电路继电器，所以我们注意到的一件事是

00:10:34.470 --> 00:10:40.570
我们俩都走了，而jaea slippy是因为我们没有打开电路中继拨号

00:10:40.570 --> 00:10:46.870
默认情况下，因此如果您在同一传输方式上与另一人的通话方式不同

00:10:46.870 --> 00:10:51.730
节点，即使您在

00:10:51.730 --> 00:10:56.040
连接到可以为您转换通信的继电器

00:10:56.040 --> 00:10:59.440
没有人在家里进行违约交易，所以我们继续前进

00:10:59.440 --> 00:11:04.960
我们没有做的一件事就是打开跃点，因为这将您注册为

00:11:04.960 --> 00:11:10.780
中继，所以我们没有打开它，因为这可以提供很多第二个原因

00:11:10.780 --> 00:11:16.540
很多资源资源限制，因为您要中继一堆

00:11:16.540 --> 00:11:19.900
我们通常尝试进行的通信会保留给那些知道谁的人

00:11:19.900 --> 00:11:37.080
可以很好地处理这种吞吐量

00:11:37.080 --> 00:11:43.210
状态机更新，因此Jess live p2p和Lapidus都是状态机

00:11:43.210 --> 00:11:48.510
现在，我们这样做的原因是为了获得更好的流量控制

00:11:48.510 --> 00:11:55.270
在开始停止层以及连接层都一样

00:11:55.270 --> 00:12:01.840
在此更新中，我们在Jace lupita P中公开了一种新的拨号FSM方法，该方法是

00:12:01.840 --> 00:12:07.300
这样做不是获得您实际的普通接口连接

00:12:07.300 --> 00:12:11.950
得到一个状态机连接，使您可以连接到一堆

00:12:11.950 --> 00:12:16.750
他们在这里链接的事件各种事件，例如警告事件，所以我们

00:12:16.750 --> 00:12:23.440
有很多要求，嘿，我说这件事表明电路出现故障了，

00:12:23.440 --> 00:12:28.900
没有人能够连接到它，所以我们没有从所有错误中获得足够的错误

00:12:28.900 --> 00:12:32.860
可能发生的各种运输故障，所以现在它会散发出来

00:12:32.860 --> 00:12:36.310
其他警告错误，以便您可以更好地听取

00:12:36.310 --> 00:12:42.130
诊断正在发生的事情，并据此做出更好的决策

00:12:42.130 --> 00:12:48.040
在状态机连接上介绍了一种封闭的方法

00:12:48.040 --> 00:12:52.660
因为以前我们在普通连接上没有封闭的方法

00:12:52.660 --> 00:12:57.700
因此，用户能够关闭连接有点烦人

00:12:57.700 --> 00:13:01.420
这使事情变得容易得多，因此，一旦获得该状态机，您就可以

00:13:01.420 --> 00:13:04.510
完成您刚刚调用的连接的关闭操作，它将关闭它，并且

00:13:04.510 --> 00:13:10.180
另一端会挂断，这更清洁了，我们还改进了调试日志记录

00:13:10.180 --> 00:13:13.230
进行连接，因为这是一个很大的痛苦

00:13:13.230 --> 00:13:20.370
指向许多开发人员的要点，因此现在需要设置一些小技巧

00:13:20.370 --> 00:13:26.940
可以设置，这实际上会注销更好的信息，我只是

00:13:26.940 --> 00:13:40.770
弹出并尝试快速更改我的屏幕，以便我们可以看到实际效果，因此

00:13:40.770 --> 00:13:48.840
这只是p2p聊天的例子，所以我要继续前进，每个人都可以

00:13:48.840 --> 00:14:03.440
看到正确的方式，这样我们就可以继续并运行调试，

00:14:03.440 --> 00:14:07.830
在Lib PD PD连接上监听源侦听器的通配符

00:14:07.830 --> 00:14:17.970
这将在另一个窗口中启动，我们将为拨号程序执行此操作，您将

00:14:17.970 --> 00:14:22.320
看到这些消息散发出来，我将继续前进，并加大此窗口的质量哦

00:14:22.320 --> 00:14:29.910
不，那不是很好，所以我们可以看到这里有消息告诉您

00:14:29.910 --> 00:14:33.840
该节点正在拨出哪个节点，正在拨到另一个节点

00:14:33.840 --> 00:14:38.460
如果成功拨号，将遍历TCP支持

00:14:38.460 --> 00:14:44.820
如果完成加密，则将连接私有化

00:14:44.820 --> 00:14:49.770
选择何时完成加密，然后该过程的每一步都是

00:14:49.770 --> 00:14:54.300
状态机在状态改变或进行中的任何时候，我们都会记录

00:14:54.300 --> 00:14:57.870
这样，您就可以获得更多详细的调试日志记录，以了解发生了什么情况

00:14:57.870 --> 00:15:14.550
在连接上，我将切换回去，这样我们也

00:15:14.550 --> 00:15:19.230
Lib p2p启动和停止状态的状态机现在是幂等的

00:15:19.230 --> 00:15:23.010
用户想要解决的问题，他们想知道盖子p2p是否

00:15:23.010 --> 00:15:26.519
节点已启动，因此他们本来可以收听或

00:15:26.519 --> 00:15:29.940
做一些类似Genki的通话，因为回调的内容是

00:15:29.940 --> 00:15:35.130
希望在不久的将来照亮，但这可以通过解决

00:15:35.130 --> 00:15:39.810
如果您想知道实时p2p是否已启动，只需致电start等待

00:15:39.810 --> 00:15:43.829
回调，它将完成它已经启动，它将处理

00:15:43.829 --> 00:15:48.269
为您服务，只是说它已经完成了，因此应该更容易

00:15:48.269 --> 00:15:57.899
然后处理CAD DHT的最后一件事，因此Bosco做了很多工作

00:15:57.899 --> 00:16:03.269
努力获取有关CAD DHT的错误修复和API改进，以及

00:16:03.269 --> 00:16:09.240
Lapita P这样做也为实现以下功能消除了许多障碍

00:16:09.240 --> 00:16:15.360
IP NS越来越近了，所以在JSA PFS中工作是如此出色的工作

00:16:15.360 --> 00:16:22.019
害羞，然后我们的下一步将是通过以下方式打开DHT：

00:16:22.019 --> 00:16:25.649
 JSI PFS中的默认设置，因为现在它是实验性的，希望非常

00:16:25.649 --> 00:16:29.220
很快我们将看到它不再是实验性的，只是运行所有

00:16:29.220 --> 00:16:33.140
时间，这样你就可以得到同龄人和内容

00:16:33.140 --> 00:16:45.959
有没有人对任何问题有任何疑问，如果有的话，谢谢

00:16:45.959 --> 00:16:53.180
问题，如果您可以将其放在聊天中，那将是很棒的，我们将从杜比开始

00:16:53.180 --> 00:17:01.980
嘿，令人敬畏的工作超级激动人心的更新，非常感谢您所做的工作，像

00:17:01.980 --> 00:17:11.100
您的测试总是净逆转没问题，您会获得很多成功

00:17:11.100 --> 00:17:17.579
拨号到今天在照片后面的其他节点，是的，所以最终当

00:17:17.579 --> 00:17:24.290
您正在执行委托路由，要做的第一件事就是将引导程序引导至

00:17:24.290 --> 00:17:28.410
引导到单个笔记通常这是一个网关节点，所以这是

00:17:28.410 --> 00:17:35.010
这仍然是NAT逆转的问题，但这还很多

00:17:35.010 --> 00:17:37.630
特定的，以便您在一个可以

00:17:37.630 --> 00:17:41.890
控制您的端口映射，您可以委派嘿，我要拨出

00:17:41.890 --> 00:17:47.430
到此网关节点，我将向该节点执行HTTP API请求

00:17:47.430 --> 00:17:52.690
只要您能够与该节点对话，那便是优势

00:17:52.690 --> 00:17:56.530
不必担心与网络的其余部分进行通信，因为您

00:17:56.530 --> 00:18:01.630
将其注册为您的提供者，我正在从该问题中获取内容

00:18:01.630 --> 00:18:05.640
不一定我的问题是专门在您执行了

00:18:05.640 --> 00:18:09.820
内容路由正确，就像您获得对等方的租约，而那些对等方可能

00:18:09.820 --> 00:18:14.650
我们其他人的桌面，所以现在您的桌​​面必须消失，就像

00:18:14.650 --> 00:18:20.590
真正的净逆转问题，我的问题是是否有任何测试

00:18:20.590 --> 00:18:27.880
就像从gpfs上的节点到其余节点的连接级别一样

00:18:27.880 --> 00:18:40.480
网络忙于使用IPC，它默认为秘书吗，所以我们

00:18:40.480 --> 00:18:44.650
没有tcp打孔到ATP，但这是我们要做的事情之一

00:18:44.650 --> 00:18:49.330
想看看在近距离电路继电器中的加入是一个很大的问题

00:18:49.330 --> 00:18:54.240
我们想要确保默认情况下处于启用状态的功能

00:18:54.240 --> 00:18:59.020
因为这是一个很大的问题，我们无法解决

00:18:59.020 --> 00:19:01.860
nat经理的工作，我们将尝试在明年年初进行

00:19:01.860 --> 00:19:10.660
通过打一些tcp孔来帮助实现希望

00:19:10.660 --> 00:19:16.150
避免再次接力的机会是通过检查

00:19:16.150 --> 00:19:21.310
UTP好像您最近做了很多更新，然后可能

00:19:21.310 --> 00:19:26.380
我们需要的错误修复程序和我通过设计将qtp作为打孔工具

00:19:26.380 --> 00:19:34.120
因此，HTTP使事情变得更简单，值得一试，好吧，我会

00:19:34.120 --> 00:19:41.350
没有花更多的时间，大概有三千个问题，我有两个

00:19:41.350 --> 00:19:46.090
当您说Libby 2p是一个问题时，一个问题只是一个澄清请求

00:19:46.090 --> 00:19:48.640
状态机来定义你的意思

00:19:48.640 --> 00:19:55.870
但是我的问题是关于委托路由的问题

00:19:55.870 --> 00:20:00.190
您描述它的方式听起来像是您要委派的节点是

00:20:00.190 --> 00:20:04.930
实际上在一段时间内坚持使用该内容是正确的还是

00:20:04.930 --> 00:20:08.770
它只是重复您的Provide语句并向您提供路由

00:20:08.770 --> 00:20:18.370
作为一个新的是的，所以我将以相反的顺序回答，以便在代理路由时

00:20:18.370 --> 00:20:23.410
您提供内容，然后通过HTTP呼出您的Delia

00:20:23.410 --> 00:20:27.910
节点说嘿，我想提供此内容，然后该节点将返回

00:20:27.910 --> 00:20:32.710
然后从您那里获取内容并成为提供者，然后注册

00:20:32.710 --> 00:20:36.970
作为该内容的提供者，因此一旦发生交易，您就可以

00:20:36.970 --> 00:20:40.630
关闭，再也不会打开便条纸，但您知道其中的内容将会存在

00:20:40.630 --> 00:20:45.400
网络连接良好，因此主计算机基本上就是在提供麦克风

00:20:45.400 --> 00:20:54.790
固定服务，那么我想我的困惑是

00:20:54.790 --> 00:20:58.510
即使它是唇形进纸器P功能，也几乎更像是IP FS固定

00:20:58.510 --> 00:21:03.790
服务功能，例如，因为您提供的是，所以这不是

00:21:03.790 --> 00:21:11.170
非常依赖ipfs，所以就像ipfs的路由插件一样

00:21:11.170 --> 00:21:15.760
插入到p2p中，这就是我们引入自定义路由的原因

00:21:15.760 --> 00:21:21.220
因为可能有一些针对特定人群的特定p2p用例

00:21:21.220 --> 00:21:25.780
使用IP FS，他们可能希望围绕此构建自己的解决方案，并且

00:21:25.780 --> 00:21:29.470
那么他们将能够为自己创建纯内容的预路由器

00:21:29.470 --> 00:21:37.570
对那些不知道什么是状态机的人来说好吗

00:21:37.570 --> 00:21:42.220
定义是什么意思，是的，所以我们经营的事情之一

00:21:42.220 --> 00:21:48.190
进入苗条的p2p一段时间，甚至JSF EFS的一些东西就像

00:21:48.190 --> 00:21:53.380
状态转换并控制什么时候处于什么状态连接

00:21:53.380 --> 00:21:59.080
他们正在拨号，因此状态机允许我们执行的操作是

00:21:59.080 --> 00:22:04.179
开始过渡，所以我们可以走了，我们说嘿，让p2p节点我想要你

00:22:04.179 --> 00:22:08.379
您开始，然后根据该音符当前所处的状态将

00:22:08.379 --> 00:22:12.519
确定它的动作，因此如果它停止了，它将移至开始位置

00:22:12.519 --> 00:22:16.240
它会过渡到开始，然后会发生很多事故，一旦发生

00:22:16.240 --> 00:22:20.529
完成后，它会过渡到启动状态，因此，如果您在其上调用启动

00:22:20.529 --> 00:22:25.029
再次，如果您继续呼叫BTB开始，这就是该项目的潜在优势

00:22:25.029 --> 00:22:29.980
如果它已经开始，则说是的，我开始了，我完成了，您可以继续进行下去

00:22:29.980 --> 00:22:34.570
并停止相同的事情，这使我们能够在其中实现

00:22:34.570 --> 00:22:42.249
连接是我们实际上遇到了一个有趣的问题，还有一个滑点p2p，而我们没有

00:22:42.249 --> 00:22:47.860
对传入的连接强制执行加密，以便在传入连接时

00:22:47.860 --> 00:22:52.960
节点没有协商并说好，我要sekai哦，我们不会强制执行该操作

00:22:52.960 --> 00:22:58.600
所以现在它可以继续说不，我要强制去

00:22:58.600 --> 00:23:03.610
通过这种状态，例如我已经拨打过电话，现在我们已经成功拨打了电话，

00:23:03.610 --> 00:23:07.720
进入加密阶段，如果您尝试使用不在其中的其他协议

00:23:07.720 --> 00:23:14.460
加密协议将填充连接哦，好吧，Ally

00:23:14.460 --> 00:23:23.820
下一个问题哦，是的，如果我想将PT节点作为中继运行，那么很热

00:23:23.820 --> 00:23:29.710
我可以配置要中继的节点吗？

00:23:29.710 --> 00:23:32.529
目前还不是

00:23:32.529 --> 00:23:37.240
全球范围内，您刚刚注册为所有人的全球中继中继

00:23:37.240 --> 00:23:47.730
是的，真的更好，是的。Jonny紧缩下一个问题

00:23:47.730 --> 00:23:57.640
是的，实际上有三个问题，一个是针对您正在使用IPL D的州，否

00:23:57.640 --> 00:24:02.980
我们正在做的是使用一个名为FSM events的库，它只是

00:24:02.980 --> 00:24:10.530
有助于在内部管理我们的状态转换，Jason是的，我认为

00:24:10.530 --> 00:24:17.470
划分我的任务日，您将获得这种支持，我们还没有UDP支持

00:24:17.470 --> 00:24:22.150
认为某处已经有些死了的交通工具，但是

00:24:22.150 --> 00:24:26.730
我认为这是我们即将面临的优先事项之一，我认为这可能是我们

00:24:26.730 --> 00:24:32.920
明年的路线图讨论将获得UDP支持，最后

00:24:32.920 --> 00:24:40.180
您支持哪种加密算法，所以目前您在谈论四个

00:24:40.180 --> 00:24:44.500
键或想像一下绝对对不起字段伊迪二五五一

00:24:44.500 --> 00:24:51.820
九秒或一秒p25 6k 1，所以即将到来，我们有一个纯粹的请求请求

00:24:51.820 --> 00:24:59.020
为e25每个人打开9个键的唯一问题是唇形PE

00:24:59.020 --> 00:25:06.970
我们主要在ksi PFS中使用的钥匙串，当前X需要将其导出

00:25:06.970 --> 00:25:11.260
密钥以将它们保存到钥匙串中，并且是唯一具有导出支持的密钥

00:25:11.260 --> 00:25:16.030
现在是RSA，所以我只需要修复它，但是我的目标是获得支持

00:25:16.030 --> 00:25:22.990
对于在年底发布的内容，好吧，艾伦，最后一个问题

00:25:22.990 --> 00:25:32.140
去dahveed所以Allen你对不起我让我按一下

00:25:32.140 --> 00:25:42.340
现在是默认情况下使用拨号FSM的J asleep p2p，所以随时可以

00:25:42.340 --> 00:25:47.080
呼叫我们实际上喜欢融合许多逻辑，因此，如果您拨打拨号，拨号将

00:25:47.080 --> 00:25:53.590
实际上依次调用拨号协议，后者依次调用单独的拨号FSM

00:25:53.590 --> 00:25:58.450
也许还没有真正在撒谎，我不需要去研究，但是目标

00:25:58.450 --> 00:26:01.600
是把所有的东西变成白色和蓝色，然后移到

00:26:01.600 --> 00:26:08.110
一个水槽间的工作，希望会为此提出一些开放的建议

00:26:08.110 --> 00:26:12.970
不久，这将把所有逻辑移入该逻辑，以简化该逻辑

00:26:12.970 --> 00:26:20.370
API和最后一个问题Bobby，所以不是

00:26:20.370 --> 00:26:24.570
就像两个简单的要点，

00:26:24.570 --> 00:26:30.420
开放式Bazaar很高兴听到有关新按键的新增支持，

00:26:30.420 --> 00:26:35.790
为此，我知道也很兴奋，因此在澄清方面有两点

00:26:35.790 --> 00:26:41.429
我们不会直接支持UDP作为对等网络的传输，这就是

00:26:41.429 --> 00:26:45.720
因为像我们boutta同行设计假定很多基于流

00:26:45.720 --> 00:26:52.280
协议，因此您必须对第二个电路有某种了解

00:26:52.280 --> 00:26:56.550
流，因此它们就像我们不全部提供的所有剪辑一样

00:26:56.550 --> 00:27:04.140
等词，我们确实有一个副任务，例如启用数据包交换功能

00:27:04.140 --> 00:27:08.610
只是点对点的，特别是我通过电线和其他工具完成了很多工作

00:27:08.610 --> 00:27:13.950
其他的，当我们到达那里时，我们将拥有一个今天的UDP

00:27:13.950 --> 00:27:19.980
是UTP，我非常喜欢这三个天气要素

00:27:19.980 --> 00:27:21.690
就像同一封信只会使所有人感到困惑

00:27:21.690 --> 00:27:26.940
但就像UTP一样，束流组为

00:27:26.940 --> 00:27:35.100
在UDP之上的BitTorrent，但增加了我认为的流风格

00:27:35.100 --> 00:27:38.429
可能是金字塔，所以您可以获得UDP的好处，就像它将

00:27:38.429 --> 00:27:42.540
在UDP端口上，您可以打孔等，但我可以得到

00:27:42.540 --> 00:27:50.130
您实际需要使用的属性，希望它对您有所帮助

00:27:50.130 --> 00:27:53.280
其他澄清是人们在问之间的区别

00:27:53.280 --> 00:27:58.530
内容路由和预加载注释就像一个非常快速的区别，因此在

00:27:58.530 --> 00:28:02.640
您今天可以感觉到的飞跃，我们是像唱片一样的概念，而您

00:28:02.640 --> 00:28:08.610
知道我的阴茎名字记录可以是DHT的提供者记录，例如

00:28:08.610 --> 00:28:11.970
说关于您存储一些文件，诸如此类的东西，他们不知道

00:28:11.970 --> 00:28:15.090
结构，有计划将它们移动到我感觉一致，但我很多是

00:28:15.090 --> 00:28:19.440
这就是内容使用的东西，就像我问其他人一样

00:28:19.440 --> 00:28:26.400
提供文件的节点，或者当我向教授添加文件时

00:28:26.400 --> 00:28:29.220
要做一个提供查询，所以我要

00:28:29.220 --> 00:28:32.970
网络中的其他节点，我有此文件，然后是关于布丁的信息

00:28:32.970 --> 00:28:38.010
提供那里的记录，那么就像委托一样

00:28:38.010 --> 00:28:42.770
路由方案，它不会像您仍然将所有文件一样将文件移动到另一个文件

00:28:42.770 --> 00:28:47.160
然后在ipfs镜头上还有另一个概念是自由爱护和

00:28:47.160 --> 00:28:52.560
预加载是当我添加或触犯犯规时，我可以使用一些

00:28:52.560 --> 00:28:57.000
预加载笔记，我喜欢运行在拥有大量存储的强大机器上的节点

00:28:57.000 --> 00:29:03.330
和带宽以及更多的CPU RAM等来为我获取这些文件，以便

00:29:03.330 --> 00:29:06.780
当我从低功率设备或受约束的运行时（例如

00:29:06.780 --> 00:29:09.900
浏览器，您可以承担节点的有效职责，就像

00:29:09.900 --> 00:29:13.770
组装所有零件，以便它们可以更快地禁止或限制文件

00:29:13.770 --> 00:29:17.070
您不必进行完整的操作，但我可以做的只是

00:29:17.070 --> 00:29:22.380
使体验非常像行进速度急剧增加，但是

00:29:22.380 --> 00:29:28.320
像这样的常数是不同的，例如当您使用

00:29:28.320 --> 00:29:32.850
EPO，您不会在任何地方设置电源，只是我想确保

00:29:32.850 --> 00:29:42.050
就像我们一样，每个人都喜欢这里，希望对任何问题都有所帮助

00:29:42.050 --> 00:29:50.280
也许雅各布·阿基拉（Jacob Akira）以及为此而来的加分，你的人们要求

00:29:50.280 --> 00:29:57.540
我现在实现的问题更有意义，我稍后再放一个视频

00:29:57.540 --> 00:30:01.380
演讲结束后，如果有人有任何疑问，他们可以

00:30:01.380 --> 00:30:08.190
视频下面的问题，我们将结束ipfs每周的电话谢谢

00:30:08.190 --> 00:30:10.890
你真的很白

00:30:10.890 --> 00:30:21.870
演讲，我希望下周见到大家，再见。

00:30:21.870 --> 00:30:29.000
好的，你们都感谢您所做的出色工作

