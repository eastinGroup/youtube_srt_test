WEBVTT
Kind: captions
Language: zh-Hans

00:00:02.360 --> 00:00:11.280
好的，让我们开始打招呼，欢迎您在到达以下网址后拨打ipfs每周电话

00:00:11.280 --> 00:00:17.670
了解今天基于IP FS构建的惊人内容

00:00:17.670 --> 00:00:27.029
将会听到Q明星首席执行官布伦丹（Brendan）的观点，该明星正建立在top和Qri之上

00:00:27.029 --> 00:00:35.090
是一种点对点工具，可以帮助人们处理和处理以及共享数据，因此

00:00:35.090 --> 00:00:38.870
布伦丹，我要让你把它拿走

00:00:39.360 --> 00:00:42.719
谢谢Portia，谢谢大家参加每周的活动

00:00:42.719 --> 00:00:49.800
打电话给我，以便说到力'提到我在查询工作，我们正在尝试做数据

00:00:49.800 --> 00:00:55.350
科学以一种新的方式，我们认为我们喜欢它，我们喜欢称自己为事物

00:00:55.350 --> 00:01:00.210
建立与数据类似的数据集市，或者我们使用

00:01:00.210 --> 00:01:04.320
有点像我们的大教堂风格的软件隐喻

00:01:04.320 --> 00:01:07.170
软件和集市，因此与您相比，构建软件就像是起源

00:01:07.170 --> 00:01:10.440
和开源大教堂风格，您可以想到许多类似的东西

00:01:10.440 --> 00:01:14.550
精彩的近距离团队，主要是在紧密的团队中工作，然后

00:01:14.550 --> 00:01:17.820
这种奇怪的风格，就像

00:01:17.820 --> 00:01:20.810
你到处走走，你想贡献自己的力量

00:01:20.810 --> 00:01:26.070
因此，我们目前关于世界运转方式的理论是

00:01:26.070 --> 00:01:30.630
不是集市的数据，其原因是因为许多原因

00:01:30.630 --> 00:01:34.050
有许多底层技术缺少ipfs

00:01:34.050 --> 00:01:38.759
确实有助于提供坚实的基础，因此当我们指的是数据时

00:01:38.759 --> 00:01:42.300
集市，我们正在寻找一些我们想要的非常关键的特征

00:01:42.300 --> 00:01:45.330
在双向对话中看到的东西，或者任何人都可以像

00:01:45.330 --> 00:01:49.080
在对话有意义的地方提供和获取他们想要的任何数据，因此

00:01:49.080 --> 00:01:51.959
它是一种结构化的方式，每个人都可以理解什么

00:01:51.959 --> 00:01:55.289
每个人都在谈论我认为，如果您曾经使用过github或其他任何工具，

00:01:55.289 --> 00:01:57.929
这类类似开源协作工具的

00:01:57.929 --> 00:02:00.959
对这意味着什么的感觉，你有点像我要创造一个拉力

00:02:00.959 --> 00:02:04.170
请求和请求请求是请求某人更改您的代码的方式

00:02:04.170 --> 00:02:08.429
起作用，并且该代码有一个审核过程，然后是最后一个

00:02:08.429 --> 00:02:12.060
您只需要这种能力就可以将所有这些变化归因于人们

00:02:12.060 --> 00:02:14.849
谁创造了他们，以便在您进行协作时，您拥有类似

00:02:14.849 --> 00:02:17.849
审计跟踪，这是我们从整个版本世界中学到的东西

00:02:17.849 --> 00:02:23.879
控制，不幸的是，当您从软件转到数据事物时

00:02:23.879 --> 00:02:27.780
软件中的大量更改不是数据，它们是不可互换的

00:02:27.780 --> 00:02:31.890
东西，最大的变化就是音量，所以，如果您认为

00:02:31.890 --> 00:02:35.970
关于您的平均github存储库，不是很少超过1 GB

00:02:35.970 --> 00:02:39.420
空间，即使有整个历史，也有点像它的整个事物，除非

00:02:39.420 --> 00:02:44.489
您正在开发叙利亚，但这是整个对话，但是

00:02:44.489 --> 00:02:48.270
当您像演出一样在数据空间中移动时很正常

00:02:48.270 --> 00:02:52.380
对数据进行版本控制时，正确和版本控制是一个截然不同的对话

00:02:52.380 --> 00:02:55.360
因为通常您只取一个文件，

00:02:55.360 --> 00:02:58.780
您要对单个文件进行个别更改，因此请想象您的大量CSV

00:02:58.780 --> 00:03:02.230
文件中包含很多东西，而您只需要对

00:03:02.230 --> 00:03:04.060
您需要能够对此进行协作

00:03:04.060 --> 00:03:09.730
因此，如果我们缩小一秒钟，我们会考虑ipfs，而ipfs有很多

00:03:09.730 --> 00:03:13.209
ipfs所做的事情实际上就像是一个完美的起点

00:03:13.209 --> 00:03:17.830
用于构建数据集版本控制系统，如果您要查询的是什么

00:03:17.830 --> 00:03:22.720
考虑一下ipfs哈希，它是一堆文件，分为多个文件

00:03:22.720 --> 00:03:27.190
专门指的是unix FX v1哈希，这是任何人的参考点

00:03:27.190 --> 00:03:32.769
谁在玩IP LD，而不是我觉得DeLand，但这是一个文件系统，

00:03:32.769 --> 00:03:36.640
在引擎盖下，所有这些文件都被分解成块，因此

00:03:36.640 --> 00:03:41.110
查询我们设计了一些东西，旨在从

00:03:41.110 --> 00:03:45.970
ipfs不是我，因为它是原始的，而是将其用作基础和排序

00:03:45.970 --> 00:03:49.329
向上构建到一个系统中，使您可以方便快捷地进行

00:03:49.329 --> 00:03:52.959
结构化，合理合理的版本控制，所以今天我想

00:03:52.959 --> 00:03:56.739
给您打电话的一些人已经知道了什么样的查询

00:03:56.739 --> 00:04:00.190
是的，我们已经见面并聊了一堆，但我们做了一些

00:04:00.190 --> 00:04:04.209
自上一阵数以来，取得了相当大的进步

00:04:04.209 --> 00:04:07.150
几个月，所以今天我想向您展示一些正在发生的事情

00:04:07.150 --> 00:04:10.299
可以随意举起，就像在任何地方问问题一样

00:04:10.299 --> 00:04:15.100
指出，如果你是一个人，请阻止我，看看发生了什么，但是

00:04:15.100 --> 00:04:19.750
我们将给您进行一次高级别的参观，今天我认为这将是

00:04:19.750 --> 00:04:23.190
有趣的是，准备一些已确定的与以下类型更相关的东西：

00:04:23.190 --> 00:04:27.910
 ipfs社区，所以有多少人曾经想知道

00:04:27.910 --> 00:04:35.380
节点在线并且任何给定的点是是是好的不错，所以今天让我

00:04:35.380 --> 00:04:39.310
刚开始我要分享我的屏幕我要分享我的全部

00:04:39.310 --> 00:04:42.910
桌面，希望我的桌面不太混乱，可以直接使用

00:04:42.910 --> 00:04:50.470
代码领域很酷，如果我们有点像，这是您的问题的答案

00:04:50.470 --> 00:04:56.530
例如放大6月10日（星期一）的时间，如果我们算一下

00:04:56.530 --> 00:04:59.410
我们同行的唯一数目是3446

00:04:59.410 --> 00:05:01.930
然后我必须移动此窗口，对不起

00:05:01.930 --> 00:05:05.320
如果我们在过去的一天中查看它，则有六个

00:05:05.320 --> 00:05:09.300
在过去的一天中看到了上千种独特的内容，

00:05:09.300 --> 00:05:12.599
您正在看的是查询数据集的可视化，所以这有点

00:05:12.599 --> 00:05:15.090
它的概述集，我们认为这个人看起来像一个github

00:05:15.090 --> 00:05:19.439
回购，但我们认为菜式比回购要细得多

00:05:19.439 --> 00:05:24.870
您将拥有比回购更多的许多数据集，但事实是

00:05:24.870 --> 00:05:28.199
这对查询非常重要，因为它是一个非常结构化的对话，因此

00:05:28.199 --> 00:05:33.659
我刚刚向您展示了可视化效果，哦，酷，我们做到了，很棒，是的，我有

00:05:33.659 --> 00:05:37.319
在后台运行此功能民主党今天对我不是很好，但

00:05:37.319 --> 00:05:40.680
实际上，其中之一是连接到分布式Web的演示，并且

00:05:40.680 --> 00:05:45.509
同时，它还为我提供了数据集的本地主机，但如果我们

00:05:45.509 --> 00:05:48.599
看一下关于查询最重要的事情，就像

00:05:48.599 --> 00:05:51.150
尝试规范化有关数据的对话以及我们执行此操作的方式

00:05:51.150 --> 00:05:55.199
我们已经开发了一个文档模型，其中的所有内容都是结构化的

00:05:55.199 --> 00:05:59.279
当我们谈论数据集的实际内容时，方法完全相同

00:05:59.279 --> 00:06:03.029
数据集，例如，如果我们考虑使用CSV文件，则将其称为数据集

00:06:03.029 --> 00:06:07.560
主体，我们的工作方式与HTML文档的方式非常相似

00:06:07.560 --> 00:06:11.370
工作我们所有的元数据都是某种叫做meta的东西，然后meta和

00:06:11.370 --> 00:06:14.659
结构和变换统称为头

00:06:14.659 --> 00:06:19.349
但这是实际数据，因此，如果在任何给定的点上，您都可以拉一下

00:06:19.349 --> 00:06:24.599
从我的PFS中散列出来，我们将在后台将其加载

00:06:24.599 --> 00:06:29.430
可以在本地解决问题，但无论如何，数据本身实际上就在那里

00:06:29.430 --> 00:06:33.120
并且始终对您可用

00:06:33.120 --> 00:06:37.080
正文点CSV，在这种情况下，您实际上会看到此数据，我认为这是一个

00:06:37.080 --> 00:06:42.810
JSON数据集，是的，它在JSON中，所以它是主体点JSON，但我们有点

00:06:42.810 --> 00:06:48.449
得到我们需要的东西来开始这种数据怪异的对话，我喜欢

00:06:48.449 --> 00:06:52.319
创建了此数据集，并且具有随时间变化的重复历史记录

00:06:52.319 --> 00:06:55.339
并且每一个都是按照它们获得的方式构建的，而每个地方的构建方式都是

00:06:55.339 --> 00:07:01.409
快照每个数据集都是一个快照，引用的引用是它的前一个快照，因此

00:07:01.409 --> 00:07:04.469
这是最初的一个，然后随着我们使所有

00:07:04.469 --> 00:07:07.500
这些更改，对每个更改进行跟踪，对每个更改进行跟踪

00:07:07.500 --> 00:07:10.740
归因于此，而所有这些都是我们每次都在写这篇文章的时候

00:07:10.740 --> 00:07:17.009
向下作为ipfs哈希并根据需要移动它，但我们也有

00:07:17.009 --> 00:07:23.800
聊天看一秒钟啊，体育，让我们现场做些事

00:07:23.800 --> 00:07:27.760
到目前为止，对照明设备的实时支持我们认为这是

00:07:27.760 --> 00:07:31.210
单独的关注点最终我们将进入pub / sub EE之类

00:07:31.210 --> 00:07:35.229
现场分发的东西，但实际上是我们其中一种

00:07:35.229 --> 00:07:38.320
原语是我们现在非常基于快照，所以简短的答案是“否”

00:07:38.320 --> 00:07:42.430
没有任何活生生的智慧的支持，我认为这很重要

00:07:42.430 --> 00:07:46.150
为了开始对话，我们必须处理一个问题

00:07:46.150 --> 00:07:50.320
保持当前数据正确，因此我们在这方面有两种选择

00:07:50.320 --> 00:07:54.550
像这个家伙所说的那样的具体用例

00:07:54.550 --> 00:07:57.760
深入了解它是每个数据集都带有一个称为

00:07:57.760 --> 00:08:02.080
转换脚本，因此我们已将编程语法嵌入到称为的查询中

00:08:02.080 --> 00:08:05.830
看起来很像Python的明星，所以我实际上可以拉这个

00:08:05.830 --> 00:08:09.010
在编辑器中，因此更易于查看，因此您实际上可以编写

00:08:09.010 --> 00:08:14.199
解释数据集如何自我更新的Python代码

00:08:14.199 --> 00:08:19.360
有用的工具，因为我们现在已将转换脚本绑定到数据集

00:08:19.360 --> 00:08:23.080
本身，它随数据集移动，因此，如果将其添加到查询中

00:08:23.080 --> 00:08:26.380
节点，并且从一个对等点移动到另一个对等点，您拥有多数

00:08:26.380 --> 00:08:29.710
详细信息，您需要重新创建该数据集，并获得自己的“更新”按钮

00:08:29.710 --> 00:08:35.050
重新运行它，但是在这种特殊情况下，我们有点像粘

00:08:35.050 --> 00:08:39.400
星锁之类的问题对此一无所知，所以我们必须喜欢

00:08:39.400 --> 00:08:42.789
处理一些沙盒问题，最重要的是

00:08:42.789 --> 00:08:46.600
我们实际上获取这些指标的方式是我们正在运行kubernetes

00:08:46.600 --> 00:08:51.760
在云中刮取KFS DHT的盒子，所以有一种

00:08:51.760 --> 00:08:56.080
每个人都可以做到的内在问题，但是如果我们

00:08:56.080 --> 00:09:00.160
就像一千个人那样克隆该数据集并运行这些DHT

00:09:00.160 --> 00:09:04.270
刮刀不是真的可以帮助我们的DHT保持健康，如果可以的话

00:09:04.270 --> 00:09:07.480
就像我要服务的很多多余的请求一样，

00:09:07.480 --> 00:09:12.760
如果我们进行设置并运行它并安排一些时间，它可能会更聪明

00:09:12.760 --> 00:09:16.450
自动更新，这就是我们在查询时最常构建的内容

00:09:16.450 --> 00:09:19.690
最近是我们现在所在的地方，我们称其为雾服务，因为我们

00:09:19.690 --> 00:09:24.790
以为是感觉就像是雾服务，所以这意味着如果我

00:09:24.790 --> 00:09:30.190
进行查询更新列表，希望您能看到它变大了，我

00:09:30.190 --> 00:09:33.160
要等我的能力找出好方法，然后创建更新列表

00:09:33.160 --> 00:09:36.040
这是预定要执行的数据集的列表

00:09:36.040 --> 00:09:41.589
自动更新，因此我可以看到这里的第三项说的是23

00:09:41.589 --> 00:09:45.519
小时，我将重新运行该shell脚本，如果我们看一下这些shell，

00:09:45.519 --> 00:09:58.060
 shell脚本在哪里，如果可以的话，让我们在这里一秒钟找到它

00:09:58.060 --> 00:10:03.699
不，它不能，所以这是引擎盖下的shell脚本，所以这是做什么的

00:10:03.699 --> 00:10:07.329
这是在我的计算机上运行吗，这是查询

00:10:07.329 --> 00:10:11.620
通过在我的操作系统中注册的恶魔进程进行了调度

00:10:11.620 --> 00:10:16.240
进入我的机器通过一组安全密钥连接到kubernetes

00:10:16.240 --> 00:10:20.260
由我控制，而不必随我们运行的数据集一起分发

00:10:20.260 --> 00:10:23.680
与Prometheus实例的代理连接，这将为我们提供

00:10:23.680 --> 00:10:27.550
与数据，我们将等待这种连接发生，然后

00:10:27.550 --> 00:10:31.389
我们将实际使用，我们将运行依赖于

00:10:31.389 --> 00:10:35.560
该服务器在夜间运行，如果有

00:10:35.560 --> 00:10:38.649
我可以访问其运行此数据的Prometheus实例

00:10:38.649 --> 00:10:42.910
更新数据集本身，然后将其发布，因为我已经包括了

00:10:42.910 --> 00:10:47.529
此发布标志，然后它将自动将该数据集推送到

00:10:47.529 --> 00:10:51.130
查询云备份，因此我们运行称为注册表的内容

00:10:51.130 --> 00:10:56.709
您所有的ipfs哈希和数据集都位于分布式Web上，因此每个

00:10:56.709 --> 00:11:01.570
这将在24小时内运行，因此每24小时我们将推送新数据

00:11:01.570 --> 00:11:07.089
因此，如果要获取此数据，您所要做的就是访问，请遵循此步骤

00:11:07.089 --> 00:11:12.790
数据集，它是b5 ipfs节点数，您只要按一下update就可以了

00:11:12.790 --> 00:11:16.510
新数据版本和进行分析所需的新内容等等

00:11:16.510 --> 00:11:19.720
这就是我们所说的数据集市的意思，您可以获取这些数据并执行

00:11:19.720 --> 00:11:22.540
无论您想要什么，都可以做您认为有用或相关的事情

00:11:22.540 --> 00:11:26.890
但它的结构方式使您拥有审计跟踪，因此您可以

00:11:26.890 --> 00:11:29.920
实际看到它是如何工作的，如果我正确完成了我的工作，

00:11:29.920 --> 00:11:32.769
注释了我本可以拥有的所有元数据，这些元数据可以让您弄清楚是什么

00:11:32.769 --> 00:11:35.410
进行中以及它是如何工作的，我已经包括了一些评论和

00:11:35.410 --> 00:11:39.610
转换脚本，了解您对哪种类型的了解简短，哦，我们正在努力

00:11:39.610 --> 00:11:43.600
取得这些统计数据以及它的工作方式，您可以为

00:11:43.600 --> 00:11:48.990
自己是否值得调查我要去聊天

00:11:52.810 --> 00:11:59.840
感谢社会，还可以，令人惊讶，是关于服务的Jared错误，但是的，我们可以

00:11:59.840 --> 00:12:02.810
完全谈论水中的雾和薄雾以及其他微粒，或者我全神贯注

00:12:02.810 --> 00:12:07.130
其中，但要点是，我们还包括这些可视化文件

00:12:07.130 --> 00:12:09.830
使一切变得快速简便，这只会自我更新

00:12:09.830 --> 00:12:16.240
随着时间的流逝，我要注意的最后一件事是，也许我可以在本地访问此文件

00:12:16.690 --> 00:12:25.040
我们还使网关可用，我也应该在DAT上做到这一点，是的，我一直

00:12:25.040 --> 00:12:30.770
弄错了，第二个斜杠对我来说真是一场噩梦5001请原谅我

00:12:30.770 --> 00:12:34.730
因此，如果我们实际看一下，这就是数据集的实际内容

00:12:34.730 --> 00:12:38.350
本身，因此您实际上可以看到这些快照中的每个快照都是一个

00:12:38.350 --> 00:12:43.100
涉及到哈希的个人小事，这就是我们的工作方式

00:12:43.100 --> 00:12:46.820
比较工作，是的，这就是这里发生的事情，我应该停下来

00:12:46.820 --> 00:12:51.410
问题，但最后但并非最不重要的一点是，我们确实使我们做了很多工作

00:12:51.410 --> 00:12:57.050
喜欢确保我们可以与现有设备完全互操作

00:12:57.050 --> 00:13:00.440
某种ipfs生态系统，所以当您运行查询Connect时，这是我们的

00:13:00.440 --> 00:13:04.370
ipfs守护程序的版本，您实际上可以进入Web UI，这有点

00:13:04.370 --> 00:13:07.100
有趣的是，您实际上可以看到已正确注册的事物的版本

00:13:07.100 --> 00:13:11.839
就像准备就绪一样，我们可以探索文件和内容

00:13:11.839 --> 00:13:16.070
因此，这全都归功于特别出色的工作的开展

00:13:16.070 --> 00:13:18.980
而不是使用PFS来简化我们的工作

00:13:18.980 --> 00:13:25.100
是的，也许我会在那里停下来提问，看看发生了什么事

00:13:25.100 --> 00:13:29.510
请阅读此聊天室，如果您愿意，可以将演示文稿结束并

00:13:29.510 --> 00:13:34.339
之后我们会有问题，好吧，然后我猜是

00:13:34.339 --> 00:13:38.750
演示文稿的详细信息，通过其中一些内容进行讨论比较容易，所以我们

00:13:38.750 --> 00:13:42.680
在这种类似的过程中，我们一直在滚动获取东西

00:13:42.680 --> 00:13:46.640
接下来的几个月，这将是一个令人兴奋的查询时间

00:13:46.640 --> 00:13:50.089
我们终于通过了一个非常重要的里程碑，对我们来说

00:13:50.089 --> 00:13:53.060
建立和管理版本控制系统的后端功能是

00:13:53.060 --> 00:13:55.400
比以往任何时候都充实得多

00:13:55.400 --> 00:13:58.790
我们在文档上有很多工作要做，我们还有很多工作要做

00:13:58.790 --> 00:14:01.670
做教程写作，然后我们有一个非常非常

00:14:01.670 --> 00:14:06.170
即将对我们的用户体验进行大修，但我们感到非常高兴

00:14:06.170 --> 00:14:09.290
现在我们的后端已经到了这里，我们有自动更新和更新的能力。

00:14:09.290 --> 00:14:13.010
自动发布，我们认为它构成了一种非常令人兴奋的系统，

00:14:13.010 --> 00:14:16.370
人们可以自己设计这些数据集，尽管它们是他们自己的

00:14:16.370 --> 00:14:20.270
数据来源的权威来源，现在能够发布

00:14:20.270 --> 00:14:24.470
有点自动，理想情况下，这可以帮助我们解决这个问题

00:14:24.470 --> 00:14:27.920
像数据中的两个令人讨厌的问题，即可审核性

00:14:27.920 --> 00:14:32.360
并保持新鲜感，所以我们认为这就像一个巨人

00:14:32.360 --> 00:14:37.730
有点像数据集市的东西，您可以访问yeah是否存在

00:14:37.730 --> 00:14:40.280
在那里发布和维护人员的所有数据集的公共注册表

00:14:40.280 --> 00:14:43.220
绝对是人们发布它的所有天数的公共注册表

00:14:43.220 --> 00:14:48.620
其注册表查询点IO感谢您提出的精彩问题，因此

00:14:48.620 --> 00:14:51.380
值得为此深入研究一下注册表是什么

00:14:51.380 --> 00:14:55.910
对我们来说，注册表是我们维护的两件事，只是我们强制执行

00:14:55.910 --> 00:14:59.960
唯一的p r--在那里命名，所以您可以看到Mike您的名字是b5，C是

00:14:59.960 --> 00:15:03.170
实际与注册表进行了协商，该注册表是一个集中式系统

00:15:03.170 --> 00:15:06.500
与分散系统的关系，如果您运行，它还会处理对我们的搜索

00:15:06.500 --> 00:15:10.250
查询搜索就是要进行分布式搜索的注册表

00:15:10.250 --> 00:15:14.720
但这显然就像是脖子的一个非常实验性的部分

00:15:14.720 --> 00:15:18.080
树林，最后它是注册表

00:15:18.080 --> 00:15:22.070
我们在哪里，如果您将其视为github的一对小扁豆

00:15:22.070 --> 00:15:25.730
就其回购可用性而言，最近推出的我们的注册表只是一个

00:15:25.730 --> 00:15:30.050
分布式系统的支持层，因此查询时我们要处理的一切

00:15:30.050 --> 00:15:32.660
注册表是我们只是保持哈希可用，以便当您关闭

00:15:32.660 --> 00:15:36.140
您发布的哈希值的便携式计算机会自动存在，因此看起来

00:15:36.140 --> 00:15:39.920
更像是您拥有的“走出去”系统，就像托管您的

00:15:39.920 --> 00:15:43.370
git仓库，这与他托管的位置非常相似

00:15:43.370 --> 00:15:48.170
您的哈希查询注册表的副本无权在以下位置发布任何内容

00:15:48.170 --> 00:15:52.340
您代表所有提交都使用预配置的特殊密钥对进行签名

00:15:52.340 --> 00:15:57.530
根据每个用户的查询说明，它主要不同于您的IP FS PR ID

00:15:57.530 --> 00:16:04.760
这样您可以拥有许多尚未使用过的计算机，并使用相同的配置文件，但是

00:16:04.760 --> 00:16:08.120
有分叉的概念，就是分叉就像事实上的方式

00:16:08.120 --> 00:16:11.780
如果您在其他人的数据集上运行查询广告，那么一切都会正常进行，然后您

00:16:11.780 --> 00:16:15.440
编辑该数据集并将其设置为Forks，所以现在就变成了您自己的数据

00:16:15.440 --> 00:16:20.269
这是自动为您设置的，我们还没有弄清楚合并

00:16:20.269 --> 00:16:23.329
从技术上讲，我们知道我们将如何处理请求请求，但我们还没有

00:16:23.329 --> 00:16:27.980
实际编写了任何代码，但是，奇怪的是，最大的事情是

00:16:27.980 --> 00:16:33.500
与git仓库不同的是，数据模型是在get数据内设置的

00:16:33.500 --> 00:16:36.829
而不是查询数据集，因此您可以合并任何两个可以比较的数据集

00:16:36.829 --> 00:16:40.939
在任何给定点上的任何两个数据集，因为没有什么混淆

00:16:40.939 --> 00:16:44.750
文件是我们确切知道每个文件应该做什么的地方，如果这样做

00:16:44.750 --> 00:16:50.779
感觉，我想在那种情况下，如果我想继续像这样应用

00:16:50.779 --> 00:16:54.139
再次提供兴趣信息，我只想使用与您相同的脚本

00:16:54.139 --> 00:16:57.980
你必须要我可以触摸数据，我是的，你喜欢采摘什么

00:16:57.980 --> 00:17:02.209
在源上，我可以指出是的，我的意思是我可以分享得很快

00:17:02.209 --> 00:17:08.500
我们有一个快捷方式，我们称之为召回，因此我可以进行查询来保存召回

00:17:08.500 --> 00:17:12.980
TF，那只会使转变脱离我的历史

00:17:12.980 --> 00:17:16.939
一次回到现在，如果我想回到转变，第二次回想起波浪号

00:17:16.939 --> 00:17:22.100
-所以我没有任何阵营，这会出错，因为没有

00:17:22.100 --> 00:17:26.449
如果您认为这是一种有趣的方式，可以将两个历史转换回去

00:17:26.449 --> 00:17:30.169
在可能的版本中思考您的想法是，如果我这样做

00:17:30.169 --> 00:17:38.960
这不会，我不能做一个TF，显然行不通

00:17:38.960 --> 00:17:43.520
因为我的Prometheus服务器没有打开，但是召回有效，所以召回是

00:17:43.520 --> 00:17:49.460
如果我们执行查询更新的话，如果下雪的计数将运行

00:17:49.460 --> 00:17:52.909
做完全相同的事情，只是那个别名来回想上一次转换

00:17:52.909 --> 00:17:56.590
脚本，因为这样做很常见

00:17:59.200 --> 00:18:03.049
是的，您需要自定义代码，查询如何与新数据集交互

00:18:03.049 --> 00:18:07.279
是个很自然的魔术师，所以真的有两个魔术师

00:18:07.279 --> 00:18:11.629
转换内部的部分，我们有一个叫做下载和

00:18:11.629 --> 00:18:15.080
称为变换的东西，这是您在内部定义的两个特殊功能

00:18:15.080 --> 00:18:19.100
查询和下载的变换的签名是D s，然后是

00:18:19.100 --> 00:18:23.360
上下文，因此D只是为您提供数据集的最新版本，因此您

00:18:23.360 --> 00:18:27.230
可以看到你知道我们有多酷，你知道这就是身体，我可以检查一下

00:18:27.230 --> 00:18:29.929
那，这对于附加锁定非常有效，所以你可以说嘿

00:18:29.929 --> 00:18:33.499
我的数据集有这十个条目，到最后一个条目，开始日期戳

00:18:33.499 --> 00:18:37.940
从那里开始，然后这两个函数（如果您定义它们）将被调用

00:18:37.940 --> 00:18:42.019
它们为您服务，因此它们会在后台自动调用

00:18:42.019 --> 00:18:44.720
但是，如果您没有定义它们，则不会发生任何事情，因为您的

00:18:44.720 --> 00:18:47.869
如果有意义的话，transform并没有做任何特别的事情

00:18:47.869 --> 00:18:54.409
然后是问题，然后是的，所以继续讲约翰尼拐杖怎么办

00:18:54.409 --> 00:18:59.929
您可以处理json-ld之间的draw语义，这是一个很好的问题Johnny

00:18:59.929 --> 00:19:05.210
我喜欢深入研究，因此我们目前计划使用JSON我们的json-ld支持

00:19:05.210 --> 00:19:12.619
支持将D cat作为原始规范，并将RDF作为导出格式，因此查询查询

00:19:12.619 --> 00:19:17.149
对我们的数据有语义上的理解，有几点警告，因为我们有

00:19:17.149 --> 00:19:19.639
了解一下语义一词的含义，如果您有一个

00:19:19.639 --> 00:19:23.330
标记为“人口”级别的列，他不知道那是一个

00:19:23.330 --> 00:19:26.359
对的人来说，这意味着某种规格

00:19:26.359 --> 00:19:29.330
像RDF那样的东西，例如json-ld

00:19:29.330 --> 00:19:33.409
特别是关于同一件事，我对ipfs营地感到非常兴奋，

00:19:33.409 --> 00:19:37.220
与IPL视图团队进行了有关绘图和链接的大型对话

00:19:37.220 --> 00:19:41.059
模式可以表示为json-ld，但我认为

00:19:41.059 --> 00:19:46.070
这是我们未来研究的领域，但在基础层上，查询可以做什么

00:19:46.070 --> 00:19:49.759
开箱即用，因为它可以理解您在说什么时在说什么

00:19:49.759 --> 00:19:53.299
数据集，因此，如果您说结合这两天的数据集，则可以粉碎所有这些行

00:19:53.299 --> 00:19:56.419
可以一起为您打包，也可以将所有元数据粉碎在一起

00:19:56.419 --> 00:19:58.940
抓取您所有数据集的所有标题

00:19:58.940 --> 00:20:04.100
这都是可行的，但我们要查询的是了解

00:20:04.100 --> 00:20:08.690
当我说人口时，我是在谈论人的账目，这是一个漫长的过程

00:20:08.690 --> 00:20:11.810
对话中浪漫地描绘着人类的事物

00:20:11.810 --> 00:20:19.910
在两件事上，机器知道这是一个大麻烦的问题，然后终于

00:20:19.910 --> 00:20:23.390
您在政府的开放数据计划中与政府合作是，我们与

00:20:23.390 --> 00:20:26.390
各国政府的盟友，尤其是纽约，我们有很多伟大而富有成效的

00:20:26.390 --> 00:20:29.660
在这里与纽约市的对话非常成功

00:20:29.660 --> 00:20:35.210
我们还在联合国的国际层面上开展了一系列工作

00:20:35.210 --> 00:20:38.810
可持续发展目标，这也是严重过时的另一个原因

00:20:38.810 --> 00:20:43.010
我们在一堆数据上以及通过我在环境方面的工作所获得的数据

00:20:43.010 --> 00:20:46.190
数据和治理计划，我们在存档气候数据方面做了大量工作，

00:20:46.190 --> 00:20:50.960
还有另一种类似的部门，往往会过时并倾向于

00:20:50.960 --> 00:20:56.000
很难像保持手指般的脉搏，所以我们做到了

00:20:56.000 --> 00:21:00.950
我认为重力作用最早的人只是在

00:21:00.950 --> 00:21:05.870
在民用科技领域，我们对此非常感兴趣，这要感谢我愿意

00:21:05.870 --> 00:21:09.200
补充一点让我感到很高兴，您正在使用纽约市的开放数据

00:21:09.200 --> 00:21:13.310
因为我知道多年以来，他们一直在处理像旧数据这样的问题

00:21:13.310 --> 00:21:18.830
坦白地说，过时的数据值得赞扬，因此您正在做的一个分支

00:21:18.830 --> 00:21:23.090
不，谢谢，是的，我们真的很兴奋，因为

00:21:23.090 --> 00:21:25.910
如果我们想一想，将其变成双向对话的真实愿望

00:21:25.910 --> 00:21:29.240
数据门户，它们就是这种单向传播数据

00:21:29.240 --> 00:21:33.890
通常是陈旧的，作为一个单独的公民很难进入

00:21:33.890 --> 00:21:37.520
说我想帮助我想改善您的数据

00:21:37.520 --> 00:21:40.220
字典，或者我想对我知道的数据进行一些更改

00:21:40.220 --> 00:21:44.180
不正确，现在没有方法可以打开该对话框，因此，

00:21:44.180 --> 00:21:47.660
我非常兴奋的地方是有人可以进行可审核的升级，我

00:21:47.660 --> 00:21:52.340
可以拿到的数据证明，我真正改变的只是这个东西而已

00:21:52.340 --> 00:21:55.370
这些东西我们今天还没有真正进入查询嗅探工具，但是我们有一个

00:21:55.370 --> 00:22:00.110
可以使您进行结构化数据的巨大差异，我可以进行一些展示

00:22:00.110 --> 00:22:03.020
你嘿，这就是我要更改的内容，它建立了对话

00:22:03.020 --> 00:22:08.240
一个城市中的数据维护人员，他们的工作负担过重

00:22:08.240 --> 00:22:12.350
已经在某种公民部门中能够接受

00:22:12.350 --> 00:22:14.920
增强

00:22:15.460 --> 00:22:21.000
好吧，我想我们涵盖了很多，到处都是

00:22:21.000 --> 00:22:25.720
还有其他问题吗，我想还有几对

00:22:25.720 --> 00:22:38.560
回答了，另一个人在这里我想当然，是的，我可以吗

00:22:38.560 --> 00:22:42.760
使用Qi作为API来实现网站ipfs上的自定义数据可视化

00:22:42.760 --> 00:22:48.490
基本上是什么课程哦，是的，当我像

00:22:48.490 --> 00:22:53.320
花式节点仪表板是的，您完全可以输入花式笔记密码，因此

00:22:53.320 --> 00:22:56.170
您在前端看到的所有内容都是利用JSON API

00:22:56.170 --> 00:23:00.370
当您运行连接时可用，因此在本地可用，我们不提供

00:23:00.370 --> 00:23:03.850
之类的可用托管版本，因为我们真的希望您使用

00:23:03.850 --> 00:23:10.870
分发工具，但这完全有可能，我们

00:23:10.870 --> 00:23:14.440
我现在不应该在谈论这个，但是我们距离图QL英寸

00:23:14.440 --> 00:23:18.820
看起来像是一种可能性

00:23:18.820 --> 00:23:22.630
我不能等我们六个月，但我们认为您会

00:23:22.630 --> 00:23:27.330
能够将整个查询网络变成图QL的东西，这很有趣

00:23:27.330 --> 00:23:32.440
了解身份以及身份和私人数据集的管理

00:23:32.440 --> 00:23:36.490
认为是手拉手的，就像是真的

00:23:36.490 --> 00:23:40.750
构成我们接下来八个月至一年的目标

00:23:40.750 --> 00:23:46.210
非常认真地看待访问控制，包括许多前沿的工作

00:23:46.210 --> 00:23:49.450
围绕不同的隐私，这将允许某些人说我会

00:23:49.450 --> 00:23:52.480
就像匿名版本，这对我们来说是非常重要的数据集

00:23:52.480 --> 00:23:55.120
我们在考虑访问控制时要谈论的一类事情

00:23:55.120 --> 00:23:58.480
与数据的关系，我们希望所有这些都发生在密码学上

00:23:58.480 --> 00:24:03.490
基本类型是基于分散标识符的，所以我们这

00:24:03.490 --> 00:24:07.510
是在访问控制系统上采用d ID规范分层

00:24:07.510 --> 00:24:12.130
理想情况下，它比处理查询问题更通用，但

00:24:12.130 --> 00:24:15.130
给我们留下了做事情的空间，就像我想要这个的匿名版本

00:24:15.130 --> 00:24:19.780
数据，这是大型联盟积极研究的领域，我们今天所拥有的是您

00:24:19.780 --> 00:24:23.170
只提供几乎完全类似于您的基本加密密钥对

00:24:23.170 --> 00:24:26.230
纯ID，因此您拥有一个复合私钥对，这就是我们的管理方式

00:24:26.230 --> 00:24:32.130
现在查询身份是有意义的

00:24:32.480 --> 00:24:35.790
是的，当您阅读设置Kirino的过程时，他是否会跑步

00:24:35.790 --> 00:24:38.610
板条箱设置以及保留错误的规定可确保您

00:24:38.610 --> 00:24:41.430
有一个IP MS存储库，并确保您拥有，然后使您查询

00:24:41.430 --> 00:24:45.390
管理员，当您选择一个对等名称时，我们只是在其中注册了公共密钥

00:24:45.390 --> 00:24:49.230
注册表并说好，您能证明这一点，然后有一个简单的证明

00:24:49.230 --> 00:24:53.040
仪式，然后您可以索取标识符，然后我们确保您

00:24:53.040 --> 00:24:59.370
一小时内不能要求太多，太好了，非常感谢

00:24:59.370 --> 00:25:02.850
倾听每个人是否还有其他问题，毫无疑问-这是

00:25:02.850 --> 00:25:06.420
这是一个有趣的人群，因为我们有点不知道ipfs，所以我们可以说些话

00:25:06.420 --> 00:25:10.590
从技术上讲非常非常，但是查询非常针对那些不喜欢的人

00:25:10.590 --> 00:25:14.190
知道ipfs，就像您花费大量时间只是在处理数据一样

00:25:14.190 --> 00:25:19.040
可以在两个对话之间快速转换

00:25:19.040 --> 00:25:23.690
哦，布伦丹（Brendan）非常感谢您抽出宝贵的时间来解释或工作

00:25:23.690 --> 00:25:27.500
一切正常的查询非常感谢您的帮助

00:25:27.500 --> 00:25:32.420
而且您会正确地进入ipfs营地，我会感到很不安，我非常

00:25:32.420 --> 00:25:35.450
很高兴分享很多我刚刚向您展示的内容

00:25:35.450 --> 00:25:39.260
引擎盖下的胆量是我们真正希望将某些端口

00:25:39.260 --> 00:25:44.120
回到ipfs社区，是的，我们真的在寻找他们很多聊天记录

00:25:44.120 --> 00:25:48.320
我觉得这是差距，只是我们普遍接受，我们迫不及待想要

00:25:48.320 --> 00:25:53.750
了解更多并再次感谢您，非常感谢您抽出宝贵的时间

00:25:53.750 --> 00:25:58.460
向所有人解释查询和您正在做的精彩工作

00:25:58.460 --> 00:26:05.330
否则，对于IPS每周一次的会议，我们接下来将不召开每周一次的会议。

00:26:05.330 --> 00:26:12.110
由于ipfs营地，一周后一周，但是我们将再次继续

00:26:12.110 --> 00:26:16.640
相信7月初，非常感谢，我将提出一个问题

00:26:16.640 --> 00:26:23.390
关于这一点，我会在明年七月见到大家，谢谢

00:26:23.390 --> 00:26:27.250
再见，即将到来的七月

