WEBVTT
Kind: captions
Language: zh-Hans

00:00:04.100 --> 00:00:10.469
好的，您好，今天欢迎参加ipfs每周一次的电话会议，即7月6日，星期一

00:00:10.469 --> 00:00:15.509
2020年，我的名字叫Derek，我是7月份的主持人，所以本周我们

00:00:15.509 --> 00:00:21.180
有Joanne tunas和我们一起介绍他在ipfs testfit上的工作，非常高兴

00:00:21.180 --> 00:00:28.920
你和我们一起画画，你会想从你那里拿走的，是的，没问题

00:00:28.920 --> 00:00:37.649
吉米（Jimmy）的工作不错，所以今天我要和您谈谈我们的副产品

00:00:37.649 --> 00:00:43.200
主奶酪已经成为ipfs的测试平台，所以关于我的一些事情我

00:00:43.200 --> 00:00:47.460
John tunes我是软件工程专业的软件工程师

00:00:47.460 --> 00:00:57.859
咨询公司，我是一名技术上的硕士生，但我已经成功

00:00:57.859 --> 00:01:02.760
完成了我的主奶酪，这又是它的副产品，还有

00:01:02.760 --> 00:01:09.320
我在那边的尽头，如果有人想聊天，那么让我们开始吧，

00:01:09.320 --> 00:01:17.600
以前我不知道这里的每个人是否都熟悉

00:01:17.600 --> 00:01:23.549
正在致力于一个漂亮的子系统，重点关注可靠性持久性和

00:01:23.549 --> 00:01:29.790
提供担保，这是可以预测的，但是在我们努力的过程中，我们

00:01:29.790 --> 00:01:38.070
最终出现了一个问题，我们希望确认我们的系统

00:01:38.070 --> 00:01:42.540
实际执行了我们所希望的，因此我们需要对其进行本质上的测试，并且

00:01:42.540 --> 00:01:47.640
我们提出了一系列要求，我们想要一些容易实现的要求

00:01:47.640 --> 00:01:52.470
部署和测试它的不同版本，我们当然想提取

00:01:52.470 --> 00:01:58.250
相关的使用指标不仅来自应用程序本身，还来自

00:01:58.250 --> 00:02:03.869
主机正在运行诸如CPU占用内存之类的应用程序，哦，那是

00:02:03.869 --> 00:02:10.379
我们希望能够模拟网络约束，并且因为

00:02:10.379 --> 00:02:13.080
理想情况下，我们当然会在真实世界中进行测试

00:02:13.080 --> 00:02:21.620
我们正在尝试使用本质上是云来模拟p2p网络的场景

00:02:21.620 --> 00:02:26.670
基础设施，当然还有我们自己的机器，所以我们想要的东西

00:02:26.670 --> 00:02:31.050
可以模拟这样的网络约束，我们想要一些

00:02:31.050 --> 00:02:35.370
我们是否可以轻松地在本地系统上进行测试，但还能像我们一样扩展规模

00:02:35.370 --> 00:02:39.780
想要大幅削减我们的预算

00:02:39.780 --> 00:02:45.090
我们想要一个可以从一个中心点控制它的东西，对不起，我们

00:02:45.090 --> 00:02:50.160
可以对其进行检测，当然可以执行我们自己的实验，而且

00:02:50.160 --> 00:02:54.810
我们可以轻松地实现自动化，并且通过查看所有这些

00:02:54.810 --> 00:03:02.520
要求突然出现的一件事是再现性，如果我们尝试

00:03:02.520 --> 00:03:05.900
再次从需求中了解并观察

00:03:05.900 --> 00:03:12.750
从本质上讲，可重复性是相同的，并且具有相同的构造

00:03:12.750 --> 00:03:18.090
相同的约束，我们希望对于给定的输入，

00:03:18.090 --> 00:03:22.110
我们当然总会得到相同的输出，或者您可以看一下

00:03:22.110 --> 00:03:30.350
维基百科的定义比我的定义更好，但从历史上讲

00:03:30.350 --> 00:03:36.800
可重复性通常是通过某种利用来实现的，

00:03:36.800 --> 00:03:45.030
这样做，最近，当然，很多人依靠

00:03:45.030 --> 00:03:49.320
很多利用方式，本质上是集装箱运输，以及

00:03:49.320 --> 00:03:55.080
这就是我们要解决的问题，所以我们使用了Docker容器，但是我们想要

00:03:55.080 --> 00:03:59.310
我们需要能够使我们编排和设置容器的东西

00:03:59.310 --> 00:04:07.890
无论是在本地还是在提供者和工人身上，都是参考

00:04:07.890 --> 00:04:12.060
如今，我们当然需要Orchestrator，这需要Easy庞大的社区和各种各样的

00:04:12.060 --> 00:04:18.390
围绕它的项目，这也是我们已经asana的东西

00:04:18.390 --> 00:04:23.090
传奇，所以说得很对，我们依靠榆木包装说

00:04:23.090 --> 00:04:26.790
应用程序打包我们的应用程序，当然

00:04:26.790 --> 00:04:34.800
并避免了重现性，我们还采用了另一种

00:04:34.800 --> 00:04:39.620
我们的目标偏离了本质，这就是轻松扩展的能力

00:04:39.620 --> 00:04:46.040
我们的测试平台可以连接到大型网络，这可以通过公司和

00:04:46.040 --> 00:04:52.590
当然，下一步是，这就是所有要点

00:04:52.590 --> 00:04:56.970
提取数据，我们的测试只会和我们能够得到的数据一样好

00:04:56.970 --> 00:05:03.600
提取，因此，我们需要能够为我们提供帮助的东西

00:05:03.600 --> 00:05:07.770
与应用程序级别的数据有关，所以我特别关注的是我们的海报

00:05:07.770 --> 00:05:13.350
想知道已经完成了多少个订阅，多少个事件

00:05:13.350 --> 00:05:18.330
已发送，所有这些信息，我们想知道

00:05:18.330 --> 00:05:24.390
当然也要针对数据，所以要使用CPU内存网络，最后我们要

00:05:24.390 --> 00:05:30.810
将集合数据和视觉相关联以可视化它，我们接受了y6税

00:05:30.810 --> 00:05:35.880
因此从本质上来说，Elasticsearch会将所有这些信息日志存储到

00:05:35.880 --> 00:05:41.370
处理这些数据位以收集数据，最后将Cabana提供给我们

00:05:41.370 --> 00:05:52.350
它的可视化和数据关联部分，等等

00:05:52.350 --> 00:05:57.090
顺便说一下，是时候移到我们的下一个目标了，本质上是

00:05:57.090 --> 00:06:03.390
我们将如何模拟网络约束，甚至在实际运行之前

00:06:03.390 --> 00:06:10.350
调查了社区或码头工人的集装箱化情况，这已经是一个

00:06:10.350 --> 00:06:14.010
非常关注，因此您希望我们真的希望检查此功能，

00:06:14.010 --> 00:06:18.960
他们就像那里有很多可以模拟的项目

00:06:18.960 --> 00:06:23.580
某种意义上的一个很好的例子就是它的一个真正的例子

00:06:23.580 --> 00:06:27.570
然后是同级项目，它们是容器网并将其最大化

00:06:27.570 --> 00:06:33.210
可以让您做很多事，但比我们实际做的要多得多

00:06:33.210 --> 00:06:38.130
想要这样在这里，我们可以模拟我们的房子像一个l2

00:06:38.130 --> 00:06:43.080
网络配置，因此如果我和Connect交换机连接路由器x'

00:06:43.080 --> 00:06:49.680
所有这些，我们所能提供的远不止我们想要的

00:06:49.680 --> 00:06:52.590
只是想要一些可以模拟我们周围网络约束的东西

00:06:52.590 --> 00:06:58.380
我们真正不需要的应用程序以及网络配置是什么

00:06:58.380 --> 00:07:03.360
在下面，并且考虑到我们已经处于社区周期中

00:07:03.360 --> 00:07:10.710
系统，如果您查看它周围的项目，我们会有网络网格项目

00:07:10.710 --> 00:07:15.750
更容易让您注入某种故障，但是通常这些故障

00:07:15.750 --> 00:07:22.949
故障集中在l7层上，所以HTTP层又不是

00:07:22.949 --> 00:07:28.350
我们真的很需要，所以我们最终找到了一个非常有用的项目

00:07:28.350 --> 00:07:34.010
这是有毒的代理，在Shopify上是开源的，

00:07:34.010 --> 00:07:44.900
 pcp代理非常薄，可以让您配置八个系列的

00:07:44.900 --> 00:07:51.750
网络限制TCP故障全部解决，网络拥塞相当严重

00:07:51.750 --> 00:08:00.150
花边，更重要的是，它还公开了HTTP API，因此我们提出了

00:08:00.150 --> 00:08:07.680
成为我们最终的必要部署，以及其他

00:08:07.680 --> 00:08:13.349
我们本质上有一个豆荚，所以在社区中，豆荚意味着

00:08:13.349 --> 00:08:18.630
社区，如果您要说的话，在这里，我们有两个容器

00:08:18.630 --> 00:08:24.300
充当ipfs部署的辅助工具，这就是这里

00:08:24.300 --> 00:08:33.990
放置马戏团RPC消息以及其他ipfs葡萄牙消息的位置

00:08:33.990 --> 00:08:38.250
将流经，这将通过代理代理进行代理，并且鉴于两者

00:08:38.250 --> 00:08:44.070
这些容器也公开了，然后我们可以与它们进行交互的HTTP api

00:08:44.070 --> 00:08:49.170
在运行中创建故障或在运行中创建某种交互

00:08:49.170 --> 00:08:54.480
再次飞翔，直接与邮政城堡互动，或与float子互动

00:08:54.480 --> 00:09:00.110
我们或其他任何IP犯罪

00:09:01.399 --> 00:09:06.329
属性，最后当然还有节奏来收集

00:09:06.329 --> 00:09:10.230
指标处理日志存储（如搜索）和

00:09:10.230 --> 00:09:17.070
最终，我们依靠关键横幅将所有事物可视化，是的，这是

00:09:17.070 --> 00:09:23.399
如果您正在考虑多个给定的ninis节点，那么我将继续

00:09:23.399 --> 00:09:27.630
并跳过这部分，但是如果您有兴趣，请与我联系

00:09:27.630 --> 00:09:33.000
之后本质上，它仅描述了我们所依赖的名称空间以及如何

00:09:33.000 --> 00:09:39.899
整个过程融合在一起，所以现在我们有一种方法来模拟网络

00:09:39.899 --> 00:09:46.440
约束，我们当然仍然需要从中央控制这些约束的方法

00:09:46.440 --> 00:09:53.490
点表示与之交互的方式，因此我们创建了一个非常小的CLI

00:09:53.490 --> 00:10:02.699
如果您还记得正确地与DC交互的话，请再次说明该API和

00:10:02.699 --> 00:10:09.660
有毒的代理API，所以这个想法是，该工具允许我们在其中精确地添加注释

00:10:09.660 --> 00:10:16.110
在每个ipfs上执行命令请注意，我们也在运行

00:10:16.110 --> 00:10:23.880
有毒的，所以有毒的本质上是代理Proxy引起某些故障的名称

00:10:23.880 --> 00:10:33.720
例如，延迟之类的东西，是的，让我们继续前进到

00:10:33.720 --> 00:10:42.750
非常快速的演示，所以我不知道最后一个是谁

00:10:42.750 --> 00:10:49.769
最后一个社区代码，但实际上，这实际上是完全相同的演示

00:10:49.769 --> 00:10:55.949
这次我将只关注测试平台，因此基本上结束了

00:10:55.949 --> 00:11:04.800
在本地，我已经在本质上运行了五个ipfs部署，以及

00:11:04.800 --> 00:11:09.130
我接下来要做的是告诉每个

00:11:09.130 --> 00:11:13.540
在本地运行的部署，我将在此处继续提供

00:11:13.540 --> 00:11:21.130
之后如何运行，再一次我们在这里要做的是

00:11:21.130 --> 00:11:28.510
基本上从一个中心点开始，这实际上是我的机器

00:11:28.510 --> 00:11:37.120
在一个特定的节点上创建一个主题，所以这个家伙不是一个，然后我将

00:11:37.120 --> 00:11:40.779
继续前进并与其他节点交互，所以这是CL灯，所以我

00:11:40.779 --> 00:11:45.000
告诉你我只是在与之互动

00:11:45.000 --> 00:11:52.120
在本地，我们可以做各种各样我们实际上可以做的事情，而不仅仅是

00:11:52.120 --> 00:11:56.949
在我们这里完成操作后，运行COS命令，但我们也可以ping

00:11:56.949 --> 00:12:05.740
其他节点，甚至实际上我将继续进行演示，我们可以

00:12:05.740 --> 00:12:13.690
甚至执行一系列先前已经描述过的批量命令

00:12:13.690 --> 00:12:20.529
在某种文件上还可以，所以这就是我们为

00:12:20.529 --> 00:12:26.440
我们实际上将在以后描述的测试

00:12:26.440 --> 00:12:31.779
涵盖了我们的整个问题，所以总是在实践中如何运行这些，所以在

00:12:31.779 --> 00:12:37.240
练习，我们总共运行了五个虚拟机，所以这是为了收集

00:12:37.240 --> 00:12:42.760
本质上是来自主耶稣的结果，以及这两个虚拟CPU中的每一个16

00:12:42.760 --> 00:12:49.089
演出的公羊，我们将LK集群放置到位，然后我们运行了一个

00:12:49.089 --> 00:12:57.670
总共总共有100个部署，而伊朗实际上是FS部署

00:12:57.670 --> 00:13:03.310
JavaScript的TFS的分支，实际上我包含了海报演员，但是

00:13:03.310 --> 00:13:09.180
也减少了一些脂肪，因此我们可以得到更大的脂肪

00:13:09.180 --> 00:13:13.569
版本的TFS甚至不会消耗太多的资源

00:13:13.569 --> 00:13:19.000
例如记忆力，这些是我们收集的一些图表

00:13:19.000 --> 00:13:23.889
这些实际上只是您的控制权，因此我们实际上提取了

00:13:23.889 --> 00:13:32.110
这边的数据，然后为实际工作创建图表

00:13:32.110 --> 00:13:36.819
是的，所以所有这些项目都是别的

00:13:36.819 --> 00:13:41.410
再次开源我爱我的马萨诸塞州工作，就像开源一样

00:13:41.410 --> 00:13:46.029
您可以随时检查一下，如果您也对海报演员感到好奇

00:13:46.029 --> 00:13:51.459
并且您无法参加上一个演示文稿，也因为它已被剪切

00:13:51.459 --> 00:13:57.069
简短，但该项目看到了所有这些项目，

00:13:57.069 --> 00:14:03.220
开源，最后非常感谢您为我的耶稣顾问而活

00:14:03.220 --> 00:14:06.730
喜欢录像带，我的另一个同事也在研究

00:14:06.730 --> 00:14:16.649
另一个系统你帮了我很多，是的，终于

00:14:16.649 --> 00:14:22.540
技术上是schwöre，也是Microsoft Azure赞助最好的朋友

00:14:22.540 --> 00:14:28.990
最终有十二个人欢迎我进入ffs唯一的海滩

00:14:28.990 --> 00:14:37.810
社区，非常感谢您，问题也感谢您，上帝，这真的

00:14:37.810 --> 00:14:42.550
在如此短的时间内取得的成就真是太酷了，我有几个

00:14:42.550 --> 00:14:47.490
问题，但如果有人想跳进去，我想向其他人开放

00:14:47.490 --> 00:14:52.269
是的，确定，所以我将继续分享我的屏幕，您可能会有用

00:14:52.269 --> 00:14:54.480
不知道

00:15:01.140 --> 00:15:07.590
让我问您，这个测试平台专门与JSI PFS javascript一起使用

00:15:07.590 --> 00:15:14.850
黑色DFS，我想知道它是否也可以与Co ipfs一起使用

00:15:14.850 --> 00:15:19.890
不是um，所以开箱即用，实际上不是um，有可能做到这一点

00:15:19.890 --> 00:15:25.260
工作不会花太多的钱，所以本质上我只想

00:15:25.260 --> 00:15:38.580
除非您时间紧迫，否则请快速向您显示某个环境

00:15:38.580 --> 00:15:42.480
如果您记得在使用中正确列出的话，我们正在使用Elm进行包装

00:15:42.480 --> 00:15:47.670
alpha打包了我们的应用程序，这是什么声音，我不知道是否

00:15:47.670 --> 00:15:52.530
每个人都熟悉um，但实际上它使我们可以打包

00:15:52.530 --> 00:15:59.910
将所有这些资源合并为一个基本上是单个部署或一个

00:15:59.910 --> 00:16:08.790
单发行版设置更好，在这里，我们使用的是JSP ifs，但是这是

00:16:08.790 --> 00:16:14.640
本质上是像新泽西州代理这样的问题，所以在这里，我们有

00:16:14.640 --> 00:16:20.670
清单为我们的部署或Jessa Defense部署进行更改

00:16:20.670 --> 00:16:23.490
只需更改正在使用的图像即可

00:16:23.490 --> 00:16:28.290
实际上是通过配置来提供的，并且本质上是

00:16:28.290 --> 00:16:33.750
更改这些端口，因为我确实相信go ipfs上的对齐方式

00:16:33.750 --> 00:16:40.290
在不同的端口上运行，但这基本上是草

00:16:40.290 --> 00:16:44.850
对于他们需要进行的更改，再次进行相对比较容易

00:16:44.850 --> 00:16:52.220
使用杰西卡以外的其他东西是很酷的任何其他问题

00:17:00.220 --> 00:17:05.270
干旱能给我们像脉冲星成本的1分钟概览一样吗

00:17:05.270 --> 00:17:09.980
那是怎么回事，所以请给我

00:17:09.980 --> 00:17:13.130
[音乐]

00:17:28.100 --> 00:17:36.980
好的，很酷，所以本质上是非常简短的演示，但是

00:17:42.200 --> 00:17:49.649
因此，张贴广告的理由基本上是出于实用性

00:17:49.649 --> 00:17:56.909
我们要观察的和弹出的依赖项是为了

00:17:56.909 --> 00:18:01.440
当然有很多应用程序，特别是在分布式系统领域

00:18:01.440 --> 00:18:12.629
但是似乎已经如此，我似乎已经明显缺乏了，实际上

00:18:12.629 --> 00:18:21.119
让我跳过所有这一切，所以基本上这似乎是一个

00:18:21.119 --> 00:18:25.970
显然缺乏对应用程序的关注

00:18:26.269 --> 00:18:30.629
在对等领域中，关注于通常与之相关的事物

00:18:30.629 --> 00:18:36.389
集中式应用程序，因此通常如果您依赖某种

00:18:36.389 --> 00:18:39.989
消息听觉系统或类似的东西，首先在此集中

00:18:39.989 --> 00:18:46.649
应用程序中有一系列内容，例如交付保证和

00:18:46.649 --> 00:18:49.970
我们将看到您的数据是持久的

00:18:49.970 --> 00:18:54.809
在您拥有的PGP领域中通常不关联的事物

00:18:54.809 --> 00:18:59.669
像许多流行的解决方案，基本上都集中在实时上

00:18:59.669 --> 00:19:05.249
沟通或不提供您通常提供的那种保证

00:19:05.249 --> 00:19:08.279
还没有集中化的领域，所以这就是我们带来的原因

00:19:08.279 --> 00:19:12.989
所有圈子，所以海报演员是基于观察和模块的主题，

00:19:12.989 --> 00:19:17.309
实际上是在关注数据持久性事件的PGP之上实现的

00:19:17.309 --> 00:19:21.690
将提供保证和ni可扩展性，所以在这里就像

00:19:21.690 --> 00:19:26.509
这基本上是在它的内部，在它的核心，我们依靠

00:19:26.509 --> 00:19:33.929
默克尔甲板上的超级相似型FS的概念以及我们的方式

00:19:33.929 --> 00:19:38.609
事实是，我们有这两个核心资源，主题描述符中的

00:19:38.609 --> 00:19:44.429
事件描述符与这些资源之间相互链接，因此事件

00:19:44.429 --> 00:19:48.840
描述符实际上链接到他们所引用的主题以及每个节日

00:19:48.840 --> 00:19:55.770
事件流上的描述符和主题描述符指向上一个

00:19:55.770 --> 00:20:01.140
所述主题和其他子主题的版本（如果与他们相关）

00:20:01.140 --> 00:20:08.909
实际上指向其他子主题，因此想法是通过这些链接

00:20:08.909 --> 00:20:17.279
邮件，您就能解决这些标记链接，直至

00:20:17.279 --> 00:20:23.070
在这一点上，您可能缺少信使，或者实际上您甚至没有

00:20:23.070 --> 00:20:26.010
当时是网络的一部分，因此您可以与网络联系

00:20:26.010 --> 00:20:31.140
说你知道我连这些都没有

00:20:31.140 --> 00:20:38.340
提供它，这样最终可以作为EXO发挥作用，您甚至都不知道

00:20:38.340 --> 00:20:44.010
您尚未收到应有的内容，因此就像

00:20:44.010 --> 00:20:49.320
整个事情的简要概述设计是此消息的聚集

00:20:49.320 --> 00:20:54.570
消息也链接到主题，而主题也链接到主题

00:20:54.570 --> 00:20:58.590
所述主题描述符的先前版本，因为我们正在处理

00:20:58.590 --> 00:21:03.779
具有不可变的内容，并且如果您有主题foo，并且您想

00:21:03.779 --> 00:21:08.309
更改某些内容，例如我需要创建一个新的子主题

00:21:08.309 --> 00:21:11.580
新话题，但您可以指向上一个，因此

00:21:11.580 --> 00:21:17.309
从本质上讲，这给了您关于所述主题的美好历史，最后

00:21:17.309 --> 00:21:24.690
具有子主题链接（如果主题使主题更突出，如果主题使您具有强制性）

00:21:24.690 --> 00:21:31.020
当然，在下面，我们依靠的是PTP提供的Kadima

00:21:31.020 --> 00:21:35.610
并帮助我们创建传播树，然后我们用来指定

00:21:35.610 --> 00:21:43.620
我认为每个主题的内容基本上都像是概述

00:21:43.620 --> 00:21:52.889
至于结果，我们实际上可以实现99％的订阅

00:21:52.889 --> 00:22:00.090
支付率本质上是人类的特质告诉我们的

00:22:00.090 --> 00:22:04.440
订户数量我们必须讨论其中有多少订户，尽管订户

00:22:04.440 --> 00:22:08.630
能够接收他们订阅的内容，并且

00:22:08.630 --> 00:22:15.660
比起洪水，我这里没有结果，是的

00:22:15.660 --> 00:22:19.050
抱歉，我没有这里洪水的结果，但结果是

00:22:19.050 --> 00:22:26.010
相当低，我们测试的方法实际上是使用开源数据集

00:22:26.010 --> 00:22:33.630
来自2007年的Reddit评论中的大约225 000条评论样本，以及

00:22:33.630 --> 00:22:36.480
再次在我们之前描述的测试床上运行，这是

00:22:36.480 --> 00:22:42.030
分布评论，所以这就像整个五分钟的概览

00:22:42.030 --> 00:22:46.380
你可能超级困惑的事情，但是如果你有任何问题的话

00:22:46.380 --> 00:22:50.270
随时直接与我联系

00:22:50.960 --> 00:22:55.110
这真是令人印象深刻，您进入五分钟的时间是

00:22:55.110 --> 00:22:59.790
其实很容易，谢谢，我想是因为在这个练习

00:22:59.790 --> 00:23:11.730
时间，所以我们还有三分钟，这是亚伦还有其他问题吗，所以我

00:23:11.730 --> 00:23:17.010
猜猜你能谈谈如何将两者捆绑在一起吗？

00:23:17.010 --> 00:23:21.240
与脉冲星奶牛一起使用测试床您正在测试的是什么？

00:23:21.240 --> 00:23:26.700
关于环境哦，太好了，所以我不知道你有没有

00:23:26.700 --> 00:23:36.870
实际上，我认为我还可以，所以对于

00:23:36.870 --> 00:23:40.380
为了整个实验的目的，我们从中学到了什么

00:23:40.380 --> 00:23:48.690
是我们创造了本质上三个不同的实验，所以海报演员

00:23:48.690 --> 00:23:52.140
我实际上告诉过这些事情之一，因为这家公司是

00:23:52.140 --> 00:23:58.500
不可变的，因此主题描述符实际上允许我们添加某种

00:23:58.500 --> 00:24:04.020
其中的配置，我们可以使用此配置来实际告诉

00:24:04.020 --> 00:24:08.600
我们希望如何链接这些消息，以便您能够

00:24:08.600 --> 00:24:13.820
实际上强制执行一组有趣的属性，例如是否要离开被授予者

00:24:13.820 --> 00:24:20.060
或提供交付保证，您可以通过将set主题配置为so来再次这样做

00:24:20.060 --> 00:24:24.170
我们进行了三个不同的实验，所以一个是平坦的

00:24:24.170 --> 00:24:28.430
另一个被脉冲星施放，没有命令将是四个信息，另一个

00:24:28.430 --> 00:24:32.930
一个是与订单承兑人一起投下的面食，用于发送所有这些消息

00:24:32.930 --> 00:24:41.540
正常的网络状况以及500毫秒的网络延迟和300

00:24:41.540 --> 00:24:46.840
毫秒级的抖动，以便再次模拟和异常的网络约束

00:24:46.840 --> 00:24:54.710
而就结果而言，对于没有订单保证的面食来说还是如此

00:24:54.710 --> 00:25:01.550
我们有一个我们以鲜艳的色彩通过了所有绿色的面食

00:25:01.550 --> 00:25:04.730
关键是我们实际上突破了我们的极限

00:25:04.730 --> 00:25:11.800
测试社区实际上是由于以下原因开始关闭了几个节点

00:25:11.800 --> 00:25:18.020
无论是内存使用量还是CPU使用率，但是即使与洪灾相比，我们

00:25:18.020 --> 00:25:23.390
表现更好，并提供更好的服务质量，并且

00:25:23.390 --> 00:25:30.020
我们把所有东西放在一起的方式实际上是真实的，这些测试都是噪音

00:25:30.020 --> 00:25:35.780
它实际上也是开源的，实际上只是另一个CLI工具，

00:25:35.780 --> 00:25:44.480
从数据集实际上运行了一组DFS这个糟糕的CLI命令，所以我们

00:25:44.480 --> 00:25:50.330
能够以书本格式对数据进行处理，然后测量

00:25:50.330 --> 00:25:56.900
结果真的很酷，而且工作太快了，我们已经来不及了，但是

00:25:56.900 --> 00:25:59.960
非常感谢，这真的很有趣，也很清楚

00:25:59.960 --> 00:26:04.760
演示文稿非常感谢您昨天加入，并感谢其他所有人

00:26:04.760 --> 00:26:08.660
谁加入了电话，这是机器谢谢乔

00:26:08.660 --> 00:26:12.440
每周都有ipfs社区电话，希望我们能见到大家

00:26:12.440 --> 00:26:17.080
下周谢谢谢谢

