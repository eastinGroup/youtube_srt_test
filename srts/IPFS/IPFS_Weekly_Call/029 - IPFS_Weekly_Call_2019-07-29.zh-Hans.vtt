WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.439 --> 00:00:10.889
大家好，我是Old Dominion University的亲爱的，今天是今天

00:00:10.889 --> 00:00:14.910
我将谈论支持Web归档的问题，我们有一个包装，这是一个

00:00:14.910 --> 00:00:20.699
我们最近在互联网建筑逃生研讨会上写的立场文件

00:00:20.699 --> 00:00:26.869
董事会，他们试图巩固意见，您知道

00:00:26.869 --> 00:00:37.489
Web打包对出版业和发行商的影响

00:00:37.489 --> 00:00:46.219
例如搜索引擎和社交媒体以及所有将改变力量游戏的地方

00:00:46.550 --> 00:00:54.449
如您所知，Web打包是Google amp项目的一种演变

00:00:54.449 --> 00:00:59.460
但更恐怖的是他们仍然没有完全发展

00:00:59.460 --> 00:01:10.710
在任何浏览器中都受支持，因此我们看到了Web打包的巨大商机

00:01:10.710 --> 00:01:16.350
网络归档，我们认为我们会写一份立场文件，然后在其中

00:01:16.350 --> 00:01:21.900
当前格式不适合网络归档，因此我们建议进行一些更改

00:01:21.900 --> 00:01:30.259
我们将在这张幻灯片中浏览这些内容，以便简要总结一下

00:01:30.439 --> 00:01:38.640
Web包装是这样，Web包装中有几个方面，一个是

00:01:38.640 --> 00:01:44.759
捆绑销售，另一个正在签收，还有第三个方面正在加载

00:01:44.759 --> 00:01:49.979
这纯粹是在客户端，基本上如何处理这些捆绑包和

00:01:49.979 --> 00:01:57.119
如何加载它们，以便像fetch API一样扩展

00:01:57.119 --> 00:02:05.130
现在，它是什么捆绑产品，它允许您打包多个HTTP请求和

00:02:05.130 --> 00:02:11.489
他们调用的响应条目交换了来自

00:02:11.489 --> 00:02:18.330
将一个起源捆绑在一起并交付

00:02:18.330 --> 00:02:26.790
作为一个单一的资源，然后浏览器可以将其解包

00:02:26.790 --> 00:02:32.280
临时缓存中的资源以及随后的调用中的资源

00:02:32.280 --> 00:02:36.510
该特定的缓存（如果在捆绑包中找不到资源），它将进入

00:02:36.510 --> 00:02:41.640
从活泼的角度来看，现在捆绑销售最酷的事情是

00:02:41.640 --> 00:02:45.480
捆绑说它是原始资源，然后浏览器会相信

00:02:45.480 --> 00:02:51.330
它来自原点a，然后不需要进行任何重写或

00:02:51.330 --> 00:02:59.370
在您知道并来自cnn.com的amp URL中完成操作的任何方式

00:02:59.370 --> 00:03:04.650
似乎来自google.com，但现在不是这种情况

00:03:04.650 --> 00:03:09.750
如果捆绑包说它是起源的，那将有多可靠？

00:03:09.750 --> 00:03:17.100
我们是否认为这与您使用代理并且正在使用代理相同？

00:03:17.100 --> 00:03:23.580
 HTTP，您的代理可以代表任何来源响应资源

00:03:23.580 --> 00:03:27.180
将其更改为任何内容，您现在就会相信它，然后他们介绍了

00:03:27.180 --> 00:03:35.040
HTTPS，以确保您不知道中间人没有看到正在发生的事情

00:03:35.040 --> 00:03:41.910
或，并且您相信它是来自您正在与之交谈的来源

00:03:41.910 --> 00:03:46.980
带来信任，现在包括签名，签名是不同的

00:03:46.980 --> 00:03:53.370
来自加密，因为加密更像是一对一的客户端

00:03:53.370 --> 00:03:57.780
和服务器会面的时间，他们之前吃了它的共享密钥，然后使用

00:03:57.780 --> 00:04:07.140
用于在签名中对资源进行加密，我们相信该资源确实即将到来

00:04:07.140 --> 00:04:13.680
来自相同的来源，但以纯文本格式

00:04:13.680 --> 00:04:21.870
任何人都可以看到错误的消息，因此对于公开访问的资源来说更有用

00:04:21.870 --> 00:04:26.920
例如，不是在您交换信用卡信息的地方

00:04:26.920 --> 00:04:37.430
因此，回到Web存档这里是我最后创建的一个简单网页

00:04:37.430 --> 00:04:45.980
一年或这意味着首脑会议，这个简单的HTML页面包括两个外部

00:04:45.980 --> 00:04:54.380
在link和image标签中分别提供样式表和徽标，以及

00:04:54.380 --> 00:05:01.630
现在，当我们尝试将其存档时，舞台上也有一些超链接

00:05:01.630 --> 00:05:09.010
捕获此HTML源代码是不够的，所以我们要做的是

00:05:09.010 --> 00:05:17.270
归档HTTP标头以及有效负载现在结合了HTTP标头和

00:05:17.270 --> 00:05:23.630
有效负载会在重播时提供更多信息，并提供相应的HTTP

00:05:23.630 --> 00:05:31.370
从以下服务器获取此响应的请求记录：

00:05:31.370 --> 00:05:37.190
也保留下来，所有这些东西都保存在称为war文件的文件中，

00:05:37.190 --> 00:05:42.410
哪些文件具有不同的记录类型，所以我们在这里说明

00:05:42.410 --> 00:05:48.890
在右边是我讨厌打断的回应，我想我们

00:05:48.890 --> 00:05:54.730
可能看不到正确的屏幕哦[音乐]

00:06:03.550 --> 00:06:12.590
我们现在看到了吗，是的，我认为这样比较好，所以让我们快速开始吧

00:06:12.590 --> 00:06:16.310
回到其他幻灯片，这是包装方面，这是幻灯片

00:06:16.310 --> 00:06:23.210
我讨论了一个HTML页面，以及如何说明他的源代码以及

00:06:23.210 --> 00:06:29.960
在那里我突出显示了链接的两个资源，然后我

00:06:29.960 --> 00:06:36.530
基本上是在谈论工作记录，所以在左侧我们有HTTP

00:06:36.530 --> 00:06:41.420
有效载荷中负责该HTML页面的标题

00:06:41.420 --> 00:06:46.340
进行了说明，并将整个内容放到工作记录中，因为它是

00:06:46.340 --> 00:06:54.830
一个HTTP响应，我们称它为HTTP，是工作记录的响应类型，在什么情况下

00:06:54.830 --> 00:06:59.120
这就像我们在HTTP上拥有有效负载的方式一样

00:06:59.120 --> 00:07:03.320
标头，我们还有一些额外的标头，我们称之为工作标头，整个

00:07:03.320 --> 00:07:08.330
合并的东西基本上被称为一份工作报告，并且有很多工作

00:07:08.330 --> 00:07:14.870
记录类型，有响应类型，有请求ID，有信息

00:07:14.870 --> 00:07:18.860
类型，并且有一些资源方面，有七种或八种不同的类型

00:07:18.860 --> 00:07:26.410
在什么规范中定义，因此工作文件基本上是

00:07:26.410 --> 00:07:34.700
这些记录的任意数量，然后使用

00:07:34.700 --> 00:07:40.520
原始URI及其保存的日期/时间，这就是网络的方式

00:07:40.520 --> 00:07:46.100
档案基本上是服务的，所以他们收集了这些工作图块

00:07:46.100 --> 00:07:53.560
快速从此处读取数据，并进行一些重写和服务器操作，因此

00:07:54.580 --> 00:08:03.230
它回到了目前最多的条棉的爬行过程中

00:08:03.230 --> 00:08:11.840
用于任何大规模归档的流行且实际的工具是

00:08:11.840 --> 00:08:19.010
所谓的异端邪说是由Internet Archive建立的，因此

00:08:19.010 --> 00:08:26.350
在2015年完成的研究，其中phantom ga.js曾经是著名的

00:08:26.350 --> 00:08:33.530
无头浏览器，所以我们意识到，如果我们使用W门或野兔特征，

00:08:33.530 --> 00:08:38.420
错过了很多资源，它们是默认表示形式的东西

00:08:38.420 --> 00:08:43.100
仅在页面正确呈现并执行某些JavaScript时出现

00:08:43.100 --> 00:08:50.210
因此正在请求更多资源，并且如果

00:08:50.210 --> 00:08:56.089
您将使用W Gate或其他工具（如异端邪教）

00:08:56.089 --> 00:09:02.449
识别此类资源的更好工作，但仍然没有执行

00:09:02.449 --> 00:09:08.000
JavaScript中的签名来获取资源，因此，如果您要使用诸如

00:09:08.000 --> 00:09:12.560
无头浏览器，您将能够发现更多的资源，我们将为您提供

00:09:12.560 --> 00:09:18.589
更好的是更完整的档案，但问题是使用幻影JS

00:09:18.589 --> 00:09:25.519
能够发现多出75％的资源，但速度慢了一个数量级

00:09:25.519 --> 00:09:35.269
所以我们相信的是，如果网络适应包装并且他们

00:09:35.269 --> 00:09:40.339
开始使用它，他们打包自己的网页，而不是整个网络

00:09:40.339 --> 00:09:45.320
但其中的一部分适用于网络抓取的特定部分

00:09:45.320 --> 00:09:48.380
会更容易，因为我们将下载一个软件包，并且我们将

00:09:48.380 --> 00:09:54.949
获取捆绑在一起的一个或多个页面的所有必要资源

00:09:54.949 --> 00:10:00.709
在一起，我们将依靠服务器本身，他们会更好地了解

00:10:00.709 --> 00:10:04.819
关键页面需要资源，它们正确地将它们捆绑在

00:10:04.819 --> 00:10:11.660
在这种情况下，我们将避免刮擦HTML和CSS并执行

00:10:11.660 --> 00:10:16.040
JavaScript找出所有资源，因为我们假设服务器具有

00:10:16.040 --> 00:10:20.920
为我们完成了他们的工作，只会提出一个请求，我们会得到

00:10:20.920 --> 00:10:28.300
在那里捆绑了众多资源，因此无论归档如何重播它们

00:10:28.300 --> 00:10:35.800
基本上，他们从工作文件中获取原始存档资源，

00:10:35.800 --> 00:10:43.130
重写超级引用中的所有链接以及所有内容，以便那些

00:10:43.130 --> 00:10:47.540
链接未指向实时网络或错误的URL

00:10:47.540 --> 00:10:53.750
他们总是指向这些资源的存档版本，例如

00:10:53.750 --> 00:11:00.290
时尚的点CSS现已更改为将Web斜杠用14位数斜杠后跟

00:11:00.290 --> 00:11:05.149
原始域，等等，整个事情就这样，浏览器就可以了

00:11:05.149 --> 00:11:09.450
下次当它寻找其CSS文件时，它不在寻找

00:11:09.450 --> 00:11:14.460
随机样式，但是CSS文件单词是从网络存档本身获取的，这是

00:11:14.460 --> 00:11:19.500
称为URL重写这是一种必要的问题是

00:11:19.500 --> 00:11:26.040
使用javascript注入资源以使服务器正确识别哪些资源

00:11:26.040 --> 00:11:31.740
要重写的URL变得很困难，为此有两个

00:11:31.740 --> 00:11:36.060
像您这样的客户端解决方案之类的工具在此处注入JavaScript

00:11:36.060 --> 00:11:40.490
捕获所有流量并尝试

00:11:40.670 --> 00:11:45.990
重写或读出那些内容，这些内容在客户端本身上，并且在客户端

00:11:45.990 --> 00:11:52.050
这种解决方案是我们去年或前一年发布的

00:11:52.050 --> 00:11:58.980
它称为可重构的，它以IP方式用于我们的系统

00:11:58.980 --> 00:12:06.810
使用IP IP FS的服务器，并在其下方的一角进行了说明，并注入了横幅

00:12:06.810 --> 00:12:12.360
并尝试捕获，因此在上图中显示的就像有一个

00:12:12.360 --> 00:12:19.410
图像应该来自外部示例点网，但

00:12:19.410 --> 00:12:22.950
我们安装的serviceworker捕获了该请求，并说嘿

00:12:22.950 --> 00:12:28.260
进入外部，这将是实时泄漏，我们不希望生命中的资源

00:12:28.260 --> 00:12:33.900
存档页面，因此它将策略性地将其重新路由到存档页面，

00:12:33.900 --> 00:12:38.610
然后要求浏览器从其目标样式中进行请求，因此在这种情况下

00:12:38.610 --> 00:12:46.890
不需要重写，当请求在那儿时就被困住了

00:12:46.890 --> 00:12:53.490
是基于Ilias代理的解决方案，如今已在旧的网络环境中使用，

00:12:53.490 --> 00:13:00.710
 Web浏览器在配置为使用的远程服务器上的容器中运行

00:13:00.710 --> 00:13:06.960
档案代理，因此，如果您在此屏幕截图中看到该页面是来自

00:13:06.960 --> 00:13:12.300
内的原始域，但实际上是在与代理和

00:13:12.300 --> 00:13:16.920
代理足够聪明，可以意识到您是否正在寻找档案副本，所以我

00:13:16.920 --> 00:13:20.940
会将其读出到相应的存档副本，以便在内部

00:13:20.940 --> 00:13:26.700
代理正在从档案中访问，但没有告诉浏览器

00:13:26.700 --> 00:13:31.610
现在来自档案库，这是一种我们将能够执行的行为

00:13:31.610 --> 00:13:36.270
展示我们是否要使用其包装，因为这样我们就可以存储

00:13:36.270 --> 00:13:41.340
用于创建的捆绑包将自己捆绑在网络档案中，并在

00:13:41.340 --> 00:13:48.690
浏览器会相信这样或那样的网络重写

00:13:48.690 --> 00:13:54.750
在此之前显示的部分是一些致命的情况

00:13:54.750 --> 00:14:00.180
错了，所以第一件事就是当我们有几个博客时违反了Cookie

00:14:00.180 --> 00:14:07.110
关于它的帖子，在这种情况下，我们看到的是一个混合的Twitter页面

00:14:07.110 --> 00:14:15.420
设置了英文和乌尔都语按键的键，因此该页面不存在

00:14:15.420 --> 00:14:19.830
在直播方面，但这是我们的基辅为您服务的方式，因为有一些

00:14:19.830 --> 00:14:23.940
Cookie发挥作用，它们正在混合使用不同语言的资源，因此

00:14:23.940 --> 00:14:28.560
基本上，您看到的页面永远都不存在第二件事

00:14:28.560 --> 00:14:33.630
违规，这是cnn.com中的情况（如果您最近浏览过luxe）

00:14:33.630 --> 00:14:37.650
最近两年半或类似Internet Archive中的内容

00:14:37.650 --> 00:14:40.890
并尝试访问那些cnn.com登陆页面

00:14:40.890 --> 00:14:44.850
它们将为空白，原因是有一段JavaScript指出

00:14:44.850 --> 00:14:51.620
原点等于cnn.com，然后执行这些操作并呈现页面，并且

00:14:51.620 --> 00:14:56.700
存档页面是从Internet存档提供的，因此原点现在已更改为

00:14:56.700 --> 00:15:02.220
一段JavaScript，如果Clause会进入它不会让任何东西进入的地方

00:15:02.220 --> 00:15:07.500
在这种情况下导致第三次时间违规，基本上是因为不同

00:15:07.500 --> 00:15:14.520
资源是在天气页告诉您的不同时间捕获的

00:15:14.520 --> 00:15:19.740
文字形式的不同故事讲述了不同的温度和状况

00:15:19.740 --> 00:15:25.050
天气，但卫星图像与此不同，因为它是

00:15:25.050 --> 00:15:30.390
例如相隔数周或数天，因此资源状态已被

00:15:30.390 --> 00:15:34.470
时间单词捕捉器，并不一致第四

00:15:34.470 --> 00:15:40.020
他的生命在流失，我们称之为僵尸，在这里取决于它在哪里

00:15:40.020 --> 00:15:51.360
访问和关闭，所以当你知道巴拉克·奥巴马的第二个任期

00:15:51.360 --> 00:15:56.580
第二届大选发生了什么事，有一个广告是现场直播

00:15:56.580 --> 00:16:03.720
当时来自实时网络，似乎正在预示结果

00:16:03.720 --> 00:16:09.000
第一次选举结果的结果，因为该广告是最近的且该页面未通过

00:16:09.000 --> 00:16:14.190
基本上，从而，如果不知何故此页面知道奥巴马会当选

00:16:14.190 --> 00:16:19.140
就像第一学期一样，这种情况发生在Web存档中

00:16:19.140 --> 00:16:23.940
您看到不存在的页面的时间，我们希望避免这些

00:16:23.940 --> 00:16:28.130
东西，我们认为包装有潜力解决这些问题

00:16:28.130 --> 00:16:35.670
现在，Web打包的问题在于他们偏爱新近度，因此，如果存在

00:16:35.670 --> 00:16:43.440
资源保存cnn.com斜杠徽标点PNG很好，如果有多个

00:16:43.440 --> 00:16:52.680
该副本在浏览器缓存或捆绑包中的浏览器将使用最多

00:16:52.680 --> 00:16:57.180
最新版本，而该版本将针对网络发布

00:16:57.180 --> 00:17:02.910
存档，我们希望特定于过去的快照，并且它不允许

00:17:02.910 --> 00:17:08.250
目前，解决问题的一种方法是魔术

00:17:08.250 --> 00:17:13.680
如果它具有瞬时时间门支持，这已经是标准协议

00:17:13.680 --> 00:17:18.060
由不同的Web档案使用，在此进行了说明

00:17:18.060 --> 00:17:26.610
很酷，但是我们有一个不同的解决方案，那就是增加了一些

00:17:26.610 --> 00:17:33.600
您知道标头，因此例如服务器告诉浏览器标头已解压

00:17:33.600 --> 00:17:39.920
通过我提供的名称将其捆绑在缓存名称空间中，在这种情况下，它是一个

00:17:39.920 --> 00:17:47.010
字符串到2000 1907，但可以是任何小字符串，也可以是a4后退字符串

00:17:47.010 --> 00:17:50.310
该浏览器会读取并说好，我们将创建一个

00:17:50.310 --> 00:17:55.230
用该名称缓存并解压缩所有资源，然后服务器还告诉

00:17:55.230 --> 00:17:59.610
交换加载策略并仅说捆绑包，这意味着如果找不到

00:17:59.610 --> 00:18:04.710
此包中的资源不在此缓存中，不在其他任何地方都不会

00:18:04.710 --> 00:18:13.440
在任何其他缓存中查找都不要实时显示，只是知道网络错误或错误的返回者

00:18:13.440 --> 00:18:18.390
询问错误的表格或捆绑的资源或类似的东西，现在这不是

00:18:18.390 --> 00:18:23.430
现在得到支持的东西，但这是我们遇到的一个难题

00:18:23.430 --> 00:18:32.760
提出可以解决我们档案问题的课程问题，所以请继续前进

00:18:32.760 --> 00:18:38.540
现在下一个问题

00:18:38.540 --> 00:18:45.660
说这种内容的技术手段确实来自上述来源，没有人

00:18:45.660 --> 00:18:49.440
修改了它的原始内容，这是我们最近记录的一个故事

00:18:49.440 --> 00:18:58.290
如此巨大的阅读她最近声称，她在互联网上的博客文章的副本

00:18:58.290 --> 00:19:02.010
存档已被修改或被黑或类似的东西，因为它是

00:19:02.010 --> 00:19:07.520
就像是她的情节帖子的十年老照片，她在其中张贴了一些恐同

00:19:07.520 --> 00:19:13.260
资料，因此她否认现在拥有该资料库的所有权

00:19:13.260 --> 00:19:17.460
他们再次在博客文章中公开否认了这一点，他们没有

00:19:17.460 --> 00:19:23.310
证明它的技术手段，但他们基本上是说出来的，这就是他们的做法

00:19:23.310 --> 00:19:28.230
当他们被召唤时，或某物中有人

00:19:28.230 --> 00:19:34.140
存档去了，作为一个人员，在法庭上像是说的那样

00:19:34.140 --> 00:19:40.080
基本上他们说不，这是现在的情况，我们要他技术

00:19:40.080 --> 00:19:45.090
意味着要证明这一点，以便我们不参与其中，而且我认为

00:19:45.090 --> 00:19:52.890
在这些捆绑的资源中拥有已签名的交易所将是很棒的，这样

00:19:52.890 --> 00:19:57.870
我们现在可以证明科学家改变的当前问题是

00:19:57.870 --> 00:20:01.650
不会持续太久，几乎不会持续7天之类的时间

00:20:01.650 --> 00:20:08.400
所以我们有一些解决方案可以延长它的使用寿命，这基本上是一些

00:20:08.400 --> 00:20:18.390
他们中的大多数人都像您知道的那样参与其中，所以我认为我很确定，所以那么

00:20:18.390 --> 00:20:26.040
在这里，我们认为我们可以使用符号的时间估值来解决该问题

00:20:26.040 --> 00:20:29.610
交流和时间上的验证意味着不是在说这是一个签名

00:20:29.610 --> 00:20:35.090
在历史背景下您说的是有效还是无效

00:20:35.090 --> 00:20:40.590
如果签名被及时报告，签名将是有效的。

00:20:40.590 --> 00:20:46.340
日期标题和女性约会时间标题基本上是这样，所以我们称其为时间

00:20:46.340 --> 00:20:52.500
验证，基本上新的状态现在将在时间上称为暂时有效

00:20:52.500 --> 00:20:59.370
当它也可以的时候这不是暂时的，为了让您知道拉长

00:20:59.370 --> 00:21:05.670
签名我们对此有一些立场，但现在我们可以使用

00:21:05.670 --> 00:21:09.210
证书透明性日志和现在存在的其他一些系统

00:21:09.210 --> 00:21:14.730
过去不存在，所以我们有基础设施可以以某种方式推动

00:21:14.730 --> 00:21:24.630
现在前进，我们也希望浏览器对以下内容具有本机支持：

00:21:24.630 --> 00:21:30.170
刻不容缓，或者至少他们承认正在看到的资源

00:21:30.170 --> 00:21:35.309
无论是来自捆绑软件还是本地的归档文件

00:21:35.309 --> 00:21:40.710
捕获的mhtml文件或在所有情况下您希望浏览器执行的操作

00:21:40.710 --> 00:21:45.570
承认这是一个存档资源，在这里我们已经说明了

00:21:45.570 --> 00:21:53.850
基本上，当我认为我们在哪里使用地址栏的芯片来公开更多内容时

00:21:53.850 --> 00:22:02.490
有关存档网页的信息，以便包装包装具有独特的

00:22:02.490 --> 00:22:06.450
开发支持归档并提供技术的技术的机会

00:22:06.450 --> 00:22:10.920
一些急需的功能，以验证该存档的完整性

00:22:10.920 --> 00:22:15.480
资源，我们正在寻找四个方面的效果

00:22:15.480 --> 00:22:20.700
捆绑下一个HTTP交换将获得高效且连贯的抓取，这是

00:22:20.700 --> 00:22:25.019
不再是我们正在战斗的东西，因为如果捆绑在一起，那就更多了

00:22:25.019 --> 00:22:31.169
资源变成一个东西，这个问题基本上已经解决了

00:22:31.169 --> 00:22:37.110
只是工具可以正确地追赶和捆绑物品的问题

00:22:37.110 --> 00:22:45.710
现在，timegate支持或用于加载的命名缓存将成为我们

00:22:45.710 --> 00:22:51.360
要求，何时完成，我们将在时间上进行连贯重播，如果

00:22:51.360 --> 00:22:55.559
我们还将在已签名的交易中获得时间上的时间验证，我们将

00:22:55.559 --> 00:23:01.980
能够获得非长期的固定性和不可否认性支持，并且如果是本地的

00:23:01.980 --> 00:23:07.019
浏览器领域的瞬间支持将以一种直观的方式来传达

00:23:07.019 --> 00:23:12.870
资源很累，所以非常感谢您，还有几分钟，我们

00:23:12.870 --> 00:23:15.919
可以回答任何问题

00:23:26.280 --> 00:23:37.440
所以我有一个问题，所以在广泛的网络浏览器中，我们真的想拥有

00:23:37.440 --> 00:23:42.000
在网络浏览器中支持存档的概念，基本上是

00:23:42.000 --> 00:23:46.020
能够倒带时间的是那种核心思想

00:23:46.020 --> 00:23:53.940
我认为是的，我们这样做的原因是因为如果我们

00:23:53.940 --> 00:24:02.400
能够传达此信息或一些工具和控件，

00:24:02.400 --> 00:24:07.470
我们在浏览器中提供的内容就像横幅广告一样，它们将

00:24:07.470 --> 00:24:15.480
在工具栏的浏览器中浮出水面，人们将会更多

00:24:15.480 --> 00:24:20.730
承认他们看到的资源没有生命，我们没有

00:24:20.730 --> 00:24:27.560
希望将存档网络中的内容混合在一起，这会导致比

00:24:27.560 --> 00:24:35.940
没有，所以我们一直在为此而努力的浏览器上展开一场战斗

00:24:35.940 --> 00:24:44.070
就像现在的几十年一样，Momento InBev档案有出色的支持，但是我们

00:24:44.070 --> 00:24:49.680
希望维基百科适应这种情况，因为他们正在使用自己的历史记录

00:24:49.680 --> 00:24:57.090
使用他们自己的机制，我们希望将其以更标准化的方式使用，我们

00:24:57.090 --> 00:25:03.210
编写了附加组件，所有组件都经过了全面的审核过程，然后再全部

00:25:03.210 --> 00:25:07.560
最终他们决定不部署它，因为他们说嘿浏览器没有

00:25:07.560 --> 00:25:11.130
支持它，当我们返回Web浏览器并说嘿，请支持它

00:25:11.130 --> 00:25:15.300
他们说，像Wikipedia这样的大网站不支持它，所以有

00:25:15.300 --> 00:25:23.070
这里的鸡肉和鸡蛋问题仍然存在，所以这将是很棒的

00:25:23.070 --> 00:25:27.900
因为如果我们获得了捆绑支持，那么所有这些档案都可以捆绑东西

00:25:27.900 --> 00:25:33.150
他们可以很好地将整个捆绑放入ipfs中，

00:25:33.150 --> 00:25:38.070
与从何处提供资源无关，它可以四处移动和

00:25:38.070 --> 00:25:42.030
然后从浏览器将要处理的所有地方提供

00:25:42.030 --> 00:25:46.230
页面不是单个资源，而是包含所有页面要求的整个页面

00:25:46.230 --> 00:25:51.120
如果您正在说，请很好地重播，就好像它现在是从您那里来的一样

00:25:51.120 --> 00:25:56.250
这是cnn.com，您需要使用某种方式说这不是cnn.com，现在这

00:25:56.250 --> 00:26:00.510
是十年前出现的cnn.com或类似的内容，那就是

00:26:00.510 --> 00:26:04.260
我认为Web浏览器的本地支持将在其中提供

00:26:04.260 --> 00:26:12.600
方便，谢谢，所以我想我们当时很抱歉，我开始有点晚了

00:26:12.600 --> 00:26:20.570
然后离开李斯特菌，是的，非常感谢你，谢谢

