WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.030 --> 00:00:08.250
令人兴奋的非常好，所以这是我在实验室进行的快速讨论

00:00:08.250 --> 00:00:11.790
一周，所以协议去做通常就像整整一个星期，我们有一些

00:00:11.790 --> 00:00:15.960
很有趣，但主要是我们谈到了ifs的未来以及所有这些美好的事物

00:00:15.960 --> 00:00:22.020
东西，这只是我从笔记中总结出来的快速讨论，所以

00:00:22.020 --> 00:00:27.330
无论如何，如果您喜欢X就一定要很有趣，好吧，看看谁在某个时候完成了Jess

00:00:27.330 --> 00:00:34.410
他们的生活还不错，有人在这里使用Jess ipfs API了吗？

00:00:34.410 --> 00:00:40.829
你好吧，这个演讲适合与Jess ipfs合作过的人

00:00:40.829 --> 00:00:44.670
好，其余的人对您来说更重要，因为

00:00:44.670 --> 00:00:51.840
您将学到一些东西，所以这是关于设计更符合人体工程学的ipfs

00:00:51.840 --> 00:00:59.370
 API使用了新的东西，所以我在问什么

00:00:59.370 --> 00:01:05.369
ipfs API对程序员更具吸引力，我相信我们可以

00:01:05.369 --> 00:01:09.330
为RDFS编程更容易我相信ipfs的编程可以更多

00:01:09.330 --> 00:01:13.799
令人愉快，我相信ipfs的编程会更加令人兴奋，我

00:01:13.799 --> 00:01:18.210
相信解决这些这些问题可以鼓励开发人员使用

00:01:18.210 --> 00:01:25.140
ipfs甚至更多，所以我在想什么，如果我要编码

00:01:25.140 --> 00:01:29.130
并从ipfs中取出内容，将其放入其中是什么类型的API

00:01:29.130 --> 00:01:35.159
我想用它像我将编码什么将是最好的

00:01:35.159 --> 00:01:41.729
我想使用的东西就像是梦的代码，所以事情是我

00:01:41.729 --> 00:01:45.450
不想只是一时兴起地改变事物，就像有一个整体

00:01:45.450 --> 00:01:49.500
将大量工作放入实现这些功能的类似接口和代码中

00:01:49.500 --> 00:01:55.799
接口和ipfs就像所有回调一样，全部都是拉流

00:01:55.799 --> 00:02:00.149
在引擎盖下，我意识到他们有点像那种东西

00:02:00.149 --> 00:02:06.479
我在这里提出问题的严重性，但是当我提出时

00:02:06.479 --> 00:02:09.569
从这开始，我想好了，如果我要提出的话

00:02:09.569 --> 00:02:12.270
任何与那里略有不同的东西，我都应该有点血腥

00:02:12.270 --> 00:02:15.689
这样做的充分理由，然后我提出了几个理由

00:02:15.689 --> 00:02:20.099
然后我提出了更多的原因，然后我就一直坚持下去，

00:02:20.099 --> 00:02:22.799
是的，有越来越多的原因可能需要改变一些

00:02:22.799 --> 00:02:30.450
事情，所以这是关于改善开发人员的体验，我也是这样做的

00:02:30.450 --> 00:02:35.040
我创建了一个仓库，当然我也创建了一个名为ipfs X的仓库。

00:02:35.040 --> 00:02:38.819
实验性游乐场，可以像编程API一样玩耍

00:02:38.819 --> 00:02:45.959
与ipfs对话，它是什么，它只是

00:02:45.959 --> 00:02:53.609
API，iOS API JSI PFS API公开或国际象棋公开，以及我想要的API

00:02:53.609 --> 00:02:57.930
我想看到的最大的之一，基本上就是我所有人

00:02:57.930 --> 00:03:01.439
就像异步走了，但最大的不同是利用了异步

00:03:01.439 --> 00:03:06.719
迭代器我可能不会讲解，因为我们有点矮

00:03:06.719 --> 00:03:11.069
时间，但是什么是异步呢Rea很好bla bla bla bla bla bla bla

00:03:11.069 --> 00:03:18.569
好的，基本上是一种本地语言功能，它使我们能够流式传输数据

00:03:18.569 --> 00:03:25.260
超级超级，现在就像大多数网络浏览器一样，

00:03:25.260 --> 00:03:30.060
像运行时一样的javascript都实现了戏弄科威特，它们都递增

00:03:30.060 --> 00:03:36.239
实现异步迭代器，因此如果我们

00:03:36.239 --> 00:03:39.120
因为没有必要进行运输，我们也不会在该处进行任何运输

00:03:39.120 --> 00:03:43.319
那是超级rad的那一刻，因为它在处理时非常复杂

00:03:43.319 --> 00:03:48.060
错误和类似的事情，所以嗯，是的，没有运输很酷，这意味着

00:03:48.060 --> 00:03:53.759
我们不再需要使用nodejs流或pull流，为此

00:03:53.759 --> 00:03:57.959
如果您是否已经在应用程序中使用拉流，那很重要

00:03:57.959 --> 00:04:00.870
或在它们之间转换的某种微不足道的东西

00:04:00.870 --> 00:04:05.040
编写了一些模块，它们就像20行代码，每个模块都很简单，因为

00:04:05.040 --> 00:04:09.329
4:08循环与异步可迭代对象之间有很多相似之处

00:04:09.329 --> 00:04:16.320
如果有很多相似之处，它们非常像拉弦乐，是的，

00:04:16.320 --> 00:04:20.220
明显的明显差异，但无论如何，很酷的事情是，如果您使用的是

00:04:20.220 --> 00:04:24.960
nodejs流没有真正的类似升级路径，因为没有js的流

00:04:24.960 --> 00:04:29.400
现在也是异步可迭代对象，因此您可以将其作为参数传递

00:04:29.400 --> 00:04:33.060
这些功能中的许多功能，很酷的是，如果您曾经使用过

00:04:33.060 --> 00:04:37.830
杰西·我拥有FS API，就像拥有很大的API表面积一样，

00:04:37.830 --> 00:04:42.120
就像添加内容的三种不同方式一样，他们基本上会做同样的事情

00:04:42.120 --> 00:04:47.790
但它们就像是添加的一样，它也需要我拉过的流

00:04:47.790 --> 00:04:50.820
获得脉冲奶油并将其放入其中，并添加可读的流

00:04:50.820 --> 00:04:55.380
像一个node.js流，所以我们没有这种大的API表面积

00:04:55.380 --> 00:05:01.050
不再，这意味着，这意味着我们不需要导入模块就可以

00:05:01.050 --> 00:05:06.630
通过拉流模块，它是生态系统模块，就像您可能会做的其他事情一样

00:05:06.630 --> 00:05:11.280
想要处理不需要浏览器导入内容的拉流

00:05:11.280 --> 00:05:16.200
像可读流，您不需要像泵那样处理罐中锅中的错误

00:05:16.200 --> 00:05:21.060
流管道，以便所有内容都有助于产生更小的捆绑包，从而减少依赖性

00:05:21.060 --> 00:05:27.450
安装超级双赢的速度更快，因为我们的API面最小

00:05:27.450 --> 00:05:30.630
在那里进行测试，我们不必测试所有这些不同的地方

00:05:30.630 --> 00:05:33.330
加法的组合，因为只有一个加法命令

00:05:33.330 --> 00:05:38.340
这将需要很多不同的论据，但对的测试却更少

00:05:38.340 --> 00:05:41.610
运行它意味着要运行的测试更少意味着要进行的测试

00:05:41.610 --> 00:05:47.880
执行的时间更少，是的，很好，很好，很好，然后我们

00:05:47.880 --> 00:05:51.270
就像这种接口IP节内核的想法一样

00:05:51.270 --> 00:05:54.150
如果要成为IP FS，则必须满足的接口

00:05:54.150 --> 00:05:59.370
实施，如​​果您要那样做，我就必须那样做，因为我

00:05:59.370 --> 00:06:04.110
为同伴建立了东西，就像Web点窗口ipfs一样

00:06:04.110 --> 00:06:08.310
同伴所做的是将ipfs放入每个网页中

00:06:08.310 --> 00:06:13.140
因此您的网页只能使用ipfs窗口，但它是什么

00:06:13.140 --> 00:06:19.020
通过发给初级用户的发布消息的代理，例如运行在其中的IP FS实例

00:06:19.020 --> 00:06:25.770
同伴和我的窗户门ipfs必须遵循此界面，因此

00:06:25.770 --> 00:06:28.740
具有较小的API表面积，我需要实现的事情更少

00:06:28.740 --> 00:06:35.250
因此，如果我愿意的话，对我来说，这样做要容易得多，然后JSI PFS是

00:06:35.250 --> 00:06:39.390
基本上所有的池流都在引擎盖下，然后当我们暴露时

00:06:39.390 --> 00:06:44.280
就像恶心的流API一样，它就是样板

00:06:44.280 --> 00:06:47.190
在很酷的流和可读流之间进行转换，我们需要导入这些流

00:06:47.190 --> 00:06:52.980
模块，现在我们不需要它们，因此我们可以减少它们的体积

00:06:52.980 --> 00:07:00.240
您知道这些代码之类的东西，以及异步的一大大酷事

00:07:00.240 --> 00:07:04.710
它具有规则性，而且对于循环的权重而言，错误处理程序的内容更容易，我们

00:07:04.710 --> 00:07:10.140
不必像完整的流媒体那样拥有很好的应对方式

00:07:10.140 --> 00:07:13.230
这是在您的水槽中，如果您正在

00:07:13.230 --> 00:07:16.380
收集东西，那么你有一个有错误的Kulak并且错误传播了

00:07:16.380 --> 00:07:21.720
上下很好并且容易捕捉，但是如果您有的话，可以在nodejs流中

00:07:21.720 --> 00:07:26.250
像管道，您需要另一个模块来侦听所有错误，而您不需要

00:07:26.250 --> 00:07:29.760
知道并传播到最后是很困难的，但是就像

00:07:29.760 --> 00:07:33.840
与异步可迭代对象，对于您来说，只需添加try-catch，何时添加

00:07:33.840 --> 00:07:38.130
事情出错了，您只是抓住了它，而是因为它更容易，这是

00:07:38.130 --> 00:07:42.150
对于开发人员来说，另一个非常令人惊奇的事情是非常好的

00:07:42.150 --> 00:07:49.140
堆栈跟踪，所以类似回调和类似流和and的问题

00:07:49.140 --> 00:07:52.200
所有这些就是，当您获得堆栈跟踪信息时，您会得到

00:07:52.200 --> 00:07:55.170
有时其中没有任何代码，这实在令人沮丧

00:07:55.170 --> 00:08:00.750
因为它们像异步边界一样剪辑它，并且与异步分离

00:08:00.750 --> 00:08:05.010
不会遇到问题，因此更容易调试，并且是更好的开发人员

00:08:05.010 --> 00:08:11.340
体验很好，这是超级Whistlestop的超酷体验，还有什么

00:08:11.340 --> 00:08:14.280
它们看起来像什么好吗，所以如果我要创建一个IP FS节点

00:08:14.280 --> 00:08:21.720
现在我们只需要将ipfs，常规ipfs或ipfs api传递给我的PFS X

00:08:21.720 --> 00:08:25.560
使用ipfs时，您通常必须等待，确定发出的事件是

00:08:25.560 --> 00:08:29.370
等待准备就绪的事件，然后才能使用它，这是IVF SX的事情之一

00:08:29.370 --> 00:08:32.430
这样做会使事情变得容易一些，因为我们可以等待

00:08:32.430 --> 00:08:36.240
事情要准备好了，现在我们可以使用它了，如果您是

00:08:36.240 --> 00:08:39.930
基本上，如果您使用的是IP FS，则可能会编写一些帮助程序

00:08:39.930 --> 00:08:44.070
该函数可以让您等待它，这仅意味着一次完成

00:08:44.070 --> 00:08:49.530
在ipfs中，它已经过正确的测试，而且人们做不到的事情更少了

00:08:49.530 --> 00:08:54.730
一遍又一遍地实施，以便增加内容的乐趣是汤

00:08:54.730 --> 00:08:59.709
轻松，您只需打给爸爸，您就可以在以前给它一个字符串

00:08:59.709 --> 00:09:02.889
给它一个缓冲区，这意味着您必须找到某种缓冲区实现

00:09:02.889 --> 00:09:07.209
在某处给它一个字符串，它将添加它，然后我们可以使用它

00:09:07.209 --> 00:09:13.720
神奇的等待着，因为它所做的就是没有爸爸会立即返回

00:09:13.720 --> 00:09:19.839
异步迭代器，然后我们可以遍历

00:09:19.839 --> 00:09:23.230
另一端，一旦添加了此内容，在这种情况下，它将添加

00:09:23.230 --> 00:09:31.300
一件事，无论创建什么内容，您都将获得一个CID，这是一种

00:09:31.300 --> 00:09:35.949
令人沮丧，所以这里有一个简写，我们每个迭代器

00:09:35.949 --> 00:09:40.690
return具有第一个和最后一个方法，因此，如果要添加一件事

00:09:40.690 --> 00:09:43.660
你知道只有一件事会回来，然后你就可以等着

00:09:43.660 --> 00:09:46.690
第一个项目将是所有最后一个项目

00:09:46.690 --> 00:09:54.339
迭代器，所以这很有趣，所以我之前说过nodejs

00:09:54.339 --> 00:10:00.880
流我们的异步迭代器，我们也可以添加一个非喷射流添加

00:10:00.880 --> 00:10:04.630
内容，因为添加引起了兴趣，因此它需要字符串，缓冲区或它

00:10:04.630 --> 00:10:11.019
需要迭代器或异步迭代器，因此创建可变的三个板条箱读取

00:10:11.019 --> 00:10:16.420
流它返回一个异步迭代器，因此您可以添加它，如果您想

00:10:16.420 --> 00:10:22.209
添加多个东西，那么你也给它一个数组是一个迭代器

00:10:22.209 --> 00:10:26.110
JavaScript中有很多东西我们应该已经迭代器数组了

00:10:26.110 --> 00:10:31.180
对象映射集数组是其中之一，因此我们只需对其进行迭代，然后再进行

00:10:31.180 --> 00:10:36.540
content是，它可以是字符串，缓冲区，迭代器或异步迭代

00:10:36.540 --> 00:10:41.319
所以这将在这里变得更加有用，因为现在我们遍历了

00:10:41.319 --> 00:10:47.110
我们可以在这里收集异步迭代器中的所有内容

00:10:47.110 --> 00:10:51.370
那很有趣，所以您可以使用生成器来创建

00:10:51.370 --> 00:10:54.730
您自己的迭代器，如果您愿意的话，这将在您使用时生成器

00:10:54.730 --> 00:11:00.010
打电话给他们将返回可迭代的内容，您可以添加添加

00:11:00.010 --> 00:11:06.130
这只是四十倍，产生一些随机字节，所以

00:11:06.130 --> 00:11:10.199
有点像异步迭代器

00:11:10.199 --> 00:11:13.699
它的脸相似，您可以看到这里的区别只是一个水槽和一个

00:11:13.699 --> 00:11:17.699
答应，所以我们说这是一个异步生成

00:11:17.699 --> 00:11:23.939
一个要返回的异步迭代器，而不是产生一个值，而是一个yield

00:11:23.939 --> 00:11:28.920
承诺会带来价值，无论如何，这只是为了让您开心

00:11:28.920 --> 00:11:32.639
通常只是掌握要添加的内容，然后将其添加

00:11:32.639 --> 00:11:37.620
一旦添加了内容，您可能会想要剪掉它，以便您

00:11:37.620 --> 00:11:41.220
拿到cid，然后我们得到一些类似的东西，就像猫一样

00:11:41.220 --> 00:11:47.069
退出cid，我们又进入了for循环，我们得到了文件的大块

00:11:47.069 --> 00:11:54.429
我们可以轻松地一起照顾他们[鼓掌]

